; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	rx_ps_shader_bytecode
PUBLIC	rx_vs_shader_bytecode
PUBLIC	stbi_write_tga_with_rle
PUBLIC	stbi_write_png_compression_level
PUBLIC	stbi_write_force_png_filter
_TLS	SEGMENT
ccallocator DQ	FLAT:ccuserallocator_
_TLS	ENDS
_DATA	SEGMENT
$SG35669 DB	'none', 00H
	ORG $+3
$SG35670 DB	'not in table', 00H
	ORG $+3
$SG35671 DB	'already in table', 00H
	ORG $+3
stbi_write_tga_with_rle DD 01H
stbi_write_png_compression_level DD 08H
stbi_write_force_png_filter DD 0ffffffffH
_DATA	ENDS
CONST	SEGMENT
stbi__zlength_base DD 03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
stbir__max_uint8_as_float DD 0437f0000r		; 255
stbi__zlength_extra DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
stbir__max_uint16_as_float DD 0477fff00r	; 65535
stbi__zdist_base DD 01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
	DD	00H
	DD	00H
stbi__zdist_extra DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
?length_dezigzag@?1??stbi__compute_huffman_codes@@9@9 DB 010H ; `stbi__compute_huffman_codes'::`2'::length_dezigzag
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+13
stbi__zdefault_length DB 08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
stbi__zdefault_distance DB 05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
?png_sig@?1??stbi__check_png_header@@9@9 DB 089H	; `stbi__check_png_header'::`2'::png_sig
	DB	050H
	DB	04eH
	DB	047H
	DB	0dH
	DB	0aH
	DB	01aH
	DB	0aH
stbi__depth_scale_table DB 00H
	DB	0ffH
	DB	055H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
stbir__max_uint32_as_float DQ 041efffffffe00000r ; 4.29497e+09
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
?almostone@?1??stbir__linear_to_srgb_uchar@@9@9 DD 03f7fffffH ; `stbir__linear_to_srgb_uchar'::`2'::almostone
	ORG $+4
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
?minval@?1??stbir__linear_to_srgb_uchar@@9@9 DD 039000000H ; `stbir__linear_to_srgb_uchar'::`2'::minval
	ORG $+4
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_nrcodes
	DB	00H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	07dH
	ORG $+7
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_nrcodes
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
rx_ps_shader_bytecode DB 044H
	DB	058H
	DB	042H
	DB	043H
	DB	089H
	DB	0faH
	DB	064H
	DB	015H
	DB	04cH
	DB	04dH
	DB	0e5H
	DB	0faH
	DB	0a5H
	DB	0c8H
	DB	089H
	DB	091H
	DB	09fH
	DB	00H
	DB	03dH
	DB	0baH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	01H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	0d4H
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	053H
	DB	047H
	DB	04eH
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	0abH
	DB	04fH
	DB	053H
	DB	047H
	DB	04eH
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	054H
	DB	061H
	DB	072H
	DB	067H
	DB	065H
	DB	074H
	DB	00H
	DB	0abH
	DB	0abH
	DB	053H
	DB	048H
	DB	045H
	DB	058H
	DB	070H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	01cH
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	08H
	DB	00H
	DB	01H
	DB	05aH
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	060H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	058H
	DB	018H
	DB	00H
	DB	04H
	DB	00H
	DB	070H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	055H
	DB	00H
	DB	00H
	DB	062H
	DB	010H
	DB	00H
	DB	03H
	DB	032H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c2H
	DB	00H
	DB	00H
	DB	080H
	DB	043H
	DB	055H
	DB	015H
	DB	00H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	07eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	00H
	DB	01H
	ORG $+4
rx_vs_shader_bytecode DB 044H
	DB	058H
	DB	042H
	DB	043H
	DB	047H
	DB	065H
	DB	016H
	DB	082H
	DB	080H
	DB	05eH
	DB	0f7H
	DB	0cH
	DB	04bH
	DB	078H
	DB	057H
	DB	0c8H
	DB	06fH
	DB	0daH
	DB	015H
	DB	0d1H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01cH
	DB	02H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	09cH
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	01H
	DB	00H
	DB	00H
	DB	049H
	DB	053H
	DB	047H
	DB	04eH
	DB	068H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	059H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	04fH
	DB	053H
	DB	047H
	DB	04eH
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0cH
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	0abH
	DB	053H
	DB	048H
	DB	045H
	DB	058H
	DB	04H
	DB	01H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	01H
	DB	00H
	DB	041H
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	08H
	DB	00H
	DB	01H
	DB	059H
	DB	00H
	DB	00H
	DB	04H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	032H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	010H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	032H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	00H
	DB	00H
	DB	04H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	032H
	DB	020H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	068H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	038H
	DB	00H
	DB	00H
	DB	08H
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	015H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
	DB	0aH
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
	DB	05H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01eH
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
	DB	05H
	DB	032H
	DB	020H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	00H
	DB	01H
	ORG $+4
fp32_to_srgb8_tab4 DD 073000dH
	DD	07a000dH
	DD	080000dH
	DD	087000dH
	DD	08d000dH
	DD	094000dH
	DD	09a000dH
	DD	0a1000dH
	DD	0a7001aH
	DD	0b4001aH
	DD	0c1001aH
	DD	0ce001aH
	DD	0da001aH
	DD	0e7001aH
	DD	0f4001aH
	DD	0101001aH
	DD	010e0033H
	DD	01280033H
	DD	01410033H
	DD	015b0033H
	DD	01750033H
	DD	018f0033H
	DD	01a80033H
	DD	01c20033H
	DD	01dc0067H
	DD	020f0067H
	DD	02430067H
	DD	02760067H
	DD	02aa0067H
	DD	02dd0067H
	DD	03110067H
	DD	03440067H
	DD	037800ceH
	DD	03df00ceH
	DD	044600ceH
	DD	04ad00ceH
	DD	051400ceH
	DD	057b00c5H
	DD	05dd00bcH
	DD	063b00b5H
	DD	06970158H
	DD	07420142H
	DD	07e30130H
	DD	087b0120H
	DD	090b0112H
	DD	09940106H
	DD	0a1700fcH
	DD	0a9500f2H
	DD	0b0f01cbH
	DD	0bf401aeH
	DD	0ccb0195H
	DD	0d950180H
	DD	0e56016eH
	DD	0f0d015eH
	DD	0fbc0150H
	DD	010630143H
	DD	011070264H
	DD	01238023eH
	DD	01357021dH
	DD	014660201H
	DD	0156601e9H
	DD	0165a01d3H
	DD	0174401c0H
	DD	0182401afH
	DD	018fe0331H
	DD	01a9602feH
	DD	01c1502d2H
	DD	01d7e02adH
	DD	01ed4028dH
	DD	0201a0270H
	DD	021520256H
	DD	0227d0240H
	DD	0239f0443H
	DD	025c003feH
	DD	027bf03c4H
	DD	029a10392H
	DD	02b6a0367H
	DD	02d1d0341H
	DD	02ebe031fH
	DD	0304d0300H
	DD	031d105b0H
	DD	034a80555H
	DD	037520507H
	DD	039d504c5H
	DD	03c37048bH
	DD	03e7c0458H
	DD	040a8042aH
	DD	042bd0401H
	DD	044c20798H
	DD	0488e071eH
	DD	04c1c06b6H
	DD	04f76065dH
	DD	052a50610H
	DD	055ac05ccH
	DD	05892058fH
	DD	05b590559H
	DD	05e0c0a23H
	DD	0631c0980H
	DD	067db08f6H
	DD	06c55087fH
	DD	070940818H
	DD	074a007bdH
	DD	0787d076cH
	DD	07c330723H
stbi__bmask DD	00H
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
?fillBits@?L@??stbi_write_jpg_core@@9@9 DW 07fH		; `stbi_write_jpg_core'::`11'::fillBits
	DW	07H
?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	03H
	DB	04H
	DB	07H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	01H
	DB	02H
	DB	077H
	ORG $+7
stbi__jbias DD	00H
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
stbi__jpeg_dezigzag DB 00H
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	ORG $+1
stbiw__jpg_ZigZag DB 00H
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
?std_dc_luminance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	ORG $+4
?std_ac_luminance_values@?1??stbi_write_jpg_core@@9@9 DB 01H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_values
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	011H
	DB	05H
	DB	012H
	DB	021H
	DB	031H
	DB	041H
	DB	06H
	DB	013H
	DB	051H
	DB	061H
	DB	07H
	DB	022H
	DB	071H
	DB	014H
	DB	032H
	DB	081H
	DB	091H
	DB	0a1H
	DB	08H
	DB	023H
	DB	042H
	DB	0b1H
	DB	0c1H
	DB	015H
	DB	052H
	DB	0d1H
	DB	0f0H
	DB	024H
	DB	033H
	DB	062H
	DB	072H
	DB	082H
	DB	09H
	DB	0aH
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	ORG $+2
?rgb@?5??stbi__process_frame_header@@9@9 DB 052H	; `stbi__process_frame_header'::`6'::rgb
	DB	047H
	DB	042H
	ORG $+1
?std_dc_chrominance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
?tag@?O@??stbi__process_marker@@9@9 DB 04aH		; `stbi__process_marker'::`14'::tag
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	ORG $+7
?std_ac_chrominance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	011H
	DB	04H
	DB	05H
	DB	021H
	DB	031H
	DB	06H
	DB	012H
	DB	041H
	DB	051H
	DB	07H
	DB	061H
	DB	071H
	DB	013H
	DB	022H
	DB	032H
	DB	081H
	DB	08H
	DB	014H
	DB	042H
	DB	091H
	DB	0a1H
	DB	0b1H
	DB	0c1H
	DB	09H
	DB	023H
	DB	033H
	DB	052H
	DB	0f0H
	DB	015H
	DB	062H
	DB	072H
	DB	0d1H
	DB	0aH
	DB	016H
	DB	024H
	DB	034H
	DB	0e1H
	DB	025H
	DB	0f1H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	ORG $+6
?aasf@?1??stbi_write_jpg_core@@9@9 DD 0403504f3r ; 2.82843 ; `stbi_write_jpg_core'::`2'::aasf
	DD	0407b14bfr			; 3.92314
	DD	0406c835fr			; 3.69552
	DD	04054db30r			; 3.32588
	DD	0403504f3r			; 2.82843
	DD	0400e39dar			; 2.22228
	DD	03fc3ef15r			; 1.53073
	DD	03f47c5c2r			; 0.780361
?tag@?BA@??stbi__process_marker@@9@9 DB 041H		; `stbi__process_marker'::`16'::tag
	DB	064H
	DB	06fH
	DB	062H
	DB	065H
	DB	00H
	ORG $+2
?YDC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::YDC_HT
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	03H
	DW	05H
	DW	03H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	ORG $+976
?UVDC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::UVDC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	DW	03feH
	DW	0aH
	DW	07feH
	DW	0bH
	ORG $+976
?YAC_HT@?1??stbi_write_jpg_core@@9@9 DW 0aH		; `stbi_write_jpg_core'::`2'::YAC_HT
	DW	04H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0bH
	DW	04H
	DW	01aH
	DW	05H
	DW	078H
	DW	07H
	DW	0f8H
	DW	08H
	DW	03f6H
	DW	0aH
	DW	0ff82H
	DW	010H
	DW	0ff83H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0cH
	DW	04H
	DW	01bH
	DW	05H
	DW	079H
	DW	07H
	DW	01f6H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff84H
	DW	010H
	DW	0ff85H
	DW	010H
	DW	0ff86H
	DW	010H
	DW	0ff87H
	DW	010H
	DW	0ff88H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01cH
	DW	05H
	DW	0f9H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f7H
	DW	09H
	DW	0ff5H
	DW	0cH
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f8H
	DW	0aH
	DW	0ff96H
	DW	010H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ff9eH
	DW	010H
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07bH
	DW	07H
	DW	0ff6H
	DW	0cH
	DW	0ffa6H
	DW	010H
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0faH
	DW	08H
	DW	0ff7H
	DW	0cH
	DW	0ffaeH
	DW	010H
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	07fc0H
	DW	0fH
	DW	0ffb6H
	DW	010H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03f9H
	DW	0aH
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f8H
	DW	0bH
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0fff5H
	DW	010H
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
?UVAC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::UVAC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0aH
	DW	04H
	DW	018H
	DW	05H
	DW	019H
	DW	05H
	DW	038H
	DW	06H
	DW	078H
	DW	07H
	DW	01f4H
	DW	09H
	DW	03f6H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0bH
	DW	04H
	DW	039H
	DW	06H
	DW	0f6H
	DW	08H
	DW	01f5H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff5H
	DW	0cH
	DW	0ff88H
	DW	010H
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01aH
	DW	05H
	DW	0f7H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff6H
	DW	0cH
	DW	07fc2H
	DW	0fH
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01bH
	DW	05H
	DW	0f8H
	DW	08H
	DW	03f8H
	DW	0aH
	DW	0ff7H
	DW	0cH
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	0ff96H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f6H
	DW	09H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	0ff9eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f9H
	DW	0aH
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	0ffa6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	079H
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	0ffaeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f8H
	DW	0bH
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	0ffb6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0f9H
	DW	08H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f7H
	DW	09H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03fe0H
	DW	0eH
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	0fff5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	07fc3H
	DW	0fH
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
?YQT@?1??stbi_write_jpg_core@@9@9 DD 010H		; `stbi_write_jpg_core'::`2'::YQT
	DD	0bH
	DD	0aH
	DD	010H
	DD	018H
	DD	028H
	DD	033H
	DD	03dH
	DD	0cH
	DD	0cH
	DD	0eH
	DD	013H
	DD	01aH
	DD	03aH
	DD	03cH
	DD	037H
	DD	0eH
	DD	0dH
	DD	010H
	DD	018H
	DD	028H
	DD	039H
	DD	045H
	DD	038H
	DD	0eH
	DD	011H
	DD	016H
	DD	01dH
	DD	033H
	DD	057H
	DD	050H
	DD	03eH
	DD	012H
	DD	016H
	DD	025H
	DD	038H
	DD	044H
	DD	06dH
	DD	067H
	DD	04dH
	DD	018H
	DD	023H
	DD	037H
	DD	040H
	DD	051H
	DD	068H
	DD	071H
	DD	05cH
	DD	031H
	DD	040H
	DD	04eH
	DD	057H
	DD	067H
	DD	079H
	DD	078H
	DD	065H
	DD	048H
	DD	05cH
	DD	05fH
	DD	062H
	DD	070H
	DD	064H
	DD	067H
	DD	063H
?UVQT@?1??stbi_write_jpg_core@@9@9 DD 011H		; `stbi_write_jpg_core'::`2'::UVQT
	DD	012H
	DD	018H
	DD	02fH
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	012H
	DD	015H
	DD	01aH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	018H
	DD	01aH
	DD	038H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	02fH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
?head0@?9??stbi_write_jpg_core@@9@9 DB 0ffH		; `stbi_write_jpg_core'::`10'::head0
	DB	0d8H
	DB	0ffH
	DB	0e0H
	DB	00H
	DB	010H
	DB	04aH
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0dbH
	DB	00H
	DB	084H
	DB	00H
	ORG $+7
?head2@?9??stbi_write_jpg_core@@9@9 DB 0ffH		; `stbi_write_jpg_core'::`10'::head2
	DB	0daH
	DB	00H
	DB	0cH
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	011H
	DB	03H
	DB	011H
	DB	00H
	DB	03fH
	DB	00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	stbi_load_from_memory
PUBLIC	stbi_load_from_callbacks
PUBLIC	stbi_load
PUBLIC	stbi_load_from_file
PUBLIC	stbi_load_gif_from_memory
PUBLIC	stbi_load_16_from_memory
PUBLIC	stbi_load_16_from_callbacks
PUBLIC	stbi_load_16
PUBLIC	stbi_load_from_file_16
PUBLIC	stbi_loadf_from_memory
PUBLIC	stbi_loadf_from_callbacks
PUBLIC	stbi_loadf
PUBLIC	stbi_loadf_from_file
PUBLIC	stbi_hdr_to_ldr_gamma
PUBLIC	stbi_hdr_to_ldr_scale
PUBLIC	stbi_ldr_to_hdr_gamma
PUBLIC	stbi_ldr_to_hdr_scale
PUBLIC	stbi_is_hdr_from_callbacks
PUBLIC	stbi_is_hdr_from_memory
PUBLIC	stbi_is_hdr
PUBLIC	stbi_is_hdr_from_file
PUBLIC	stbi_failure_reason
PUBLIC	stbi_image_free
PUBLIC	stbi_info_from_memory
PUBLIC	stbi_info_from_callbacks
PUBLIC	stbi_is_16_bit_from_memory
PUBLIC	stbi_is_16_bit_from_callbacks
PUBLIC	stbi_info
PUBLIC	stbi_info_from_file
PUBLIC	stbi_is_16_bit
PUBLIC	stbi_is_16_bit_from_file
PUBLIC	stbi_set_unpremultiply_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb
PUBLIC	stbi_set_flip_vertically_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb_thread
PUBLIC	stbi_set_flip_vertically_on_load_thread
PUBLIC	stbi_zlib_decode_malloc_guesssize
PUBLIC	stbi_zlib_decode_malloc_guesssize_headerflag
PUBLIC	stbi_zlib_decode_malloc
PUBLIC	stbi_zlib_decode_buffer
PUBLIC	stbi_zlib_decode_noheader_malloc
PUBLIC	stbi_zlib_decode_noheader_buffer
PUBLIC	stbi__unpremultiply_on_load_thread
PUBLIC	stbir_resize_uint8
PUBLIC	stbir_resize_float
PUBLIC	stbir_resize_uint8_srgb
PUBLIC	stbir_resize_uint8_srgb_edgemode
PUBLIC	stbir_resize_uint8_generic
PUBLIC	stbir_resize_uint16_generic
PUBLIC	stbir_resize_float_generic
PUBLIC	stbir_resize
PUBLIC	stbir_resize_subpixel
PUBLIC	stbir_resize_region
PUBLIC	stbi_write_png
PUBLIC	stbi_write_bmp
PUBLIC	stbi_write_tga
PUBLIC	stbi_write_hdr
PUBLIC	stbi_write_jpg
PUBLIC	stbi_write_png_to_func
PUBLIC	stbi_write_bmp_to_func
PUBLIC	stbi_write_tga_to_func
PUBLIC	stbi_write_hdr_to_func
PUBLIC	stbi_write_jpg_to_func
PUBLIC	stbi_flip_vertically_on_write
PUBLIC	stbi_zlib_compress
PUBLIC	stbi_write_png_to_mem
PUBLIC	stbtt_BakeFontBitmap
PUBLIC	stbtt_GetBakedQuad
PUBLIC	stbtt_GetScaledFontVMetrics
PUBLIC	stbtt_PackBegin
PUBLIC	stbtt_PackEnd
PUBLIC	stbtt_PackFontRange
PUBLIC	stbtt_PackFontRanges
PUBLIC	stbtt_PackSetOversampling
PUBLIC	stbtt_PackSetSkipMissingCodepoints
PUBLIC	stbtt_GetPackedQuad
PUBLIC	stbtt_PackFontRangesGatherRects
PUBLIC	stbtt_PackFontRangesPackRects
PUBLIC	stbtt_PackFontRangesRenderIntoRects
PUBLIC	stbtt_GetNumberOfFonts
PUBLIC	stbtt_GetFontOffsetForIndex
PUBLIC	stbtt_InitFont
PUBLIC	stbtt_FindGlyphIndex
PUBLIC	stbtt_ScaleForPixelHeight
PUBLIC	stbtt_ScaleForMappingEmToPixels
PUBLIC	stbtt_GetFontVMetrics
PUBLIC	stbtt_GetFontVMetricsOS2
PUBLIC	stbtt_GetFontBoundingBox
PUBLIC	stbtt_GetCodepointHMetrics
PUBLIC	stbtt_GetCodepointKernAdvance
PUBLIC	stbtt_GetCodepointBox
PUBLIC	stbtt_GetGlyphHMetrics
PUBLIC	stbtt_GetGlyphKernAdvance
PUBLIC	stbtt_GetGlyphBox
PUBLIC	stbtt_GetKerningTableLength
PUBLIC	stbtt_GetKerningTable
PUBLIC	stbtt_IsGlyphEmpty
PUBLIC	stbtt_GetCodepointShape
PUBLIC	stbtt_GetGlyphShape
PUBLIC	stbtt_FreeShape
PUBLIC	stbtt_FindSVGDoc
PUBLIC	stbtt_GetCodepointSVG
PUBLIC	stbtt_GetGlyphSVG
PUBLIC	stbtt_FreeBitmap
PUBLIC	stbtt_GetCodepointBitmap
PUBLIC	stbtt_GetCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmap
PUBLIC	stbtt_MakeCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmapSubpixelPrefilter
PUBLIC	stbtt_GetCodepointBitmapBox
PUBLIC	stbtt_GetCodepointBitmapBoxSubpixel
PUBLIC	stbtt_GetGlyphBitmap
PUBLIC	stbtt_GetGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmap
PUBLIC	stbtt_MakeGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmapSubpixelPrefilter
PUBLIC	stbtt_GetGlyphBitmapBox
PUBLIC	stbtt_GetGlyphBitmapBoxSubpixel
PUBLIC	stbtt_Rasterize
PUBLIC	stbtt_FreeSDF
PUBLIC	stbtt_GetGlyphSDF
PUBLIC	stbtt_GetCodepointSDF
PUBLIC	stbtt_FindMatchingFont
PUBLIC	stbtt_CompareUTF8toUTF16_bigendian
PUBLIC	stbtt_GetFontNameString
PUBLIC	rxborrow_resource
PUBLIC	rxreturn_resource
PUBLIC	rxreturn
PUBLIC	rxborrow_texture
PUBLIC	rxcreate_texture
PUBLIC	rxload_texture
PUBLIC	rxload_texture_file
PUBLIC	rxload_font
PUBLIC	rxdraw_texture_ex
PUBLIC	rxdraw_texture
PUBLIC	rxdraw_text
PUBLIC	rxwindow
PUBLIC	rxtick
PUBLIC	rxresize_indexbuffer
PUBLIC	rxresize_vertexbuffer
PUBLIC	rxwindow_callback_win32
PUBLIC	rxinit
PUBLIC	main
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@0a4fb11f
PUBLIC	__real@17800000
PUBLIC	__real@3b4d2e1c
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d25aee6
PUBLIC	__real@3d6147ae
PUBLIC	__real@3da685db
PUBLIC	__real@3de978d5
PUBLIC	__real@3e800000
PUBLIC	__real@3e991687
PUBLIC	__real@3ea99ae9
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec3ef15
PUBLIC	__real@3ed65e89
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a8bd4
PUBLIC	__real@3f1645a2
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f666666
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3f870a3d
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3fa73d75
PUBLIC	__real@3fc00000
PUBLIC	__real@3fd5555560000000
PUBLIC	__real@3fdaaaaaa0000000
PUBLIC	__real@3fddb3d7
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3feccccccccccccd
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff028f5c0000000
PUBLIC	__real@3ff921fafc8b007a
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4003333340000000
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@414eb852
PUBLIC	__real@41800000
PUBLIC	__real@41900000
PUBLIC	__real@41a80000
PUBLIC	__real@41d80000
PUBLIC	__real@42000000
PUBLIC	__real@42100000
PUBLIC	__real@42800000
PUBLIC	__real@43000000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@46800000
PUBLIC	__real@477fff00
PUBLIC	__real@47800000
PUBLIC	__real@497423f0
PUBLIC	__real@be2cca2e
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c1400000
PUBLIC	__real@c1d80000
PUBLIC	__real@c2700000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	__report_rangecheckfailure:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	abs:PROC
EXTRN	_lrotl:PROC
EXTRN	strtol:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	fopen_s:PROC
EXTRN	fclose:PROC
EXTRN	feof:PROC
EXTRN	ferror:PROC
EXTRN	fgetc:PROC
EXTRN	fread:PROC
EXTRN	fseek:PROC
EXTRN	ftell:PROC
EXTRN	fwrite:PROC
EXTRN	ungetc:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__stdio_common_vsprintf:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	strncmp:PROC
EXTRN	acos:PROC
EXTRN	cos:PROC
EXTRN	fabs:PROC
EXTRN	fmod:PROC
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	ceil:PROC
EXTRN	floor:PROC
EXTRN	frexp:PROC
EXTRN	ldexp:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_WaitForSingleObjectEx:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	_wassert:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	IID_IDXGIDevice:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_TLS	SEGMENT
cccolorstate DB	024H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
ccdebugroot DB	0b0H DUP (?)
ccdebugthis DQ	01H DUP (?)
ccdebugnone DD	01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
?buf@?1??ccformatv@@9@9 DB 0ffH DUP (?)			; `ccformatv'::`2'::buf
_TLS	ENDS
_BSS	SEGMENT
?dummy@?1??ccdebug_@@9@9 DB 0b0H DUP (?)		; `ccdebug_'::`2'::dummy
_BSS	ENDS
_TLS	SEGMENT
	ALIGN	4

?buf@?1??cctrace_@@9@9 DB 0fffH DUP (?)			; `cctrace_'::`2'::buf
	ALIGN	8

stbi__g_failure_reason DQ 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
stbi__vertically_flip_on_load_global DD 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
stbi__vertically_flip_on_load_local DD 01H DUP (?)
stbi__vertically_flip_on_load_set DD 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
stbi__unpremultiply_on_load_global DD 01H DUP (?)
stbi__de_iphone_flag_global DD 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
stbi__unpremultiply_on_load_local DD 01H DUP (?)
stbi__unpremultiply_on_load_set DD 01H DUP (?)
stbi__de_iphone_flag_local DD 01H DUP (?)
stbi__de_iphone_flag_set DD 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
$SG76699 DB	01H DUP (?)
	ALIGN	4

stbi__flip_vertically_on_write DD 01H DUP (?)
rx	DB	04510H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$stbsp_vsprintf DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$stbsp_vsprintf
$pdata$stbsp_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+303
	DD	imagerel $unwind$stbsp_vsnprintf
$pdata$stbsp_sprintf DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$stbsp_sprintf
$pdata$stbsp_snprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stbsp_snprintf
$pdata$stbsp_vsprintfcb DD imagerel $LN408
	DD	imagerel $LN408+13380
	DD	imagerel $unwind$stbsp_vsprintfcb
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+1613
	DD	imagerel $unwind$stbsp__real_to_str
$pdata$stbsp__real_to_parts DD imagerel stbsp__real_to_parts
	DD	imagerel stbsp__real_to_parts+154
	DD	imagerel $unwind$stbsp__real_to_parts
$pdata$stbsp__strlen_limited DD imagerel stbsp__strlen_limited
	DD	imagerel stbsp__strlen_limited+239
	DD	imagerel $unwind$stbsp__strlen_limited
$pdata$stbsp__clamp_callback DD imagerel stbsp__clamp_callback
	DD	imagerel stbsp__clamp_callback+300
	DD	imagerel $unwind$stbsp__clamp_callback
$pdata$stbsp__count_clamp_callback DD imagerel stbsp__count_clamp_callback
	DD	imagerel stbsp__count_clamp_callback+59
	DD	imagerel $unwind$stbsp__count_clamp_callback
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+3868
	DD	imagerel $unwind$stbsp__raise_to_power10
$pdata$ccuserallocator_ DD imagerel ccuserallocator_
	DD	imagerel ccuserallocator_+885
	DD	imagerel $unwind$ccuserallocator_
$pdata$cccaller DD imagerel cccaller
	DD	imagerel cccaller+91
	DD	imagerel $unwind$cccaller
$pdata$ccformatvex DD imagerel ccformatvex
	DD	imagerel ccformatvex+52
	DD	imagerel $unwind$ccformatvex
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+94
	DD	imagerel $unwind$ccformatv
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+79
	DD	imagerel $unwind$ccformatex
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+73
	DD	imagerel $unwind$ccformat
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+416
	DD	imagerel $unwind$ccopenfile
$pdata$ccrealfile DD imagerel ccrealfile
	DD	imagerel ccrealfile+41
	DD	imagerel $unwind$ccrealfile
$pdata$ccclosefile DD imagerel ccclosefile
	DD	imagerel ccclosefile+25
	DD	imagerel $unwind$ccclosefile
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+422
	DD	imagerel $unwind$ccpullfile
$pdata$ccfilesize DD imagerel ccfilesize
	DD	imagerel ccfilesize+27
	DD	imagerel $unwind$ccfilesize
$pdata$ccdebug_ DD imagerel ccdebug_
	DD	imagerel ccdebug_+155
	DD	imagerel $unwind$ccdebug_
$pdata$ccfilename DD imagerel ccfilename
	DD	imagerel ccfilename+103
	DD	imagerel $unwind$ccfilename
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+324
	DD	imagerel $unwind$cctrace_
$pdata$ccsentry_block_check DD imagerel ccsentry_block_check
	DD	imagerel ccsentry_block_check+1781
	DD	imagerel $unwind$ccsentry_block_check
$pdata$ccout DD	imagerel ccout
	DD	imagerel ccout+35
	DD	imagerel $unwind$ccout
$pdata$stbi_load_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_from_memory
$pdata$stbi_load_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_from_callbacks
$pdata$stbi_load DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_load
$pdata$stbi_load_from_file DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file
$pdata$stbi_load_gif_from_memory DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$stbi_load_gif_from_memory
$pdata$stbi_load_16_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_16_from_memory
$pdata$stbi_load_16_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_16_from_callbacks
$pdata$stbi_load_16 DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_load_16
$pdata$stbi_load_from_file_16 DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file_16
$pdata$stbi_loadf_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_loadf_from_memory
$pdata$stbi_loadf_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_loadf_from_callbacks
$pdata$stbi_loadf DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_loadf
$pdata$stbi_loadf_from_file DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$stbi_loadf_from_file
$pdata$stbi_is_hdr_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_hdr_from_callbacks
$pdata$stbi_is_hdr_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_hdr_from_memory
$pdata$stbi_is_hdr DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$stbi_is_hdr
$pdata$stbi_is_hdr_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_hdr_from_file
$pdata$stbi_image_free DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$stbi_image_free
$pdata$stbi_info_from_memory DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbi_info_from_memory
$pdata$stbi_info_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_info_from_callbacks
$pdata$stbi_is_16_bit_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_16_bit_from_memory
$pdata$stbi_is_16_bit_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_16_bit_from_callbacks
$pdata$stbi_info DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$stbi_info
$pdata$stbi_info_from_file DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$stbi_info_from_file
$pdata$stbi_is_16_bit DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$stbi_is_16_bit
$pdata$stbi_is_16_bit_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_16_bit_from_file
$pdata$stbi_zlib_decode_malloc_guesssize DD imagerel $LN7
	DD	imagerel $LN7+339
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize
$pdata$stbi_zlib_decode_malloc_guesssize_headerflag DD imagerel $LN7
	DD	imagerel $LN7+342
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize_headerflag
$pdata$stbi_zlib_decode_malloc DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbi_zlib_decode_malloc
$pdata$stbi_zlib_decode_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_buffer
$pdata$stbi_zlib_decode_noheader_malloc DD imagerel $LN7
	DD	imagerel $LN7+326
	DD	imagerel $unwind$stbi_zlib_decode_noheader_malloc
$pdata$stbi_zlib_decode_noheader_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_noheader_buffer
$pdata$stbi__cpuid3 DD imagerel stbi__cpuid3
	DD	imagerel stbi__cpuid3+80
	DD	imagerel $unwind$stbi__cpuid3
$pdata$stbi__sse2_available DD imagerel stbi__sse2_available
	DD	imagerel stbi__sse2_available+54
	DD	imagerel $unwind$stbi__sse2_available
$pdata$stbi__refill_buffer DD imagerel stbi__refill_buffer
	DD	imagerel stbi__refill_buffer+231
	DD	imagerel $unwind$stbi__refill_buffer
$pdata$stbi__start_mem DD imagerel stbi__start_mem
	DD	imagerel stbi__start_mem+147
	DD	imagerel $unwind$stbi__start_mem
$pdata$stbi__start_callbacks DD imagerel stbi__start_callbacks
	DD	imagerel stbi__start_callbacks+184
	DD	imagerel $unwind$stbi__start_callbacks
$pdata$stbi__stdio_read DD imagerel stbi__stdio_read
	DD	imagerel stbi__stdio_read+52
	DD	imagerel $unwind$stbi__stdio_read
$pdata$stbi__stdio_skip DD imagerel stbi__stdio_skip
	DD	imagerel stbi__stdio_skip+73
	DD	imagerel $unwind$stbi__stdio_skip
$pdata$stbi__stdio_eof DD imagerel stbi__stdio_eof
	DD	imagerel stbi__stdio_eof+64
	DD	imagerel $unwind$stbi__stdio_eof
$pdata$stbi__start_file DD imagerel stbi__start_file
	DD	imagerel stbi__start_file+41
	DD	imagerel $unwind$stbi__start_file
$pdata$stbi__jpeg_test DD imagerel stbi__jpeg_test
	DD	imagerel stbi__jpeg_test+201
	DD	imagerel $unwind$stbi__jpeg_test
$pdata$stbi__jpeg_load DD imagerel stbi__jpeg_load
	DD	imagerel stbi__jpeg_load+264
	DD	imagerel $unwind$stbi__jpeg_load
$pdata$stbi__jpeg_info DD imagerel stbi__jpeg_info
	DD	imagerel stbi__jpeg_info+212
	DD	imagerel $unwind$stbi__jpeg_info
$pdata$stbi__png_test DD imagerel stbi__png_test
	DD	imagerel stbi__png_test+42
	DD	imagerel $unwind$stbi__png_test
$pdata$stbi__png_load DD imagerel stbi__png_load
	DD	imagerel stbi__png_load+94
	DD	imagerel $unwind$stbi__png_load
$pdata$stbi__png_info DD imagerel stbi__png_info
	DD	imagerel stbi__png_info+64
	DD	imagerel $unwind$stbi__png_info
$pdata$stbi__png_is16 DD imagerel stbi__png_is16
	DD	imagerel stbi__png_is16+76
	DD	imagerel $unwind$stbi__png_is16
$pdata$stbi__bmp_test DD imagerel stbi__bmp_test
	DD	imagerel stbi__bmp_test+42
	DD	imagerel $unwind$stbi__bmp_test
$pdata$stbi__bmp_load DD imagerel stbi__bmp_load
	DD	imagerel stbi__bmp_load+4878
	DD	imagerel $unwind$stbi__bmp_load
$pdata$stbi__bmp_info DD imagerel stbi__bmp_info
	DD	imagerel stbi__bmp_info+249
	DD	imagerel $unwind$stbi__bmp_info
$pdata$stbi__tga_test DD imagerel stbi__tga_test
	DD	imagerel stbi__tga_test+374
	DD	imagerel $unwind$stbi__tga_test
$pdata$stbi__tga_load DD imagerel stbi__tga_load
	DD	imagerel stbi__tga_load+3082
	DD	imagerel $unwind$stbi__tga_load
$pdata$stbi__tga_info DD imagerel stbi__tga_info
	DD	imagerel stbi__tga_info+612
	DD	imagerel $unwind$stbi__tga_info
$pdata$stbi__psd_test DD imagerel stbi__psd_test
	DD	imagerel stbi__psd_test+71
	DD	imagerel $unwind$stbi__psd_test
$pdata$stbi__psd_load DD imagerel stbi__psd_load
	DD	imagerel stbi__psd_load+3070
	DD	imagerel $unwind$stbi__psd_load
$pdata$stbi__psd_info DD imagerel stbi__psd_info
	DD	imagerel stbi__psd_info+327
	DD	imagerel $unwind$stbi__psd_info
$pdata$stbi__psd_is16 DD imagerel stbi__psd_is16
	DD	imagerel stbi__psd_is16+194
	DD	imagerel $unwind$stbi__psd_is16
$pdata$stbi__hdr_test DD imagerel stbi__hdr_test
	DD	imagerel stbi__hdr_test+87
	DD	imagerel $unwind$stbi__hdr_test
$pdata$stbi__hdr_load DD imagerel stbi__hdr_load
	DD	imagerel stbi__hdr_load+3037
	DD	imagerel $unwind$stbi__hdr_load
$pdata$stbi__hdr_info DD imagerel stbi__hdr_info
	DD	imagerel stbi__hdr_info+539
	DD	imagerel $unwind$stbi__hdr_info
$pdata$stbi__pic_test DD imagerel stbi__pic_test
	DD	imagerel stbi__pic_test+42
	DD	imagerel $unwind$stbi__pic_test
$pdata$stbi__pic_load DD imagerel stbi__pic_load
	DD	imagerel stbi__pic_load+777
	DD	imagerel $unwind$stbi__pic_load
$pdata$stbi__pic_info DD imagerel stbi__pic_info
	DD	imagerel stbi__pic_info+642
	DD	imagerel $unwind$stbi__pic_info
$pdata$stbi__gif_test DD imagerel stbi__gif_test
	DD	imagerel stbi__gif_test+42
	DD	imagerel $unwind$stbi__gif_test
$pdata$stbi__gif_load DD imagerel stbi__gif_load
	DD	imagerel stbi__gif_load+560
	DD	imagerel $unwind$stbi__gif_load
$pdata$stbi__load_gif_main DD imagerel stbi__load_gif_main
	DD	imagerel stbi__load_gif_main+1440
	DD	imagerel $unwind$stbi__load_gif_main
$pdata$stbi__gif_info DD imagerel stbi__gif_info
	DD	imagerel stbi__gif_info+54
	DD	imagerel $unwind$stbi__gif_info
$pdata$stbi__pnm_test DD imagerel stbi__pnm_test
	DD	imagerel stbi__pnm_test+91
	DD	imagerel $unwind$stbi__pnm_test
$pdata$stbi__pnm_load DD imagerel stbi__pnm_load
	DD	imagerel stbi__pnm_load+678
	DD	imagerel $unwind$stbi__pnm_load
$pdata$stbi__pnm_info DD imagerel stbi__pnm_info
	DD	imagerel stbi__pnm_info+379
	DD	imagerel $unwind$stbi__pnm_info
$pdata$stbi__pnm_is16 DD imagerel stbi__pnm_is16
	DD	imagerel stbi__pnm_is16+46
	DD	imagerel $unwind$stbi__pnm_is16
$pdata$stbi__malloc DD imagerel stbi__malloc
	DD	imagerel stbi__malloc+97
	DD	imagerel $unwind$stbi__malloc
$pdata$stbi__addsizes_valid DD imagerel stbi__addsizes_valid
	DD	imagerel stbi__addsizes_valid+62
	DD	imagerel $unwind$stbi__addsizes_valid
$pdata$stbi__mul2sizes_valid DD imagerel stbi__mul2sizes_valid
	DD	imagerel stbi__mul2sizes_valid+84
	DD	imagerel $unwind$stbi__mul2sizes_valid
$pdata$stbi__mad2sizes_valid DD imagerel stbi__mad2sizes_valid
	DD	imagerel stbi__mad2sizes_valid+85
	DD	imagerel $unwind$stbi__mad2sizes_valid
$pdata$stbi__mad3sizes_valid DD imagerel stbi__mad3sizes_valid
	DD	imagerel stbi__mad3sizes_valid+119
	DD	imagerel $unwind$stbi__mad3sizes_valid
$pdata$stbi__mad4sizes_valid DD imagerel stbi__mad4sizes_valid
	DD	imagerel stbi__mad4sizes_valid+153
	DD	imagerel $unwind$stbi__mad4sizes_valid
$pdata$stbi__malloc_mad2 DD imagerel stbi__malloc_mad2
	DD	imagerel stbi__malloc_mad2+71
	DD	imagerel $unwind$stbi__malloc_mad2
$pdata$stbi__malloc_mad3 DD imagerel stbi__malloc_mad3
	DD	imagerel stbi__malloc_mad3+86
	DD	imagerel $unwind$stbi__malloc_mad3
$pdata$stbi__malloc_mad4 DD imagerel stbi__malloc_mad4
	DD	imagerel stbi__malloc_mad4+99
	DD	imagerel $unwind$stbi__malloc_mad4
$pdata$stbi__ldr_to_hdr DD imagerel stbi__ldr_to_hdr
	DD	imagerel stbi__ldr_to_hdr+698
	DD	imagerel $unwind$stbi__ldr_to_hdr
$pdata$stbi__hdr_to_ldr DD imagerel stbi__hdr_to_ldr
	DD	imagerel stbi__hdr_to_ldr+776
	DD	imagerel $unwind$stbi__hdr_to_ldr
$pdata$stbi__load_main DD imagerel stbi__load_main
	DD	imagerel stbi__load_main+885
	DD	imagerel $unwind$stbi__load_main
$pdata$stbi__convert_16_to_8 DD imagerel stbi__convert_16_to_8
	DD	imagerel stbi__convert_16_to_8+290
	DD	imagerel $unwind$stbi__convert_16_to_8
$pdata$stbi__convert_8_to_16 DD imagerel stbi__convert_8_to_16
	DD	imagerel stbi__convert_8_to_16+308
	DD	imagerel $unwind$stbi__convert_8_to_16
$pdata$stbi__vertical_flip DD imagerel stbi__vertical_flip
	DD	imagerel stbi__vertical_flip+410
	DD	imagerel $unwind$stbi__vertical_flip
$pdata$stbi__vertical_flip_slices DD imagerel stbi__vertical_flip_slices
	DD	imagerel stbi__vertical_flip_slices+133
	DD	imagerel $unwind$stbi__vertical_flip_slices
$pdata$stbi__load_and_postprocess_8bit DD imagerel stbi__load_and_postprocess_8bit
	DD	imagerel stbi__load_and_postprocess_8bit+453
	DD	imagerel $unwind$stbi__load_and_postprocess_8bit
$pdata$stbi__load_and_postprocess_16bit DD imagerel stbi__load_and_postprocess_16bit
	DD	imagerel stbi__load_and_postprocess_16bit+459
	DD	imagerel $unwind$stbi__load_and_postprocess_16bit
$pdata$stbi__float_postprocess DD imagerel stbi__float_postprocess
	DD	imagerel stbi__float_postprocess+194
	DD	imagerel $unwind$stbi__float_postprocess
$pdata$stbi__fopen DD imagerel stbi__fopen
	DD	imagerel stbi__fopen+57
	DD	imagerel $unwind$stbi__fopen
$pdata$stbi__loadf_main DD imagerel stbi__loadf_main
	DD	imagerel stbi__loadf_main+377
	DD	imagerel $unwind$stbi__loadf_main
$pdata$stbi__get8 DD imagerel stbi__get8
	DD	imagerel stbi__get8+169
	DD	imagerel $unwind$stbi__get8
$pdata$stbi__at_eof DD imagerel stbi__at_eof
	DD	imagerel stbi__at_eof+117
	DD	imagerel $unwind$stbi__at_eof
$pdata$stbi__skip DD imagerel stbi__skip
	DD	imagerel stbi__skip+205
	DD	imagerel $unwind$stbi__skip
$pdata$stbi__getn DD imagerel stbi__getn
	DD	imagerel stbi__getn+345
	DD	imagerel $unwind$stbi__getn
$pdata$stbi__get16be DD imagerel stbi__get16be
	DD	imagerel stbi__get16be+63
	DD	imagerel $unwind$stbi__get16be
$pdata$stbi__get32be DD imagerel stbi__get32be
	DD	imagerel stbi__get32be+57
	DD	imagerel $unwind$stbi__get32be
$pdata$stbi__get16le DD imagerel stbi__get16le
	DD	imagerel stbi__get16le+55
	DD	imagerel $unwind$stbi__get16le
$pdata$stbi__get32le DD imagerel stbi__get32le
	DD	imagerel stbi__get32le+57
	DD	imagerel $unwind$stbi__get32le
$pdata$stbi__convert_format DD imagerel stbi__convert_format
	DD	imagerel stbi__convert_format+2976
	DD	imagerel $unwind$stbi__convert_format
$pdata$stbi__convert_format16 DD imagerel stbi__convert_format16
	DD	imagerel stbi__convert_format16+3028
	DD	imagerel $unwind$stbi__convert_format16
$pdata$stbi__build_huffman DD imagerel stbi__build_huffman
	DD	imagerel stbi__build_huffman+648
	DD	imagerel $unwind$stbi__build_huffman
$pdata$stbi__build_fast_ac DD imagerel stbi__build_fast_ac
	DD	imagerel stbi__build_fast_ac+367
	DD	imagerel $unwind$stbi__build_fast_ac
$pdata$stbi__grow_buffer_unsafe DD imagerel stbi__grow_buffer_unsafe
	DD	imagerel stbi__grow_buffer_unsafe+264
	DD	imagerel $unwind$stbi__grow_buffer_unsafe
$pdata$stbi__jpeg_huff_decode DD imagerel stbi__jpeg_huff_decode
	DD	imagerel stbi__jpeg_huff_decode+661
	DD	imagerel $unwind$stbi__jpeg_huff_decode
$pdata$stbi__extend_receive DD imagerel stbi__extend_receive
	DD	imagerel stbi__extend_receive+209
	DD	imagerel $unwind$stbi__extend_receive
$pdata$stbi__jpeg_get_bits DD imagerel stbi__jpeg_get_bits
	DD	imagerel stbi__jpeg_get_bits+164
	DD	imagerel $unwind$stbi__jpeg_get_bits
$pdata$stbi__jpeg_get_bit DD imagerel stbi__jpeg_get_bit
	DD	imagerel stbi__jpeg_get_bit+110
	DD	imagerel $unwind$stbi__jpeg_get_bit
$pdata$stbi__jpeg_decode_block DD imagerel stbi__jpeg_decode_block
	DD	imagerel stbi__jpeg_decode_block+740
	DD	imagerel $unwind$stbi__jpeg_decode_block
$pdata$stbi__jpeg_decode_block_prog_dc DD imagerel stbi__jpeg_decode_block_prog_dc
	DD	imagerel stbi__jpeg_decode_block_prog_dc+405
	DD	imagerel $unwind$stbi__jpeg_decode_block_prog_dc
$pdata$stbi__jpeg_decode_block_prog_ac DD imagerel stbi__jpeg_decode_block_prog_ac
	DD	imagerel stbi__jpeg_decode_block_prog_ac+1618
	DD	imagerel $unwind$stbi__jpeg_decode_block_prog_ac
$pdata$stbi__idct_block DD imagerel stbi__idct_block
	DD	imagerel stbi__idct_block+2715
	DD	imagerel $unwind$stbi__idct_block
$pdata$stbi__idct_simd DD imagerel stbi__idct_simd
	DD	imagerel stbi__idct_simd+6280
	DD	imagerel $unwind$stbi__idct_simd
$pdata$stbi__get_marker DD imagerel stbi__get_marker
	DD	imagerel stbi__get_marker+137
	DD	imagerel $unwind$stbi__get_marker
$pdata$stbi__jpeg_reset DD imagerel stbi__jpeg_reset
	DD	imagerel stbi__jpeg_reset+237
	DD	imagerel $unwind$stbi__jpeg_reset
$pdata$stbi__parse_entropy_coded_data DD imagerel stbi__parse_entropy_coded_data
	DD	imagerel stbi__parse_entropy_coded_data+3156
	DD	imagerel $unwind$stbi__parse_entropy_coded_data
$pdata$stbi__jpeg_dequantize DD imagerel stbi__jpeg_dequantize
	DD	imagerel stbi__jpeg_dequantize+86
	DD	imagerel $unwind$stbi__jpeg_dequantize
$pdata$stbi__jpeg_finish DD imagerel stbi__jpeg_finish
	DD	imagerel stbi__jpeg_finish+457
	DD	imagerel $unwind$stbi__jpeg_finish
$pdata$stbi__process_marker DD imagerel stbi__process_marker
	DD	imagerel stbi__process_marker+1716
	DD	imagerel $unwind$stbi__process_marker
$pdata$stbi__process_scan_header DD imagerel stbi__process_scan_header
	DD	imagerel stbi__process_scan_header+812
	DD	imagerel $unwind$stbi__process_scan_header
$pdata$stbi__free_jpeg_components DD imagerel stbi__free_jpeg_components
	DD	imagerel stbi__free_jpeg_components+653
	DD	imagerel $unwind$stbi__free_jpeg_components
$pdata$stbi__process_frame_header DD imagerel stbi__process_frame_header
	DD	imagerel stbi__process_frame_header+2318
	DD	imagerel $unwind$stbi__process_frame_header
$pdata$stbi__decode_jpeg_header DD imagerel stbi__decode_jpeg_header
	DD	imagerel stbi__decode_jpeg_header+345
	DD	imagerel $unwind$stbi__decode_jpeg_header
$pdata$stbi__decode_jpeg_image DD imagerel stbi__decode_jpeg_image
	DD	imagerel stbi__decode_jpeg_image+487
	DD	imagerel $unwind$stbi__decode_jpeg_image
$pdata$stbi__resample_row_v_2 DD imagerel stbi__resample_row_v_2
	DD	imagerel stbi__resample_row_v_2+110
	DD	imagerel $unwind$stbi__resample_row_v_2
$pdata$stbi__resample_row_h_2 DD imagerel stbi__resample_row_h_2
	DD	imagerel stbi__resample_row_h_2+474
	DD	imagerel $unwind$stbi__resample_row_h_2
$pdata$stbi__resample_row_hv_2 DD imagerel stbi__resample_row_hv_2
	DD	imagerel stbi__resample_row_hv_2+383
	DD	imagerel $unwind$stbi__resample_row_hv_2
$pdata$stbi__resample_row_hv_2_simd DD imagerel stbi__resample_row_hv_2_simd
	DD	imagerel stbi__resample_row_hv_2_simd+1205
	DD	imagerel $unwind$stbi__resample_row_hv_2_simd
$pdata$stbi__resample_row_generic DD imagerel stbi__resample_row_generic
	DD	imagerel stbi__resample_row_generic+131
	DD	imagerel $unwind$stbi__resample_row_generic
$pdata$stbi__YCbCr_to_RGB_row DD imagerel stbi__YCbCr_to_RGB_row
	DD	imagerel stbi__YCbCr_to_RGB_row+451
	DD	imagerel $unwind$stbi__YCbCr_to_RGB_row
$pdata$stbi__YCbCr_to_RGB_simd DD imagerel stbi__YCbCr_to_RGB_simd
	DD	imagerel stbi__YCbCr_to_RGB_simd+1356
	DD	imagerel $unwind$stbi__YCbCr_to_RGB_simd
$pdata$stbi__setup_jpeg DD imagerel stbi__setup_jpeg
	DD	imagerel stbi__setup_jpeg+137
	DD	imagerel $unwind$stbi__setup_jpeg
$pdata$stbi__cleanup_jpeg DD imagerel stbi__cleanup_jpeg
	DD	imagerel stbi__cleanup_jpeg+38
	DD	imagerel $unwind$stbi__cleanup_jpeg
$pdata$stbi__blinn_8x8 DD imagerel stbi__blinn_8x8
	DD	imagerel stbi__blinn_8x8+54
	DD	imagerel $unwind$stbi__blinn_8x8
$pdata$load_jpeg_image DD imagerel load_jpeg_image
	DD	imagerel load_jpeg_image+4520
	DD	imagerel $unwind$load_jpeg_image
$pdata$stbi__jpeg_info_raw DD imagerel stbi__jpeg_info_raw
	DD	imagerel stbi__jpeg_info_raw+172
	DD	imagerel $unwind$stbi__jpeg_info_raw
$pdata$stbi__bit_reverse DD imagerel stbi__bit_reverse
	DD	imagerel stbi__bit_reverse+71
	DD	imagerel $unwind$stbi__bit_reverse
$pdata$stbi__zbuild_huffman DD imagerel stbi__zbuild_huffman
	DD	imagerel stbi__zbuild_huffman+896
	DD	imagerel $unwind$stbi__zbuild_huffman
$pdata$stbi__zeof DD imagerel stbi__zeof
	DD	imagerel stbi__zeof+52
	DD	imagerel $unwind$stbi__zeof
$pdata$stbi__zget8 DD imagerel stbi__zget8
	DD	imagerel stbi__zget8+77
	DD	imagerel $unwind$stbi__zget8
$pdata$stbi__fill_bits DD imagerel stbi__fill_bits
	DD	imagerel stbi__fill_bits+142
	DD	imagerel $unwind$stbi__fill_bits
$pdata$stbi__zreceive DD imagerel stbi__zreceive
	DD	imagerel stbi__zreceive+143
	DD	imagerel $unwind$stbi__zreceive
$pdata$stbi__zhuffman_decode_slowpath DD imagerel stbi__zhuffman_decode_slowpath
	DD	imagerel stbi__zhuffman_decode_slowpath+290
	DD	imagerel $unwind$stbi__zhuffman_decode_slowpath
$pdata$stbi__zhuffman_decode DD imagerel stbi__zhuffman_decode
	DD	imagerel stbi__zhuffman_decode+193
	DD	imagerel $unwind$stbi__zhuffman_decode
$pdata$stbi__zexpand DD imagerel stbi__zexpand
	DD	imagerel stbi__zexpand+450
	DD	imagerel $unwind$stbi__zexpand
$pdata$stbi__parse_huffman_block DD imagerel stbi__parse_huffman_block
	DD	imagerel stbi__parse_huffman_block+707
	DD	imagerel $unwind$stbi__parse_huffman_block
$pdata$stbi__compute_huffman_codes DD imagerel stbi__compute_huffman_codes
	DD	imagerel stbi__compute_huffman_codes+787
	DD	imagerel $unwind$stbi__compute_huffman_codes
$pdata$stbi__parse_uncompressed_block DD imagerel stbi__parse_uncompressed_block
	DD	imagerel stbi__parse_uncompressed_block+498
	DD	imagerel $unwind$stbi__parse_uncompressed_block
$pdata$stbi__parse_zlib_header DD imagerel stbi__parse_zlib_header
	DD	imagerel stbi__parse_zlib_header+178
	DD	imagerel $unwind$stbi__parse_zlib_header
$pdata$stbi__parse_zlib DD imagerel stbi__parse_zlib
	DD	imagerel stbi__parse_zlib+296
	DD	imagerel $unwind$stbi__parse_zlib
$pdata$stbi__do_zlib DD imagerel stbi__do_zlib
	DD	imagerel stbi__do_zlib+108
	DD	imagerel $unwind$stbi__do_zlib
$pdata$stbi__get_chunk_header DD imagerel stbi__get_chunk_header
	DD	imagerel stbi__get_chunk_header+47
	DD	imagerel $unwind$stbi__get_chunk_header
$pdata$stbi__check_png_header DD imagerel stbi__check_png_header
	DD	imagerel stbi__check_png_header+95
	DD	imagerel $unwind$stbi__check_png_header
$pdata$stbi__paeth DD imagerel stbi__paeth
	DD	imagerel stbi__paeth+157
	DD	imagerel $unwind$stbi__paeth
$pdata$stbi__create_png_image_raw DD imagerel stbi__create_png_image_raw
	DD	imagerel stbi__create_png_image_raw+6296
	DD	imagerel $unwind$stbi__create_png_image_raw
$pdata$stbi__create_png_image DD imagerel stbi__create_png_image
	DD	imagerel stbi__create_png_image+1431
	DD	imagerel $unwind$stbi__create_png_image
$pdata$stbi__compute_transparency DD imagerel stbi__compute_transparency
	DD	imagerel stbi__compute_transparency+450
	DD	imagerel $unwind$stbi__compute_transparency
$pdata$stbi__compute_transparency16 DD imagerel stbi__compute_transparency16
	DD	imagerel stbi__compute_transparency16+453
	DD	imagerel $unwind$stbi__compute_transparency16
$pdata$stbi__expand_png_palette DD imagerel stbi__expand_png_palette
	DD	imagerel stbi__expand_png_palette+682
	DD	imagerel $unwind$stbi__expand_png_palette
$pdata$stbi__de_iphone DD imagerel stbi__de_iphone
	DD	imagerel stbi__de_iphone+800
	DD	imagerel $unwind$stbi__de_iphone
$pdata$stbi__parse_png_file DD imagerel stbi__parse_png_file
	DD	imagerel stbi__parse_png_file+3649
	DD	imagerel $unwind$stbi__parse_png_file
$pdata$stbi__do_png DD imagerel stbi__do_png
	DD	imagerel stbi__do_png+913
	DD	imagerel $unwind$stbi__do_png
$pdata$stbi__png_info_raw DD imagerel stbi__png_info_raw
	DD	imagerel stbi__png_info_raw+150
	DD	imagerel $unwind$stbi__png_info_raw
$pdata$stbi__bmp_test_raw DD imagerel stbi__bmp_test_raw
	DD	imagerel stbi__bmp_test_raw+180
	DD	imagerel $unwind$stbi__bmp_test_raw
$pdata$stbi__high_bit DD imagerel stbi__high_bit
	DD	imagerel stbi__high_bit+169
	DD	imagerel $unwind$stbi__high_bit
$pdata$stbi__shiftsigned DD imagerel stbi__shiftsigned
	DD	imagerel stbi__shiftsigned+206
	DD	imagerel $unwind$stbi__shiftsigned
$pdata$stbi__bmp_parse_header DD imagerel stbi__bmp_parse_header
	DD	imagerel stbi__bmp_parse_header+1589
	DD	imagerel $unwind$stbi__bmp_parse_header
$pdata$stbi__tga_get_comp DD imagerel stbi__tga_get_comp
	DD	imagerel stbi__tga_get_comp+144
	DD	imagerel $unwind$stbi__tga_get_comp
$pdata$stbi__tga_read_rgb16 DD imagerel stbi__tga_read_rgb16
	DD	imagerel stbi__tga_read_rgb16+197
	DD	imagerel $unwind$stbi__tga_read_rgb16
$pdata$stbi__psd_decode_rle DD imagerel stbi__psd_decode_rle
	DD	imagerel stbi__psd_decode_rle+318
	DD	imagerel $unwind$stbi__psd_decode_rle
$pdata$stbi__pic_is4 DD imagerel stbi__pic_is4
	DD	imagerel stbi__pic_is4+88
	DD	imagerel $unwind$stbi__pic_is4
$pdata$stbi__pic_test_core DD imagerel stbi__pic_test_core
	DD	imagerel stbi__pic_test_core+108
	DD	imagerel $unwind$stbi__pic_test_core
$pdata$stbi__readval DD imagerel stbi__readval
	DD	imagerel stbi__readval+171
	DD	imagerel $unwind$stbi__readval
$pdata$stbi__copyval DD imagerel stbi__copyval
	DD	imagerel stbi__copyval+108
	DD	imagerel $unwind$stbi__copyval
$pdata$stbi__pic_load_core DD imagerel stbi__pic_load_core
	DD	imagerel stbi__pic_load_core+1624
	DD	imagerel $unwind$stbi__pic_load_core
$pdata$stbi__gif_test_raw DD imagerel stbi__gif_test_raw
	DD	imagerel stbi__gif_test_raw+152
	DD	imagerel $unwind$stbi__gif_test_raw
$pdata$stbi__gif_parse_colortable DD imagerel stbi__gif_parse_colortable
	DD	imagerel stbi__gif_parse_colortable+235
	DD	imagerel $unwind$stbi__gif_parse_colortable
$pdata$stbi__gif_header DD imagerel stbi__gif_header
	DD	imagerel stbi__gif_header+524
	DD	imagerel $unwind$stbi__gif_header
$pdata$stbi__gif_info_raw DD imagerel stbi__gif_info_raw
	DD	imagerel stbi__gif_info_raw+353
	DD	imagerel $unwind$stbi__gif_info_raw
$pdata$stbi__out_gif_code DD imagerel stbi__out_gif_code
	DD	imagerel stbi__out_gif_code+662
	DD	imagerel $unwind$stbi__out_gif_code
$pdata$stbi__process_gif_raster DD imagerel stbi__process_gif_raster
	DD	imagerel stbi__process_gif_raster+1123
	DD	imagerel $unwind$stbi__process_gif_raster
$pdata$stbi__gif_load_next DD imagerel stbi__gif_load_next
	DD	imagerel stbi__gif_load_next+2555
	DD	imagerel $unwind$stbi__gif_load_next
$pdata$stbi__load_gif_main_outofmem DD imagerel stbi__load_gif_main_outofmem
	DD	imagerel stbi__load_gif_main_outofmem+549
	DD	imagerel $unwind$stbi__load_gif_main_outofmem
$pdata$stbi__hdr_test_core DD imagerel stbi__hdr_test_core
	DD	imagerel stbi__hdr_test_core+109
	DD	imagerel $unwind$stbi__hdr_test_core
$pdata$stbi__hdr_gettoken DD imagerel stbi__hdr_gettoken
	DD	imagerel stbi__hdr_gettoken+179
	DD	imagerel $unwind$stbi__hdr_gettoken
$pdata$stbi__hdr_convert DD imagerel stbi__hdr_convert
	DD	imagerel stbi__hdr_convert+608
	DD	imagerel $unwind$stbi__hdr_convert
$pdata$stbi__pnm_isspace DD imagerel stbi__pnm_isspace
	DD	imagerel stbi__pnm_isspace+92
	DD	imagerel $unwind$stbi__pnm_isspace
$pdata$stbi__pnm_skip_whitespace DD imagerel stbi__pnm_skip_whitespace
	DD	imagerel stbi__pnm_skip_whitespace+162
	DD	imagerel $unwind$stbi__pnm_skip_whitespace
$pdata$stbi__pnm_isdigit DD imagerel stbi__pnm_isdigit
	DD	imagerel stbi__pnm_isdigit+52
	DD	imagerel $unwind$stbi__pnm_isdigit
$pdata$stbi__pnm_getinteger DD imagerel stbi__pnm_getinteger
	DD	imagerel stbi__pnm_getinteger+102
	DD	imagerel $unwind$stbi__pnm_getinteger
$pdata$stbi__info_main DD imagerel stbi__info_main
	DD	imagerel stbi__info_main+380
	DD	imagerel $unwind$stbi__info_main
$pdata$stbi__is_16_main DD imagerel stbi__is_16_main
	DD	imagerel stbi__is_16_main+79
	DD	imagerel $unwind$stbi__is_16_main
$pdata$stbir_resize_uint8 DD imagerel $LN3
	DD	imagerel $LN3+273
	DD	imagerel $unwind$stbir_resize_uint8
$pdata$stbir_resize_float DD imagerel $LN3
	DD	imagerel $LN3+273
	DD	imagerel $unwind$stbir_resize_float
$pdata$stbir_resize_uint8_srgb DD imagerel $LN3
	DD	imagerel $LN3+279
	DD	imagerel $unwind$stbir_resize_uint8_srgb
$pdata$stbir_resize_uint8_srgb_edgemode DD imagerel $LN3
	DD	imagerel $LN3+285
	DD	imagerel $unwind$stbir_resize_uint8_srgb_edgemode
$pdata$stbir_resize_uint8_generic DD imagerel $LN3
	DD	imagerel $LN3+300
	DD	imagerel $unwind$stbir_resize_uint8_generic
$pdata$stbir_resize_uint16_generic DD imagerel $LN3
	DD	imagerel $LN3+300
	DD	imagerel $unwind$stbir_resize_uint16_generic
$pdata$stbir_resize_float_generic DD imagerel $LN3
	DD	imagerel $LN3+300
	DD	imagerel $unwind$stbir_resize_float_generic
$pdata$stbir_resize DD imagerel $LN3
	DD	imagerel $LN3+303
	DD	imagerel $unwind$stbir_resize
$pdata$stbir_resize_subpixel DD imagerel $LN3
	DD	imagerel $LN3+449
	DD	imagerel $unwind$stbir_resize_subpixel
$pdata$stbir_resize_region DD imagerel $LN3
	DD	imagerel $LN3+317
	DD	imagerel $unwind$stbir_resize_region
$pdata$stbir__min DD imagerel stbir__min
	DD	imagerel stbir__min+46
	DD	imagerel $unwind$stbir__min
$pdata$stbir__srgb_to_linear DD imagerel stbir__srgb_to_linear
	DD	imagerel stbir__srgb_to_linear+91
	DD	imagerel $unwind$stbir__srgb_to_linear
$pdata$stbir__linear_to_srgb DD imagerel stbir__linear_to_srgb
	DD	imagerel stbir__linear_to_srgb+94
	DD	imagerel $unwind$stbir__linear_to_srgb
$pdata$stbir__linear_to_srgb_uchar DD imagerel stbir__linear_to_srgb_uchar
	DD	imagerel stbir__linear_to_srgb_uchar+178
	DD	imagerel $unwind$stbir__linear_to_srgb_uchar
$pdata$stbir__filter_trapezoid DD imagerel stbir__filter_trapezoid
	DD	imagerel stbir__filter_trapezoid+207
	DD	imagerel $unwind$stbir__filter_trapezoid
$pdata$stbir__support_trapezoid DD imagerel stbir__support_trapezoid
	DD	imagerel stbir__support_trapezoid+86
	DD	imagerel $unwind$stbir__support_trapezoid
$pdata$stbir__filter_triangle DD imagerel stbir__filter_triangle
	DD	imagerel stbir__filter_triangle+78
	DD	imagerel $unwind$stbir__filter_triangle
$pdata$stbir__filter_cubic DD imagerel stbir__filter_cubic
	DD	imagerel stbir__filter_cubic+220
	DD	imagerel $unwind$stbir__filter_cubic
$pdata$stbir__filter_catmullrom DD imagerel stbir__filter_catmullrom
	DD	imagerel stbir__filter_catmullrom+219
	DD	imagerel $unwind$stbir__filter_catmullrom
$pdata$stbir__filter_mitchell DD imagerel stbir__filter_mitchell
	DD	imagerel stbir__filter_mitchell+235
	DD	imagerel $unwind$stbir__filter_mitchell
$pdata$stbir__use_upsampling DD imagerel stbir__use_upsampling
	DD	imagerel stbir__use_upsampling+49
	DD	imagerel $unwind$stbir__use_upsampling
$pdata$stbir__use_width_upsampling DD imagerel stbir__use_width_upsampling
	DD	imagerel stbir__use_width_upsampling+29
	DD	imagerel $unwind$stbir__use_width_upsampling
$pdata$stbir__use_height_upsampling DD imagerel stbir__use_height_upsampling
	DD	imagerel stbir__use_height_upsampling+29
	DD	imagerel $unwind$stbir__use_height_upsampling
$pdata$stbir__get_filter_pixel_width DD imagerel stbir__get_filter_pixel_width
	DD	imagerel stbir__get_filter_pixel_width+218
	DD	imagerel $unwind$stbir__get_filter_pixel_width
$pdata$stbir__get_filter_pixel_margin DD imagerel stbir__get_filter_pixel_margin
	DD	imagerel stbir__get_filter_pixel_margin+39
	DD	imagerel $unwind$stbir__get_filter_pixel_margin
$pdata$stbir__get_coefficient_width DD imagerel stbir__get_coefficient_width
	DD	imagerel stbir__get_coefficient_width+140
	DD	imagerel $unwind$stbir__get_coefficient_width
$pdata$stbir__get_contributors DD imagerel stbir__get_contributors
	DD	imagerel stbir__get_contributors+74
	DD	imagerel $unwind$stbir__get_contributors
$pdata$stbir__get_total_horizontal_coefficients DD imagerel stbir__get_total_horizontal_coefficients
	DD	imagerel stbir__get_total_horizontal_coefficients+53
	DD	imagerel $unwind$stbir__get_total_horizontal_coefficients
$pdata$stbir__get_total_vertical_coefficients DD imagerel stbir__get_total_vertical_coefficients
	DD	imagerel stbir__get_total_vertical_coefficients+53
	DD	imagerel $unwind$stbir__get_total_vertical_coefficients
$pdata$stbir__get_coefficient DD imagerel stbir__get_coefficient
	DD	imagerel stbir__get_coefficient+72
	DD	imagerel $unwind$stbir__get_coefficient
$pdata$stbir__edge_wrap_slow DD imagerel stbir__edge_wrap_slow
	DD	imagerel stbir__edge_wrap_slow+329
	DD	imagerel $unwind$stbir__edge_wrap_slow
$pdata$stbir__edge_wrap DD imagerel stbir__edge_wrap
	DD	imagerel stbir__edge_wrap+63
	DD	imagerel $unwind$stbir__edge_wrap
$pdata$stbir__calculate_sample_range_upsample DD imagerel stbir__calculate_sample_range_upsample
	DD	imagerel stbir__calculate_sample_range_upsample+225
	DD	imagerel $unwind$stbir__calculate_sample_range_upsample
$pdata$stbir__calculate_sample_range_downsample DD imagerel stbir__calculate_sample_range_downsample
	DD	imagerel stbir__calculate_sample_range_downsample+225
	DD	imagerel $unwind$stbir__calculate_sample_range_downsample
$pdata$stbir__calculate_coefficients_upsample DD imagerel stbir__calculate_coefficients_upsample
	DD	imagerel stbir__calculate_coefficients_upsample+746
	DD	imagerel $unwind$stbir__calculate_coefficients_upsample
$pdata$stbir__calculate_coefficients_downsample DD imagerel stbir__calculate_coefficients_downsample
	DD	imagerel stbir__calculate_coefficients_downsample+425
	DD	imagerel $unwind$stbir__calculate_coefficients_downsample
$pdata$stbir__normalize_downsample_coefficients DD imagerel stbir__normalize_downsample_coefficients
	DD	imagerel stbir__normalize_downsample_coefficients+1209
	DD	imagerel $unwind$stbir__normalize_downsample_coefficients
$pdata$stbir__calculate_filters DD imagerel stbir__calculate_filters
	DD	imagerel stbir__calculate_filters+747
	DD	imagerel $unwind$stbir__calculate_filters
$pdata$stbir__decode_scanline DD imagerel stbir__decode_scanline
	DD	imagerel stbir__decode_scanline+2732
	DD	imagerel $unwind$stbir__decode_scanline
$pdata$stbir__add_empty_ring_buffer_entry DD imagerel stbir__add_empty_ring_buffer_entry
	DD	imagerel stbir__add_empty_ring_buffer_entry+271
	DD	imagerel $unwind$stbir__add_empty_ring_buffer_entry
$pdata$stbir__resample_horizontal_upsample DD imagerel stbir__resample_horizontal_upsample
	DD	imagerel stbir__resample_horizontal_upsample+2105
	DD	imagerel $unwind$stbir__resample_horizontal_upsample
$pdata$stbir__resample_horizontal_downsample DD imagerel stbir__resample_horizontal_downsample
	DD	imagerel stbir__resample_horizontal_downsample+2350
	DD	imagerel $unwind$stbir__resample_horizontal_downsample
$pdata$stbir__decode_and_resample_upsample DD imagerel stbir__decode_and_resample_upsample
	DD	imagerel stbir__decode_and_resample_upsample+102
	DD	imagerel $unwind$stbir__decode_and_resample_upsample
$pdata$stbir__decode_and_resample_downsample DD imagerel stbir__decode_and_resample_downsample
	DD	imagerel stbir__decode_and_resample_downsample+137
	DD	imagerel $unwind$stbir__decode_and_resample_downsample
$pdata$stbir__get_ring_buffer_scanline DD imagerel stbir__get_ring_buffer_scanline
	DD	imagerel stbir__get_ring_buffer_scanline+78
	DD	imagerel $unwind$stbir__get_ring_buffer_scanline
$pdata$stbir__encode_scanline DD imagerel stbir__encode_scanline
	DD	imagerel stbir__encode_scanline+2348
	DD	imagerel $unwind$stbir__encode_scanline
$pdata$stbir__resample_vertical_upsample DD imagerel stbir__resample_vertical_upsample
	DD	imagerel stbir__resample_vertical_upsample+2601
	DD	imagerel $unwind$stbir__resample_vertical_upsample
$pdata$stbir__resample_vertical_downsample DD imagerel stbir__resample_vertical_downsample
	DD	imagerel stbir__resample_vertical_downsample+1650
	DD	imagerel $unwind$stbir__resample_vertical_downsample
$pdata$stbir__buffer_loop_upsample DD imagerel stbir__buffer_loop_upsample
	DD	imagerel stbir__buffer_loop_upsample+569
	DD	imagerel $unwind$stbir__buffer_loop_upsample
$pdata$stbir__empty_ring_buffer DD imagerel stbir__empty_ring_buffer
	DD	imagerel stbir__empty_ring_buffer+583
	DD	imagerel $unwind$stbir__empty_ring_buffer
$pdata$stbir__buffer_loop_downsample DD imagerel stbir__buffer_loop_downsample
	DD	imagerel stbir__buffer_loop_downsample+520
	DD	imagerel $unwind$stbir__buffer_loop_downsample
$pdata$stbir__choose_filter DD imagerel stbir__choose_filter
	DD	imagerel stbir__choose_filter+151
	DD	imagerel $unwind$stbir__choose_filter
$pdata$stbir__calculate_memory DD imagerel stbir__calculate_memory
	DD	imagerel stbir__calculate_memory+746
	DD	imagerel $unwind$stbir__calculate_memory
$pdata$stbir__resize_allocated DD imagerel stbir__resize_allocated
	DD	imagerel stbir__resize_allocated+1851
	DD	imagerel $unwind$stbir__resize_allocated
$pdata$stbir__resize_arbitrary DD imagerel stbir__resize_arbitrary
	DD	imagerel stbir__resize_arbitrary+553
	DD	imagerel $unwind$stbir__resize_arbitrary
$pdata$stbi_write_png DD imagerel $LN5
	DD	imagerel $LN5+351
	DD	imagerel $unwind$stbi_write_png
$pdata$stbi_write_bmp DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_bmp
$pdata$stbi_write_tga DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_tga
$pdata$stbi_write_hdr DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_hdr
$pdata$stbi_write_jpg DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_jpg
$pdata$stbi_write_png_to_func DD imagerel $LN4
	DD	imagerel $LN4+218
	DD	imagerel $unwind$stbi_write_png_to_func
$pdata$stbi_write_bmp_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_bmp_to_func
$pdata$stbi_write_tga_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_tga_to_func
$pdata$stbi_write_hdr_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_hdr_to_func
$pdata$stbi_write_jpg_to_func DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$stbi_write_jpg_to_func
$pdata$stbi__stdio_write DD imagerel stbi__stdio_write
	DD	imagerel stbi__stdio_write+52
	DD	imagerel $unwind$stbi__stdio_write
$pdata$stbiw__fopen DD imagerel stbiw__fopen
	DD	imagerel stbiw__fopen+57
	DD	imagerel $unwind$stbiw__fopen
$pdata$stbi__start_write_file DD imagerel stbi__start_write_file
	DD	imagerel stbi__start_write_file+93
	DD	imagerel $unwind$stbi__start_write_file
$pdata$stbi__end_write_file DD imagerel stbi__end_write_file
	DD	imagerel stbi__end_write_file+28
	DD	imagerel $unwind$stbi__end_write_file
$pdata$stbiw__writefv DD imagerel stbiw__writefv
	DD	imagerel stbiw__writefv+475
	DD	imagerel $unwind$stbiw__writefv
$pdata$stbiw__writef DD imagerel stbiw__writef
	DD	imagerel stbiw__writef+68
	DD	imagerel $unwind$stbiw__writef
$pdata$stbiw__write_flush DD imagerel stbiw__write_flush
	DD	imagerel stbiw__write_flush+74
	DD	imagerel $unwind$stbiw__write_flush
$pdata$stbiw__putc DD imagerel stbiw__putc
	DD	imagerel stbiw__putc+45
	DD	imagerel $unwind$stbiw__putc
$pdata$stbiw__write1 DD imagerel stbiw__write1
	DD	imagerel stbiw__write1+87
	DD	imagerel $unwind$stbiw__write1
$pdata$stbiw__write3 DD imagerel stbiw__write3
	DD	imagerel stbiw__write3+149
	DD	imagerel $unwind$stbiw__write3
$pdata$stbiw__write_pixel DD imagerel stbiw__write_pixel
	DD	imagerel stbiw__write_pixel+519
	DD	imagerel $unwind$stbiw__write_pixel
$pdata$stbiw__write_pixels DD imagerel stbiw__write_pixels
	DD	imagerel stbiw__write_pixels+319
	DD	imagerel $unwind$stbiw__write_pixels
$pdata$stbiw__outfile DD imagerel stbiw__outfile
	DD	imagerel stbiw__outfile+208
	DD	imagerel $unwind$stbiw__outfile
$pdata$stbi_write_bmp_core DD imagerel stbi_write_bmp_core
	DD	imagerel stbi_write_bmp_core+902
	DD	imagerel $unwind$stbi_write_bmp_core
$pdata$stbi_write_tga_core DD imagerel stbi_write_tga_core
	DD	imagerel stbi_write_tga_core+1764
	DD	imagerel $unwind$stbi_write_tga_core
$pdata$stbiw__linear_to_rgbe DD imagerel stbiw__linear_to_rgbe
	DD	imagerel stbiw__linear_to_rgbe+582
	DD	imagerel $unwind$stbiw__linear_to_rgbe
$pdata$stbiw__write_run_data DD imagerel stbiw__write_run_data
	DD	imagerel stbiw__write_run_data+138
	DD	imagerel $unwind$stbiw__write_run_data
$pdata$stbiw__write_dump_data DD imagerel stbiw__write_dump_data
	DD	imagerel stbiw__write_dump_data+126
	DD	imagerel $unwind$stbiw__write_dump_data
$pdata$stbiw__write_hdr_scanline DD imagerel stbiw__write_hdr_scanline
	DD	imagerel stbiw__write_hdr_scanline+1547
	DD	imagerel $unwind$stbiw__write_hdr_scanline
$pdata$stbi_write_hdr_core DD imagerel stbi_write_hdr_core
	DD	imagerel stbi_write_hdr_core+587
	DD	imagerel $unwind$stbi_write_hdr_core
$pdata$stbiw__sbgrowf DD imagerel stbiw__sbgrowf
	DD	imagerel stbiw__sbgrowf+399
	DD	imagerel $unwind$stbiw__sbgrowf
$pdata$stbiw__zlib_flushf DD imagerel stbiw__zlib_flushf
	DD	imagerel stbiw__zlib_flushf+244
	DD	imagerel $unwind$stbiw__zlib_flushf
$pdata$stbiw__zlib_bitrev DD imagerel stbiw__zlib_bitrev
	DD	imagerel stbiw__zlib_bitrev+81
	DD	imagerel $unwind$stbiw__zlib_bitrev
$pdata$stbiw__zlib_countm DD imagerel stbiw__zlib_countm
	DD	imagerel stbiw__zlib_countm+96
	DD	imagerel $unwind$stbiw__zlib_countm
$pdata$stbiw__zhash DD imagerel stbiw__zhash
	DD	imagerel stbiw__zhash+180
	DD	imagerel $unwind$stbiw__zhash
$pdata$stbi_zlib_compress DD imagerel $LN94
	DD	imagerel $LN94+5829
	DD	imagerel $unwind$stbi_zlib_compress
$pdata$stbiw__crc32 DD imagerel stbiw__crc32
	DD	imagerel stbiw__crc32+108
	DD	imagerel $unwind$stbiw__crc32
$pdata$stbiw__wpcrc DD imagerel stbiw__wpcrc
	DD	imagerel stbiw__wpcrc+204
	DD	imagerel $unwind$stbiw__wpcrc
$pdata$stbiw__paeth DD imagerel stbiw__paeth
	DD	imagerel stbiw__paeth+172
	DD	imagerel $unwind$stbiw__paeth
$pdata$stbiw__encode_png_line DD imagerel stbiw__encode_png_line
	DD	imagerel stbiw__encode_png_line+1576
	DD	imagerel $unwind$stbiw__encode_png_line
$pdata$stbi_write_png_to_mem DD imagerel $LN23
	DD	imagerel $LN23+3123
	DD	imagerel $unwind$stbi_write_png_to_mem
$pdata$stbiw__jpg_writeBits DD imagerel stbiw__jpg_writeBits
	DD	imagerel stbiw__jpg_writeBits+230
	DD	imagerel $unwind$stbiw__jpg_writeBits
$pdata$stbiw__jpg_DCT DD imagerel stbiw__jpg_DCT
	DD	imagerel stbiw__jpg_DCT+837
	DD	imagerel $unwind$stbiw__jpg_DCT
$pdata$stbiw__jpg_calcBits DD imagerel stbiw__jpg_calcBits
	DD	imagerel stbiw__jpg_calcBits+229
	DD	imagerel $unwind$stbiw__jpg_calcBits
$pdata$stbiw__jpg_processDU DD imagerel stbiw__jpg_processDU
	DD	imagerel stbiw__jpg_processDU+1769
	DD	imagerel $unwind$stbiw__jpg_processDU
$pdata$stbi_write_jpg_core DD imagerel stbi_write_jpg_core
	DD	imagerel stbi_write_jpg_core+4687
	DD	imagerel $unwind$stbi_write_jpg_core
$pdata$stbtt_BakeFontBitmap DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$stbtt_BakeFontBitmap
$pdata$stbtt_GetBakedQuad DD imagerel $LN5
	DD	imagerel $LN5+562
	DD	imagerel $unwind$stbtt_GetBakedQuad
$pdata$stbtt_GetScaledFontVMetrics DD imagerel $LN5
	DD	imagerel $LN5+265
	DD	imagerel $unwind$stbtt_GetScaledFontVMetrics
$pdata$stbtt_PackBegin DD imagerel $LN10
	DD	imagerel $LN10+789
	DD	imagerel $unwind$stbtt_PackBegin
$pdata$stbtt_PackEnd DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$stbtt_PackEnd
$pdata$stbtt_PackFontRange DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_PackFontRange
$pdata$stbtt_PackFontRanges DD imagerel $LN13
	DD	imagerel $LN13+758
	DD	imagerel $unwind$stbtt_PackFontRanges
$pdata$stbtt_PackSetOversampling DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$stbtt_PackSetOversampling
$pdata$stbtt_GetPackedQuad DD imagerel $LN5
	DD	imagerel $LN5+620
	DD	imagerel $unwind$stbtt_GetPackedQuad
$pdata$stbtt_PackFontRangesGatherRects DD imagerel $LN17
	DD	imagerel $LN17+832
	DD	imagerel $unwind$stbtt_PackFontRangesGatherRects
$pdata$stbtt_PackFontRangesPackRects DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbtt_PackFontRangesPackRects
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel $LN22
	DD	imagerel $LN22+2037
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
$pdata$stbtt_GetNumberOfFonts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stbtt_GetNumberOfFonts
$pdata$stbtt_GetFontOffsetForIndex DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
$pdata$stbtt_InitFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_InitFont
$pdata$stbtt_FindGlyphIndex DD imagerel $LN33
	DD	imagerel $LN33+1538
	DD	imagerel $unwind$stbtt_FindGlyphIndex
$pdata$stbtt_ScaleForPixelHeight DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
$pdata$stbtt_GetFontVMetrics DD imagerel $LN6
	DD	imagerel $LN6+170
	DD	imagerel $unwind$stbtt_GetFontVMetrics
$pdata$stbtt_GetFontVMetricsOS2 DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$stbtt_GetFontVMetricsOS2
$pdata$stbtt_GetFontBoundingBox DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$stbtt_GetFontBoundingBox
$pdata$stbtt_GetCodepointHMetrics DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stbtt_GetCodepointHMetrics
$pdata$stbtt_GetCodepointKernAdvance DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$stbtt_GetCodepointKernAdvance
$pdata$stbtt_GetCodepointBox DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$stbtt_GetCodepointBox
$pdata$stbtt_GetGlyphHMetrics DD imagerel $LN9
	DD	imagerel $LN9+357
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
$pdata$stbtt_GetGlyphKernAdvance DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$stbtt_GetGlyphKernAdvance
$pdata$stbtt_GetGlyphBox DD imagerel $LN10
	DD	imagerel $LN10+297
	DD	imagerel $unwind$stbtt_GetGlyphBox
$pdata$stbtt_GetKerningTableLength DD imagerel $LN6
	DD	imagerel $LN6+130
	DD	imagerel $unwind$stbtt_GetKerningTableLength
$pdata$stbtt_GetKerningTable DD imagerel $LN10
	DD	imagerel $LN10+349
	DD	imagerel $unwind$stbtt_GetKerningTable
$pdata$stbtt_IsGlyphEmpty DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$stbtt_IsGlyphEmpty
$pdata$stbtt_GetCodepointShape DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointShape
$pdata$stbtt_GetGlyphShape DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$stbtt_GetGlyphShape
$pdata$stbtt_FreeShape DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$stbtt_FreeShape
$pdata$stbtt_FindSVGDoc DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$stbtt_FindSVGDoc
$pdata$stbtt_GetCodepointSVG DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointSVG
$pdata$stbtt_GetGlyphSVG DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$stbtt_GetGlyphSVG
$pdata$stbtt_FreeBitmap DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$stbtt_FreeBitmap
$pdata$stbtt_GetCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetCodepointBitmap
$pdata$stbtt_GetCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$stbtt_GetCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeCodepointBitmap
$pdata$stbtt_MakeCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmapSubpixelPrefilter DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter
$pdata$stbtt_GetCodepointBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBox
$pdata$stbtt_GetCodepointBitmapBoxSubpixel DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBoxSubpixel
$pdata$stbtt_GetGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_GetGlyphBitmap
$pdata$stbtt_GetGlyphBitmapSubpixel DD imagerel $LN12
	DD	imagerel $LN12+919
	DD	imagerel $unwind$stbtt_GetGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$stbtt_MakeGlyphBitmap
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel $LN4
	DD	imagerel $LN4+460
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmapSubpixelPrefilter DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter
$pdata$stbtt_GetGlyphBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel $LN13
	DD	imagerel $LN13+415
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
$pdata$stbtt_Rasterize DD imagerel $LN6
	DD	imagerel $LN6+505
	DD	imagerel $unwind$stbtt_Rasterize
$pdata$stbtt_FreeSDF DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$stbtt_FreeSDF
$pdata$stbtt_GetGlyphSDF DD imagerel $LN83
	DD	imagerel $LN83+6809
	DD	imagerel $unwind$stbtt_GetGlyphSDF
$pdata$stbtt_GetCodepointSDF DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$stbtt_GetCodepointSDF
$pdata$stbtt_FindMatchingFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_FindMatchingFont
$pdata$stbtt_CompareUTF8toUTF16_bigendian DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$stbtt_CompareUTF8toUTF16_bigendian
$pdata$stbtt_GetFontNameString DD imagerel $LN8
	DD	imagerel $LN8+445
	DD	imagerel $unwind$stbtt_GetFontNameString
$pdata$stbtt__buf_get8 DD imagerel stbtt__buf_get8
	DD	imagerel stbtt__buf_get8+82
	DD	imagerel $unwind$stbtt__buf_get8
$pdata$stbtt__buf_seek DD imagerel stbtt__buf_seek
	DD	imagerel stbtt__buf_seek+121
	DD	imagerel $unwind$stbtt__buf_seek
$pdata$stbtt__buf_skip DD imagerel stbtt__buf_skip
	DD	imagerel stbtt__buf_skip+42
	DD	imagerel $unwind$stbtt__buf_skip
$pdata$stbtt__buf_get DD imagerel stbtt__buf_get
	DD	imagerel stbtt__buf_get+139
	DD	imagerel $unwind$stbtt__buf_get
$pdata$stbtt__new_buf DD imagerel stbtt__new_buf
	DD	imagerel stbtt__new_buf+117
	DD	imagerel $unwind$stbtt__new_buf
$pdata$stbtt__buf_range DD imagerel stbtt__buf_range
	DD	imagerel stbtt__buf_range+192
	DD	imagerel $unwind$stbtt__buf_range
$pdata$stbtt__cff_get_index DD imagerel stbtt__cff_get_index
	DD	imagerel stbtt__cff_get_index+225
	DD	imagerel $unwind$stbtt__cff_get_index
$pdata$stbtt__cff_int DD imagerel stbtt__cff_int
	DD	imagerel stbtt__cff_int+288
	DD	imagerel $unwind$stbtt__cff_int
$pdata$stbtt__cff_skip_operand DD imagerel stbtt__cff_skip_operand
	DD	imagerel stbtt__cff_skip_operand+162
	DD	imagerel $unwind$stbtt__cff_skip_operand
$pdata$stbtt__dict_get DD imagerel stbtt__dict_get
	DD	imagerel stbtt__dict_get+277
	DD	imagerel $unwind$stbtt__dict_get
$pdata$stbtt__dict_get_ints DD imagerel stbtt__dict_get_ints
	DD	imagerel stbtt__dict_get_ints+141
	DD	imagerel $unwind$stbtt__dict_get_ints
$pdata$stbtt__cff_index_count DD imagerel stbtt__cff_index_count
	DD	imagerel stbtt__cff_index_count+41
	DD	imagerel $unwind$stbtt__cff_index_count
$pdata$stbtt__cff_index_get DD imagerel stbtt__cff_index_get
	DD	imagerel stbtt__cff_index_get+290
	DD	imagerel $unwind$stbtt__cff_index_get
$pdata$stbtt__find_table DD imagerel stbtt__find_table
	DD	imagerel stbtt__find_table+349
	DD	imagerel $unwind$stbtt__find_table
$pdata$stbtt_GetFontOffsetForIndex_internal DD imagerel stbtt_GetFontOffsetForIndex_internal
	DD	imagerel stbtt_GetFontOffsetForIndex_internal+366
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex_internal
$pdata$stbtt_GetNumberOfFonts_internal DD imagerel stbtt_GetNumberOfFonts_internal
	DD	imagerel stbtt_GetNumberOfFonts_internal+283
	DD	imagerel $unwind$stbtt_GetNumberOfFonts_internal
$pdata$stbtt__get_subrs DD imagerel stbtt__get_subrs
	DD	imagerel stbtt__get_subrs+381
	DD	imagerel $unwind$stbtt__get_subrs
$pdata$stbtt__get_svg DD imagerel stbtt__get_svg
	DD	imagerel stbtt__get_svg+137
	DD	imagerel $unwind$stbtt__get_svg
$pdata$stbtt_InitFont_internal DD imagerel stbtt_InitFont_internal
	DD	imagerel stbtt_InitFont_internal+1882
	DD	imagerel $unwind$stbtt_InitFont_internal
$pdata$stbtt__GetGlyfOffset DD imagerel stbtt__GetGlyfOffset
	DD	imagerel stbtt__GetGlyfOffset+392
	DD	imagerel $unwind$stbtt__GetGlyfOffset
$pdata$stbtt__GetGlyphInfoT2 DD imagerel stbtt__GetGlyphInfoT2
	DD	imagerel stbtt__GetGlyphInfoT2+387
	DD	imagerel $unwind$stbtt__GetGlyphInfoT2
$pdata$stbtt__close_shape DD imagerel stbtt__close_shape
	DD	imagerel stbtt__close_shape+416
	DD	imagerel $unwind$stbtt__close_shape
$pdata$stbtt__GetGlyphShapeTT DD imagerel stbtt__GetGlyphShapeTT
	DD	imagerel stbtt__GetGlyphShapeTT+5472
	DD	imagerel $unwind$stbtt__GetGlyphShapeTT
$pdata$stbtt__csctx_v DD imagerel stbtt__csctx_v
	DD	imagerel stbtt__csctx_v+250
	DD	imagerel $unwind$stbtt__csctx_v
$pdata$stbtt__csctx_close_shape DD imagerel stbtt__csctx_close_shape
	DD	imagerel stbtt__csctx_close_shape+130
	DD	imagerel $unwind$stbtt__csctx_close_shape
$pdata$stbtt__csctx_rmove_to DD imagerel stbtt__csctx_rmove_to
	DD	imagerel stbtt__csctx_rmove_to+214
	DD	imagerel $unwind$stbtt__csctx_rmove_to
$pdata$stbtt__csctx_rline_to DD imagerel stbtt__csctx_rline_to
	DD	imagerel stbtt__csctx_rline_to+148
	DD	imagerel $unwind$stbtt__csctx_rline_to
$pdata$stbtt__csctx_rccurve_to DD imagerel stbtt__csctx_rccurve_to
	DD	imagerel stbtt__csctx_rccurve_to+244
	DD	imagerel $unwind$stbtt__csctx_rccurve_to
$pdata$stbtt__get_subr DD imagerel stbtt__get_subr
	DD	imagerel stbtt__get_subr+251
	DD	imagerel $unwind$stbtt__get_subr
$pdata$stbtt__cid_get_glyph_subrs DD imagerel stbtt__cid_get_glyph_subrs
	DD	imagerel stbtt__cid_get_glyph_subrs+480
	DD	imagerel $unwind$stbtt__cid_get_glyph_subrs
$pdata$stbtt__run_charstring DD imagerel stbtt__run_charstring
	DD	imagerel stbtt__run_charstring+5036
	DD	imagerel $unwind$stbtt__run_charstring
$pdata$stbtt__GetGlyphShapeT2 DD imagerel stbtt__GetGlyphShapeT2
	DD	imagerel stbtt__GetGlyphShapeT2+516
	DD	imagerel $unwind$stbtt__GetGlyphShapeT2
$pdata$stbtt__GetGlyphKernInfoAdvance DD imagerel stbtt__GetGlyphKernInfoAdvance
	DD	imagerel stbtt__GetGlyphKernInfoAdvance+313
	DD	imagerel $unwind$stbtt__GetGlyphKernInfoAdvance
$pdata$stbtt__GetCoverageIndex DD imagerel stbtt__GetCoverageIndex
	DD	imagerel stbtt__GetCoverageIndex+553
	DD	imagerel $unwind$stbtt__GetCoverageIndex
$pdata$stbtt__GetGlyphClass DD imagerel stbtt__GetGlyphClass
	DD	imagerel stbtt__GetGlyphClass+472
	DD	imagerel $unwind$stbtt__GetGlyphClass
$pdata$stbtt__GetGlyphGPOSInfoAdvance DD imagerel stbtt__GetGlyphGPOSInfoAdvance
	DD	imagerel stbtt__GetGlyphGPOSInfoAdvance+1552
	DD	imagerel $unwind$stbtt__GetGlyphGPOSInfoAdvance
$pdata$stbtt__hheap_alloc DD imagerel stbtt__hheap_alloc
	DD	imagerel stbtt__hheap_alloc+433
	DD	imagerel $unwind$stbtt__hheap_alloc
$pdata$stbtt__hheap_cleanup DD imagerel stbtt__hheap_cleanup
	DD	imagerel stbtt__hheap_cleanup+153
	DD	imagerel $unwind$stbtt__hheap_cleanup
$pdata$stbtt__new_active DD imagerel stbtt__new_active
	DD	imagerel stbtt__new_active+439
	DD	imagerel $unwind$stbtt__new_active
$pdata$stbtt__handle_clipped_edge DD imagerel stbtt__handle_clipped_edge
	DD	imagerel stbtt__handle_clipped_edge+1085
	DD	imagerel $unwind$stbtt__handle_clipped_edge
$pdata$stbtt__sized_trapezoid_area DD imagerel stbtt__sized_trapezoid_area
	DD	imagerel stbtt__sized_trapezoid_area+137
	DD	imagerel $unwind$stbtt__sized_trapezoid_area
$pdata$stbtt__position_trapezoid_area DD imagerel stbtt__position_trapezoid_area
	DD	imagerel stbtt__position_trapezoid_area+71
	DD	imagerel $unwind$stbtt__position_trapezoid_area
$pdata$stbtt__fill_active_edges_new DD imagerel stbtt__fill_active_edges_new
	DD	imagerel stbtt__fill_active_edges_new+4040
	DD	imagerel $unwind$stbtt__fill_active_edges_new
$pdata$stbtt__rasterize_sorted_edges DD imagerel stbtt__rasterize_sorted_edges
	DD	imagerel stbtt__rasterize_sorted_edges+1450
	DD	imagerel $unwind$stbtt__rasterize_sorted_edges
$pdata$stbtt__sort_edges_ins_sort DD imagerel stbtt__sort_edges_ins_sort
	DD	imagerel stbtt__sort_edges_ins_sort+340
	DD	imagerel $unwind$stbtt__sort_edges_ins_sort
$pdata$stbtt__sort_edges_quicksort DD imagerel stbtt__sort_edges_quicksort
	DD	imagerel stbtt__sort_edges_quicksort+1114
	DD	imagerel $unwind$stbtt__sort_edges_quicksort
$pdata$stbtt__sort_edges DD imagerel stbtt__sort_edges
	DD	imagerel stbtt__sort_edges+46
	DD	imagerel $unwind$stbtt__sort_edges
$pdata$stbtt__rasterize DD imagerel stbtt__rasterize
	DD	imagerel stbtt__rasterize+1154
	DD	imagerel $unwind$stbtt__rasterize
$pdata$stbtt__tesselate_curve DD imagerel stbtt__tesselate_curve
	DD	imagerel stbtt__tesselate_curve+637
	DD	imagerel $unwind$stbtt__tesselate_curve
$pdata$stbtt__tesselate_cubic DD imagerel stbtt__tesselate_cubic
	DD	imagerel stbtt__tesselate_cubic+1345
	DD	imagerel $unwind$stbtt__tesselate_cubic
$pdata$stbtt_FlattenCurves DD imagerel stbtt_FlattenCurves
	DD	imagerel stbtt_FlattenCurves+1815
	DD	imagerel $unwind$stbtt_FlattenCurves
$pdata$stbtt_BakeFontBitmap_internal DD imagerel stbtt_BakeFontBitmap_internal
	DD	imagerel stbtt_BakeFontBitmap_internal+927
	DD	imagerel $unwind$stbtt_BakeFontBitmap_internal
$pdata$stbrp_pack_rects DD imagerel stbrp_pack_rects
	DD	imagerel stbrp_pack_rects+384
	DD	imagerel $unwind$stbrp_pack_rects
$pdata$stbtt__h_prefilter DD imagerel stbtt__h_prefilter
	DD	imagerel stbtt__h_prefilter+1090
	DD	imagerel $unwind$stbtt__h_prefilter
$pdata$stbtt__v_prefilter DD imagerel stbtt__v_prefilter
	DD	imagerel stbtt__v_prefilter+1213
	DD	imagerel $unwind$stbtt__v_prefilter
$pdata$stbtt__ray_intersect_bezier DD imagerel stbtt__ray_intersect_bezier
	DD	imagerel stbtt__ray_intersect_bezier+1800
	DD	imagerel $unwind$stbtt__ray_intersect_bezier
$pdata$equal DD	imagerel equal
	DD	imagerel equal+122
	DD	imagerel $unwind$equal
$pdata$stbtt__compute_crossings_x DD imagerel stbtt__compute_crossings_x
	DD	imagerel stbtt__compute_crossings_x+2325
	DD	imagerel $unwind$stbtt__compute_crossings_x
$pdata$stbtt__cuberoot DD imagerel stbtt__cuberoot
	DD	imagerel stbtt__cuberoot+93
	DD	imagerel $unwind$stbtt__cuberoot
$pdata$stbtt__solve_cubic DD imagerel stbtt__solve_cubic
	DD	imagerel stbtt__solve_cubic+769
	DD	imagerel $unwind$stbtt__solve_cubic
$pdata$stbtt__CompareUTF8toUTF16_bigendian_prefix DD imagerel stbtt__CompareUTF8toUTF16_bigendian_prefix
	DD	imagerel stbtt__CompareUTF8toUTF16_bigendian_prefix+1079
	DD	imagerel $unwind$stbtt__CompareUTF8toUTF16_bigendian_prefix
$pdata$stbtt_CompareUTF8toUTF16_bigendian_internal DD imagerel stbtt_CompareUTF8toUTF16_bigendian_internal
	DD	imagerel stbtt_CompareUTF8toUTF16_bigendian_internal+80
	DD	imagerel $unwind$stbtt_CompareUTF8toUTF16_bigendian_internal
$pdata$stbtt__matchpair DD imagerel stbtt__matchpair
	DD	imagerel stbtt__matchpair+874
	DD	imagerel $unwind$stbtt__matchpair
$pdata$stbtt__matches DD imagerel stbtt__matches
	DD	imagerel stbtt__matches+526
	DD	imagerel $unwind$stbtt__matches
$pdata$stbtt_FindMatchingFont_internal DD imagerel stbtt_FindMatchingFont_internal
	DD	imagerel stbtt_FindMatchingFont_internal+111
	DD	imagerel $unwind$stbtt_FindMatchingFont_internal
$pdata$rxborrow_resource DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$rxborrow_resource
$pdata$rxreturn_resource DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$rxreturn_resource
$pdata$rxreturn DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$rxreturn
$pdata$rxborrow_texture DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$rxborrow_texture
$pdata$rxcreate_texture DD imagerel $LN3
	DD	imagerel $LN3+372
	DD	imagerel $unwind$rxcreate_texture
$pdata$rxload_texture DD imagerel $LN3
	DD	imagerel $LN3+428
	DD	imagerel $unwind$rxload_texture
$pdata$rxload_texture_file DD imagerel $LN3
	DD	imagerel $LN3+175
	DD	imagerel $unwind$rxload_texture_file
$pdata$rxload_font DD imagerel $LN14
	DD	imagerel $LN14+832
	DD	imagerel $unwind$rxload_font
$pdata$rxdraw_texture_ex DD imagerel $LN3
	DD	imagerel $LN3+896
	DD	imagerel $unwind$rxdraw_texture_ex
$pdata$rxdraw_texture DD imagerel $LN3
	DD	imagerel $LN3+192
	DD	imagerel $unwind$rxdraw_texture
$pdata$rxdraw_text DD imagerel $LN6
	DD	imagerel $LN6+638
	DD	imagerel $unwind$rxdraw_text
$pdata$rxwindow DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$rxwindow
$pdata$rxtick DD imagerel $LN9
	DD	imagerel $LN9+641
	DD	imagerel $unwind$rxtick
$pdata$rxresize_indexbuffer DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$rxresize_indexbuffer
$pdata$rxresize_vertexbuffer DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$rxresize_vertexbuffer
$pdata$rxwindow_callback_win32 DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$rxwindow_callback_win32
$pdata$rxinit DD imagerel $LN7
	DD	imagerel $LN7+3913
	DD	imagerel $unwind$rxinit
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c2700000
CONST	SEGMENT
__real@c2700000 DD 0c2700000r			; -60
CONST	ENDS
;	COMDAT __real@c1d80000
CONST	SEGMENT
__real@c1d80000 DD 0c1d80000r			; -27
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be2cca2e
CONST	SEGMENT
__real@be2cca2e DD 0be2cca2er			; -0.16874
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42100000
CONST	SEGMENT
__real@42100000 DD 042100000r			; 36
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41a80000
CONST	SEGMENT
__real@41a80000 DD 041a80000r			; 21
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@414eb852
CONST	SEGMENT
__real@414eb852 DD 0414eb852r			; 12.92
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@4003333340000000
CONST	SEGMENT
__real@4003333340000000 DQ 04003333340000000r	; 2.4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fafc8b007a
CONST	SEGMENT
__real@3ff921fafc8b007a DQ 03ff921fafc8b007ar	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff028f5c0000000
CONST	SEGMENT
__real@3ff028f5c0000000 DQ 03ff028f5c0000000r	; 1.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feccccccccccccd
CONST	SEGMENT
__real@3feccccccccccccd DQ 03feccccccccccccdr	; 0.9
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fddb3d7
CONST	SEGMENT
__real@3fddb3d7 DD 03fddb3d7r			; 1.73205
CONST	ENDS
;	COMDAT __real@3fdaaaaaa0000000
CONST	SEGMENT
__real@3fdaaaaaa0000000 DQ 03fdaaaaaa0000000r	; 0.416667
CONST	ENDS
;	COMDAT __real@3fd5555560000000
CONST	SEGMENT
__real@3fd5555560000000 DQ 03fd5555560000000r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fa73d75
CONST	SEGMENT
__real@3fa73d75 DD 03fa73d75r			; 1.30656
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f870a3d
CONST	SEGMENT
__real@3f870a3d DD 03f870a3dr			; 1.055
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f0a8bd4
CONST	SEGMENT
__real@3f0a8bd4 DD 03f0a8bd4r			; 0.541196
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed65e89
CONST	SEGMENT
__real@3ed65e89 DD 03ed65e89r			; 0.41869
CONST	ENDS
;	COMDAT __real@3ec3ef15
CONST	SEGMENT
__real@3ec3ef15 DD 03ec3ef15r			; 0.382683
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea99ae9
CONST	SEGMENT
__real@3ea99ae9 DD 03ea99ae9r			; 0.33126
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3de978d5
CONST	SEGMENT
__real@3de978d5 DD 03de978d5r			; 0.114
CONST	ENDS
;	COMDAT __real@3da685db
CONST	SEGMENT
__real@3da685db DD 03da685dbr			; 0.08131
CONST	ENDS
;	COMDAT __real@3d6147ae
CONST	SEGMENT
__real@3d6147ae DD 03d6147aer			; 0.055
CONST	ENDS
;	COMDAT __real@3d25aee6
CONST	SEGMENT
__real@3d25aee6 DD 03d25aee6r			; 0.04045
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b4d2e1c
CONST	SEGMENT
__real@3b4d2e1c DD 03b4d2e1cr			; 0.0031308
CONST	ENDS
;	COMDAT __real@17800000
CONST	SEGMENT
__real@17800000 DD 017800000r			; 8.27181e-25
CONST	ENDS
;	COMDAT __real@0a4fb11f
CONST	SEGMENT
__real@0a4fb11f DD 00a4fb11fr			; 1e-32
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+6
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
$SG35625 DB	'NaN', 00H
?hex@?1??stbsp_vsprintfcb@@9@9 DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
	ORG $+1
$SG35626 DB	'Inf', 00H
?hexu@?1??stbsp_vsprintfcb@@9@9 DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
	ORG $+1
$SG35046 DB	'null', 00H
	ORG $+3
$SG35120 DB	'_KMGT', 00H
	ORG $+2
$SG35121 DB	'_kMGT', 00H
	ORG $+2
$SG69980 DB	'err', 00H
$SG69979 DB	'assertion triggered', 00H
$SG69985 DB	'err', 00H
$SG69981 DB	'ccopenfile', 00H
	ORG $+1
$SG70008 DB	'err', 00H
$SG69982 DB	'W:\cpp\void\rx\cc\ccsys.c', 00H
	ORG $+2
$SG70096 DB	'err', 00H
$SG69984 DB	'''%s'': invalid file', 00H
	ORG $+1
$SG70339 DB	'err', 00H
$SG69986 DB	'ccopenfile', 00H
	ORG $+1
$SG70343 DB	'err', 00H
$SG69987 DB	'W:\cpp\void\rx\cc\ccsys.c', 00H
	ORG $+2
$SG70348 DB	'err', 00H
$SG70007 DB	'invalid file', 00H
	ORG $+3
$SG70009 DB	'ccpullfile', 00H
	ORG $+1
$SG70352 DB	'err', 00H
$SG70010 DB	'W:\cpp\void\rx\cc\ccsys.c', 00H
	ORG $+2
$SG70357 DB	'err', 00H
$SG70013 DB	'ccpullfile', 00H
	ORG $+1
$SG70362 DB	'err', 00H
$SG70014 DB	'W:\cpp\void\rx\cc\ccsys.c', 00H
	ORG $+2
$SG70092 DB	'dummy', 00H
	ORG $+2
$SG70367 DB	'err', 00H
$SG70095 DB	'assertion triggered', 00H
$SG70372 DB	'err', 00H
$SG70097 DB	'ccdebug_', 00H
	ORG $+3
$SG70377 DB	'err', 00H
$SG70098 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG70382 DB	'err', 00H
$SG70338 DB	'corrupted heap block, head guard breached', 00H
	ORG $+2
$SG70387 DB	'err', 00H
$SG70340 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70341 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG70392 DB	'err', 00H
$SG70342 DB	'assertion triggered', 00H
$SG70397 DB	'err', 00H
$SG70344 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70345 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG71996 DB	'rb', 00H
	ORG $+1
$SG70347 DB	'corrupted heap block, tail guard breached', 00H
	ORG $+2
$SG72047 DB	'rb', 00H
	ORG $+1
$SG70349 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70350 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG72198 DB	'rb', 00H
	ORG $+1
$SG70351 DB	'assertion triggered', 00H
$SG72224 DB	'rb', 00H
	ORG $+1
$SG70353 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70354 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
stbi__l2h_gamma DD 0400ccccdr			; 2.2
$SG70356 DB	'assertion triggered', 00H
stbi__l2h_scale DD 03f800000r			; 1
$SG70358 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70359 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
stbi__h2l_gamma_i DD 03ee8ba2er			; 0.454545
$SG70361 DB	'assertion triggered', 00H
stbi__h2l_scale_i DD 03f800000r			; 1
$SG70363 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70364 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG72433 DB	'0', 00H, 00H, 00H
$SG70366 DB	'assertion triggered', 00H
$SG72546 DB	'0', 00H, 00H, 00H
$SG70368 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70369 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG73727 DB	'bad TQ', 00H
	ORG $+1
$SG77247 DB	'-Y ', 00H
$SG70371 DB	'assertion triggered', 00H
$SG77250 DB	'+X ', 00H
$SG70373 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70374 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG73754 DB	'no SOI', 00H
	ORG $+1
$SG77327 DB	'-Y ', 00H
$SG70376 DB	'assertion triggered', 00H
$SG77329 DB	'+X ', 00H
$SG70378 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70379 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG73758 DB	'no SOF', 00H
	ORG $+1
$SG77573 DB	'rb', 00H
	ORG $+1
$SG70381 DB	'assertion triggered', 00H
$SG77593 DB	'rb', 00H
	ORG $+1
$SG70383 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70384 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG77239 DB	'#?RGBE', 00H
	ORG $+1
stbir__type_size DB 01H
	DB	02H
	DB	04H
	DB	04H
$SG70386 DB	'assertion triggered', 00H
$SG80161 DB	'wb', 00H
	ORG $+1
$SG70388 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70389 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG80232 DB	'0', 00H, 00H, 00H
$SG70391 DB	'assertion triggered', 00H
$SG80706 DB	'p', 00H, 00H, 00H
$SG70393 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70394 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG81219 DB	'wb', 00H
	ORG $+1
$SG70396 DB	'assertion triggered', 00H
$SG82567 DB	'0', 00H, 00H, 00H
$SG70398 DB	'ccsentry_block_check', 00H
	ORG $+3
$SG70399 DB	'W:\cpp\void\rx\cc\ccdbg.c', 00H
	ORG $+2
$SG82853 DB	'0', 00H, 00H, 00H
$SG70668 DB	'%s: %s[%i] %s() %s', 0aH, 00H
$SG82871 DB	'0', 00H, 00H, 00H
stbi__stdio_callbacks DQ FLAT:stbi__stdio_read
	DQ	FLAT:stbi__stdio_skip
	DQ	FLAT:stbi__stdio_eof
$SG71655 DB	'stbi__malloc', 00H
	ORG $+3
$SG71656 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+1
$SG83127 DB	'0', 00H, 00H, 00H
$SG71742 DB	'stbi_image_free', 00H
$SG71743 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+1
$SG151627 DB	'r', 00H
	ORG $+2
$SG71801 DB	'unknown image type', 00H
	ORG $+1
$SG151630 DB	'err', 00H
$SG71826 DB	'outofmem', 00H
	ORG $+3
$SG73722 DB	'bad H', 00H
	ORG $+2
$SG151635 DB	'err', 00H
$SG71827 DB	'stbi__convert_16_to_8', 00H
	ORG $+2
$SG71828 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG71854 DB	'outofmem', 00H
	ORG $+7
$SG71855 DB	'stbi__convert_8_to_16', 00H
	ORG $+2
$SG71856 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG71924 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG71925 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG71951 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72151 DB	'unknown image type', 00H
	ORG $+5
$SG71952 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG71998 DB	'can''t fopen', 00H
	ORG $+4
$SG72049 DB	'can''t fopen', 00H
	ORG $+4
$SG72200 DB	'can''t fopen', 00H
	ORG $+4
$SG72413 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72414 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG72416 DB	'stbi__convert_format', 00H
	ORG $+3
$SG72417 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72418 DB	'outofmem', 00H
	ORG $+7
$SG72432 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72434 DB	'stbi__convert_format', 00H
	ORG $+3
$SG72435 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72436 DB	'stbi__convert_format', 00H
	ORG $+3
$SG72437 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72438 DB	'unsupported', 00H
	ORG $+4
$SG72439 DB	'stbi__convert_format', 00H
	ORG $+3
$SG72440 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72526 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72527 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG72529 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG72530 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72531 DB	'outofmem', 00H
	ORG $+7
$SG72545 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72547 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG72548 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72549 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG72550 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72551 DB	'unsupported', 00H
	ORG $+4
$SG72552 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG72553 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72587 DB	'stbi__ldr_to_hdr', 00H
	ORG $+7
$SG72588 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72589 DB	'outofmem', 00H
	ORG $+7
$SG72593 DB	'stbi__ldr_to_hdr', 00H
	ORG $+7
$SG72594 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72630 DB	'stbi__hdr_to_ldr', 00H
	ORG $+7
$SG72631 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72632 DB	'outofmem', 00H
	ORG $+7
$SG72640 DB	'stbi__hdr_to_ldr', 00H
	ORG $+7
$SG72641 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG72766 DB	'bad code lengths', 00H
	ORG $+7
$SG72826 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG72827 DB	'(', 00H, '(', 00H, '(', 00H, 'j', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, '_', 00H, '_', 00H, 'b', 00H, 'm', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, '[', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']'
	DB	00H, ']', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, 00H, 00H
	ORG $+4
$SG72887 DB	'bad huffman code', 00H
	ORG $+7
$SG72892 DB	'bad huffman code', 00H
	ORG $+7
$SG72912 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG72918 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG72959 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG72967 DB	'bad huffman code', 00H
	ORG $+7
$SG72980 DB	'bad huffman code', 00H
	ORG $+7
$SG72987 DB	'bad huffman code', 00H
	ORG $+7
$SG73566 DB	'expected marker', 00H
$SG73569 DB	'bad DRI len', 00H
	ORG $+4
$SG73572 DB	'bad DQT type', 00H
	ORG $+3
$SG73574 DB	'bad DQT table', 00H
	ORG $+2
$SG73578 DB	'bad DHT header', 00H
	ORG $+1
$SG73590 DB	'bad COM len', 00H
	ORG $+4
$SG73591 DB	'bad APP len', 00H
	ORG $+4
$SG73599 DB	'unknown marker', 00H
	ORG $+1
$SG73619 DB	'bad SOS component count', 00H
$SG73621 DB	'bad SOS len', 00H
	ORG $+4
$SG73625 DB	'bad DC huff', 00H
	ORG $+4
$SG73627 DB	'bad AC huff', 00H
	ORG $+4
$SG73632 DB	'bad SOS', 00H
$SG73634 DB	'bad SOS', 00H
$SG73637 DB	'bad SOS', 00H
$SG73654 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG73655 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG73657 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG73658 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG73660 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG73661 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG73704 DB	'bad SOF len', 00H
	ORG $+4
$SG73706 DB	'only 8-bit', 00H
	ORG $+5
$SG73708 DB	'no header height', 00H
	ORG $+7
$SG73710 DB	'0 width', 00H
$SG73712 DB	'too large', 00H
	ORG $+6
$SG73714 DB	'too large', 00H
	ORG $+6
$SG73716 DB	'bad component count', 00H
	ORG $+4
$SG73718 DB	'bad SOF len', 00H
$SG73725 DB	'bad V', 00H
	ORG $+6
$SG73730 DB	'too large', 00H
	ORG $+2
$SG73734 DB	'bad H', 00H
	ORG $+2
$SG73736 DB	'bad V', 00H
	ORG $+6
$SG73738 DB	'outofmem', 00H
	ORG $+7
$SG73741 DB	'outofmem', 00H
	ORG $+7
$SG73787 DB	'bad DNL len', 00H
	ORG $+4
$SG73789 DB	'bad DNL height', 00H
	ORG $+1
$SG74218 DB	'bad req_comp', 00H
	ORG $+3
$SG74224 DB	'outofmem', 00H
	ORG $+7
$SG74234 DB	'outofmem', 00H
	ORG $+7
$SG74283 DB	'outofmem', 00H
	ORG $+7
$SG74284 DB	'stbi__jpeg_load', 00H
$SG74285 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74294 DB	'outofmem', 00H
	ORG $+7
$SG74295 DB	'stbi__jpeg_test', 00H
$SG74296 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74325 DB	'outofmem', 00H
	ORG $+7
$SG74326 DB	'stbi__jpeg_info', 00H
$SG74327 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74348 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG74349 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG74387 DB	'bad sizes', 00H
	ORG $+6
$SG74390 DB	'bad codelengths', 00H
$SG74478 DB	'output buffer limit', 00H
	ORG $+4
$SG74480 DB	'outofmem', 00H
	ORG $+7
$SG74482 DB	'outofmem', 00H
	ORG $+7
$SG74483 DB	'stbi__zexpand', 00H
	ORG $+2
$SG74484 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74486 DB	'outofmem', 00H
	ORG $+7
$SG74515 DB	'bad huffman code', 00H
	ORG $+7
$SG74521 DB	'bad huffman code', 00H
	ORG $+7
$SG74524 DB	'bad dist', 00H
	ORG $+7
$SG74559 DB	'bad codelengths', 00H
$SG74565 DB	'bad codelengths', 00H
$SG74570 DB	'bad codelengths', 00H
$SG74572 DB	'bad codelengths', 00H
$SG74574 DB	'bad codelengths', 00H
$SG74592 DB	'zlib corrupt', 00H
	ORG $+3
$SG74594 DB	'zlib corrupt', 00H
	ORG $+3
$SG74596 DB	'read past buffer', 00H
	ORG $+7
$SG74607 DB	'bad zlib header', 00H
$SG74609 DB	'bad zlib header', 00H
$SG74611 DB	'no preset dict', 00H
	ORG $+1
$SG74613 DB	'bad compression', 00H
$SG74674 DB	'stbi_zlib_decode_malloc_guesssize', 00H
	ORG $+6
$SG74675 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74707 DB	'stbi_zlib_decode_malloc_guesssize_headerflag', 00H
	ORG $+3
$SG74708 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74744 DB	'stbi_zlib_decode_noheader_malloc', 00H
	ORG $+7
$SG74745 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG74781 DB	'bad png sig', 00H
first_row_filter DB 00H
	DB	01H
	DB	00H
	DB	05H
	DB	06H
	ORG $+7
$SG74972 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG74979 DB	'not enough pixels', 00H
	ORG $+6
$SG74973 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+'
	DB	00H, '1', 00H, 00H, 00H
	ORG $+6
$SG74975 DB	'outofmem', 00H
	ORG $+7
$SG74977 DB	'too large', 00H
	ORG $+6
$SG74981 DB	'invalid filter', 00H
	ORG $+1
$SG74984 DB	'invalid width', 00H
	ORG $+2
$SG75009 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75010 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, '_', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG75040 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75041 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG75086 DB	'outofmem', 00H
	ORG $+7
$SG75089 DB	'stbi__create_png_image', 00H
	ORG $+1
$SG75090 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75091 DB	'stbi__create_png_image', 00H
	ORG $+1
$SG75092 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75113 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75114 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG75139 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75140 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG75171 DB	'outofmem', 00H
	ORG $+7
$SG75174 DB	'stbi__expand_png_palette', 00H
	ORG $+7
$SG75175 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75221 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75222 DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'm', 00H, 'g', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+4
?invalid_chunk@?BO@??stbi__parse_png_file@@9@9 DB 'XXXX PNG chunk not kno'
	DB	'wn', 00H					; `stbi__parse_png_file'::`30'::invalid_chunk
	ORG $+7
$SG75329 DB	'multiple IHDR', 00H
	ORG $+2
$SG75331 DB	'bad IHDR len', 00H
	ORG $+3
$SG75333 DB	'too large', 00H
	ORG $+6
$SG75335 DB	'too large', 00H
	ORG $+6
$SG75337 DB	'1/2/4/8/16-bit only', 00H
	ORG $+4
$SG75339 DB	'bad ctype', 00H
	ORG $+6
$SG75341 DB	'bad ctype', 00H
	ORG $+6
$SG75345 DB	'bad ctype', 00H
	ORG $+6
$SG75347 DB	'bad comp method', 00H
$SG75349 DB	'bad filter method', 00H
	ORG $+6
$SG75351 DB	'bad interlace method', 00H
	ORG $+3
$SG75354 DB	'0-pixel image', 00H
	ORG $+2
$SG75358 DB	'too large', 00H
	ORG $+6
$SG75361 DB	'too large', 00H
	ORG $+6
$SG75364 DB	'first not IHDR', 00H
	ORG $+1
$SG75366 DB	'invalid PLTE', 00H
	ORG $+3
$SG75368 DB	'invalid PLTE', 00H
	ORG $+3
$SG75371 DB	'first not IHDR', 00H
	ORG $+1
$SG75373 DB	'tRNS after IDAT', 00H
$SG75378 DB	'tRNS before PLTE', 00H
	ORG $+7
$SG75380 DB	'bad tRNS len', 00H
	ORG $+3
$SG75382 DB	'tRNS with alpha', 00H
$SG75384 DB	'bad tRNS len', 00H
	ORG $+3
$SG75389 DB	'first not IHDR', 00H
	ORG $+1
$SG75391 DB	'no PLTE', 00H
$SG75396 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG75397 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75399 DB	'outofmem', 00H
	ORG $+7
$SG75401 DB	'outofdata', 00H
	ORG $+6
$SG75404 DB	'first not IHDR', 00H
	ORG $+1
$SG75407 DB	'no IDAT', 00H
$SG75409 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG75410 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75427 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG75428 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75431 DB	'first not IHDR', 00H
	ORG $+1
$SG75466 DB	'bad req_comp', 00H
	ORG $+3
$SG75472 DB	'bad bits_per_channel', 00H
	ORG $+3
$SG75478 DB	'stbi__do_png', 00H
	ORG $+3
$SG75479 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75480 DB	'stbi__do_png', 00H
	ORG $+3
$SG75481 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75482 DB	'stbi__do_png', 00H
	ORG $+3
$SG75483 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
?mul_table@?1??stbi__shiftsigned@@9@9 DD 00H		; `stbi__shiftsigned'::`2'::mul_table
	DD	0ffH
	DD	055H
	DD	049H
	DD	011H
	DD	021H
	DD	041H
	DD	081H
	DD	01H
	ORG $+4
?shift_table@?1??stbi__shiftsigned@@9@9 DD 00H		; `stbi__shiftsigned'::`2'::shift_table
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	04H
	DD	06H
	DD	00H
	ORG $+4
$SG75582 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75583 DB	'v', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H
$SG75584 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG75585 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG75664 DB	'not BMP', 00H
$SG75666 DB	'bad BMP', 00H
$SG75668 DB	'unknown BMP', 00H
	ORG $+4
$SG75672 DB	'bad BMP', 00H
$SG75676 DB	'BMP RLE', 00H
$SG75678 DB	'BMP JPEG/PNG', 00H
	ORG $+3
$SG75680 DB	'bad BMP', 00H
$SG75692 DB	'bad BMP', 00H
$SG75693 DB	'bad BMP', 00H
$SG75695 DB	'bad BMP', 00H
$SG75843 DB	'too large', 00H
	ORG $+6
$SG75845 DB	'too large', 00H
	ORG $+6
$SG75852 DB	'bad offset', 00H
	ORG $+5
$SG75858 DB	'too large', 00H
	ORG $+6
$SG75860 DB	'outofmem', 00H
	ORG $+7
$SG75865 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG75866 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75867 DB	'invalid', 00H
$SG75875 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG75876 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75877 DB	'bad bpp', 00H
$SG75898 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG75899 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75900 DB	'bad masks', 00H
	ORG $+6
$SG75903 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG75904 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG75905 DB	'bad masks', 00H
	ORG $+6
$SG76118 DB	'too large', 00H
	ORG $+6
$SG76120 DB	'too large', 00H
	ORG $+6
$SG76125 DB	'bad format', 00H
	ORG $+5
$SG76128 DB	'too large', 00H
	ORG $+6
$SG76130 DB	'outofmem', 00H
	ORG $+7
$SG76135 DB	'stbi__tga_load', 00H
	ORG $+1
$SG76136 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76137 DB	'bad palette', 00H
	ORG $+4
$SG76139 DB	'stbi__tga_load', 00H
	ORG $+1
$SG76140 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76141 DB	'outofmem', 00H
	ORG $+7
$SG76144 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG76145 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG76147 DB	'stbi__tga_load', 00H
	ORG $+1
$SG76148 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76149 DB	'stbi__tga_load', 00H
	ORG $+1
$SG76150 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76151 DB	'bad palette', 00H
	ORG $+4
$SG76163 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H
	ORG $+2
$SG76164 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG76167 DB	'stbi__tga_load', 00H
	ORG $+1
$SG76168 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76331 DB	'not PSD', 00H
$SG76333 DB	'wrong version', 00H
	ORG $+2
$SG76336 DB	'wrong channel count', 00H
	ORG $+4
$SG76338 DB	'too large', 00H
	ORG $+6
$SG76340 DB	'too large', 00H
	ORG $+6
$SG76342 DB	'unsupported bit depth', 00H
	ORG $+2
$SG76344 DB	'wrong color format', 00H
	ORG $+5
$SG76346 DB	'bad compression', 00H
$SG76348 DB	'too large', 00H
	ORG $+6
$SG76352 DB	'outofmem', 00H
	ORG $+7
$SG76358 DB	'stbi__psd_load', 00H
	ORG $+1
$SG76359 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76360 DB	'corrupt', 00H
$SG76400 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG76402 DB	'PICT', 00H
	ORG $+3
$SG76427 DB	'bad file', 00H
	ORG $+7
$SG76533 DB	'bad format', 00H
	ORG $+5
$SG76535 DB	'bad file', 00H
	ORG $+7
$SG76537 DB	'bad format', 00H
	ORG $+5
$SG76539 DB	'bad format', 00H
	ORG $+5
$SG76544 DB	'bad file', 00H
	ORG $+7
$SG76549 DB	'bad file', 00H
	ORG $+7
$SG76555 DB	'bad file', 00H
	ORG $+7
$SG76558 DB	'bad file', 00H
	ORG $+7
$SG76605 DB	'too large', 00H
	ORG $+6
$SG76607 DB	'too large', 00H
	ORG $+6
$SG76609 DB	'bad file', 00H
	ORG $+7
$SG76611 DB	'too large', 00H
	ORG $+6
$SG76613 DB	'outofmem', 00H
	ORG $+7
$SG76615 DB	'stbi__pic_load', 00H
	ORG $+1
$SG76616 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76694 DB	'not GIF', 00H
$SG76696 DB	'not GIF', 00H
$SG76698 DB	'not GIF', 00H
$SG76701 DB	'too large', 00H
	ORG $+6
$SG76703 DB	'too large', 00H
	ORG $+6
$SG76721 DB	'outofmem', 00H
	ORG $+7
$SG76723 DB	'stbi__gif_info_raw', 00H
	ORG $+5
$SG76724 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76727 DB	'stbi__gif_info_raw', 00H
	ORG $+5
$SG76728 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76805 DB	'no clear code', 00H
	ORG $+2
$SG76809 DB	'too many codes', 00H
	ORG $+1
$SG76811 DB	'illegal code in raster', 00H
	ORG $+1
$SG76813 DB	'illegal code in raster', 00H
	ORG $+1
$SG76886 DB	'too large', 00H
	ORG $+6
$SG76889 DB	'outofmem', 00H
	ORG $+7
$SG76900 DB	'bad Image Descriptor', 00H
	ORG $+3
$SG76908 DB	'missing color table', 00H
	ORG $+4
$SG76922 DB	'unknown code', 00H
	ORG $+3
$SG76935 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG76936 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76937 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG76938 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76939 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG76940 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76942 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG76943 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76945 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG76946 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG76947 DB	'outofmem', 00H
	ORG $+7
$SG76999 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG77000 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77004 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG77005 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77012 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG77013 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77014 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG77015 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77016 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG77017 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77019 DB	'not GIF', 00H
$SG77042 DB	'stbi__gif_load', 00H
	ORG $+1
$SG77043 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77044 DB	'stbi__gif_load', 00H
	ORG $+1
$SG77045 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77046 DB	'stbi__gif_load', 00H
	ORG $+1
$SG77047 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77072 DB	'#?RADIANCE', 0aH, 00H
	ORG $+4
$SG77074 DB	'#?RGBE', 0aH, 00H
$SG77238 DB	'#?RADIANCE', 00H
	ORG $+5
$SG77240 DB	'not HDR', 00H
$SG77243 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG77245 DB	'unsupported format', 00H
	ORG $+5
$SG77248 DB	'unsupported data layout', 00H
$SG77251 DB	'unsupported data layout', 00H
$SG77253 DB	'too large', 00H
	ORG $+6
$SG77255 DB	'too large', 00H
	ORG $+6
$SG77259 DB	'too large', 00H
	ORG $+6
$SG77261 DB	'outofmem', 00H
	ORG $+7
$SG77267 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77268 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77270 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77271 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77272 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77273 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77274 DB	'invalid decoded scanline length', 00H
$SG77277 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77278 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77279 DB	'outofmem', 00H
	ORG $+7
$SG77283 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77284 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77285 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77286 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77287 DB	'corrupt', 00H
$SG77289 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77290 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77291 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77292 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77293 DB	'corrupt', 00H
$SG77295 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG77296 DB	'W:\cpp\void\rx\stb_image.h', 00H
	ORG $+5
$SG77324 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG77403 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG77456 DB	'too large', 00H
	ORG $+6
$SG77458 DB	'too large', 00H
	ORG $+6
$SG77461 DB	'too large', 00H
	ORG $+6
$SG77463 DB	'outofmem', 00H
	ORG $+7
$SG77525 DB	'max value > 65535', 00H
	ORG $+6
$SG77554 DB	'unknown image type', 00H
	ORG $+5
$SG77575 DB	'can''t fopen', 00H
	ORG $+4
$SG77595 DB	'can''t fopen', 00H
$SG81184 DB	'IHDR', 00H
	ORG $+7
stbir__srgb_uchar_to_linear_float DD 000000000r	; 0
	DD	0399f6230r			; 0.000304
	DD	03a1f1f15r			; 0.000607
	DD	03a6ed02dr			; 0.000911
	DD	03a9f1f15r			; 0.001214
	DD	03ac6f7a1r			; 0.001518
	DD	03aeeae9fr			; 0.001821
	DD	03b0b4396r			; 0.002125
	DD	03b1f1f15r			; 0.002428
	DD	03b330b5br			; 0.002732
	DD	03b46e6dar			; 0.003035
	DD	03b5b5958r			; 0.003347
	DD	03b70f9d3r			; 0.003677
	DD	03b83e426r			; 0.004025
	DD	03b8fe261r			; 0.004391
	DD	03b9c8861r			; 0.004777
	DD	03ba9cdc4r			; 0.005182
	DD	03bb7aa26r			; 0.005605
	DD	03bc636b1r			; 0.006049
	DD	03bd5629er			; 0.006512
	DD	03be53650r			; 0.006995
	DD	03bf5ba2cr			; 0.007499
	DD	03c0372e7r			; 0.008023
	DD	03c0c60ccr			; 0.008568
	DD	03c15a6c6r			; 0.009134
	DD	03c1f44d4r			; 0.009721
	DD	03c293f29r			; 0.01033
	DD	03c339192r			; 0.01096
	DD	03c3e4042r			; 0.011612
	DD	03c494b38r			; 0.012286
	DD	03c54b6a6r			; 0.012983
	DD	03c607e5ar			; 0.013702
	DD	03c6ca687r			; 0.014444
	DD	03c792f2br			; 0.015209
	DD	03c830a0br			; 0.015996
	DD	03c89aed5r			; 0.016807
	DD	03c9085f5r			; 0.017642
	DD	03c978d50r			; 0.0185
	DD	03c9ec700r			; 0.019382
	DD	03ca6351er			; 0.020289
	DD	03cadd378r			; 0.021219
	DD	03cb5a640r			; 0.022174
	DD	03cbdab5cr			; 0.023153
	DD	03cc5e6ffr			; 0.024158
	DD	03cce54f8r			; 0.025187
	DD	03cd6f75er			; 0.026241
	DD	03cdfd04ar			; 0.027321
	DD	03ce8dda5r			; 0.028426
	DD	03cf22186r			; 0.029557
	DD	03cfb99d4r			; 0.030713
	DD	03d02a561r			; 0.031896
	DD	03d07991cr			; 0.033105
	DD	03d0ca81ar			; 0.03434
	DD	03d11d25br			; 0.035601
	DD	03d1718ecr			; 0.036889
	DD	03d1c7bccr			; 0.038204
	DD	03d21fafdr			; 0.039546
	DD	03d27967dr			; 0.040915
	DD	03d2d4e4dr			; 0.042311
	DD	03d332379r			; 0.043735
	DD	03d3914f5r			; 0.045186
	DD	03d3f23cdr			; 0.046665
	DD	03d455001r			; 0.048172
	DD	03d4b9991r			; 0.049707
	DD	03d51ff71r			; 0.051269
	DD	03d5884c7r			; 0.052861
	DD	03d5f266cr			; 0.05448
	DD	03d65e679r			; 0.056128
	DD	03d6cc4f0r			; 0.057805
	DD	03d73c1cer			; 0.059511
	DD	03d7add16r			; 0.061246
	DD	03d810b63r			; 0.06301
	DD	03d84b76fr			; 0.064803
	DD	03d887336r			; 0.066626
	DD	03d8c3e32r			; 0.068478
	DD	03d9018e7r			; 0.07036
	DD	03d940358r			; 0.072272
	DD	03d97fd82r			; 0.074214
	DD	03d9c06e2r			; 0.076185
	DD	03da02081r			; 0.078187
	DD	03da44a62r			; 0.08022
	DD	03da883fdr			; 0.082283
	DD	03daccd53r			; 0.084376
	DD	03db126e9r			; 0.0865
	DD	03db59147r			; 0.088656
	DD	03dba0b5fr			; 0.090842
	DD	03dbe95b8r			; 0.093059
	DD	03dc33051r			; 0.095307
	DD	03dc7dbb1r			; 0.097587
	DD	03dcc97d9r			; 0.099899
	DD	03dd16441r			; 0.102242
	DD	03dd640ear			; 0.104616
	DD	03ddb2ee0r			; 0.107023
	DD	03de02d9dr			; 0.109462
	DD	03de53c9br			; 0.111932
	DD	03dea5ce6r			; 0.114435
	DD	03def8e7er			; 0.116971
	DD	03df4d057r			; 0.119538
	DD	03dfa2403r			; 0.122139
	DD	03dff8876r			; 0.124772
	DD	03e027f1br			; 0.127438
	DD	03e05425fr			; 0.130136
	DD	03e080e8dr			; 0.132868
	DD	03e0ae361r			; 0.135633
	DD	03e0dc11er			; 0.138432
	DD	03e10a73fr			; 0.141263
	DD	03e13964ar			; 0.144128
	DD	03e168e3fr			; 0.147027
	DD	03e198f1dr			; 0.14996
	DD	03e1c98a2r			; 0.152926
	DD	03e1fab11r			; 0.155926
	DD	03e22c6acr			; 0.158961
	DD	03e25eaeer			; 0.162029
	DD	03e29185dr			; 0.165132
	DD	03e2c4eb5r			; 0.168269
	DD	03e2f8e3br			; 0.171441
	DD	03e32d6aar			; 0.174647
	DD	03e362846r			; 0.177888
	DD	03e39830er			; 0.181164
	DD	03e3ce704r			; 0.184475
	DD	03e405426r			; 0.187821
	DD	03e43ca75r			; 0.191202
	DD	03e4749f1r			; 0.194618
	DD	03e4ad29ar			; 0.198069
	DD	03e4e64b2r			; 0.201556
	DD	03e52003br			; 0.205079
	DD	03e55a4f0r			; 0.208637
	DD	03e595315r			; 0.212231
	DD	03e5d0aaar			; 0.215861
	DD	03e60cb6cr			; 0.219526
	DD	03e6495e1r			; 0.223228
	DD	03e6869c6r			; 0.226966
	DD	03e6c471br			; 0.23074
	DD	03e702e23r			; 0.234551
	DD	03e741e9br			; 0.238398
	DD	03e781883r			; 0.242281
	DD	03e7c1c1dr			; 0.246201
	DD	03e8014b6r			; 0.250158
	DD	03e822036r			; 0.254152
	DD	03e843090r			; 0.258183
	DD	03e8645c3r			; 0.262251
	DD	03e885fd0r			; 0.266356
	DD	03e8a7eb7r			; 0.270498
	DD	03e8ca277r			; 0.274677
	DD	03e8ecb32r			; 0.278894
	DD	03e90f8e8r			; 0.283149
	DD	03e932b77r			; 0.287441
	DD	03e956302r			; 0.291771
	DD	03e979f66r			; 0.296138
	DD	03e99e0e7r			; 0.300544
	DD	03e9c2742r			; 0.304987
	DD	03e9e72b9r			; 0.309469
	DD	03ea0c32br			; 0.313989
	DD	03ea31898r			; 0.318547
	DD	03ea57300r			; 0.323143
	DD	03ea7d285r			; 0.327778
	DD	03eaa3726r			; 0.332452
	DD	03eaca0c3r			; 0.337164
	DD	03eaf0f5ar			; 0.341914
	DD	03eb18330r			; 0.346704
	DD	03eb3fc22r			; 0.351533
	DD	03eb67a10r			; 0.3564
	DD	03eb8fd3br			; 0.361307
	DD	03ebb8583r			; 0.366253
	DD	03ebe12e8r			; 0.371238
	DD	03ec0a56ar			; 0.376262
	DD	03ec33d29r			; 0.381326
	DD	03ec5da27r			; 0.38643
	DD	03ec87c42r			; 0.391573
	DD	03ecb2379r			; 0.396755
	DD	03ecdd00fr			; 0.401978
	DD	03ed081c3r			; 0.40724
	DD	03ed338d6r			; 0.412543
	DD	03ed5f506r			; 0.417885
	DD	03ed8b695r			; 0.423268
	DD	03edb7d63r			; 0.428691
	DD	03ede496fr			; 0.434154
	DD	03ee11ab9r			; 0.439657
	DD	03ee3f163r			; 0.445201
	DD	03ee6cd6cr			; 0.450786
	DD	03ee9aeb4r			; 0.456411
	DD	03eec955br			; 0.462077
	DD	03eef8162r			; 0.467784
	DD	03ef272c9r			; 0.473532
	DD	03ef5696er			; 0.47932
	DD	03ef86595r			; 0.48515
	DD	03efb671br			; 0.491021
	DD	03efe6e01r			; 0.496933
	DD	03f00bd34r			; 0.502887
	DD	03f024606r			; 0.508881
	DD	03f03d1abr			; 0.514918
	DD	03f055ffer			; 0.520996
	DD	03f06f102r			; 0.527115
	DD	03f0884c7r			; 0.533276
	DD	03f0a1b5cr			; 0.53948
	DD	03f0bb4a2r			; 0.545725
	DD	03f0d5098r			; 0.552011
	DD	03f0eef5fr			; 0.55834
	DD	03f1090f7r			; 0.564712
	DD	03f12353fr			; 0.571125
	DD	03f13dc59r			; 0.577581
	DD	03f158623r			; 0.584078
	DD	03f1732cfr			; 0.590619
	DD	03f18e23br			; 0.597202
	DD	03f1a9468r			; 0.603827
	DD	03f1c4977r			; 0.610496
	DD	03f1e0147r			; 0.617207
	DD	03f1fbbd8r			; 0.62396
	DD	03f21794ar			; 0.630757
	DD	03f23398fr			; 0.637597
	DD	03f24fca4r			; 0.64448
	DD	03f26c28br			; 0.651406
	DD	03f288b44r			; 0.658375
	DD	03f2a56cdr			; 0.665387
	DD	03f2c2539r			; 0.672443
	DD	03f2df688r			; 0.679543
	DD	03f2fca97r			; 0.686685
	DD	03f31a198r			; 0.693872
	DD	03f337b6cr			; 0.701102
	DD	03f355821r			; 0.708376
	DD	03f3737b9r			; 0.715694
	DD	03f391a22r			; 0.723055
	DD	03f3aff7er			; 0.730461
	DD	03f3ce7bcr			; 0.737911
	DD	03f3ed2ccr			; 0.745404
	DD	03f40c0cfr			; 0.752942
	DD	03f42b1c4r			; 0.760525
	DD	03f44a58br			; 0.768151
	DD	03f469c45r			; 0.775822
	DD	03f4895f2r			; 0.783538
	DD	03f4a9281r			; 0.791298
	DD	03f4c9204r			; 0.799103
	DD	03f4e9468r			; 0.806952
	DD	03f5099d0r			; 0.814847
	DD	03f52a21ar			; 0.822786
	DD	03f54ad58r			; 0.83077
	DD	03f56bb88r			; 0.838799
	DD	03f58ccabr			; 0.846873
	DD	03f5ae0d2r			; 0.854993
	DD	03f5cf7dbr			; 0.863157
	DD	03f5f11e8r			; 0.871367
	DD	03f612ee8r			; 0.879622
	DD	03f634eecr			; 0.887923
	DD	03f6571e3r			; 0.896269
	DD	03f6797ddr			; 0.904661
	DD	03f69c0dbr			; 0.913099
	DD	03f6becccr			; 0.921582
	DD	03f6e1bc1r			; 0.930111
	DD	03f704dbar			; 0.938686
	DD	03f7282b6r			; 0.947307
	DD	03f74bab6r			; 0.955974
	DD	03f76f5a9r			; 0.964686
	DD	03f7933b1r			; 0.973445
	DD	03f7b74cdr			; 0.982251
	DD	03f7db8dcr			; 0.991102
	DD	03f800000r			; 1
$SG78121 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78122 DB	's', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG78133 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78134 DB	's', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H
	ORG $+2
stbir__filter_info_table DQ 0000000000000000H
	DQ	FLAT:stbir__support_zero
	DQ	FLAT:stbir__filter_trapezoid
	DQ	FLAT:stbir__support_trapezoid
	DQ	FLAT:stbir__filter_triangle
	DQ	FLAT:stbir__support_one
	DQ	FLAT:stbir__filter_cubic
	DQ	FLAT:stbir__support_two
	DQ	FLAT:stbir__filter_catmullrom
	DQ	FLAT:stbir__support_two
	DQ	FLAT:stbir__filter_mitchell
	DQ	FLAT:stbir__support_two
$SG78219 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78220 DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG78221 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81185 DB	'IHDR', 00H
	ORG $+7
$SG78222 DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, ')', 00H, ')', 00H, '/', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '('
	DB	00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H
	DB	'_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ')'
	DB	00H, '[', 00H, '0', 00H, ']', 00H, ')', 00H, ')', 00H, 00H, 00H
$SG78310 DB	'Unimplemented edge type', 00H
$SG78311 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78312 DB	'!', 00H, '"', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'm', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'e', 00H, 'd', 00H, 'g', 00H
	DB	'e', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H
	ORG $+2
$SG78409 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81186 DB	'IHDR', 00H
	ORG $+7
$SG78410 DB	'i', 00H, 'n', 00H, '_', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, '_', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, 'i', 00H, 'n', 00H, '_', 00H
	DB	'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '_', 00H, 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')'
	DB	00H, 'c', 00H, 'e', 00H, 'i', 00H, 'l', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '[', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ']', 00H, '.', 00H, 's'
	DB	00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'(', 00H, '1', 00H, '/', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'l'
	DB	00H, 'e', 00H, ')', 00H, ' ', 00H, '*', 00H, ' ', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG78415 DB	't', 00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG78411 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81187 DB	'IHDR', 00H
	ORG $+7
$SG78412 DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'b', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'b'
	DB	00H, 'u', 00H, 't', 00H, 'o', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'n', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG78417 DB	't', 00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, '1', 00H, '.', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG78414 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81188 DB	'IDAT', 00H
	ORG $+7
$SG78416 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81189 DB	'IDAT', 00H
	ORG $+7
$SG78450 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81190 DB	'IDAT', 00H
	ORG $+7
$SG78451 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, '_', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e'
	DB	00H, 'l', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H, 'i', 00H, 'n'
	DB	00H, 't', 00H, ')', 00H, 'c', 00H, 'e', 00H, 'i', 00H, 'l', 00H
	DB	'(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '[', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ']'
	DB	00H, '.', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, '(', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'l'
	DB	00H, 'e', 00H, '_', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, ')', 00H, ' ', 00H, '*', 00H, ' ', 00H, '2', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG78729 DB	'Unknown type/colorspace/channels combination.', 00H
	ORG $+2
$SG78833 DB	'n', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'n', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78452 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81191 DB	'IDAT', 00H
	ORG $+7
$SG78453 DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'b', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'b'
	DB	00H, 'u', 00H, 't', 00H, 'o', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'n', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG78844 DB	'c', 00H, 'o', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78509 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78510 DB	't', 00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, '.', 00H, '9', 00H, 'f', 00H, 00H
	DB	00H
	ORG $+6
$SG78847 DB	'c', 00H, 'o', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78511 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG78512 DB	't', 00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '1', 00H, '.', 00H, '1', 00H, 'f', 00H, 00H
	DB	00H
	ORG $+6
$SG78850 DB	'c', 00H, 'o', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78730 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81194 DB	'IEND', 00H
	ORG $+7
$SG78731 DB	'!', 00H, '"', 00H, 'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '/', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H
	DB	'r', 00H, 's', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '/'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'l', 00H, 's', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'b'
	DB	00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, '.', 00H, '"', 00H, 00H, 00H
	ORG $+6
$SG78853 DB	'c', 00H, 'o', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78757 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81195 DB	'IEND', 00H
	ORG $+7
$SG78758 DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r'
	DB	00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'b'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 00H, 00H
	ORG $+6
$SG78856 DB	'c', 00H, 'o', 00H, 'e', 00H, 'f', 00H, 'f', 00H, 'i', 00H
	DB	'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG78832 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81196 DB	'IEND', 00H
	ORG $+7
$SG78834 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG81197 DB	'IEND', 00H
	ORG $+7
$SG78835 DB	'n', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'p', 00H, 'i'
	DB	00H, 'x', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'm', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H
$SG82658 DB	'typ1', 00H
	ORG $+7
$SG78836 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82659 DB	'typ1', 00H
	ORG $+7
$SG78837 DB	'n', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'p', 00H, 'i'
	DB	00H, 'x', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'm', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H
$SG82660 DB	'typ1', 00H
	ORG $+7
$SG78838 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82661 DB	'typ1', 00H
	ORG $+7
$SG78839 DB	'n', 00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'w', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>'
	DB	00H, 'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'p', 00H
	DB	'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'm', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG78840 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82663 DB	'OTTO', 00H
	ORG $+7
$SG78841 DB	'n', 00H, '1', 00H, ' ', 00H, '<', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 'w', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>'
	DB	00H, 'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'p', 00H
	DB	'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'm', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG78843 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82664 DB	'OTTO', 00H
	ORG $+7
$SG78846 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82665 DB	'OTTO', 00H
	ORG $+7
$SG78849 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82666 DB	'OTTO', 00H
	ORG $+7
$SG78852 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82669 DB	'true', 00H
	ORG $+7
$SG78855 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82670 DB	'true', 00H
	ORG $+7
$SG78951 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82671 DB	'true', 00H
	ORG $+7
$SG78952 DB	'!', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, '_', 00H, 'u', 00H
	DB	'p', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79155 DB	'Unknown type/colorspace/channels combination.', 00H
	ORG $+2
$SG79478 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'a'
	DB	00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H
	ORG $+2
$SG79156 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82672 DB	'true', 00H
	ORG $+7
$SG79157 DB	'!', 00H, '"', 00H, 'U', 00H, 'n', 00H, 'k', 00H, 'n', 00H
	DB	'o', 00H, 'w', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '/', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H
	DB	'r', 00H, 's', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '/'
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'l', 00H, 's', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'b'
	DB	00H, 'i', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, '.', 00H, '"', 00H, 00H, 00H
	ORG $+6
$SG79561 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l'
	DB	00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
$SG79251 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82698 DB	'ttcf', 00H
	ORG $+7
$SG79252 DB	's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H
	DB	'_', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'h', 00H, 'e'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, '_', 00H, 'u', 00H
	DB	'p', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79579 DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'm', 00H, 'e', 00H
	DB	'm', 00H, 00H, 00H
$SG79644 DB	'stbir__resize_arbitrary', 00H
$SG79316 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82699 DB	'ttcf', 00H
	ORG $+7
$SG79317 DB	'!', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'h'
	DB	00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, '_', 00H
	DB	'u', 00H, 'p', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '(', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, ')', 00H, 00H, 00H
$SG82700 DB	'ttcf', 00H
	ORG $+7
$SG79344 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82701 DB	'ttcf', 00H
	ORG $+7
$SG79345 DB	's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H
	DB	'_', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'h', 00H, 'e'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, '_', 00H, 'u', 00H
	DB	'p', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79645 DB	'W:\cpp\void\rx\stb_image_resize.h', 00H
	ORG $+6
$SG79346 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82711 DB	'ttcf', 00H
	ORG $+7
$SG79347 DB	'i', 00H, 'n', 00H, '_', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, '_', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'l'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '-', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, '_', 00H, 'n', 00H, 'u', 00H, 'm', 00H
	DB	'_', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H
$SG79402 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82712 DB	'ttcf', 00H
	ORG $+7
$SG79403 DB	'!', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H
	DB	'_', 00H, '_', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'h'
	DB	00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, '_', 00H
	DB	'u', 00H, 'p', 00H, 's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '(', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, ')', 00H, 00H, 00H
$SG82713 DB	'ttcf', 00H
	ORG $+7
$SG79404 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82714 DB	'ttcf', 00H
	ORG $+7
$SG79405 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, '_', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '-', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'f', 00H, 'i'
	DB	00H, 'r', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H, 'c', 00H
	DB	'a', 00H, 'n', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, '+', 00H, ' ', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'n', 00H
	DB	'u', 00H, 'm', 00H, '_', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG82738 DB	'SVG ', 00H
	ORG $+7
$SG79473 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG79474 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+6
$SG79647 DB	'stbir__resize_arbitrary', 00H
$SG79475 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82772 DB	'cmap', 00H
	ORG $+7
$SG79476 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '(', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i'
	DB	00H, 'r', 00H, '_', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, ')', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, ')', 00H, '[', 00H, '0', 00H
	DB	']', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79477 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82773 DB	'loca', 00H
	ORG $+7
$SG79479 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82774 DB	'head', 00H
	ORG $+7
$SG79480 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'a'
	DB	00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H
	DB	'(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ')', 00H
	DB	')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ')', 00H, '[', 00H, '0', 00H, ']', 00H, ')', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG79648 DB	'W:\cpp\void\rx\stb_image_resize.h', 00H
	ORG $+6
$SG79560 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82775 DB	'glyf', 00H
	ORG $+7
$SG79562 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
	ORG $+4
$SG79563 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l'
	DB	00H, 's', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '6', 00H
	DB	'4', 00H, 00H, 00H
	ORG $+6
$SG80392 DB	'11 4 22 44 44 22 444444', 00H
$SG79566 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82776 DB	'hhea', 00H
	ORG $+7
$SG79567 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'h', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '(', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i'
	DB	00H, 'r', 00H, '_', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f'
	DB	00H, 'o', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, ')', 00H, ')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, ')', 00H, '[', 00H, '0', 00H
	DB	']', 00H, ')', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG79568 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82777 DB	'hmtx', 00H
	ORG $+7
$SG79569 DB	'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'a'
	DB	00H, 'l', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H
	DB	'(', 00H, 's', 00H, 't', 00H, 'b', 00H, 'i', 00H, 'r', 00H, '_'
	DB	00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '_'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ')', 00H
	DB	')', 00H, '/', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'b', 00H
	DB	'i', 00H, 'r', 00H, '_', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, ')', 00H, '[', 00H, '0', 00H, ']', 00H, ')', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG80393 DB	'11 4 22 44 44 22 444444 4444 4 444 444 444 444', 00H
	ORG $+1
$SG80473 DB	'111 221 2222 11', 00H
$SG80546 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'+', 00H, '1', 00H, '2', 00H, '8', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H, 00H
	ORG $+4
$SG79575 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82778 DB	'kern', 00H
	ORG $+7
$SG79576 DB	'a', 00H, 'l', 00H, 'p', 00H, 'h', 00H, 'a', 00H, '_', 00H
	DB	'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'p', 00H, 'h'
	DB	00H, 'a', 00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'n', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+6
$SG79578 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82779 DB	'GPOS', 00H
	ORG $+7
$SG79581 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82785 DB	'CFF ', 00H
	ORG $+7
$SG79582 DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'm', 00H, 'e', 00H
	DB	'm', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_'
	DB	00H, 'i', 00H, 'n', 00H, '_', 00H, 'b', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '_', 00H
	DB	'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+6
$SG80474 DB	'111 221 2222 11', 00H
$SG80644 DB	'stbi_write_hdr_core', 00H
	ORG $+4
$SG79586 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG82791 DB	'maxp', 00H
	ORG $+7
$SG79587 DB	'(', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '*', 00H, ')', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '*', 00H, ')', 00H, 'i', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, '-', 00H, '>', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_'
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'p', 00H, 'm', 00H, 'e', 00H, 'm', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'b', 00H, 'y'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG79588 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H
$SG83755 DB	'OS/2', 00H
	ORG $+7
$SG79589 DB	'(', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'r', 00H, '*', 00H, ')', 00H, '(', 00H, '('
	DB	00H, '(', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a'
	DB	00H, 'r', 00H, '*', 00H, ')', 00H, 'i', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, '-', 00H, '>', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'r', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	')', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'm', 00H, 'e'
	DB	00H, 'm', 00H, ' ', 00H, '+', 00H, ' ', 00H, 't', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 'm', 00H, 'e', 00H, 'm', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	'_', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, 00H
	DB	00H
$SG85818 DB	'name', 00H
	ORG $+7
$SG80231 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
$SG80560 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '8'
	DB	00H, 00H, 00H
$SG85881 DB	'head', 00H
	ORG $+7
$SG80545 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
$SG80645 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG80559 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
$SG80647 DB	'EXPOSURE=          1.0000000000000', 0aH, 0aH, '-Y %d +X'
	DB	' %d', 0aH, 00H
	ORG $+7
$SG80646 DB	'#?RADIANCE', 0aH, '# Written by stb_image_write.h', 0aH, 'F'
	DB	'ORMAT=32-bit_rle_rgbe', 0aH, 00H
	ORG $+6
$SG80648 DB	'stbi_write_hdr_core', 00H
	ORG $+4
$SG80649 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG80703 DB	'stbiw__sbgrowf', 00H
	ORG $+1
$SG80704 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG80705 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
?lengthc@?1??stbi_zlib_compress@@9@9 DW 03H		; `stbi_zlib_compress'::`2'::lengthc
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	0103H
	ORG $+4
?lengtheb@?1??stbi_zlib_compress@@9@9 DB 00H		; `stbi_zlib_compress'::`2'::lengtheb
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	00H
	ORG $+3
?distc@?1??stbi_zlib_compress@@9@9 DW 01H		; `stbi_zlib_compress'::`2'::distc
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	08000H
	ORG $+2
?disteb@?1??stbi_zlib_compress@@9@9 DB 00H		; `stbi_zlib_compress'::`2'::disteb
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	ORG $+2
$SG80952 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG80953 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG80965 DB	'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, '7', 00H, '6', 00H, '7', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '2', 00H, '5', 00H, '8', 00H, 00H
	DB	00H
	ORG $+4
$SG80964 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
$SG80968 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG80969 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG80970 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG80971 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
?mapping@?1??stbiw__encode_png_line@@9@9 DD 00H		; `stbiw__encode_png_line'::`2'::mapping
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	ORG $+4
?crc_table@?1??stbiw__crc32@@9@9 DD 00H			; `stbiw__crc32'::`2'::crc_table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
?firstmap@?1??stbiw__encode_png_line@@9@9 DD 00H	; `stbiw__encode_png_line'::`2'::firstmap
	DD	01H
	DD	00H
	DD	05H
	DD	06H
	ORG $+4
$SG81164 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81165 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81167 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81168 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81170 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81171 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81176 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81177 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81178 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81179 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81181 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81182 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81192 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG81193 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81199 DB	'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '*', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG81198 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'w'
	DB	00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H
	ORG $+6
$SG81221 DB	'stbi_write_png', 00H
	ORG $+1
$SG81222 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81223 DB	'stbi_write_png', 00H
	ORG $+1
$SG81224 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG81245 DB	'stbi_write_png_to_func', 00H
	ORG $+1
$SG81246 DB	'W:\cpp\void\rx\stb_image_write.h', 00H
	ORG $+7
$SG82490 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82491 DB	'!', 00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'b', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG82511 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82512 DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG82524 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82525 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG82548 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82549 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG82566 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82578 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82579 DB	'b', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'2', 00H, '8', 00H, 00H, 00H
	ORG $+6
$SG82632 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82633 DB	'i', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
$SG82634 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82635 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG82852 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82870 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82907 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG82908 DB	'!', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG83096 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83097 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83126 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83134 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83135 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83138 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83139 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83141 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83142 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83145 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83146 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83147 DB	'stbtt__GetGlyphShapeTT', 00H
	ORG $+1
$SG83148 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83451 DB	'stbtt__GetGlyphShapeT2', 00H
	ORG $+1
$SG83452 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83454 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG83455 DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG83789 DB	'stbtt_FreeShape', 00H
$SG83790 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83951 DB	'stbtt__hheap_alloc', 00H
	ORG $+5
$SG83952 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG83971 DB	'stbtt__hheap_cleanup', 00H
	ORG $+3
$SG83972 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84007 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84008 DB	'z', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '(', 00H
	DB	'(', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '*'
	DB	00H, ')', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG84043 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84044 DB	'y', 00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H
	DB	'1', 00H, 00H, 00H
$SG84045 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84046 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG84053 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84054 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG84057 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84058 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG84061 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84062 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG84065 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84066 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG84067 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84068 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+6
$SG84073 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84074 DB	'x', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+6
$SG84087 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84088 DB	't', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG84089 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84090 DB	'b', 00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG84182 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84183 DB	'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG84189 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
$SG85883 DB	'name', 00H
	ORG $+7
$SG84190 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 00H, 00H
$SG84199 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84200 DB	'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG84202 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84203 DB	'd', 00H, 'y', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG84204 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84205 DB	'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG84208 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84209 DB	'f', 00H, 'a', 00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG84210 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84211 DB	's', 00H, 'y', 00H, '1', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'y', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, '-', 00H, '0', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG84283 DB	'stbtt__rasterize_sorted_edges', 00H
	ORG $+2
$SG84284 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84287 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84288 DB	'z', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+6
$SG84293 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84294 DB	'z', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, '_', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H
	DB	00H, 00H
$SG84298 DB	'stbtt__rasterize_sorted_edges', 00H
	ORG $+2
$SG84299 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84407 DB	'stbtt__rasterize', 00H
	ORG $+7
$SG84408 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84412 DB	'stbtt__rasterize', 00H
	ORG $+7
$SG84413 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84549 DB	'stbtt_FlattenCurves', 00H
	ORG $+4
$SG84550 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84553 DB	'stbtt_FlattenCurves', 00H
	ORG $+4
$SG84554 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84561 DB	'stbtt_FlattenCurves', 00H
	ORG $+4
$SG84562 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84563 DB	'stbtt_FlattenCurves', 00H
	ORG $+4
$SG84564 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84596 DB	'stbtt_Rasterize', 00H
$SG84597 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84598 DB	'stbtt_Rasterize', 00H
$SG84599 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84605 DB	'stbtt_FreeBitmap', 00H
	ORG $+7
$SG84606 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84641 DB	'stbtt_GetGlyphBitmapSubpixel', 00H
	ORG $+3
$SG84642 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84648 DB	'stbtt_GetGlyphBitmapSubpixel', 00H
	ORG $+3
$SG84649 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84651 DB	'stbtt_GetGlyphBitmapSubpixel', 00H
	ORG $+3
$SG84652 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84697 DB	'stbtt_MakeGlyphBitmapSubpixel', 00H
	ORG $+2
$SG84698 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84873 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84874 DB	'x', 00H, '+', 00H, 'g', 00H, 'w', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'w', 00H, 00H, 00H
	ORG $+4
$SG84875 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84876 DB	'y', 00H, '+', 00H, 'g', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG84976 DB	'stbtt_PackBegin', 00H
$SG84977 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84978 DB	'stbtt_PackBegin', 00H
$SG84979 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84983 DB	'stbtt_PackBegin', 00H
$SG84984 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84986 DB	'stbtt_PackBegin', 00H
$SG84987 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84992 DB	'stbtt_PackEnd', 00H
	ORG $+2
$SG84993 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG84994 DB	'stbtt_PackEnd', 00H
	ORG $+2
$SG84995 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85007 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG85008 DB	'h', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG85009 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG85010 DB	'v', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+4
$SG85071 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG85072 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG85126 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG85127 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H
	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG85298 DB	'stbtt_PackFontRanges', 00H
	ORG $+3
$SG85299 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85301 DB	'stbtt_PackFontRanges', 00H
	ORG $+3
$SG85302 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85673 DB	'stbtt_GetGlyphSDF', 00H
	ORG $+6
$SG85674 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85675 DB	'stbtt_GetGlyphSDF', 00H
	ORG $+6
$SG85676 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85686 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'r'
	DB	00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H
	DB	't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG85687 DB	'i', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG85710 DB	'stbtt_GetGlyphSDF', 00H
	ORG $+6
$SG85711 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85712 DB	'stbtt_GetGlyphSDF', 00H
	ORG $+6
$SG85713 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG85740 DB	'stbtt_FreeSDF', 00H
	ORG $+2
$SG85741 DB	'W:\cpp\void\rx\stb_truetype.h', 00H
	ORG $+2
$SG151629 DB	'assertion triggered', 00H
	ORG $+4
$SG151631 DB	'rxload_font', 00H
	ORG $+4
$SG151632 DB	'W:\cpp\void\rx\rx.c', 00H
	ORG $+4
$SG151634 DB	'assertion triggered', 00H
	ORG $+4
$SG151636 DB	'rxload_font', 00H
	ORG $+4
$SG151637 DB	'W:\cpp\void\rx\rx.c', 00H
	ORG $+4
$SG151638 DB	'rxload_font', 00H
	ORG $+4
$SG151639 DB	'W:\cpp\void\rx\rx.c', 00H
	ORG $+4
$SG151640 DB	'rxload_font', 00H
	ORG $+4
$SG151641 DB	'W:\cpp\void\rx\rx.c', 00H
	ORG $+4
$SG151850 DB	'POSITION', 00H
	ORG $+3
$SG151851 DB	'COLOR', 00H
	ORG $+6
$SG151852 DB	'TEXCOORD', 00H
	ORG $+7
$SG151863 DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'V', 00H
	DB	'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG151864 DB	'fonts\UnifrakturCook\UnifrakturCook-Bold.ttf', 00H
	ORG $+3
$SG151865 DB	'Hello, Sailor! %i', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxinit
	DD	018H
	DD	0f2fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxresize_vertexbuffer
	DD	013H
	DD	089H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxresize_indexbuffer
	DD	013H
	DD	089H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxtick
	DD	0eH
	DD	026fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxwindow
	DD	011H
	DD	09fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxdraw_text
	DD	026H
	DD	0264H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxdraw_texture_ex
	DD	029H
	DD	0369H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxload_texture
	DD	026H
	DD	0192H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_texture
	DD	026H
	DD	015aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__compute_crossings_x
	DD	027H
	DD	08fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__v_prefilter
	DD	021H
	DD	04abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__h_prefilter
	DD	021H
	DD	0430H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__sort_edges_quicksort
	DD	01cH
	DD	0440H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__sort_edges_ins_sort
	DD	019H
	DD	0140H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__rasterize_sorted_edges
	DD	027H
	DD	0590H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__run_charstring
	DD	021H
	DD	01316H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt__GetGlyphShapeTT
	DD	021H
	DD	01546H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt_GetGlyphSDF
	DD	028H
	DD	01a7fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_core
	DD	02aH
	DD	01237H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbiw__jpg_processDU
	DD	027H
	DD	06cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_png_to_mem
	DD	026H
	DD	0c19H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_core
	DD	026H
	DD	0231H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbiw__write_hdr_scanline
	DD	021H
	DD	05f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_to_func
	DD	026H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg
	DD	025H
	DD	0a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbir__encode_scanline
	DD	024H
	DD	08f1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbir_resize_subpixel
	DD	024H
	DD	01a9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__pic_load_core
	DD	024H
	DD	0640H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__parse_png_file
	DD	021H
	DD	0e27H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__create_png_image
	DD	027H
	DD	057dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__compute_huffman_codes
	DD	016H
	DD	02fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__zbuild_huffman
	DD	020H
	DD	0368H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:load_jpeg_image
	DD	025H
	DD	01190H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__process_marker
	DD	01aH
	DD	069cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__parse_entropy_coded_data
	DD	016H
	DD	0c3cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__idct_block
	DD	01fH
	DD	0a83H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__loadf_main
	DD	022H
	DD	0167H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_and_postprocess_16bit
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_and_postprocess_8bit
	DD	025H
	DD	01b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__vertical_flip
	DD	024H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_gif_main
	DD	02dH
	DD	0586H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__gif_load
	DD	02dH
	DD	0216H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__pic_info
	DD	022H
	DD	0270H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__hdr_info
	DD	025H
	DD	0203H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__hdr_load
	DD	027H
	DD	0bc3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__bmp_info
	DD	022H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__bmp_load
	DD	027H
	DD	012f4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__cpuid3
	DD	010H
	DD	03dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_malloc
	DD	027H
	DD	012cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize_headerflag
	DD	02cH
	DD	013cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize
	DD	02cH
	DD	0139H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_file
	DD	025H
	DD	08eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_callbacks
	DD	025H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_memory
	DD	024H
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_file
	DD	025H
	DD	06cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file_16
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_gif_from_memory
	DD	024H
	DD	0123H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsnprintf
	DD	024H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsprintfcb
	DD	025H
	DD	02b4eH
	DD	02b50H
	DD	032eeH
voltbl	ENDS
xdata	SEGMENT
$unwind$stbsp_vsprintf DD 011301H
	DD	06213H
$unwind$stbsp_vsnprintf DD 022c19H
	DD	04d011aH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$stbsp_sprintf DD 011801H
	DD	08218H
$unwind$stbsp_snprintf DD 011701H
	DD	06217H
$unwind$stbsp_vsprintfcb DD 022d19H
	DD	08d011bH
	DD	imagerel __GSHandlerCheck
	DD	0450H
$unwind$stbsp__real_to_str DD 021b01H
	DD	017011bH
$unwind$stbsp__real_to_parts DD 011401H
	DD	04214H
$unwind$stbsp__strlen_limited DD 010d01H
	DD	0220dH
$unwind$stbsp__clamp_callback DD 011301H
	DD	06213H
$unwind$stbsp__count_clamp_callback DD 011301H
	DD	02213H
$unwind$stbsp__raise_to_power10 DD 021c01H
	DD	035011cH
$unwind$ccuserallocator_ DD 031501H
	DD	070118215H
	DD	06010H
$unwind$cccaller DD 031901H
	DD	070154219H
	DD	06014H
$unwind$ccformatvex DD 011701H
	DD	04217H
$unwind$ccformatv DD 010e01H
	DD	0420eH
$unwind$ccformatex DD 011701H
	DD	06217H
$unwind$ccformat DD 011801H
	DD	06218H
$unwind$ccopenfile DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$ccrealfile DD 010901H
	DD	02209H
$unwind$ccclosefile DD 010901H
	DD	04209H
$unwind$ccpullfile DD 041701H
	DD	01b0117H
	DD	0600f7010H
$unwind$ccfilesize DD 010901H
	DD	04209H
$unwind$ccdebug_ DD 030701H
	DD	07003e207H
	DD	06002H
$unwind$ccfilename DD 010901H
	DD	02209H
$unwind$cctrace_ DD 011801H
	DD	0c218H
$unwind$ccsentry_block_check DD 041301H
	DD	0710113H
	DD	0600b700cH
$unwind$ccout DD 010901H
	DD	04209H
$unwind$stbi_load_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_load_gif_from_memory DD 022c19H
	DD	029011aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stbi_load_16_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16 DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file_16 DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_loadf_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf DD 011801H
	DD	0a218H
$unwind$stbi_loadf_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_hdr_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr DD 010901H
	DD	06209H
$unwind$stbi_is_hdr_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_image_free DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$stbi_info_from_memory DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info_from_callbacks DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info DD 011801H
	DD	06218H
$unwind$stbi_info_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_16_bit DD 010901H
	DD	06209H
$unwind$stbi_is_16_bit_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_zlib_decode_malloc_guesssize DD 043419H
	DD	02130122H
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_malloc_guesssize_headerflag DD 043419H
	DD	02130122H
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_malloc DD 011201H
	DD	04212H
$unwind$stbi_zlib_decode_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi_zlib_decode_noheader_malloc DD 042f19H
	DD	0213011dH
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_noheader_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi__cpuid3 DD 021519H
	DD	030023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$stbi__sse2_available DD 010401H
	DD	06204H
$unwind$stbi__refill_buffer DD 010901H
	DD	06209H
$unwind$stbi__start_mem DD 011301H
	DD	02213H
$unwind$stbi__start_callbacks DD 031501H
	DD	070116215H
	DD	06010H
$unwind$stbi__stdio_read DD 011301H
	DD	04213H
$unwind$stbi__stdio_skip DD 010d01H
	DD	0620dH
$unwind$stbi__stdio_eof DD 010901H
	DD	06209H
$unwind$stbi__start_file DD 010e01H
	DD	0420eH
$unwind$stbi__jpeg_test DD 040e01H
	DD	011010eH
	DD	060067007H
$unwind$stbi__jpeg_load DD 041d01H
	DD	013011dH
	DD	060157016H
$unwind$stbi__jpeg_info DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$stbi__png_test DD 010901H
	DD	06209H
$unwind$stbi__png_load DD 011801H
	DD	0c218H
$unwind$stbi__png_info DD 011801H
	DD	0a218H
$unwind$stbi__png_is16 DD 010901H
	DD	0a209H
$unwind$stbi__bmp_test DD 010901H
	DD	06209H
$unwind$stbi__bmp_load DD 042f19H
	DD	0cf011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0660H
$unwind$stbi__bmp_info DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$stbi__tga_test DD 010901H
	DD	06209H
$unwind$stbi__tga_load DD 041d01H
	DD	04d011dH
	DD	060157016H
$unwind$stbi__tga_info DD 011801H
	DD	0a218H
$unwind$stbi__psd_test DD 010901H
	DD	06209H
$unwind$stbi__psd_load DD 041d01H
	DD	02d011dH
	DD	060157016H
$unwind$stbi__psd_info DD 011801H
	DD	06218H
$unwind$stbi__psd_is16 DD 010901H
	DD	06209H
$unwind$stbi__hdr_test DD 010901H
	DD	06209H
$unwind$stbi__hdr_load DD 042f19H
	DD	0eb011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0740H
$unwind$stbi__hdr_info DD 022d19H
	DD	089011bH
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$stbi__pic_test DD 010901H
	DD	06209H
$unwind$stbi__pic_load DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$stbi__pic_info DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi__gif_test DD 010901H
	DD	06209H
$unwind$stbi__gif_load DD 043519H
	DD	011310123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	08970H
$unwind$stbi__load_gif_main DD 043519H
	DD	011490123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	08a30H
$unwind$stbi__gif_info DD 011801H
	DD	04218H
$unwind$stbi__pnm_test DD 010901H
	DD	06209H
$unwind$stbi__pnm_load DD 011801H
	DD	0c218H
$unwind$stbi__pnm_info DD 011801H
	DD	06218H
$unwind$stbi__pnm_is16 DD 010901H
	DD	04209H
$unwind$stbi__malloc DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$stbi__addsizes_valid DD 010c01H
	DD	0220cH
$unwind$stbi__mul2sizes_valid DD 010c01H
	DD	0220cH
$unwind$stbi__mad2sizes_valid DD 011101H
	DD	06211H
$unwind$stbi__mad3sizes_valid DD 011601H
	DD	06216H
$unwind$stbi__mad4sizes_valid DD 011601H
	DD	06216H
$unwind$stbi__malloc_mad2 DD 011101H
	DD	04211H
$unwind$stbi__malloc_mad3 DD 011601H
	DD	04216H
$unwind$stbi__malloc_mad4 DD 011601H
	DD	06216H
$unwind$stbi__ldr_to_hdr DD 041c01H
	DD	01d011cH
	DD	060147015H
$unwind$stbi__hdr_to_ldr DD 041c01H
	DD	01d011cH
	DD	060147015H
$unwind$stbi__load_main DD 011801H
	DD	0c218H
$unwind$stbi__convert_16_to_8 DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$stbi__convert_8_to_16 DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$stbi__vertical_flip DD 022c19H
	DD	010f011aH
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$stbi__vertical_flip_slices DD 011701H
	DD	06217H
$unwind$stbi__load_and_postprocess_8bit DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$stbi__load_and_postprocess_16bit DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$stbi__float_postprocess DD 011801H
	DD	06218H
$unwind$stbi__fopen DD 010e01H
	DD	0620eH
$unwind$stbi__loadf_main DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi__get8 DD 010901H
	DD	06209H
$unwind$stbi__at_eof DD 010901H
	DD	06209H
$unwind$stbi__skip DD 010d01H
	DD	0620dH
$unwind$stbi__getn DD 011301H
	DD	06213H
$unwind$stbi__get16be DD 010901H
	DD	06209H
$unwind$stbi__get32be DD 010901H
	DD	06209H
$unwind$stbi__get16le DD 010901H
	DD	06209H
$unwind$stbi__get32le DD 010901H
	DD	06209H
$unwind$stbi__convert_format DD 041c01H
	DD	031011cH
	DD	060147015H
$unwind$stbi__convert_format16 DD 041c01H
	DD	031011cH
	DD	060147015H
$unwind$stbi__build_huffman DD 010e01H
	DD	0820eH
$unwind$stbi__build_fast_ac DD 010e01H
	DD	0620eH
$unwind$stbi__grow_buffer_unsafe DD 010901H
	DD	06209H
$unwind$stbi__jpeg_huff_decode DD 010e01H
	DD	0a20eH
$unwind$stbi__extend_receive DD 010d01H
	DD	0620dH
$unwind$stbi__jpeg_get_bits DD 010d01H
	DD	0620dH
$unwind$stbi__jpeg_get_bit DD 010901H
	DD	06209H
$unwind$stbi__jpeg_decode_block DD 011801H
	DD	0a218H
$unwind$stbi__jpeg_decode_block_prog_dc DD 011801H
	DD	08218H
$unwind$stbi__jpeg_decode_block_prog_ac DD 021b01H
	DD	011011bH
$unwind$stbi__idct_block DD 022719H
	DD	0390115H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$stbi__idct_simd DD 021501H
	DD	014f0115H
$unwind$stbi__get_marker DD 010901H
	DD	06209H
$unwind$stbi__jpeg_reset DD 010901H
	DD	02209H
$unwind$stbi__parse_entropy_coded_data DD 021e19H
	DD	03f010cH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$stbi__jpeg_dequantize DD 010e01H
	DD	0220eH
$unwind$stbi__jpeg_finish DD 010901H
	DD	08209H
$unwind$stbi__process_marker DD 022219H
	DD	01b0110H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$stbi__process_scan_header DD 010901H
	DD	08209H
$unwind$stbi__free_jpeg_components DD 041701H
	DD	0230117H
	DD	0600f7010H
$unwind$stbi__process_frame_header DD 010d01H
	DD	0c20dH
$unwind$stbi__decode_jpeg_header DD 010d01H
	DD	0620dH
$unwind$stbi__decode_jpeg_image DD 010901H
	DD	06209H
$unwind$stbi__resample_row_v_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_h_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_hv_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_hv_2_simd DD 021b01H
	DD	033011bH
$unwind$stbi__resample_row_generic DD 011801H
	DD	02218H
$unwind$stbi__YCbCr_to_RGB_row DD 011801H
	DD	04218H
$unwind$stbi__YCbCr_to_RGB_simd DD 021b01H
	DD	047011bH
$unwind$stbi__setup_jpeg DD 010901H
	DD	04209H
$unwind$stbi__cleanup_jpeg DD 010901H
	DD	04209H
$unwind$stbi__blinn_8x8 DD 010c01H
	DD	0220cH
$unwind$load_jpeg_image DD 022d19H
	DD	03d011bH
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$stbi__jpeg_info_raw DD 011801H
	DD	06218H
$unwind$stbi__bit_reverse DD 010c01H
	DD	0420cH
$unwind$stbi__zbuild_huffman DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$stbi__zeof DD 010901H
	DD	02209H
$unwind$stbi__zget8 DD 010901H
	DD	06209H
$unwind$stbi__fill_bits DD 010901H
	DD	06209H
$unwind$stbi__zreceive DD 010d01H
	DD	0620dH
$unwind$stbi__zhuffman_decode_slowpath DD 010e01H
	DD	0820eH
$unwind$stbi__zhuffman_decode DD 010e01H
	DD	0620eH
$unwind$stbi__zexpand DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$stbi__parse_huffman_block DD 010901H
	DD	08209H
$unwind$stbi__compute_huffman_codes DD 021e19H
	DD	0149010cH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$stbi__parse_uncompressed_block DD 010901H
	DD	06209H
$unwind$stbi__parse_zlib_header DD 010901H
	DD	06209H
$unwind$stbi__parse_zlib DD 010d01H
	DD	0620dH
$unwind$stbi__do_zlib DD 011801H
	DD	04218H
$unwind$stbi__get_chunk_header DD 010901H
	DD	06209H
$unwind$stbi__check_png_header DD 010901H
	DD	06209H
$unwind$stbi__paeth DD 011101H
	DD	06211H
$unwind$stbi__create_png_image_raw DD 021b01H
	DD	01b011bH
$unwind$stbi__create_png_image DD 042f19H
	DD	033011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$stbi__compute_transparency DD 011301H
	DD	08213H
$unwind$stbi__compute_transparency16 DD 011301H
	DD	08213H
$unwind$stbi__expand_png_palette DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$stbi__de_iphone DD 010901H
	DD	0a209H
$unwind$stbi__parse_png_file DD 042919H
	DD	0b70117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	05a0H
$unwind$stbi__do_png DD 041d01H
	DD	023011dH
	DD	060157016H
$unwind$stbi__png_info_raw DD 011801H
	DD	04218H
$unwind$stbi__bmp_test_raw DD 010901H
	DD	06209H
$unwind$stbi__high_bit DD 010801H
	DD	02208H
$unwind$stbi__shiftsigned DD 011101H
	DD	04211H
$unwind$stbi__bmp_parse_header DD 021101H
	DD	0110111H
$unwind$stbi__tga_get_comp DD 011101H
	DD	02211H
$unwind$stbi__tga_read_rgb16 DD 010e01H
	DD	0820eH
$unwind$stbi__psd_decode_rle DD 011301H
	DD	06213H
$unwind$stbi__pic_is4 DD 010e01H
	DD	0620eH
$unwind$stbi__pic_test_core DD 010901H
	DD	06209H
$unwind$stbi__readval DD 011201H
	DD	06212H
$unwind$stbi__copyval DD 011201H
	DD	02212H
$unwind$stbi__pic_load_core DD 022c19H
	DD	01f011aH
	DD	imagerel __GSHandlerCheck
	DD	0e8H
$unwind$stbi__gif_test_raw DD 010901H
	DD	06209H
$unwind$stbi__gif_parse_colortable DD 011801H
	DD	06218H
$unwind$stbi__gif_header DD 011801H
	DD	06218H
$unwind$stbi__gif_info_raw DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$stbi__out_gif_code DD 010e01H
	DD	0820eH
$unwind$stbi__process_gif_raster DD 021101H
	DD	0130111H
$unwind$stbi__gif_load_next DD 021b01H
	DD	013011bH
$unwind$stbi__load_gif_main_outofmem DD 041801H
	DD	0310118H
	DD	060107011H
$unwind$stbi__hdr_test_core DD 010e01H
	DD	0620eH
$unwind$stbi__hdr_gettoken DD 010e01H
	DD	0620eH
$unwind$stbi__hdr_convert DD 011301H
	DD	06213H
$unwind$stbi__pnm_isspace DD 010801H
	DD	02208H
$unwind$stbi__pnm_skip_whitespace DD 010e01H
	DD	0420eH
$unwind$stbi__pnm_isdigit DD 010801H
	DD	02208H
$unwind$stbi__pnm_getinteger DD 010e01H
	DD	0620eH
$unwind$stbi__info_main DD 011801H
	DD	04218H
$unwind$stbi__is_16_main DD 010901H
	DD	04209H
$unwind$stbir_resize_uint8 DD 021a01H
	DD	019011aH
$unwind$stbir_resize_float DD 021a01H
	DD	019011aH
$unwind$stbir_resize_uint8_srgb DD 021a01H
	DD	019011aH
$unwind$stbir_resize_uint8_srgb_edgemode DD 021a01H
	DD	019011aH
$unwind$stbir_resize_uint8_generic DD 021a01H
	DD	019011aH
$unwind$stbir_resize_uint16_generic DD 021a01H
	DD	019011aH
$unwind$stbir_resize_float_generic DD 021a01H
	DD	019011aH
$unwind$stbir_resize DD 021a01H
	DD	019011aH
$unwind$stbir_resize_subpixel DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$stbir_resize_region DD 021a01H
	DD	019011aH
$unwind$stbir__min DD 010c01H
	DD	0220cH
$unwind$stbir__srgb_to_linear DD 010a01H
	DD	0420aH
$unwind$stbir__linear_to_srgb DD 010a01H
	DD	0420aH
$unwind$stbir__linear_to_srgb_uchar DD 010a01H
	DD	0420aH
$unwind$stbir__filter_trapezoid DD 011001H
	DD	06210H
$unwind$stbir__support_trapezoid DD 010a01H
	DD	0420aH
$unwind$stbir__filter_triangle DD 011001H
	DD	04210H
$unwind$stbir__filter_cubic DD 011001H
	DD	04210H
$unwind$stbir__filter_catmullrom DD 011001H
	DD	04210H
$unwind$stbir__filter_mitchell DD 011001H
	DD	04210H
$unwind$stbir__use_upsampling DD 010a01H
	DD	0220aH
$unwind$stbir__use_width_upsampling DD 010901H
	DD	04209H
$unwind$stbir__use_height_upsampling DD 010901H
	DD	04209H
$unwind$stbir__get_filter_pixel_width DD 010e01H
	DD	0420eH
$unwind$stbir__get_filter_pixel_margin DD 010e01H
	DD	0420eH
$unwind$stbir__get_coefficient_width DD 010e01H
	DD	0420eH
$unwind$stbir__get_contributors DD 011801H
	DD	04218H
$unwind$stbir__get_total_horizontal_coefficients DD 010901H
	DD	04209H
$unwind$stbir__get_total_vertical_coefficients DD 010901H
	DD	04209H
$unwind$stbir__get_coefficient DD 011801H
	DD	06218H
$unwind$stbir__edge_wrap_slow DD 011101H
	DD	06211H
$unwind$stbir__edge_wrap DD 011101H
	DD	04211H
$unwind$stbir__calculate_sample_range_upsample DD 011a01H
	DD	0821aH
$unwind$stbir__calculate_sample_range_downsample DD 011a01H
	DD	0821aH
$unwind$stbir__calculate_coefficients_upsample DD 011801H
	DD	08218H
$unwind$stbir__calculate_coefficients_downsample DD 011801H
	DD	06218H
$unwind$stbir__normalize_downsample_coefficients DD 011901H
	DD	0e219H
$unwind$stbir__calculate_filters DD 021c01H
	DD	011011cH
$unwind$stbir__decode_scanline DD 021001H
	DD	0190110H
$unwind$stbir__add_empty_ring_buffer_entry DD 010d01H
	DD	0620dH
$unwind$stbir__resample_horizontal_upsample DD 021101H
	DD	0150111H
$unwind$stbir__resample_horizontal_downsample DD 021101H
	DD	0210111H
$unwind$stbir__decode_and_resample_upsample DD 010d01H
	DD	0420dH
$unwind$stbir__decode_and_resample_downsample DD 010d01H
	DD	0420dH
$unwind$stbir__get_ring_buffer_scanline DD 011701H
	DD	06217H
$unwind$stbir__encode_scanline DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbir__resample_vertical_upsample DD 021001H
	DD	0270110H
$unwind$stbir__resample_vertical_downsample DD 021001H
	DD	0190110H
$unwind$stbir__buffer_loop_upsample DD 010901H
	DD	0c209H
$unwind$stbir__empty_ring_buffer DD 021001H
	DD	0110110H
$unwind$stbir__buffer_loop_downsample DD 010901H
	DD	0e209H
$unwind$stbir__choose_filter DD 011201H
	DD	06212H
$unwind$stbir__calculate_memory DD 010901H
	DD	06209H
$unwind$stbir__resize_allocated DD 011801H
	DD	0c218H
$unwind$stbir__resize_arbitrary DD 041d01H
	DD	045011dH
	DD	060157016H
$unwind$stbi_write_png DD 041c01H
	DD	01b011cH
	DD	060147015H
$unwind$stbi_write_bmp DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_tga DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_hdr DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_jpg DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_png_to_func DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$stbi_write_bmp_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_tga_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_hdr_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_jpg_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi__stdio_write DD 011301H
	DD	04213H
$unwind$stbiw__fopen DD 010e01H
	DD	0620eH
$unwind$stbi__start_write_file DD 010e01H
	DD	0620eH
$unwind$stbi__end_write_file DD 010901H
	DD	04209H
$unwind$stbiw__writefv DD 011301H
	DD	08213H
$unwind$stbiw__writef DD 011801H
	DD	06218H
$unwind$stbiw__write_flush DD 010901H
	DD	04209H
$unwind$stbiw__putc DD 010d01H
	DD	0420dH
$unwind$stbiw__write1 DD 010d01H
	DD	0420dH
$unwind$stbiw__write3 DD 011701H
	DD	06217H
$unwind$stbiw__write_pixel DD 011701H
	DD	08217H
$unwind$stbiw__write_pixels DD 011701H
	DD	0a217H
$unwind$stbiw__outfile DD 011701H
	DD	0c217H
$unwind$stbi_write_bmp_core DD 021a01H
	DD	031011aH
$unwind$stbi_write_tga_core DD 021a01H
	DD	023011aH
$unwind$stbiw__linear_to_rgbe DD 010e01H
	DD	0820eH
$unwind$stbiw__write_run_data DD 011201H
	DD	06212H
$unwind$stbiw__write_dump_data DD 011201H
	DD	06212H
$unwind$stbiw__write_hdr_scanline DD 012619H
	DD	0e217H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi_write_hdr_core DD 042e19H
	DD	037011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$stbiw__sbgrowf DD 041701H
	DD	0130117H
	DD	0600f7010H
$unwind$stbiw__zlib_flushf DD 011301H
	DD	06213H
$unwind$stbiw__zlib_bitrev DD 010c01H
	DD	0220cH
$unwind$stbiw__zlib_countm DD 011301H
	DD	02213H
$unwind$stbiw__zhash DD 010901H
	DD	02209H
$unwind$stbi_zlib_compress DD 041c01H
	DD	047011cH
	DD	060147015H
$unwind$stbiw__crc32 DD 010d01H
	DD	0220dH
$unwind$stbiw__wpcrc DD 010d01H
	DD	0620dH
$unwind$stbiw__paeth DD 011101H
	DD	06211H
$unwind$stbiw__encode_png_line DD 011701H
	DD	0e217H
$unwind$stbi_write_png_to_mem DD 042e19H
	DD	055011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$stbiw__jpg_writeBits DD 011801H
	DD	06218H
$unwind$stbiw__jpg_DCT DD 011801H
	DD	0e218H
$unwind$stbiw__jpg_calcBits DD 010d01H
	DD	0220dH
$unwind$stbiw__jpg_processDU DD 042f19H
	DD	035011dH
	DD	030157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$stbi_write_jpg_core DD 023219H
	DD	029d0120H
	DD	imagerel __GSHandlerCheck
	DD	014d0H
$unwind$stbtt_BakeFontBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_GetBakedQuad DD 011701H
	DD	08217H
$unwind$stbtt_GetScaledFontVMetrics DD 021b01H
	DD	01d011bH
$unwind$stbtt_PackBegin DD 041d01H
	DD	02b011dH
	DD	060157016H
$unwind$stbtt_PackEnd DD 040e01H
	DD	017010eH
	DD	060067007H
$unwind$stbtt_PackFontRange DD 011901H
	DD	0c219H
$unwind$stbtt_PackFontRanges DD 041d01H
	DD	02f011dH
	DD	060157016H
$unwind$stbtt_PackSetOversampling DD 011201H
	DD	04212H
$unwind$stbtt_GetPackedQuad DD 011701H
	DD	08217H
$unwind$stbtt_PackFontRangesGatherRects DD 021b01H
	DD	013011bH
$unwind$stbtt_PackFontRangesPackRects DD 011301H
	DD	04213H
$unwind$stbtt_PackFontRangesRenderIntoRects DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$stbtt_GetNumberOfFonts DD 010901H
	DD	04209H
$unwind$stbtt_GetFontOffsetForIndex DD 010d01H
	DD	0420dH
$unwind$stbtt_InitFont DD 011301H
	DD	04213H
$unwind$stbtt_FindGlyphIndex DD 021001H
	DD	0130110H
$unwind$stbtt_ScaleForPixelHeight DD 010f01H
	DD	0620fH
$unwind$stbtt_ScaleForMappingEmToPixels DD 010f01H
	DD	0620fH
$unwind$stbtt_GetFontVMetrics DD 011801H
	DD	04218H
$unwind$stbtt_GetFontVMetricsOS2 DD 011801H
	DD	06218H
$unwind$stbtt_GetFontBoundingBox DD 011801H
	DD	04218H
$unwind$stbtt_GetCodepointHMetrics DD 011701H
	DD	04217H
$unwind$stbtt_GetCodepointKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetCodepointBox DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphHMetrics DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetGlyphBox DD 011701H
	DD	08217H
$unwind$stbtt_GetKerningTableLength DD 010901H
	DD	06209H
$unwind$stbtt_GetKerningTable DD 011301H
	DD	06213H
$unwind$stbtt_IsGlyphEmpty DD 010d01H
	DD	0820dH
$unwind$stbtt_GetCodepointShape DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphShape DD 011201H
	DD	04212H
$unwind$stbtt_FreeShape DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$stbtt_FindSVGDoc DD 010d01H
	DD	0a20dH
$unwind$stbtt_GetCodepointSVG DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphSVG DD 011201H
	DD	08212H
$unwind$stbtt_FreeBitmap DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$stbtt_GetCodepointBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetCodepointBitmapSubpixel DD 011b01H
	DD	0a21bH
$unwind$stbtt_MakeCodepointBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixel DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter DD 011801H
	DD	0e218H
$unwind$stbtt_GetCodepointBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetCodepointBitmapBoxSubpixel DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetGlyphBitmapSubpixel DD 042001H
	DD	02d0120H
	DD	060187019H
$unwind$stbtt_MakeGlyphBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter DD 011801H
	DD	0a218H
$unwind$stbtt_GetGlyphBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 011901H
	DD	08219H
$unwind$stbtt_Rasterize DD 041e01H
	DD	021011eH
	DD	060167017H
$unwind$stbtt_FreeSDF DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$stbtt_GetGlyphSDF DD 043019H
	DD	061011eH
	DD	060167017H
	DD	imagerel __GSHandlerCheck
	DD	02f0H
$unwind$stbtt_GetCodepointSDF DD 011901H
	DD	0a219H
$unwind$stbtt_FindMatchingFont DD 011301H
	DD	04213H
$unwind$stbtt_CompareUTF8toUTF16_bigendian DD 011701H
	DD	04217H
$unwind$stbtt_GetFontNameString DD 011801H
	DD	0a218H
$unwind$stbtt__buf_get8 DD 010901H
	DD	02209H
$unwind$stbtt__buf_seek DD 010d01H
	DD	0620dH
$unwind$stbtt__buf_skip DD 010d01H
	DD	0420dH
$unwind$stbtt__buf_get DD 010d01H
	DD	0620dH
$unwind$stbtt__new_buf DD 031501H
	DD	070116215H
	DD	06010H
$unwind$stbtt__buf_range DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$stbtt__cff_get_index DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$stbtt__cff_int DD 010901H
	DD	06209H
$unwind$stbtt__cff_skip_operand DD 010901H
	DD	06209H
$unwind$stbtt__dict_get DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$stbtt__dict_get_ints DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$stbtt__cff_index_count DD 010901H
	DD	04209H
$unwind$stbtt__cff_index_get DD 031501H
	DD	070118215H
	DD	06010H
$unwind$stbtt__find_table DD 011201H
	DD	06212H
$unwind$stbtt_GetFontOffsetForIndex_internal DD 010d01H
	DD	0620dH
$unwind$stbtt_GetNumberOfFonts_internal DD 010901H
	DD	04209H
$unwind$stbtt__get_subrs DD 041801H
	DD	0110118H
	DD	060107011H
$unwind$stbtt__get_svg DD 010901H
	DD	06209H
$unwind$stbtt_InitFont_internal DD 041801H
	DD	0310118H
	DD	060107011H
$unwind$stbtt__GetGlyfOffset DD 010d01H
	DD	0620dH
$unwind$stbtt__GetGlyphInfoT2 DD 011701H
	DD	0e217H
$unwind$stbtt__close_shape DD 011701H
	DD	0a217H
$unwind$stbtt__GetGlyphShapeTT DD 042919H
	DD	0610117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	02f8H
$unwind$stbtt__csctx_v DD 011701H
	DD	06217H
$unwind$stbtt__csctx_close_shape DD 010901H
	DD	08209H
$unwind$stbtt__csctx_rmove_to DD 011501H
	DD	0a215H
$unwind$stbtt__csctx_rline_to DD 011501H
	DD	08215H
$unwind$stbtt__csctx_rccurve_to DD 011b01H
	DD	0a21bH
$unwind$stbtt__get_subr DD 031501H
	DD	07011c215H
	DD	06010H
$unwind$stbtt__cid_get_glyph_subrs DD 041801H
	DD	0170118H
	DD	060107011H
$unwind$stbtt__run_charstring DD 042919H
	DD	0570117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	02a0H
$unwind$stbtt__GetGlyphShapeT2 DD 041701H
	DD	01f0117H
	DD	0600f7010H
$unwind$stbtt__GetGlyphKernInfoAdvance DD 011201H
	DD	08212H
$unwind$stbtt__GetCoverageIndex DD 021001H
	DD	0110110H
$unwind$stbtt__GetGlyphClass DD 010d01H
	DD	0e20dH
$unwind$stbtt__GetGlyphGPOSInfoAdvance DD 021501H
	DD	0210115H
$unwind$stbtt__hheap_alloc DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$stbtt__hheap_cleanup DD 041301H
	DD	0110113H
	DD	0600b700cH
$unwind$stbtt__new_active DD 011901H
	DD	08219H
$unwind$stbtt__handle_clipped_edge DD 011801H
	DD	04218H
$unwind$stbtt__sized_trapezoid_area DD 011601H
	DD	04216H
$unwind$stbtt__position_trapezoid_area DD 011c01H
	DD	0421cH
$unwind$stbtt__fill_active_edges_new DD 021b01H
	DD	01d011bH
$unwind$stbtt__rasterize_sorted_edges DD 042f19H
	DD	06b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0340H
$unwind$stbtt__sort_edges_ins_sort DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$stbtt__sort_edges_quicksort DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$stbtt__sort_edges DD 010d01H
	DD	0420dH
$unwind$stbtt__rasterize DD 041d01H
	DD	023011dH
	DD	060157016H
$unwind$stbtt__tesselate_curve DD 011a01H
	DD	0c21aH
$unwind$stbtt__tesselate_cubic DD 021d01H
	DD	01b011dH
$unwind$stbtt_FlattenCurves DD 062501H
	DD	01b6825H
	DD	039011dH
	DD	060157016H
$unwind$stbtt_BakeFontBitmap_internal DD 021b01H
	DD	025011bH
$unwind$stbrp_pack_rects DD 011301H
	DD	02213H
$unwind$stbtt__h_prefilter DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$stbtt__v_prefilter DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$stbtt__ray_intersect_bezier DD 021b01H
	DD	011011bH
$unwind$equal DD 010e01H
	DD	0220eH
$unwind$stbtt__compute_crossings_x DD 022f19H
	DD	023011dH
	DD	imagerel __GSHandlerCheck
	DD	0108H
$unwind$stbtt__cuberoot DD 010a01H
	DD	0420aH
$unwind$stbtt__solve_cubic DD 011b01H
	DD	0a21bH
$unwind$stbtt__CompareUTF8toUTF16_bigendian_prefix DD 011701H
	DD	0c217H
$unwind$stbtt_CompareUTF8toUTF16_bigendian_internal DD 011701H
	DD	06217H
$unwind$stbtt__matchpair DD 011701H
	DD	0c217H
$unwind$stbtt__matches DD 011701H
	DD	08217H
$unwind$stbtt_FindMatchingFont_internal DD 011301H
	DD	06213H
$unwind$rxborrow_resource DD 010901H
	DD	08209H
$unwind$rxreturn_resource DD 010901H
	DD	04209H
$unwind$rxreturn DD 010901H
	DD	04209H
$unwind$rxborrow_texture DD 031001H
	DD	0700cc210H
	DD	0600bH
$unwind$rxcreate_texture DD 042e19H
	DD	013011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$rxload_texture DD 042e19H
	DD	015011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$rxload_texture_file DD 041301H
	DD	0130113H
	DD	0600b700cH
$unwind$rxload_font DD 040e01H
	DD	037010eH
	DD	060067007H
$unwind$rxdraw_texture_ex DD 042e19H
	DD	011011fH
	DD	060177018H
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$rxdraw_texture DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$rxdraw_text DD 042e19H
	DD	019011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$rxwindow DD 021619H
	DD	0110107H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$rxtick DD 011319H
	DD	0e204H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$rxresize_indexbuffer DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$rxresize_vertexbuffer DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$rxwindow_callback_win32 DD 011701H
	DD	04217H
$unwind$rxinit DD 042019H
	DD	093010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0480H
$unwind$main DD	010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
counter$ = 32
c$ = 64
v$ = 72
main	PROC
; File W:\cpp\void\rx\main.c
; Line 5
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 6
	mov	DWORD PTR counter$[rsp], 0
; Line 8
	lea	rcx, OFFSET FLAT:$SG151863
	call	rxinit
; Line 9
	lea	rcx, OFFSET FLAT:$SG151864
	call	rxload_font
	jmp	SHORT $LN4@main
$LN2@main:
; Line 11
	mov	eax, DWORD PTR counter$[rsp]
	inc	eax
	mov	DWORD PTR counter$[rsp], eax
$LN4@main:
; Line 12
	mov	edx, DWORD PTR counter$[rsp]
	lea	rcx, OFFSET FLAT:$SG151865
	call	ccformat
	mov	r9, rax
	movss	xmm2, DWORD PTR __real@42800000
	mov	edx, DWORD PTR rx+28
	mov	ecx, DWORD PTR rx+24
	call	rxdraw_text
; Line 13
	call	rxtick
; Line 14
	jmp	SHORT $LN2@main
; Line 16
	add	rsp, 56					; 00000038H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DriverModeFlags$ = 96
DXGIAdapter$ = 104
DXGIDevice$ = 112
DXGIFactory$ = 120
DriverSelectedFeatureLevel$ = 128
Offset$ = 132
Stride$ = 136
SubresourceInfo$1 = 144
$S5$ = 160
$S6$ = 192
$S7$ = 224
RenderTargetViewInfo$ = 256
OffscreenBufferView$ = 280
WindowClass$ = 304
RootClip$ = 384
TargetBlendStateInfo$ = 400
RasterizerInfo$ = 432
OffscreenBuffer$ = 472
BufferInfo$2 = 520
uniform$3 = 544
SwapchainFullscreenInfo$ = 608
Viewport$ = 632
SwapchainInfo$ = 656
SamplerInfo$ = 704
BlendStateInfo$ = 768
DriverFeatureMenu$ = 1040
LayoutElements$ = 1056
__$ArrayPad$ = 1152
window_title$ = 1200
rxinit	PROC
; File W:\cpp\void\rx\rx.c
; Line 516
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1176				; 00000498H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 519
	mov	DWORD PTR ccdebugnone, 1
; Line 520
	call	ccini
; Line 524
	mov	DWORD PTR DriverModeFlags$[rsp], 35	; 00000023H
; Line 527
	mov	DWORD PTR DriverFeatureMenu$[rsp], 45312 ; 0000b100H
	mov	DWORD PTR DriverFeatureMenu$[rsp+4], 45056 ; 0000b000H
	mov	DWORD PTR DriverFeatureMenu$[rsp+8], 41216 ; 0000a100H
	mov	DWORD PTR DriverFeatureMenu$[rsp+12], 40960 ; 0000a000H
; Line 533
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR DriverFeatureMenu$[rsp+rax]
	lea	rcx, OFFSET FLAT:rx+5224
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR DriverSelectedFeatureLevel$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:rx+5216
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR DriverModeFlags$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jge	SHORT $LN3@rxinit
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR DriverFeatureMenu$[rsp+rax]
	lea	rcx, OFFSET FLAT:rx+5224
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR DriverSelectedFeatureLevel$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:rx+5216
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR DriverModeFlags$[rsp]
	xor	r8d, r8d
	mov	edx, 5
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jl	$LN2@rxinit
$LN3@rxinit:
; Line 536
	mov	eax, DWORD PTR DriverModeFlags$[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN4@rxinit
; Line 537
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5208
	lea	rdx, OFFSET FLAT:IID_ID3D11InfoQueue
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN5@rxinit
; Line 538
	mov	rax, QWORD PTR rx+5208
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5208
	call	QWORD PTR [rax+248]
; Line 539
	mov	rax, QWORD PTR rx+5208
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5208
	call	QWORD PTR [rax+248]
; Line 540
	mov	rax, QWORD PTR rx+5208
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, QWORD PTR rx+5208
	call	QWORD PTR [rax+248]
$LN5@rxinit:
$LN4@rxinit:
$LN2@rxinit:
; Line 546
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	memset
; Line 547
	lea	rax, OFFSET FLAT:rxwindow_callback_win32
	mov	QWORD PTR WindowClass$[rsp+8], rax
; Line 548
	xor	ecx, ecx
	call	QWORD PTR __imp_GetModuleHandleW
	mov	QWORD PTR WindowClass$[rsp+24], rax
; Line 549
	mov	rax, QWORD PTR window_title$[rsp]
	mov	QWORD PTR WindowClass$[rsp+64], rax
; Line 550
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	QWORD PTR __imp_RegisterClassW
; Line 552
	mov	QWORD PTR [rsp+88], 0
	mov	rax, QWORD PTR WindowClass$[rsp+24]
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	DWORD PTR [rsp+56], -2147483648		; ffffffff80000000H
	mov	DWORD PTR [rsp+48], -2147483648		; ffffffff80000000H
	mov	DWORD PTR [rsp+40], -2147483648		; ffffffff80000000H
	mov	DWORD PTR [rsp+32], -2147483648		; ffffffff80000000H
	mov	r9d, 13565952				; 00cf0000H
	mov	r8, QWORD PTR window_title$[rsp]
	mov	rdx, QWORD PTR WindowClass$[rsp+64]
	mov	ecx, 2097152				; 00200000H
	call	QWORD PTR __imp_CreateWindowExW
	mov	QWORD PTR rx+8, rax
; Line 556
	call	rxwindow
; Line 558
	mov	QWORD PTR DXGIFactory$[rsp], 0
; Line 559
	mov	QWORD PTR DXGIDevice$[rsp], 0
; Line 560
	mov	QWORD PTR DXGIAdapter$[rsp], 0
; Line 561
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR DXGIDevice$[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIDevice
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax]
; Line 562
	mov	rax, QWORD PTR DXGIDevice$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR DXGIAdapter$[rsp]
	mov	rcx, QWORD PTR DXGIDevice$[rsp]
	call	QWORD PTR [rax+56]
; Line 563
	mov	rax, QWORD PTR DXGIAdapter$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR DXGIFactory$[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIFactory2
	mov	rcx, QWORD PTR DXGIAdapter$[rsp]
	call	QWORD PTR [rax+48]
; Line 564
	mov	rax, QWORD PTR DXGIAdapter$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIAdapter$[rsp]
	call	QWORD PTR [rax+16]
; Line 565
	mov	rax, QWORD PTR DXGIDevice$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIDevice$[rsp]
	call	QWORD PTR [rax+16]
; Line 568
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR SwapchainInfo$[rsp]
	call	memset
; Line 569
	mov	eax, DWORD PTR rx+16
	mov	DWORD PTR SwapchainInfo$[rsp], eax
; Line 570
	mov	eax, DWORD PTR rx+20
	mov	DWORD PTR SwapchainInfo$[rsp+4], eax
; Line 571
	mov	DWORD PTR SwapchainInfo$[rsp+8], 28
; Line 572
	mov	DWORD PTR SwapchainInfo$[rsp+16], 1
; Line 573
	mov	DWORD PTR SwapchainInfo$[rsp+20], 0
; Line 574
	mov	DWORD PTR SwapchainInfo$[rsp+24], 32	; 00000020H
; Line 575
	mov	DWORD PTR SwapchainInfo$[rsp+28], 2
; Line 576
	mov	DWORD PTR SwapchainInfo$[rsp+36], 3
; Line 577
	mov	DWORD PTR SwapchainInfo$[rsp+44], 66	; 00000042H
; Line 580
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR SwapchainFullscreenInfo$[rsp]
	call	memset
; Line 581
	mov	DWORD PTR SwapchainFullscreenInfo$[rsp], 1
; Line 582
	mov	DWORD PTR SwapchainFullscreenInfo$[rsp+4], 1
; Line 583
	mov	DWORD PTR SwapchainFullscreenInfo$[rsp+16], 1
; Line 585
	mov	rax, QWORD PTR DXGIFactory$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:rx+5232
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	lea	rcx, QWORD PTR SwapchainFullscreenInfo$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR SwapchainInfo$[rsp]
	mov	r8, QWORD PTR rx+8
	mov	rdx, QWORD PTR rx+5216
	mov	rcx, QWORD PTR DXGIFactory$[rsp]
	call	QWORD PTR [rax+120]
; Line 588
	mov	rax, QWORD PTR rx+5232
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR rx+5232
	call	QWORD PTR [rax+264]
	mov	QWORD PTR rx+5240, rax
; Line 590
	mov	rax, QWORD PTR rx+5232
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5264
	lea	r8, OFFSET FLAT:IID_ID3D11Texture2D
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5232
	call	QWORD PTR [rax+72]
; Line 591
	mov	rax, QWORD PTR DXGIFactory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIFactory$[rsp]
	call	QWORD PTR [rax+16]
; Line 594
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR RenderTargetViewInfo$[rsp]
	call	memset
; Line 595
	mov	DWORD PTR RenderTargetViewInfo$[rsp], 0
; Line 596
	mov	DWORD PTR RenderTargetViewInfo$[rsp+4], 4
; Line 597
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5272
	lea	r8, QWORD PTR RenderTargetViewInfo$[rsp]
	mov	rdx, QWORD PTR rx+5264
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+72]
; Line 600
	mov	r8d, 44					; 0000002cH
	xor	edx, edx
	lea	rcx, QWORD PTR OffscreenBuffer$[rsp]
	call	memset
; Line 601
	mov	eax, DWORD PTR rx+16
	mov	DWORD PTR OffscreenBuffer$[rsp], eax
; Line 602
	mov	eax, DWORD PTR rx+20
	mov	DWORD PTR OffscreenBuffer$[rsp+4], eax
; Line 603
	mov	DWORD PTR OffscreenBuffer$[rsp+8], 1
; Line 604
	mov	DWORD PTR OffscreenBuffer$[rsp+12], 1
; Line 605
	mov	DWORD PTR OffscreenBuffer$[rsp+16], 28
; Line 606
	mov	DWORD PTR OffscreenBuffer$[rsp+20], 4
; Line 607
	mov	DWORD PTR OffscreenBuffer$[rsp+24], 1
; Line 608
	mov	DWORD PTR OffscreenBuffer$[rsp+28], 0
; Line 609
	mov	DWORD PTR OffscreenBuffer$[rsp+40], 0
; Line 610
	mov	DWORD PTR OffscreenBuffer$[rsp+32], 32	; 00000020H
; Line 611
	mov	DWORD PTR OffscreenBuffer$[rsp+36], 0
; Line 612
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5248
	xor	r8d, r8d
	lea	rdx, QWORD PTR OffscreenBuffer$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+40]
; Line 620
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR OffscreenBufferView$[rsp]
	call	memset
; Line 621
	mov	DWORD PTR OffscreenBufferView$[rsp], 0
; Line 622
	mov	DWORD PTR OffscreenBufferView$[rsp+4], 6
; Line 623
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5256
	lea	r8, QWORD PTR OffscreenBufferView$[rsp]
	mov	rdx, QWORD PTR rx+5248
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+72]
; Line 627
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR RasterizerInfo$[rsp]
	call	memset
; Line 628
	mov	DWORD PTR RasterizerInfo$[rsp], 3
; Line 629
	mov	DWORD PTR RasterizerInfo$[rsp+4], 1
; Line 630
	mov	DWORD PTR RasterizerInfo$[rsp+8], 0
; Line 631
	mov	DWORD PTR RasterizerInfo$[rsp+12], 0
; Line 632
	xorps	xmm0, xmm0
	movss	DWORD PTR RasterizerInfo$[rsp+16], xmm0
; Line 633
	xorps	xmm0, xmm0
	movss	DWORD PTR RasterizerInfo$[rsp+20], xmm0
; Line 634
	mov	DWORD PTR RasterizerInfo$[rsp+24], 0
; Line 635
	mov	DWORD PTR RasterizerInfo$[rsp+28], 1
; Line 636
	mov	DWORD PTR RasterizerInfo$[rsp+32], 1
; Line 637
	mov	DWORD PTR RasterizerInfo$[rsp+36], 1
; Line 638
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5280
	lea	rdx, QWORD PTR RasterizerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+176]
; Line 641
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR TargetBlendStateInfo$[rsp]
	call	memset
; Line 642
	mov	DWORD PTR TargetBlendStateInfo$[rsp], 1
; Line 643
	mov	DWORD PTR TargetBlendStateInfo$[rsp+4], 5
; Line 644
	mov	DWORD PTR TargetBlendStateInfo$[rsp+8], 6
; Line 645
	mov	DWORD PTR TargetBlendStateInfo$[rsp+12], 1
; Line 646
	mov	DWORD PTR TargetBlendStateInfo$[rsp+16], 1
; Line 647
	mov	DWORD PTR TargetBlendStateInfo$[rsp+20], 1
; Line 648
	mov	DWORD PTR TargetBlendStateInfo$[rsp+24], 1
; Line 649
	mov	BYTE PTR TargetBlendStateInfo$[rsp+28], 15
; Line 652
	mov	r8d, 264				; 00000108H
	xor	edx, edx
	lea	rcx, QWORD PTR BlendStateInfo$[rsp]
	call	memset
; Line 653
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	lea	rcx, QWORD PTR TargetBlendStateInfo$[rsp]
	lea	rdi, QWORD PTR BlendStateInfo$[rsp+rax+8]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 654
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5288
	lea	rdx, QWORD PTR BlendStateInfo$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+160]
; Line 665
	lea	rax, OFFSET FLAT:$SG151850
	mov	QWORD PTR $S5$[rsp], rax
	mov	DWORD PTR $S5$[rsp+8], 0
	mov	DWORD PTR $S5$[rsp+12], 16
	mov	DWORD PTR $S5$[rsp+16], 0
	mov	DWORD PTR $S5$[rsp+20], -1		; ffffffffH
	mov	DWORD PTR $S5$[rsp+24], 0
	mov	DWORD PTR $S5$[rsp+28], 0
	lea	rax, QWORD PTR LayoutElements$[rsp]
	lea	rcx, QWORD PTR $S5$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, OFFSET FLAT:$SG151851
	mov	QWORD PTR $S6$[rsp], rax
	mov	DWORD PTR $S6$[rsp+8], 0
	mov	DWORD PTR $S6$[rsp+12], 28
	mov	DWORD PTR $S6$[rsp+16], 0
	mov	DWORD PTR $S6$[rsp+20], -1		; ffffffffH
	mov	DWORD PTR $S6$[rsp+24], 0
	mov	DWORD PTR $S6$[rsp+28], 0
	lea	rax, QWORD PTR LayoutElements$[rsp+32]
	lea	rcx, QWORD PTR $S6$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, OFFSET FLAT:$SG151852
	mov	QWORD PTR $S7$[rsp], rax
	mov	DWORD PTR $S7$[rsp+8], 0
	mov	DWORD PTR $S7$[rsp+12], 16
	mov	DWORD PTR $S7$[rsp+16], 0
	mov	DWORD PTR $S7$[rsp+20], -1		; ffffffffH
	mov	DWORD PTR $S7$[rsp+24], 0
	mov	DWORD PTR $S7$[rsp+28], 0
	lea	rax, QWORD PTR LayoutElements$[rsp+64]
	lea	rcx, QWORD PTR $S7$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 671
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:rx+5312
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], 540			; 0000021cH
	lea	r9, OFFSET FLAT:rx_vs_shader_bytecode
	mov	r8d, 3
	lea	rdx, QWORD PTR LayoutElements$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+88]
; Line 673
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:rx+5296
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8d, 540				; 0000021cH
	lea	rdx, OFFSET FLAT:rx_vs_shader_bytecode
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+96]
; Line 675
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:rx+5304
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8d, 332				; 0000014cH
	lea	rdx, OFFSET FLAT:rx_ps_shader_bytecode
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+120]
; Line 679
	mov	r8d, 52					; 00000034H
	xor	edx, edx
	lea	rcx, QWORD PTR SamplerInfo$[rsp]
	call	memset
; Line 680
	mov	DWORD PTR SamplerInfo$[rsp+4], 1
; Line 681
	mov	DWORD PTR SamplerInfo$[rsp+8], 1
; Line 682
	mov	DWORD PTR SamplerInfo$[rsp+12], 1
; Line 684
	mov	DWORD PTR SamplerInfo$[rsp], 21
; Line 685
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5344
	lea	rdx, QWORD PTR SamplerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+184]
; Line 687
	mov	DWORD PTR SamplerInfo$[rsp], 0
; Line 688
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5352
	lea	rdx, QWORD PTR SamplerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+184]
; Line 692
	cvtsi2ss xmm0, DWORD PTR rx+16
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 693
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 694
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 695
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 697
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 698
	cvtsi2ss xmm0, DWORD PTR rx+20
	movss	xmm1, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 699
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 700
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 702
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 703
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 704
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 705
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 707
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 708
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 709
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 710
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR uniform$3[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 714
	mov	DWORD PTR BufferInfo$2[rsp+4], 0
; Line 715
	mov	DWORD PTR BufferInfo$2[rsp+8], 4
; Line 716
	mov	DWORD PTR BufferInfo$2[rsp+12], 0
; Line 717
	mov	DWORD PTR BufferInfo$2[rsp+16], 0
; Line 718
	mov	DWORD PTR BufferInfo$2[rsp], 64		; 00000040H
; Line 719
	mov	DWORD PTR BufferInfo$2[rsp+20], 0
; Line 722
	lea	rax, QWORD PTR uniform$3[rsp]
	mov	QWORD PTR SubresourceInfo$1[rsp], rax
; Line 723
	mov	DWORD PTR SubresourceInfo$1[rsp+8], 0
; Line 724
	mov	DWORD PTR SubresourceInfo$1[rsp+12], 0
; Line 725
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5336
	lea	r8, QWORD PTR SubresourceInfo$1[rsp]
	lea	rdx, QWORD PTR BufferInfo$2[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+24]
; Line 728
	mov	ecx, 4096				; 00001000H
	call	rxresize_indexbuffer
; Line 729
	mov	ecx, 20480				; 00005000H
	call	rxresize_vertexbuffer
; Line 731
	mov	rcx, QWORD PTR rx+5320
	call	rxborrow_resource
	mov	QWORD PTR rx+5368, rax
; Line 732
	mov	rcx, QWORD PTR rx+5328
	call	rxborrow_resource
	mov	QWORD PTR rx+5360, rax
; Line 735
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR Viewport$[rsp]
	call	memset
; Line 736
	cvtsi2ss xmm0, DWORD PTR rx+16
	movss	DWORD PTR Viewport$[rsp+8], xmm0
; Line 737
	cvtsi2ss xmm0, DWORD PTR rx+20
	movss	DWORD PTR Viewport$[rsp+12], xmm0
; Line 738
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp+16], xmm0
; Line 739
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Viewport$[rsp+20], xmm0
; Line 741
	mov	DWORD PTR Stride$[rsp], 20
; Line 742
	mov	DWORD PTR Offset$[rsp], 0
; Line 743
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR rx+5280
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+344]
; Line 744
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR Viewport$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+352]
; Line 745
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	r9d, 268435455				; 0fffffffH
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5288
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+280]
; Line 746
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR rx+5312
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+136]
; Line 747
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR Offset$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR Stride$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, OFFSET FLAT:rx+5320
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+144]
; Line 748
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	mov	r8d, 42					; 0000002aH
	mov	rdx, QWORD PTR rx+5328
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+152]
; Line 749
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	edx, 4
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+192]
; Line 750
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5336
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+56]
; Line 751
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5336
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+128]
; Line 752
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5296
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+88]
; Line 753
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5304
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+72]
; Line 756
	mov	DWORD PTR RootClip$[rsp], 0
; Line 757
	mov	DWORD PTR RootClip$[rsp+4], 0
; Line 758
	mov	DWORD PTR RootClip$[rsp+8], 16777215	; 00ffffffH
; Line 759
	mov	DWORD PTR RootClip$[rsp+12], 16777215	; 00ffffffH
; Line 760
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR RootClip$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+360]
; Line 761
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1176				; 00000498H
	pop	rdi
	pop	rsi
	ret	0
rxinit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
NativeWindow$ = 48
Message$ = 56
wParam$ = 64
lParam$ = 72
rxwindow_callback_win32 PROC
; File W:\cpp\void\rx\rx.c
; Line 512
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR NativeWindow$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
; Line 513
	add	rsp, 40					; 00000028H
	ret	0
rxwindow_callback_win32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
__$ArrayPad$ = 56
size_in_bytes$ = 80
rxresize_vertexbuffer PROC
; File W:\cpp\void\rx\rx.c
; Line 494
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 495
	cmp	QWORD PTR rx+5320, 0
	je	SHORT $LN2@rxresize_v
; Line 497
	mov	rax, QWORD PTR rx+5320
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR rx+5320
	call	QWORD PTR [rax+16]
$LN2@rxresize_v:
; Line 501
	mov	DWORD PTR i$[rsp+4], 2
; Line 502
	mov	DWORD PTR i$[rsp+12], 65536		; 00010000H
; Line 503
	mov	DWORD PTR i$[rsp+16], 0
; Line 504
	mov	DWORD PTR i$[rsp+20], 0
; Line 505
	mov	DWORD PTR i$[rsp+8], 1
; Line 506
	mov	eax, DWORD PTR size_in_bytes$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 507
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5320
	xor	r8d, r8d
	lea	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+24]
; Line 508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
rxresize_vertexbuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
__$ArrayPad$ = 56
size_in_bytes$ = 80
rxresize_indexbuffer PROC
; File W:\cpp\void\rx\rx.c
; Line 477
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 478
	cmp	QWORD PTR rx+5328, 0
	je	SHORT $LN2@rxresize_i
; Line 480
	mov	rax, QWORD PTR rx+5328
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR rx+5328
	call	QWORD PTR [rax+16]
$LN2@rxresize_i:
; Line 484
	mov	DWORD PTR i$[rsp+4], 2
; Line 485
	mov	DWORD PTR i$[rsp+12], 65536		; 00010000H
; Line 486
	mov	DWORD PTR i$[rsp+16], 0
; Line 487
	mov	DWORD PTR i$[rsp+20], 0
; Line 488
	mov	DWORD PTR i$[rsp+8], 2
; Line 489
	mov	eax, DWORD PTR size_in_bytes$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 490
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5328
	xor	r8d, r8d
	lea	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+24]
; Line 491
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
rxresize_indexbuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
draw$ = 48
index_offset$ = 56
tv170 = 64
tv169 = 72
Color$ = 80
__$ArrayPad$ = 96
rxtick	PROC
; File W:\cpp\void\rx\rx.c
; Line 434
$LN9:
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 435
	mov	rcx, QWORD PTR rx+5320
	call	rxreturn_resource
; Line 436
	mov	rcx, QWORD PTR rx+5328
	call	rxreturn_resource
; Line 438
	call	rxwindow
; Line 440
	xorps	xmm0, xmm0
	movss	DWORD PTR Color$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR Color$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR Color$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Color$[rsp+12], xmm0
; Line 441
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR Color$[rsp]
	mov	rdx, QWORD PTR rx+5256
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+400]
; Line 442
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:rx+5256
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+264]
; Line 445
	mov	DWORD PTR index_offset$[rsp], 0
; Line 446
	lea	rax, OFFSET FLAT:rx+5384
	mov	QWORD PTR draw$[rsp], rax
	jmp	SHORT $LN4@rxtick
$LN2@rxtick:
	mov	rax, QWORD PTR draw$[rsp]
	add	rax, 48					; 00000030H
	mov	QWORD PTR draw$[rsp], rax
$LN4@rxtick:
	movsxd	rax, DWORD PTR rx+17672
	imul	rax, rax, 48				; 00000030H
	lea	rcx, OFFSET FLAT:rx+5384
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR draw$[rsp], rax
	jae	$LN3@rxtick
; Line 447
	mov	rax, QWORD PTR draw$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN5@rxtick
; Line 450
	jmp	$LN6@rxtick
$LN5@rxtick:
; Line 451
	mov	rax, QWORD PTR draw$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	$LN7@rxtick
; Line 452
	mov	rax, QWORD PTR draw$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR rx+5224
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv170[rsp], rcx
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5224
	mov	rax, QWORD PTR tv170[rsp]
	call	QWORD PTR [rax+80]
; Line 453
	mov	rax, QWORD PTR draw$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR rx+5224
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv169[rsp], rcx
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5224
	mov	rax, QWORD PTR tv169[rsp]
	call	QWORD PTR [rax+64]
; Line 455
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR draw$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	r8d, DWORD PTR index_offset$[rsp]
	mov	rcx, QWORD PTR draw$[rsp]
	mov	edx, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+96]
; Line 456
	mov	rax, QWORD PTR draw$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	ecx, DWORD PTR index_offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index_offset$[rsp], eax
$LN7@rxtick:
$LN6@rxtick:
; Line 458
	jmp	$LN2@rxtick
$LN3@rxtick:
; Line 460
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+40], 28
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR rx+5248
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5264
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+456]
; Line 463
	mov	rax, QWORD PTR rx+5232
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5232
	call	QWORD PTR [rax+64]
; Line 464
	mov	r8d, 1
	mov	edx, 33					; 00000021H
	mov	rcx, QWORD PTR rx+5240
	call	QWORD PTR __imp_WaitForSingleObjectEx
; Line 466
	mov	edx, 5
	mov	rcx, QWORD PTR rx+8
	call	QWORD PTR __imp_ShowWindow
; Line 468
	mov	DWORD PTR rx+5376, 0
; Line 469
	mov	DWORD PTR rx+5380, 0
; Line 470
	mov	DWORD PTR rx+17672, 0
; Line 472
	mov	rcx, QWORD PTR rx+5320
	call	rxborrow_resource
	mov	QWORD PTR rx+5368, rax
; Line 473
	mov	rcx, QWORD PTR rx+5328
	call	rxborrow_resource
	mov	QWORD PTR rx+5360, rax
; Line 474
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
rxtick	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
message$ = 48
client$ = 96
__$ArrayPad$ = 112
rxwindow PROC
; File W:\cpp\void\rx\rx.c
; Line 418
$LN5:
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@rxwindow:
; Line 420
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_PeekMessageA
	test	eax, eax
	je	SHORT $LN3@rxwindow
; Line 421
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_TranslateMessage
; Line 422
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_DispatchMessageW
; Line 423
	jmp	SHORT $LN2@rxwindow
$LN3@rxwindow:
; Line 426
	lea	rdx, QWORD PTR client$[rsp]
	mov	rcx, QWORD PTR rx+8
	call	QWORD PTR __imp_GetClientRect
; Line 427
	mov	eax, DWORD PTR client$[rsp]
	mov	ecx, DWORD PTR client$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+16, eax
; Line 428
	mov	eax, DWORD PTR client$[rsp+4]
	mov	ecx, DWORD PTR client$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+20, eax
; Line 429
	mov	eax, DWORD PTR rx+16
	sar	eax, 1
	mov	DWORD PTR rx+24, eax
; Line 430
	mov	eax, DWORD PTR rx+20
	sar	eax, 1
	mov	DWORD PTR rx+28, eax
; Line 431
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
rxwindow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 80
code$ = 84
gh$1 = 88
ox$ = 92
ny$ = 96
nx$ = 100
gw$2 = 104
oy$ = 108
gy$3 = 112
gx$4 = 116
dy$5 = 120
dx$6 = 124
$T7 = 128
baked$8 = 160
__$ArrayPad$ = 184
x$ = 224
y$ = 232
h$ = 240
string$ = 248
rxdraw_text PROC
; File W:\cpp\void\rx\rx.c
; Line 396
$LN6:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	cvtsi2ss xmm0, DWORD PTR rx+48
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR nx$[rsp], xmm0
; Line 397
	cvtsi2ss xmm0, DWORD PTR rx+52
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ny$[rsp], xmm0
; Line 398
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR ox$[rsp], xmm0
; Line 399
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR oy$[rsp], xmm0
; Line 400
	movss	xmm0, DWORD PTR h$[rsp]
	divss	xmm0, DWORD PTR rx+5184
	movss	DWORD PTR s$[rsp], xmm0
; Line 402
	mov	rax, QWORD PTR string$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR code$[rsp], eax
	jmp	SHORT $LN4@rxdraw_tex
$LN2@rxdraw_tex:
	mov	rax, QWORD PTR string$[rsp]
	inc	rax
	mov	QWORD PTR string$[rsp], rax
	mov	rax, QWORD PTR string$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR code$[rsp], eax
$LN4@rxdraw_tex:
	cmp	DWORD PTR code$[rsp], 0
	je	$LN3@rxdraw_tex
; Line 403
	mov	eax, DWORD PTR code$[rsp]
	sub	eax, 32					; 00000020H
	cdqe
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:rx+64
	lea	rdx, QWORD PTR baked$8[rsp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 404
	movzx	eax, WORD PTR baked$8[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR gx$4[rsp], xmm0
; Line 405
	movzx	eax, WORD PTR baked$8[rsp+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR gy$3[rsp], xmm0
; Line 406
	movzx	eax, WORD PTR baked$8[rsp+4]
	movzx	ecx, WORD PTR baked$8[rsp]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR gw$2[rsp], xmm0
; Line 407
	movzx	eax, WORD PTR baked$8[rsp+6]
	movzx	ecx, WORD PTR baked$8[rsp+2]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	movss	DWORD PTR gh$1[rsp], xmm0
; Line 408
	movss	xmm0, DWORD PTR ox$[rsp]
	movss	DWORD PTR dx$6[rsp], xmm0
; Line 409
	movss	xmm0, DWORD PTR gh$1[rsp]
	addss	xmm0, DWORD PTR baked$8[rsp+12]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR oy$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dy$5[rsp], xmm0
; Line 410
	movss	xmm0, DWORD PTR gh$1[rsp]
	mulss	xmm0, DWORD PTR ny$[rsp]
	movss	xmm1, DWORD PTR gw$2[rsp]
	mulss	xmm1, DWORD PTR nx$[rsp]
	movss	xmm2, DWORD PTR gy$3[rsp]
	mulss	xmm2, DWORD PTR ny$[rsp]
	movss	xmm3, DWORD PTR gx$4[rsp]
	mulss	xmm3, DWORD PTR nx$[rsp]
	movss	xmm4, DWORD PTR gh$1[rsp]
	mulss	xmm4, DWORD PTR s$[rsp]
	movss	xmm5, DWORD PTR gw$2[rsp]
	mulss	xmm5, DWORD PTR s$[rsp]
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, OFFSET FLAT:rx+32
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	DWORD PTR [rsp+40], xmm4
	movss	DWORD PTR [rsp+32], xmm5
	movss	xmm3, DWORD PTR dy$5[rsp]
	movss	xmm2, DWORD PTR dx$6[rsp]
	mov	rdx, QWORD PTR rx+5344
	lea	rcx, QWORD PTR $T7[rsp]
	call	rxdraw_texture_ex
; Line 413
	movss	xmm0, DWORD PTR baked$8[rsp+16]
	mulss	xmm0, DWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR ox$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ox$[rsp], xmm0
; Line 414
	jmp	$LN2@rxdraw_tex
$LN3@rxdraw_tex:
; Line 415
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 80
$T1 = 96
texture$ = 160
sampler$ = 168
x$ = 176
y$ = 184
w$ = 192
h$ = 200
rxdraw_texture PROC
; File W:\cpp\void\rx\rx.c
; Line 390
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 391
	cvtsi2ss xmm0, DWORD PTR h$[rsp]
	cvtsi2ss xmm1, DWORD PTR w$[rsp]
	cvtsi2ss xmm2, DWORD PTR y$[rsp]
	cvtsi2ss xmm3, DWORD PTR x$[rsp]
	movss	DWORD PTR tv74[rsp], xmm3
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	movss	xmm4, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+72], xmm4
	movss	xmm4, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+64], xmm4
	xorps	xmm4, xmm4
	movss	DWORD PTR [rsp+56], xmm4
	xorps	xmm4, xmm4
	movss	DWORD PTR [rsp+48], xmm4
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movaps	xmm3, xmm2
	movss	xmm0, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR sampler$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_texture_ex
; Line 393
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_texture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index$ = 0
draw$ = 8
vert$ = 16
$S1$ = 24
$S2$ = 48
$S3$ = 72
$S4$ = 96
__$ArrayPad$ = 120
texture$ = 160
sampler$ = 168
x$ = 176
y$ = 184
w$ = 192
h$ = 200
tx$ = 208
ty$ = 216
tw$ = 224
th$ = 232
rxdraw_texture_ex PROC
; File W:\cpp\void\rx\rx.c
; Line 366
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	movsxd	rax, DWORD PTR rx+17672
	imul	rax, rax, 48				; 00000030H
	lea	rcx, OFFSET FLAT:rx+5384
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR draw$[rsp], rax
	mov	eax, DWORD PTR rx+17672
	inc	eax
	mov	DWORD PTR rx+17672, eax
; Line 367
	mov	rax, QWORD PTR draw$[rsp]
	mov	DWORD PTR [rax], 1
; Line 368
	mov	rax, QWORD PTR draw$[rsp]
	mov	ecx, DWORD PTR rx+5376
	mov	DWORD PTR [rax+24], ecx
; Line 369
	mov	rax, QWORD PTR draw$[rsp]
	mov	DWORD PTR [rax+28], 6
; Line 370
	mov	rax, QWORD PTR draw$[rsp]
	mov	rcx, QWORD PTR texture$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
; Line 371
	mov	rax, QWORD PTR draw$[rsp]
	mov	rcx, QWORD PTR sampler$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 373
	movsxd	rax, DWORD PTR rx+5380
	mov	rcx, QWORD PTR rx+5360
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR index$[rsp], rax
; Line 374
	mov	eax, DWORD PTR rx+5380
	add	eax, 6
	mov	DWORD PTR rx+5380, eax
; Line 376
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 0
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 0
; Line 377
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 1
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 2
; Line 378
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 2
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR index$[rsp]
	mov	DWORD PTR [rcx+rax], 3
; Line 380
	movsxd	rax, DWORD PTR rx+5376
	imul	rax, rax, 20
	mov	rcx, QWORD PTR rx+5368
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR vert$[rsp], rax
; Line 381
	mov	eax, DWORD PTR rx+5376
	add	eax, 4
	mov	DWORD PTR rx+5376, eax
; Line 383
	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $S1$[rsp], xmm0
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $S1$[rsp+4], xmm0
	mov	DWORD PTR $S1$[rsp+8], -1		; ffffffffH
	movss	xmm0, DWORD PTR tx$[rsp]
	movss	DWORD PTR $S1$[rsp+12], xmm0
	movss	xmm0, DWORD PTR ty$[rsp]
	addss	xmm0, DWORD PTR th$[rsp]
	movss	DWORD PTR $S1$[rsp+16], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vert$[rsp]
	lea	rdx, QWORD PTR $S1$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 384
	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $S2$[rsp], xmm0
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR $S2$[rsp+4], xmm0
	mov	DWORD PTR $S2$[rsp+8], -1		; ffffffffH
	movss	xmm0, DWORD PTR tx$[rsp]
	movss	DWORD PTR $S2$[rsp+12], xmm0
	movss	xmm0, DWORD PTR ty$[rsp]
	movss	DWORD PTR $S2$[rsp+16], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vert$[rsp]
	lea	rdx, QWORD PTR $S2$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 385
	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR $S3$[rsp], xmm0
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR $S3$[rsp+4], xmm0
	mov	DWORD PTR $S3$[rsp+8], -1		; ffffffffH
	movss	xmm0, DWORD PTR tx$[rsp]
	addss	xmm0, DWORD PTR tw$[rsp]
	movss	DWORD PTR $S3$[rsp+12], xmm0
	movss	xmm0, DWORD PTR ty$[rsp]
	movss	DWORD PTR $S3$[rsp+16], xmm0
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vert$[rsp]
	lea	rdx, QWORD PTR $S3$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 386
	movss	xmm0, DWORD PTR x$[rsp]
	addss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR $S4$[rsp], xmm0
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $S4$[rsp+4], xmm0
	mov	DWORD PTR $S4$[rsp+8], -1		; ffffffffH
	movss	xmm0, DWORD PTR tx$[rsp]
	addss	xmm0, DWORD PTR tw$[rsp]
	movss	DWORD PTR $S4$[rsp+12], xmm0
	movss	xmm0, DWORD PTR ty$[rsp]
	addss	xmm0, DWORD PTR th$[rsp]
	movss	DWORD PTR $S4$[rsp+16], xmm0
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vert$[rsp]
	lea	rdx, QWORD PTR $S4$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 387
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_texture_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 80
i$2 = 84
w$ = 88
h$ = 92
m$ = 96
file$ = 104
buffer$ = 112
data$ = 120
tv131 = 128
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 336
$T10 = 368
$T11 = 400
name$ = 464
rxload_font PROC
; File W:\cpp\void\rx\rx.c
; Line 335
$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rdx, OFFSET FLAT:$SG151627
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$[rsp], rax
; Line 336
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	ccpullfile
	mov	QWORD PTR data$[rsp], rax
$LN4@rxload_fon:
; Line 337
	cmp	QWORD PTR file$[rsp], 0
	jne	SHORT $LN11@rxload_fon
	lea	rax, OFFSET FLAT:$SG151631
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 337				; 00000151H
	lea	r8, OFFSET FLAT:$SG151632
	mov	edx, 180				; 000000b4H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG151629
	lea	rdx, OFFSET FLAT:$SG151630
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN11@rxload_fon:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxload_fon
$LN7@rxload_fon:
; Line 338
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN12@rxload_fon
	lea	rax, OFFSET FLAT:$SG151636
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 338				; 00000152H
	lea	r8, OFFSET FLAT:$SG151637
	mov	edx, 181				; 000000b5H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG151634
	lea	rdx, OFFSET FLAT:$SG151635
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN12@rxload_fon:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxload_fon
; Line 339
	mov	rcx, QWORD PTR file$[rsp]
	call	ccclosefile
; Line 341
	movss	xmm0, DWORD PTR __real@42800000
	movss	DWORD PTR rx+5184, xmm0
; Line 342
	mov	DWORD PTR w$[rsp], 512			; 00000200H
; Line 343
	mov	DWORD PTR h$[rsp], 512			; 00000200H
; Line 344
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	QWORD PTR tv131[rsp], rax
	lea	rcx, OFFSET FLAT:$SG151638
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 344				; 00000158H
	lea	r8, OFFSET FLAT:$SG151639
	mov	edx, 182				; 000000b6H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv131[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	mov	QWORD PTR buffer$[rsp], rax
; Line 345
	lea	rax, OFFSET FLAT:rx+64
	mov	QWORD PTR [rsp+64], rax
	mov	DWORD PTR [rsp+56], 96			; 00000060H
	mov	DWORD PTR [rsp+48], 32			; 00000020H
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR w$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR buffer$[rsp]
	movss	xmm2, DWORD PTR rx+5184
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt_BakeFontBitmap
; Line 349
	mov	r9d, 28
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	rxcreate_texture
	lea	rcx, OFFSET FLAT:rx+32
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 351
	mov	rcx, QWORD PTR rx+32
	call	rxborrow_resource
	mov	QWORD PTR m$[rsp], rax
; Line 352
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@rxload_fon
$LN8@rxload_fon:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@rxload_fon:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@rxload_fon
; Line 353
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR c$1[rsp], al
; Line 354
	mov	eax, DWORD PTR i$2[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR m$[rsp]
	movzx	edx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 355
	mov	eax, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax*4+1]
	cdqe
	mov	rcx, QWORD PTR m$[rsp]
	movzx	edx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 356
	mov	eax, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax*4+2]
	cdqe
	mov	rcx, QWORD PTR m$[rsp]
	movzx	edx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 357
	mov	eax, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR m$[rsp]
	movzx	edx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 358
	jmp	$LN8@rxload_fon
$LN9@rxload_fon:
; Line 359
	mov	rcx, QWORD PTR rx+32
	call	rxreturn_resource
; Line 361
	lea	rax, OFFSET FLAT:$SG151640
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 361				; 00000169H
	lea	r8, OFFSET FLAT:$SG151641
	mov	edx, 183				; 000000b7H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR buffer$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 362
	add	rsp, 440				; 000001b8H
	pop	rdi
	pop	rsi
	ret	0
rxload_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
y$ = 52
n$ = 56
m$ = 64
r$ = 72
$T1 = 104
__$ReturnAddress$ = 176
name$ = 184
rxload_texture_file PROC
; File W:\cpp\void\rx\rx.c
; Line 321
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 324
	mov	DWORD PTR [rsp+32], 4
	lea	r9, QWORD PTR n$[rsp]
	lea	r8, QWORD PTR y$[rsp]
	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	stbi_load
	mov	QWORD PTR m$[rsp], rax
; Line 325
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR m$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 28
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxload_texture
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 326
	mov	rcx, QWORD PTR m$[rsp]
	call	stbi_image_free
; Line 327
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 328
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxload_texture_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SubresourceInfo$ = 32
ViewInfo$ = 48
r$ = 72
TextureInfo$ = 104
__$ArrayPad$ = 152
__$ReturnAddress$ = 192
w$ = 200
h$ = 208
f$ = 216
s$ = 224
m$ = 232
rxload_texture PROC
; File W:\cpp\void\rx\rx.c
; Line 282
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 283
	mov	r8d, 44					; 0000002cH
	xor	edx, edx
	lea	rcx, QWORD PTR TextureInfo$[rsp]
	call	memset
; Line 284
	mov	eax, DWORD PTR w$[rsp]
	mov	DWORD PTR TextureInfo$[rsp], eax
; Line 285
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR TextureInfo$[rsp+4], eax
; Line 286
	mov	DWORD PTR TextureInfo$[rsp+8], 1
; Line 287
	mov	DWORD PTR TextureInfo$[rsp+12], 1
; Line 288
	mov	eax, DWORD PTR f$[rsp]
	mov	DWORD PTR TextureInfo$[rsp+16], eax
; Line 289
	mov	DWORD PTR TextureInfo$[rsp+20], 1
; Line 290
	mov	DWORD PTR TextureInfo$[rsp+24], 0
; Line 291
	mov	DWORD PTR TextureInfo$[rsp+28], 2
; Line 292
	mov	DWORD PTR TextureInfo$[rsp+40], 0
; Line 293
	mov	DWORD PTR TextureInfo$[rsp+32], 8
; Line 294
	mov	DWORD PTR TextureInfo$[rsp+36], 65536	; 00010000H
; Line 297
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR SubresourceInfo$[rsp]
	call	memset
; Line 298
	mov	rax, QWORD PTR m$[rsp]
	mov	QWORD PTR SubresourceInfo$[rsp], rax
; Line 299
	mov	eax, DWORD PTR s$[rsp]
	mov	DWORD PTR SubresourceInfo$[rsp+8], eax
; Line 302
	mov	eax, DWORD PTR w$[rsp]
	mov	DWORD PTR r$[rsp+16], eax
; Line 303
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR r$[rsp+20], eax
; Line 304
	mov	eax, DWORD PTR f$[rsp]
	mov	DWORD PTR r$[rsp+24], eax
; Line 306
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR r$[rsp]
	lea	r8, QWORD PTR SubresourceInfo$[rsp]
	lea	rdx, QWORD PTR TextureInfo$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+40]
; Line 309
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR ViewInfo$[rsp]
	call	memset
; Line 310
	mov	DWORD PTR ViewInfo$[rsp], 0
; Line 311
	mov	DWORD PTR ViewInfo$[rsp+4], 4
; Line 312
	mov	DWORD PTR ViewInfo$[rsp+8], 0
; Line 313
	mov	DWORD PTR ViewInfo$[rsp+12], 1
; Line 315
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR r$[rsp+8]
	lea	r8, QWORD PTR ViewInfo$[rsp]
	mov	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+56]
; Line 317
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 318
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
rxload_texture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
r$ = 56
i$ = 88
__$ArrayPad$ = 136
__$ReturnAddress$ = 176
w$ = 184
h$ = 192
f$ = 200
rxcreate_texture PROC
; File W:\cpp\void\rx\rx.c
; Line 248
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 249
	mov	r8d, 44					; 0000002cH
	xor	edx, edx
	lea	rcx, QWORD PTR i$[rsp]
	call	memset
; Line 250
	mov	eax, DWORD PTR w$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 251
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR i$[rsp+4], eax
; Line 252
	mov	DWORD PTR i$[rsp+8], 1
; Line 253
	mov	DWORD PTR i$[rsp+12], 1
; Line 254
	mov	eax, DWORD PTR f$[rsp]
	mov	DWORD PTR i$[rsp+16], eax
; Line 255
	mov	DWORD PTR i$[rsp+20], 1
; Line 256
	mov	DWORD PTR i$[rsp+24], 0
; Line 257
	mov	DWORD PTR i$[rsp+28], 2
; Line 258
	mov	DWORD PTR i$[rsp+40], 0
; Line 259
	mov	DWORD PTR i$[rsp+32], 8
; Line 260
	mov	DWORD PTR i$[rsp+36], 65536		; 00010000H
; Line 263
	mov	eax, DWORD PTR w$[rsp]
	mov	DWORD PTR r$[rsp+16], eax
; Line 264
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR r$[rsp+20], eax
; Line 265
	mov	eax, DWORD PTR f$[rsp]
	mov	DWORD PTR r$[rsp+24], eax
; Line 267
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR r$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+40]
; Line 270
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR v$[rsp]
	call	memset
; Line 271
	mov	DWORD PTR v$[rsp], 0
; Line 272
	mov	DWORD PTR v$[rsp+4], 4
; Line 273
	mov	DWORD PTR v$[rsp+8], 0
; Line 274
	mov	DWORD PTR v$[rsp+12], 1
; Line 276
	mov	rax, QWORD PTR rx+5216
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR r$[rsp+8]
	lea	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR rx+5216
	call	QWORD PTR [rax+56]
; Line 278
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 279
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxcreate_texture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 48
result$ = 64
__$ReturnAddress$ = 128
texture$ = 136
rxborrow_texture PROC
; File W:\cpp\void\rx\rx.c
; Line 236
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 238
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR m$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rcx, QWORD PTR texture$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+112]
; Line 241
	mov	rax, QWORD PTR texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR result$[rsp], rax
; Line 242
	mov	eax, DWORD PTR m$[rsp+8]
	mov	DWORD PTR result$[rsp+16], eax
; Line 243
	mov	rax, QWORD PTR m$[rsp]
	mov	QWORD PTR result$[rsp+8], rax
; Line 244
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 245
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxborrow_texture ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
borrowed$ = 48
rxreturn PROC
; File W:\cpp\void\rx\rx.c
; Line 231
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 232
	mov	rax, QWORD PTR borrowed$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	rxreturn_resource
; Line 233
	add	rsp, 40					; 00000028H
	ret	0
rxreturn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
resource$ = 48
rxreturn_resource PROC
; File W:\cpp\void\rx\rx.c
; Line 226
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 227
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	rdx, QWORD PTR resource$[rsp]
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+120]
; Line 228
	add	rsp, 40					; 00000028H
	ret	0
rxreturn_resource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 48
resource$ = 80
rxborrow_resource PROC
; File W:\cpp\void\rx\rx.c
; Line 217
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 219
	mov	rax, QWORD PTR rx+5224
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR m$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rdx, QWORD PTR resource$[rsp]
	mov	rcx, QWORD PTR rx+5224
	call	QWORD PTR [rax+112]
; Line 221
	mov	rax, QWORD PTR m$[rsp]
; Line 222
	add	rsp, 72					; 00000048H
	ret	0
rxborrow_resource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
off$1 = 32
i$ = 36
font_collection$ = 64
name_utf8$ = 72
flags$ = 80
stbtt_FindMatchingFont_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4921
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4923
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
; Line 4924
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR off$1[rsp], eax
; Line 4925
	cmp	DWORD PTR off$1[rsp], 0
	jge	SHORT $LN5@stbtt_Find
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 4926
	mov	r9d, DWORD PTR flags$[rsp]
	mov	r8, QWORD PTR name_utf8$[rsp]
	mov	edx, DWORD PTR off$1[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt__matches
	test	eax, eax
	je	SHORT $LN6@stbtt_Find
; Line 4927
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN6@stbtt_Find:
; Line 4928
	jmp	SHORT $LN2@stbtt_Find
$LN1@stbtt_Find:
; Line 4929
	add	rsp, 56					; 00000038H
	ret	0
stbtt_FindMatchingFont_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nm$ = 48
nlen$ = 52
hd$ = 56
fc$ = 80
offset$ = 88
name$ = 96
flags$ = 104
stbtt__matches PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4892
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4893
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	DWORD PTR nlen$[rsp], eax
; Line 4895
	mov	eax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	stbtt__isfont
	test	eax, eax
	jne	SHORT $LN2@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN2@stbtt__mat:
; Line 4898
	cmp	DWORD PTR flags$[rsp], 0
	je	SHORT $LN3@stbtt__mat
; Line 4899
	lea	r8, OFFSET FLAT:$SG85881
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR hd$[rsp], eax
; Line 4900
	mov	eax, DWORD PTR hd$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+44]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	and	eax, 7
	mov	ecx, DWORD PTR flags$[rsp]
	and	ecx, 7
	cmp	eax, ecx
	je	SHORT $LN4@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN4@stbtt__mat:
$LN3@stbtt__mat:
; Line 4903
	lea	r8, OFFSET FLAT:$SG85883
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4904
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN5@stbtt__mat:
; Line 4906
	cmp	DWORD PTR flags$[rsp], 0
	je	$LN6@stbtt__mat
; Line 4908
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN8@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN8@stbtt__mat:
; Line 4909
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN9@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN9@stbtt__mat:
; Line 4910
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN10@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN10@stbtt__mat:
; Line 4911
	jmp	$LN7@stbtt__mat
$LN6@stbtt__mat:
; Line 4912
	mov	DWORD PTR [rsp+40], 17
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN11@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN11@stbtt__mat:
; Line 4913
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN12@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN12@stbtt__mat:
; Line 4914
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__matchpair
	test	eax, eax
	je	SHORT $LN13@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN13@stbtt__mat:
$LN7@stbtt__mat:
; Line 4917
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4918
	add	rsp, 72					; 00000048H
	ret	0
stbtt__matches ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
matchlen$2 = 36
i$ = 40
platform$3 = 44
slen$4 = 48
encoding$5 = 52
off$6 = 56
count$ = 60
stringOffset$ = 64
id$7 = 68
language$8 = 72
tv231 = 80
fc$ = 112
nm$ = 120
name$ = 128
nlen$ = 136
target_id$ = 144
next_id$ = 152
stbtt__matchpair PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4845
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4847
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4848
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4850
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__mat
$LN2@stbtt__mat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__mat:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__mat
; Line 4851
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4852
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR id$7[rsp], eax
; Line 4853
	mov	eax, DWORD PTR target_id$[rsp]
	cmp	DWORD PTR id$7[rsp], eax
	jne	$LN5@stbtt__mat
; Line 4855
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR platform$3[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR encoding$5[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR language$8[rsp], eax
; Line 4858
	cmp	DWORD PTR platform$3[rsp], 0
	je	SHORT $LN7@stbtt__mat
	cmp	DWORD PTR platform$3[rsp], 3
	jne	SHORT $LN8@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 1
	je	SHORT $LN7@stbtt__mat
$LN8@stbtt__mat:
	cmp	DWORD PTR platform$3[rsp], 3
	jne	$LN6@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 10
	jne	$LN6@stbtt__mat
$LN7@stbtt__mat:
; Line 4859
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4860
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4863
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR nlen$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	stbtt__CompareUTF8toUTF16_bigendian_prefix
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4864
	cmp	DWORD PTR matchlen$2[rsp], 0
	jl	$LN9@stbtt__mat
; Line 4866
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR next_id$[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR platform$3[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+14]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR encoding$5[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR language$8[rsp]
	jne	$LN10@stbtt__mat
; Line 4867
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4868
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4869
	cmp	DWORD PTR slen$4[rsp], 0
	jne	SHORT $LN12@stbtt__mat
; Line 4870
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN14@stbtt__mat
; Line 4871
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN14@stbtt__mat:
; Line 4872
	jmp	$LN13@stbtt__mat
$LN12@stbtt__mat:
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jge	$LN15@stbtt__mat
	movsxd	rax, DWORD PTR matchlen$2[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN15@stbtt__mat
; Line 4873
	mov	eax, DWORD PTR matchlen$2[rsp]
	inc	eax
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4874
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	ecx, DWORD PTR matchlen$2[rsp]
	mov	edx, DWORD PTR nlen$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rdx, DWORD PTR matchlen$2[rsp]
	mov	r8, QWORD PTR name$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv231[rsp], rdx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv231[rsp]
	mov	rcx, rax
	call	stbtt_CompareUTF8toUTF16_bigendian_internal
	test	eax, eax
	je	SHORT $LN16@stbtt__mat
; Line 4875
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN16@stbtt__mat:
$LN15@stbtt__mat:
$LN13@stbtt__mat:
; Line 4877
	jmp	SHORT $LN11@stbtt__mat
$LN10@stbtt__mat:
; Line 4879
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN17@stbtt__mat
; Line 4880
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN17@stbtt__mat:
$LN11@stbtt__mat:
$LN9@stbtt__mat:
$LN6@stbtt__mat:
$LN5@stbtt__mat:
; Line 4887
	jmp	$LN2@stbtt__mat
$LN3@stbtt__mat:
; Line 4888
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4889
	add	rsp, 104				; 00000068H
	ret	0
stbtt__matchpair ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s1$ = 64
len1$ = 72
s2$ = 80
len2$ = 88
stbtt_CompareUTF8toUTF16_bigendian_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4817
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4818
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	stbtt__CompareUTF8toUTF16_bigendian_prefix
	cmp	DWORD PTR len1$[rsp], eax
	jne	SHORT $LN3@stbtt_Comp
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stbtt_Comp
$LN3@stbtt_Comp:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stbtt_Comp:
	mov	eax, DWORD PTR tv70[rsp]
; Line 4819
	add	rsp, 56					; 00000038H
	ret	0
stbtt_CompareUTF8toUTF16_bigendian_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
ch$1 = 4
c$2 = 8
ch2$3 = 12
tv85 = 16
tv84 = 20
tv132 = 24
tv131 = 28
tv143 = 32
tv142 = 36
tv175 = 40
tv174 = 44
tv186 = 48
tv185 = 52
tv197 = 56
tv196 = 60
tv207 = 64
tv206 = 68
tv226 = 72
tv225 = 76
tv238 = 80
tv237 = 84
tv249 = 88
tv248 = 92
s1$ = 112
len1$ = 120
s2$ = 128
len2$ = 136
stbtt__CompareUTF8toUTF16_bigendian_prefix PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4778
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4779
	mov	DWORD PTR i$[rsp], 0
$LN2@stbtt__Com:
; Line 4782
	cmp	DWORD PTR len2$[rsp], 0
	je	$LN3@stbtt__Com
; Line 4783
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch$1[rsp], ax
; Line 4784
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@stbtt__Com
; Line 4785
	mov	eax, DWORD PTR len1$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN6@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN6@stbtt__Com:
; Line 4786
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv84[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	mov	DWORD PTR tv85[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv85[rsp]
	cmp	DWORD PTR tv84[rsp], eax
	je	SHORT $LN7@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN7@stbtt__Com:
; Line 4787
	jmp	$LN5@stbtt__Com
$LN4@stbtt__Com:
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 2048				; 00000800H
	jge	$LN8@stbtt__Com
; Line 4788
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN10@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN10@stbtt__Com:
; Line 4789
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv131[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	add	eax, 192				; 000000c0H
	mov	DWORD PTR tv132[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv132[rsp]
	cmp	DWORD PTR tv131[rsp], eax
	je	SHORT $LN11@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN11@stbtt__Com:
; Line 4790
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv142[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv143[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv143[rsp]
	cmp	DWORD PTR tv142[rsp], eax
	je	SHORT $LN12@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN12@stbtt__Com:
; Line 4791
	jmp	$LN9@stbtt__Com
$LN8@stbtt__Com:
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN13@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN13@stbtt__Com
; Line 4793
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch2$3[rsp], ax
; Line 4794
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN15@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN15@stbtt__Com:
; Line 4795
	movzx	eax, WORD PTR ch$1[rsp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10
	movzx	ecx, WORD PTR ch2$3[rsp]
	lea	eax, DWORD PTR [rax+rcx+9216]
	mov	DWORD PTR c$2[rsp], eax
; Line 4796
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv174[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 18
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv175[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv175[rsp]
	cmp	DWORD PTR tv174[rsp], eax
	je	SHORT $LN16@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN16@stbtt__Com:
; Line 4797
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv185[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 12
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv186[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv186[rsp]
	cmp	DWORD PTR tv185[rsp], eax
	je	SHORT $LN17@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN17@stbtt__Com:
; Line 4798
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv196[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv197[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv197[rsp]
	cmp	DWORD PTR tv196[rsp], eax
	je	SHORT $LN18@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN18@stbtt__Com:
; Line 4799
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv206[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv207[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv207[rsp]
	cmp	DWORD PTR tv206[rsp], eax
	je	SHORT $LN19@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN19@stbtt__Com:
; Line 4800
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4801
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
	jmp	$LN14@stbtt__Com
$LN13@stbtt__Com:
; Line 4802
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN20@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 57344				; 0000e000H
	jge	SHORT $LN20@stbtt__Com
; Line 4803
	mov	eax, -1
	jmp	$LN1@stbtt__Com
; Line 4804
	jmp	$LN21@stbtt__Com
$LN20@stbtt__Com:
; Line 4805
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN22@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN22@stbtt__Com:
; Line 4806
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv225[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 12
	add	eax, 224				; 000000e0H
	mov	DWORD PTR tv226[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv226[rsp]
	cmp	DWORD PTR tv225[rsp], eax
	je	SHORT $LN23@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN23@stbtt__Com:
; Line 4807
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv237[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv238[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv238[rsp]
	cmp	DWORD PTR tv237[rsp], eax
	je	SHORT $LN24@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN24@stbtt__Com:
; Line 4808
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv248[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv249[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv249[rsp]
	cmp	DWORD PTR tv248[rsp], eax
	je	SHORT $LN25@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN25@stbtt__Com:
$LN21@stbtt__Com:
$LN14@stbtt__Com:
$LN9@stbtt__Com:
$LN5@stbtt__Com:
; Line 4810
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4811
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
; Line 4812
	jmp	$LN2@stbtt__Com
$LN3@stbtt__Com:
; Line 4813
	mov	eax, DWORD PTR i$[rsp]
$LN1@stbtt__Com:
; Line 4814
	add	rsp, 104				; 00000068H
	ret	0
stbtt__CompareUTF8toUTF16_bigendian_prefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 36
s$ = 40
u$1 = 44
v$2 = 48
m$3 = 52
u$4 = 56
d$ = 60
z$5 = 64
p3$ = 68
v$6 = 72
n$7 = 76
a$ = 96
b$ = 104
c$ = 112
r$ = 120
stbtt__solve_cubic PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4545
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 88					; 00000058H
; Line 4546
	movss	xmm0, DWORD PTR a$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR s$[rsp], xmm0
; Line 4547
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR b$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR p$[rsp], xmm0
; Line 4548
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR __real@41100000
	mulss	xmm1, DWORD PTR b$[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@41d80000
	addss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR q$[rsp], xmm0
; Line 4549
	movss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	mulss	xmm0, DWORD PTR p$[rsp]
	movss	DWORD PTR p3$[rsp], xmm0
; Line 4550
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR q$[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR p3$[rsp]
	divss	xmm1, DWORD PTR __real@41d80000
	addss	xmm0, xmm1
	movss	DWORD PTR d$[rsp], xmm0
; Line 4551
	movss	xmm0, DWORD PTR d$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN2@stbtt__sol
; Line 4552
	cvtss2sd xmm0, DWORD PTR d$[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR z$5[rsp], xmm0
; Line 4553
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4554
	movss	xmm0, DWORD PTR q$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR z$5[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4555
	movss	xmm0, DWORD PTR u$1[rsp]
	call	stbtt__cuberoot
	movss	DWORD PTR u$1[rsp], xmm0
; Line 4556
	movss	xmm0, DWORD PTR v$2[rsp]
	call	stbtt__cuberoot
	movss	DWORD PTR v$2[rsp], xmm0
; Line 4557
	movss	xmm0, DWORD PTR s$[rsp]
	addss	xmm0, DWORD PTR u$1[rsp]
	addss	xmm0, DWORD PTR v$2[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4558
	mov	eax, 1
	jmp	$LN1@stbtt__sol
; Line 4559
	jmp	$LN3@stbtt__sol
$LN2@stbtt__sol:
; Line 4560
	movss	xmm0, DWORD PTR p$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40400000
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR u$4[rsp], xmm0
; Line 4561
	movss	xmm0, DWORD PTR __real@c1d80000
	divss	xmm0, DWORD PTR p3$[rsp]
	cvtss2sd xmm0, xmm0
	call	sqrt
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR q$[rsp]
	mulsd	xmm0, xmm1
	divsd	xmm0, QWORD PTR __real@4000000000000000
	call	acos
	cvtsd2ss xmm0, xmm0
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR v$6[rsp], xmm0
; Line 4562
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	call	cos
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$3[rsp], xmm0
; Line 4563
	cvtss2sd xmm0, DWORD PTR v$6[rsp]
	subsd	xmm0, QWORD PTR __real@3ff921fafc8b007a
	call	cos
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@3fddb3d7
	movss	DWORD PTR n$7[rsp], xmm0
; Line 4564
	movss	xmm0, DWORD PTR u$4[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR m$3[rsp]
	movss	xmm1, DWORD PTR s$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4565
	movss	xmm0, DWORD PTR m$3[rsp]
	addss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4566
	movss	xmm0, DWORD PTR m$3[rsp]
	subss	xmm0, DWORD PTR n$7[rsp]
	movss	xmm1, DWORD PTR u$4[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 4571
	mov	eax, 3
$LN3@stbtt__sol:
$LN1@stbtt__sol:
; Line 4573
	add	rsp, 88					; 00000058H
	ret	0
stbtt__solve_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
stbtt__cuberoot PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4536
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 4537
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbtt__cub
; Line 4538
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@stbtt__cub
	jmp	SHORT $LN3@stbtt__cub
$LN2@stbtt__cub:
; Line 4540
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	movsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	cvtsd2ss xmm0, xmm0
$LN3@stbtt__cub:
$LN1@stbtt__cub:
; Line 4541
	add	rsp, 40					; 00000028H
	ret	0
stbtt__cuberoot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
y1$1 = 52
y0$2 = 56
y2$3 = 60
x1$4 = 64
winding$ = 68
x0$5 = 72
y0$6 = 76
y1$7 = 80
x2$8 = 84
x0$9 = 88
x1$10 = 92
y_frac$ = 96
tv140 = 100
tv144 = 104
tv148 = 108
tv164 = 112
tv205 = 116
tv208 = 120
tv209 = 124
tv211 = 128
tv214 = 132
tv215 = 136
tv217 = 140
tv220 = 144
tv221 = 148
tv277 = 152
tv281 = 156
tv285 = 160
tv301 = 164
tv353 = 168
num_hits$11 = 172
tv366 = 176
q1$12 = 184
ay$13 = 192
by$14 = 196
ax$15 = 200
x_inter$16 = 204
x_inter$17 = 208
q2$18 = 216
q0$19 = 224
ray$ = 232
orig$ = 240
hits$20 = 248
__$ArrayPad$ = 264
x$ = 288
y$ = 296
nverts$ = 304
verts$ = 312
stbtt__compute_crossings_x PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4468
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4470
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ray$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR ray$[rsp+4], xmm0
; Line 4472
	mov	DWORD PTR winding$[rsp], 0
; Line 4475
	cvtss2sd xmm0, DWORD PTR y$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	call	fmod
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR y_frac$[rsp], xmm0
; Line 4476
	movss	xmm0, DWORD PTR __real@3c23d70a
	comiss	xmm0, DWORD PTR y_frac$[rsp]
	jbe	SHORT $LN5@stbtt__com
; Line 4477
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
	jmp	SHORT $LN6@stbtt__com
$LN5@stbtt__com:
; Line 4478
	movss	xmm0, DWORD PTR y_frac$[rsp]
	comiss	xmm0, DWORD PTR __real@3f7d70a4
	jbe	SHORT $LN7@stbtt__com
; Line 4479
	movss	xmm0, DWORD PTR y$[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR y$[rsp], xmm0
$LN7@stbtt__com:
$LN6@stbtt__com:
; Line 4481
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4482
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4485
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__com
$LN2@stbtt__com:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__com:
	mov	eax, DWORD PTR nverts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__com
; Line 4486
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN8@stbtt__com
; Line 4487
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$9[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$6[rsp], eax
; Line 4488
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$10[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$7[rsp], eax
; Line 4489
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN23@stbtt__com
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN24@stbtt__com
$LN23@stbtt__com:
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv140[rsp], eax
$LN24@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv140[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN25@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN26@stbtt__com
$LN25@stbtt__com:
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv144[rsp], eax
$LN26@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv144[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR x1$10[rsp]
	cmp	DWORD PTR x0$9[rsp], eax
	jge	SHORT $LN27@stbtt__com
	mov	eax, DWORD PTR x0$9[rsp]
	mov	DWORD PTR tv148[rsp], eax
	jmp	SHORT $LN28@stbtt__com
$LN27@stbtt__com:
	mov	eax, DWORD PTR x1$10[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN28@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv148[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
; Line 4490
	cvtsi2ss xmm0, DWORD PTR y0$6[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$6[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$9[rsp]
	mov	ecx, DWORD PTR x1$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$9[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$17[rsp], xmm0
; Line 4491
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$17[rsp]
	jbe	SHORT $LN10@stbtt__com
; Line 4492
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN29@stbtt__com
	mov	DWORD PTR tv164[rsp], 1
	jmp	SHORT $LN30@stbtt__com
$LN29@stbtt__com:
	mov	DWORD PTR tv164[rsp], -1
$LN30@stbtt__com:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN10@stbtt__com:
$LN9@stbtt__com:
$LN8@stbtt__com:
; Line 4495
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN11@stbtt__com
; Line 4496
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4497
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	mov	DWORD PTR x1$4[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4498
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x2$8[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y2$3[rsp], eax
; Line 4499
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN31@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv205[rsp], eax
	jmp	SHORT $LN32@stbtt__com
$LN31@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv205[rsp], eax
$LN32@stbtt__com:
	mov	eax, DWORD PTR tv205[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN35@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv209[rsp], eax
	jmp	SHORT $LN36@stbtt__com
$LN35@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN33@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN34@stbtt__com
$LN33@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv208[rsp], eax
$LN34@stbtt__com:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR tv209[rsp], eax
$LN36@stbtt__com:
	mov	eax, DWORD PTR tv209[rsp]
	mov	DWORD PTR ax$15[rsp], eax
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN37@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv211[rsp], eax
	jmp	SHORT $LN38@stbtt__com
$LN37@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv211[rsp], eax
$LN38@stbtt__com:
	mov	eax, DWORD PTR tv211[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN41@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv215[rsp], eax
	jmp	SHORT $LN42@stbtt__com
$LN41@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN39@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv214[rsp], eax
	jmp	SHORT $LN40@stbtt__com
$LN39@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv214[rsp], eax
$LN40@stbtt__com:
	mov	eax, DWORD PTR tv214[rsp]
	mov	DWORD PTR tv215[rsp], eax
$LN42@stbtt__com:
	mov	eax, DWORD PTR tv215[rsp]
	mov	DWORD PTR ay$13[rsp], eax
; Line 4500
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN43@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv217[rsp], eax
	jmp	SHORT $LN44@stbtt__com
$LN43@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv217[rsp], eax
$LN44@stbtt__com:
	mov	eax, DWORD PTR tv217[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN47@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN45@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv220[rsp], eax
	jmp	SHORT $LN46@stbtt__com
$LN45@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv220[rsp], eax
$LN46@stbtt__com:
	mov	eax, DWORD PTR tv220[rsp]
	mov	DWORD PTR tv221[rsp], eax
	jmp	SHORT $LN48@stbtt__com
$LN47@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv221[rsp], eax
$LN48@stbtt__com:
	mov	eax, DWORD PTR tv221[rsp]
	mov	DWORD PTR by$14[rsp], eax
; Line 4501
	cvtsi2ss xmm0, DWORD PTR ay$13[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR by$14[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN12@stbtt__com
	cvtsi2ss xmm0, DWORD PTR ax$15[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
; Line 4504
	cvtsi2ss xmm0, DWORD PTR x0$5[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4505
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4506
	cvtsi2ss xmm0, DWORD PTR x1$4[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4507
	cvtsi2ss xmm0, DWORD PTR y1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4508
	cvtsi2ss xmm0, DWORD PTR x2$8[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4509
	cvtsi2ss xmm0, DWORD PTR y2$3[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4510
	lea	rdx, QWORD PTR q1$12[rsp]
	lea	rcx, QWORD PTR q0$19[rsp]
	call	equal
	test	eax, eax
	jne	SHORT $LN15@stbtt__com
	lea	rdx, QWORD PTR q2$18[rsp]
	lea	rcx, QWORD PTR q1$12[rsp]
	call	equal
	test	eax, eax
	je	$LN13@stbtt__com
$LN15@stbtt__com:
; Line 4511
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
; Line 4512
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4513
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$4[rsp], eax
; Line 4514
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4515
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN49@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv277[rsp], eax
	jmp	SHORT $LN50@stbtt__com
$LN49@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv277[rsp], eax
$LN50@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv277[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN51@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv281[rsp], eax
	jmp	SHORT $LN52@stbtt__com
$LN51@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv281[rsp], eax
$LN52@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv281[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN53@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv285[rsp], eax
	jmp	SHORT $LN54@stbtt__com
$LN53@stbtt__com:
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv285[rsp], eax
$LN54@stbtt__com:
	cvtsi2ss xmm0, DWORD PTR tv285[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	comiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
; Line 4516
	cvtsi2ss xmm0, DWORD PTR y0$2[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR y0$2[rsp]
	mov	ecx, DWORD PTR y1$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x0$5[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR x_inter$16[rsp], xmm0
; Line 4517
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x_inter$16[rsp]
	jbe	SHORT $LN17@stbtt__com
; Line 4518
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN55@stbtt__com
	mov	DWORD PTR tv301[rsp], 1
	jmp	SHORT $LN56@stbtt__com
$LN55@stbtt__com:
	mov	DWORD PTR tv301[rsp], -1
$LN56@stbtt__com:
	mov	eax, DWORD PTR tv301[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN17@stbtt__com:
$LN16@stbtt__com:
; Line 4520
	jmp	$LN14@stbtt__com
$LN13@stbtt__com:
; Line 4521
	lea	rax, QWORD PTR hits$20[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR q2$18[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR q1$12[rsp]
	lea	r8, QWORD PTR q0$19[rsp]
	lea	rdx, QWORD PTR ray$[rsp]
	lea	rcx, QWORD PTR orig$[rsp]
	call	stbtt__ray_intersect_bezier
	mov	DWORD PTR num_hits$11[rsp], eax
; Line 4522
	cmp	DWORD PTR num_hits$11[rsp], 1
	jl	SHORT $LN18@stbtt__com
; Line 4523
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN19@stbtt__com
; Line 4524
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN57@stbtt__com
	mov	DWORD PTR tv353[rsp], -1
	jmp	SHORT $LN58@stbtt__com
$LN57@stbtt__com:
	mov	DWORD PTR tv353[rsp], 1
$LN58@stbtt__com:
	mov	eax, DWORD PTR tv353[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN19@stbtt__com:
$LN18@stbtt__com:
; Line 4525
	cmp	DWORD PTR num_hits$11[rsp], 2
	jl	SHORT $LN20@stbtt__com
; Line 4526
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN21@stbtt__com
; Line 4527
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN59@stbtt__com
	mov	DWORD PTR tv366[rsp], -1
	jmp	SHORT $LN60@stbtt__com
$LN59@stbtt__com:
	mov	DWORD PTR tv366[rsp], 1
$LN60@stbtt__com:
	mov	eax, DWORD PTR tv366[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN21@stbtt__com:
$LN20@stbtt__com:
$LN14@stbtt__com:
$LN12@stbtt__com:
$LN11@stbtt__com:
; Line 4531
	jmp	$LN2@stbtt__com
$LN3@stbtt__com:
; Line 4532
	mov	eax, DWORD PTR winding$[rsp]
; Line 4533
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbtt__compute_crossings_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 0
a$ = 32
b$ = 40
equal	PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4463
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4464
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	ucomiss	xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv74[rsp], 0
$LN4@equal:
	mov	eax, DWORD PTR tv74[rsp]
; Line 4465
	add	rsp, 24
	ret	0
equal	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s0$ = 32
s1$ = 36
num_s$ = 40
b$ = 44
a$ = 48
rayn_x$1 = 52
rayn_y$2 = 56
q0perp$ = 60
d$3 = 64
q0d$4 = 68
q1perp$ = 72
discr$5 = 76
rcpna$6 = 80
c$ = 84
rcp_len2$7 = 88
q10d$8 = 92
q0rd$9 = 96
q20d$10 = 100
q2perp$ = 104
roperp$ = 108
q1d$11 = 112
q2d$12 = 116
rod$13 = 120
orig$ = 144
ray$ = 152
q0$ = 160
q1$ = 168
q2$ = 176
hits$ = 184
stbtt__ray_intersect_bezier PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4399
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4400
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q0perp$[rsp], xmm0
; Line 4401
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q1perp$[rsp], xmm0
; Line 4402
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR q2perp$[rsp], xmm0
; Line 4403
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR roperp$[rsp], xmm0
; Line 4405
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR q1perp$[rsp]
	movss	xmm1, DWORD PTR q0perp$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR q2perp$[rsp]
	movss	DWORD PTR a$[rsp], xmm0
; Line 4406
	movss	xmm0, DWORD PTR q1perp$[rsp]
	subss	xmm0, DWORD PTR q0perp$[rsp]
	movss	DWORD PTR b$[rsp], xmm0
; Line 4407
	movss	xmm0, DWORD PTR q0perp$[rsp]
	subss	xmm0, DWORD PTR roperp$[rsp]
	movss	DWORD PTR c$[rsp], xmm0
; Line 4409
	xorps	xmm0, xmm0
	movss	DWORD PTR s0$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4410
	mov	DWORD PTR num_s$[rsp], 0
; Line 4412
	cvtss2sd xmm0, DWORD PTR a$[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN14@stbtt__ray
	je	$LN2@stbtt__ray
$LN14@stbtt__ray:
; Line 4413
	movss	xmm0, DWORD PTR b$[rsp]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR a$[rsp]
	mulss	xmm1, DWORD PTR c$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discr$5[rsp], xmm0
; Line 4414
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN4@stbtt__ray
; Line 4415
	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR rcpna$6[rsp], xmm0
; Line 4416
	cvtss2sd xmm0, DWORD PTR discr$5[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR d$3[rsp], xmm0
; Line 4417
	movss	xmm0, DWORD PTR b$[rsp]
	addss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4418
	movss	xmm0, DWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR d$3[rsp]
	mulss	xmm0, DWORD PTR rcpna$6[rsp]
	movss	DWORD PTR s1$[rsp], xmm0
; Line 4419
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN5@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN5@stbtt__ray
; Line 4420
	mov	DWORD PTR num_s$[rsp], 1
$LN5@stbtt__ray:
; Line 4421
	cvtss2sd xmm0, DWORD PTR d$3[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN6@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s1$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN6@stbtt__ray
; Line 4422
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN7@stbtt__ray
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR s0$[rsp], xmm0
$LN7@stbtt__ray:
; Line 4423
	mov	eax, DWORD PTR num_s$[rsp]
	inc	eax
	mov	DWORD PTR num_s$[rsp], eax
$LN6@stbtt__ray:
$LN4@stbtt__ray:
; Line 4426
	jmp	SHORT $LN3@stbtt__ray
$LN2@stbtt__ray:
; Line 4429
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR c$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR s0$[rsp], xmm0
; Line 4430
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN8@stbtt__ray
	cvtss2sd xmm0, DWORD PTR s0$[rsp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jb	SHORT $LN8@stbtt__ray
; Line 4431
	mov	DWORD PTR num_s$[rsp], 1
$LN8@stbtt__ray:
$LN3@stbtt__ray:
; Line 4434
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN9@stbtt__ray
; Line 4435
	xor	eax, eax
	jmp	$LN1@stbtt__ray
	jmp	$LN10@stbtt__ray
$LN9@stbtt__ray:
; Line 4437
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	mulss	xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	movss	xmm1, DWORD PTR [rdx+rax]
	mulss	xmm1, DWORD PTR [r8+rcx]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR rcp_len2$7[rsp], xmm0
; Line 4438
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_x$1[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR ray$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rcp_len2$7[rsp]
	movss	DWORD PTR rayn_y$2[rsp], xmm0
; Line 4440
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q0$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q0d$4[rsp], xmm0
; Line 4441
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q1d$11[rsp], xmm0
; Line 4442
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR q2d$12[rsp], xmm0
; Line 4443
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR orig$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	mulss	xmm1, DWORD PTR rayn_y$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR rod$13[rsp], xmm0
; Line 4445
	movss	xmm0, DWORD PTR q1d$11[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q10d$8[rsp], xmm0
; Line 4446
	movss	xmm0, DWORD PTR q2d$12[rsp]
	subss	xmm0, DWORD PTR q0d$4[rsp]
	movss	DWORD PTR q20d$10[rsp], xmm0
; Line 4447
	movss	xmm0, DWORD PTR q0d$4[rsp]
	subss	xmm0, DWORD PTR rod$13[rsp]
	movss	DWORD PTR q0rd$9[rsp], xmm0
; Line 4449
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s0$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4450
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s0$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4452
	cmp	DWORD PTR num_s$[rsp], 1
	jle	$LN11@stbtt__ray
; Line 4453
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR s1$[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR q10d$8[rsp]
	movss	xmm1, DWORD PTR q0rd$9[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR s1$[rsp]
	mulss	xmm1, DWORD PTR q20d$10[rsp]
	addss	xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4454
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR s1$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 4455
	mov	eax, 2
	jmp	SHORT $LN1@stbtt__ray
; Line 4456
	jmp	SHORT $LN12@stbtt__ray
$LN11@stbtt__ray:
; Line 4457
	mov	eax, 1
$LN12@stbtt__ray:
$LN10@stbtt__ray:
$LN1@stbtt__ray:
; Line 4460
	add	rsp, 136				; 00000088H
	ret	0
stbtt__ray_intersect_bezier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oversample$ = 8
stbtt__oversample_shift PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4137
	mov	DWORD PTR [rsp+8], ecx
; Line 4138
	cmp	DWORD PTR oversample$[rsp], 0
	jne	SHORT $LN2@stbtt__ove
; Line 4139
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:
; Line 4145
	mov	eax, DWORD PTR oversample$[rsp]
	dec	eax
	neg	eax
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR oversample$[rsp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	divss	xmm0, xmm1
$LN1@stbtt__ove:
; Line 4146
	ret	0
stbtt__oversample_shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_h$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
stbtt__v_prefilter PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4075
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4077
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_h$[rsp], eax
; Line 4079
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4080
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__v_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__v_p
; Line 4083
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4085
	mov	DWORD PTR total$2[rsp], 0
; Line 4088
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__v_p
	jmp	$LN29@stbtt__v_p
$LN25@stbtt__v_p:
; Line 4090
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN8@stbtt__v_p
; Line 4091
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4092
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4093
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4094
	jmp	$LN7@stbtt__v_p
$LN8@stbtt__v_p:
; Line 4095
	jmp	$LN5@stbtt__v_p
$LN26@stbtt__v_p:
; Line 4097
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN11@stbtt__v_p
; Line 4098
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4099
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4100
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4101
	jmp	$LN10@stbtt__v_p
$LN11@stbtt__v_p:
; Line 4102
	jmp	$LN5@stbtt__v_p
$LN27@stbtt__v_p:
; Line 4104
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN14@stbtt__v_p
; Line 4105
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4106
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4107
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4108
	jmp	$LN13@stbtt__v_p
$LN14@stbtt__v_p:
; Line 4109
	jmp	$LN5@stbtt__v_p
$LN28@stbtt__v_p:
; Line 4111
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN17@stbtt__v_p
; Line 4112
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4113
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4114
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4115
	jmp	$LN16@stbtt__v_p
$LN17@stbtt__v_p:
; Line 4116
	jmp	$LN5@stbtt__v_p
$LN29@stbtt__v_p:
; Line 4118
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN20@stbtt__v_p
; Line 4119
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4120
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4121
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4122
	jmp	$LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:
; Line 4126
	jmp	SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__v_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__v_p
; Line 4127
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__v_p
	mov	r8d, 4127				; 0000101fH
	lea	rdx, OFFSET FLAT:$SG85126
	lea	rcx, OFFSET FLAT:$SG85127
	call	_wassert
	xor	eax, eax
$LN31@stbtt__v_p:
; Line 4128
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4129
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4130
	jmp	$LN22@stbtt__v_p
$LN23@stbtt__v_p:
; Line 4132
	mov	rax, QWORD PTR pixels$[rsp]
	inc	rax
	mov	QWORD PTR pixels$[rsp], rax
; Line 4133
	jmp	$LN2@stbtt__v_p
$LN3@stbtt__v_p:
; Line 4134
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
stbtt__v_prefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_w$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
stbtt__h_prefilter PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4013
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4015
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_w$[rsp], eax
; Line 4017
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4018
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__h_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__h_p
; Line 4021
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4023
	mov	DWORD PTR total$2[rsp], 0
; Line 4026
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__h_p
	jmp	$LN29@stbtt__h_p
$LN25@stbtt__h_p:
; Line 4028
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN8@stbtt__h_p
; Line 4029
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4030
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4031
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4032
	jmp	$LN7@stbtt__h_p
$LN8@stbtt__h_p:
; Line 4033
	jmp	$LN5@stbtt__h_p
$LN26@stbtt__h_p:
; Line 4035
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN11@stbtt__h_p
; Line 4036
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4037
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4038
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4039
	jmp	$LN10@stbtt__h_p
$LN11@stbtt__h_p:
; Line 4040
	jmp	$LN5@stbtt__h_p
$LN27@stbtt__h_p:
; Line 4042
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN14@stbtt__h_p
; Line 4043
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4044
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4045
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4046
	jmp	$LN13@stbtt__h_p
$LN14@stbtt__h_p:
; Line 4047
	jmp	$LN5@stbtt__h_p
$LN28@stbtt__h_p:
; Line 4049
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN17@stbtt__h_p
; Line 4050
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4051
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4052
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4053
	jmp	$LN16@stbtt__h_p
$LN17@stbtt__h_p:
; Line 4054
	jmp	$LN5@stbtt__h_p
$LN29@stbtt__h_p:
; Line 4056
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN20@stbtt__h_p
; Line 4057
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4058
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4059
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4060
	jmp	$LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:
; Line 4064
	jmp	SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__h_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__h_p
; Line 4065
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__h_p
	mov	r8d, 4065				; 00000fe1H
	lea	rdx, OFFSET FLAT:$SG85071
	lea	rcx, OFFSET FLAT:$SG85072
	call	_wassert
	xor	eax, eax
$LN31@stbtt__h_p:
; Line 4066
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4067
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4068
	jmp	SHORT $LN22@stbtt__h_p
$LN23@stbtt__h_p:
; Line 4070
	movsxd	rax, DWORD PTR stride_in_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixels$[rsp], rax
; Line 4071
	jmp	$LN2@stbtt__h_p
$LN3@stbtt__h_p:
; Line 4072
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
stbtt__h_prefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
con$ = 32
rects$ = 40
num_rects$ = 48
stbrp_pack_rects PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3929
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3931
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbrp_pack
; Line 3932
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jle	SHORT $LN8@stbrp_pack
; Line 3933
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3934
	mov	rax, QWORD PTR con$[rsp]
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+12], ecx
$LN8@stbrp_pack:
; Line 3936
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN9@stbrp_pack
; Line 3937
	jmp	$LN3@stbrp_pack
$LN9@stbrp_pack:
; Line 3938
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+rax], edx
; Line 3939
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	DWORD PTR [rcx+rax+4], edx
; Line 3940
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 1
; Line 3941
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 3942
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+16]
	jle	SHORT $LN10@stbrp_pack
; Line 3943
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN10@stbrp_pack:
; Line 3944
	jmp	$LN2@stbrp_pack
$LN3@stbrp_pack:
; Line 3945
	jmp	SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbrp_pack
; Line 3946
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
	jmp	SHORT $LN5@stbrp_pack
$LN6@stbrp_pack:
; Line 3947
	add	rsp, 24
	ret	0
stbrp_pack_rects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
con$ = 8
pw$ = 16
ph$ = 24
nodes$ = 32
num_nodes$ = 40
stbrp_init_target PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3918
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3919
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3920
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 3921
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3922
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 3923
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 3926
	ret	0
stbrp_init_target ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
y$ = 68
x$ = 72
gh$1 = 76
scale$ = 80
gw$2 = 84
bottom_y$ = 88
g$3 = 92
x0$4 = 96
y0$5 = 100
x1$6 = 104
y1$7 = 108
advance$8 = 112
lsb$9 = 116
f$ = 128
data$ = 304
offset$ = 312
pixel_height$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
first_char$ = 352
num_chars$ = 360
chardata$ = 368
stbtt_BakeFontBitmap_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3818
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
; Line 3822
	mov	QWORD PTR f$[rsp], 0
; Line 3823
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN5@stbtt_Bake
; Line 3824
	mov	eax, -1
	jmp	$LN1@stbtt_Bake
$LN5@stbtt_Bake:
; Line 3825
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
; Line 3826
	mov	DWORD PTR y$[rsp], 1
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
; Line 3827
	mov	DWORD PTR bottom_y$[rsp], 1
; Line 3829
	movss	xmm1, DWORD PTR pixel_height$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3831
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Bake
$LN2@stbtt_Bake:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Bake:
	mov	eax, DWORD PTR num_chars$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Bake
; Line 3833
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR first_char$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR g$3[rsp], eax
; Line 3834
	lea	r9, QWORD PTR lsb$9[rsp]
	lea	r8, QWORD PTR advance$8[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 3835
	lea	rax, QWORD PTR y1$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 3836
	mov	eax, DWORD PTR x0$4[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gw$2[rsp], eax
; Line 3837
	mov	eax, DWORD PTR y0$5[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gh$1[rsp], eax
; Line 3838
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN6@stbtt_Bake
; Line 3839
	mov	eax, DWORD PTR bottom_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
	mov	DWORD PTR x$[rsp], 1
$LN6@stbtt_Bake:
; Line 3840
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN7@stbtt_Bake
; Line 3841
	mov	eax, DWORD PTR i$[rsp]
	neg	eax
	jmp	$LN1@stbtt_Bake
$LN7@stbtt_Bake:
; Line 3842
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN10@stbtt_Bake
	mov	r8d, 3842				; 00000f02H
	lea	rdx, OFFSET FLAT:$SG84873
	lea	rcx, OFFSET FLAT:$SG84874
	call	_wassert
	xor	eax, eax
$LN10@stbtt_Bake:
; Line 3843
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN11@stbtt_Bake
	mov	r8d, 3843				; 00000f03H
	lea	rdx, OFFSET FLAT:$SG84875
	lea	rcx, OFFSET FLAT:$SG84876
	call	_wassert
	xor	eax, eax
$LN11@stbtt_Bake:
; Line 3844
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, DWORD PTR pw$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR g$3[rsp]
	mov	DWORD PTR [rsp+56], ecx
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR gh$1[rsp]
	mov	r8d, DWORD PTR gw$2[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 3845
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR x$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 3846
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR y$[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 3847
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+4], ax
; Line 3848
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+6], ax
; Line 3849
	cvtsi2ss xmm0, DWORD PTR advance$8[rsp]
	movss	xmm1, DWORD PTR scale$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+16], xmm0
; Line 3850
	cvtsi2ss xmm0, DWORD PTR x0$4[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3851
	cvtsi2ss xmm0, DWORD PTR y0$5[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3852
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR x$[rsp], eax
; Line 3853
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR bottom_y$[rsp]
	jle	SHORT $LN8@stbtt_Bake
; Line 3854
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR bottom_y$[rsp], eax
$LN8@stbtt_Bake:
; Line 3855
	jmp	$LN2@stbtt_Bake
$LN3@stbtt_Bake:
; Line 3856
	mov	eax, DWORD PTR bottom_y$[rsp]
$LN1@stbtt_Bake:
; Line 3857
	add	rsp, 296				; 00000128H
	ret	0
stbtt_BakeFontBitmap_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 96
num_points$ = 100
n$ = 104
x$1 = 108
y$2 = 112
pass$ = 116
tv143 = 120
points$ = 128
start$ = 136
objspace_flatness_squared$ = 140
tv165 = 144
tv183 = 148
tv78 = 152
tv94 = 160
$T3 = 176
$T4 = 208
$T5 = 240
$T6 = 272
$T7 = 304
$T8 = 336
$T9 = 368
$T10 = 400
vertices$ = 480
num_verts$ = 488
objspace_flatness$ = 496
contour_lengths$ = 504
num_contours$ = 512
userdata$ = 520
stbtt_FlattenCurves PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3619
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
	movaps	XMMWORD PTR [rsp+432], xmm6
; Line 3620
	mov	QWORD PTR points$[rsp], 0
; Line 3621
	mov	DWORD PTR num_points$[rsp], 0
; Line 3623
	movss	xmm0, DWORD PTR objspace_flatness$[rsp]
	mulss	xmm0, DWORD PTR objspace_flatness$[rsp]
	movss	DWORD PTR objspace_flatness_squared$[rsp], xmm0
; Line 3624
	mov	DWORD PTR n$[rsp], 0
	mov	DWORD PTR start$[rsp], 0
; Line 3627
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Flat
; Line 3628
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 1
	jne	SHORT $LN13@stbtt_Flat
; Line 3629
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN13@stbtt_Flat:
	jmp	SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
; Line 3631
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3632
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbtt_Flat
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN14@stbtt_Flat:
; Line 3634
	movsxd	rax, DWORD PTR n$[rsp]
	shl	rax, 2
	mov	QWORD PTR tv78[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84549
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3634				; 00000e32H
	lea	r8, OFFSET FLAT:$SG84550
	mov	edx, 156				; 0000009cH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv78[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	mov	rcx, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3636
	mov	rax, QWORD PTR contour_lengths$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN15@stbtt_Flat
; Line 3637
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3638
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN15@stbtt_Flat:
; Line 3642
	mov	DWORD PTR pass$[rsp], 0
	jmp	SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
	mov	eax, DWORD PTR pass$[rsp]
	inc	eax
	mov	DWORD PTR pass$[rsp], eax
$LN7@stbtt_Flat:
	cmp	DWORD PTR pass$[rsp], 2
	jge	$LN6@stbtt_Flat
; Line 3643
	xorps	xmm0, xmm0
	movss	DWORD PTR x$1[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3644
	cmp	DWORD PTR pass$[rsp], 1
	jne	$LN16@stbtt_Flat
; Line 3645
	movsxd	rax, DWORD PTR num_points$[rsp]
	shl	rax, 3
	mov	QWORD PTR tv94[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84553
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3645				; 00000e3dH
	lea	r8, OFFSET FLAT:$SG84554
	mov	edx, 157				; 0000009dH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv94[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	mov	QWORD PTR points$[rsp], rax
; Line 3646
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN17@stbtt_Flat
	jmp	$error$24
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:
; Line 3648
	mov	DWORD PTR num_points$[rsp], 0
; Line 3649
	mov	DWORD PTR n$[rsp], -1
; Line 3650
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt_Flat
; Line 3651
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR tv143[rsp], al
	cmp	BYTE PTR tv143[rsp], 1
	je	SHORT $LN18@stbtt_Flat
	cmp	BYTE PTR tv143[rsp], 2
	je	$LN20@stbtt_Flat
	cmp	BYTE PTR tv143[rsp], 3
	je	$LN21@stbtt_Flat
	cmp	BYTE PTR tv143[rsp], 4
	je	$LN22@stbtt_Flat
	jmp	$LN11@stbtt_Flat
$LN18@stbtt_Flat:
; Line 3654
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN19@stbtt_Flat
; Line 3655
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN19@stbtt_Flat:
; Line 3656
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3657
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 3659
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3660
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv165[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv165[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__add_point
; Line 3661
	jmp	$LN11@stbtt_Flat
$LN20@stbtt_Flat:
; Line 3663
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3664
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv183[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv183[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__add_point
; Line 3665
	jmp	$LN11@stbtt_Flat
$LN21@stbtt_Flat:
; Line 3667
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm3, eax
	mov	DWORD PTR [rsp+72], 0
	movss	xmm4, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm4
	movss	DWORD PTR [rsp+56], xmm0
	movss	DWORD PTR [rsp+48], xmm1
	movss	DWORD PTR [rsp+40], xmm2
	movss	DWORD PTR [rsp+32], xmm3
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_curve
; Line 3671
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 3672
	jmp	$LN11@stbtt_Flat
$LN22@stbtt_Flat:
; Line 3674
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	cvtsi2ss xmm3, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm4, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm5, eax
	mov	DWORD PTR [rsp+88], 0
	movss	xmm6, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm6
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	DWORD PTR [rsp+40], xmm4
	movss	DWORD PTR [rsp+32], xmm5
	movss	xmm3, DWORD PTR y$2[rsp]
	movss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_cubic
; Line 3679
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
$LN11@stbtt_Flat:
; Line 3682
	jmp	$LN8@stbtt_Flat
$LN9@stbtt_Flat:
; Line 3683
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 3684
	jmp	$LN5@stbtt_Flat
$LN6@stbtt_Flat:
; Line 3686
	mov	rax, QWORD PTR points$[rsp]
	jmp	$LN1@stbtt_Flat
$error$24:
; Line 3688
	lea	rax, OFFSET FLAT:$SG84561
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3688				; 00000e68H
	lea	r8, OFFSET FLAT:$SG84562
	mov	edx, 158				; 0000009eH
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR points$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
; Line 3689
	lea	rax, OFFSET FLAT:$SG84563
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3689				; 00000e69H
	lea	r8, OFFSET FLAT:$SG84564
	mov	edx, 159				; 0000009fH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	r8, QWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 3690
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rax], 0
; Line 3691
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3692
	xor	eax, eax
$LN1@stbtt_Flat:
; Line 3693
	movaps	xmm6, XMMWORD PTR [rsp+432]
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_FlattenCurves ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dx0$ = 96
dy0$ = 100
dx1$ = 104
dy1$ = 108
dx2$ = 112
dy2$ = 116
dx$ = 120
dy$ = 124
longlen$ = 128
shortlen$ = 132
x12$1 = 136
y12$2 = 140
ya$3 = 144
xa$4 = 148
y01$5 = 152
x01$6 = 156
y23$7 = 160
x23$8 = 164
yb$9 = 168
xb$10 = 172
my$11 = 176
mx$12 = 180
flatness_squared$ = 184
tv72 = 192
tv84 = 200
points$ = 224
num_points$ = 232
x0$ = 240
y0$ = 248
x1$ = 256
y1$ = 264
x2$ = 272
y2$ = 280
x3$ = 288
y3$ = 296
objspace_flatness_squared$ = 304
n$ = 312
stbtt__tesselate_cubic PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3576
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 3578
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx0$[rsp], xmm0
; Line 3579
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy0$[rsp], xmm0
; Line 3580
	movss	xmm0, DWORD PTR x2$[rsp]
	subss	xmm0, DWORD PTR x1$[rsp]
	movss	DWORD PTR dx1$[rsp], xmm0
; Line 3581
	movss	xmm0, DWORD PTR y2$[rsp]
	subss	xmm0, DWORD PTR y1$[rsp]
	movss	DWORD PTR dy1$[rsp], xmm0
; Line 3582
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR dx2$[rsp], xmm0
; Line 3583
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR dy2$[rsp], xmm0
; Line 3584
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3585
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3586
	movss	xmm0, DWORD PTR dx0$[rsp]
	mulss	xmm0, DWORD PTR dx0$[rsp]
	movss	xmm1, DWORD PTR dy0$[rsp]
	mulss	xmm1, DWORD PTR dy0$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	movsd	QWORD PTR tv72[rsp], xmm0
	movss	xmm1, DWORD PTR dx1$[rsp]
	mulss	xmm1, DWORD PTR dx1$[rsp]
	movss	xmm2, DWORD PTR dy1$[rsp]
	mulss	xmm2, DWORD PTR dy1$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv72[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv84[rsp], xmm0
	movss	xmm1, DWORD PTR dx2$[rsp]
	mulss	xmm1, DWORD PTR dx2$[rsp]
	movss	xmm2, DWORD PTR dy2$[rsp]
	mulss	xmm2, DWORD PTR dy2$[rsp]
	addss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movaps	xmm0, xmm1
	call	sqrt
	movsd	xmm1, QWORD PTR tv84[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR longlen$[rsp], xmm0
; Line 3587
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR shortlen$[rsp], xmm0
; Line 3588
	movss	xmm0, DWORD PTR longlen$[rsp]
	mulss	xmm0, DWORD PTR longlen$[rsp]
	movss	xmm1, DWORD PTR shortlen$[rsp]
	mulss	xmm1, DWORD PTR shortlen$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR flatness_squared$[rsp], xmm0
; Line 3590
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3591
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3593
	movss	xmm0, DWORD PTR flatness_squared$[rsp]
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3594
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x01$6[rsp], xmm0
; Line 3595
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y01$5[rsp], xmm0
; Line 3596
	movss	xmm0, DWORD PTR x1$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x12$1[rsp], xmm0
; Line 3597
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y12$2[rsp], xmm0
; Line 3598
	movss	xmm0, DWORD PTR x2$[rsp]
	addss	xmm0, DWORD PTR x3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x23$8[rsp], xmm0
; Line 3599
	movss	xmm0, DWORD PTR y2$[rsp]
	addss	xmm0, DWORD PTR y3$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y23$7[rsp], xmm0
; Line 3601
	movss	xmm0, DWORD PTR x01$6[rsp]
	addss	xmm0, DWORD PTR x12$1[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xa$4[rsp], xmm0
; Line 3602
	movss	xmm0, DWORD PTR y01$5[rsp]
	addss	xmm0, DWORD PTR y12$2[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ya$3[rsp], xmm0
; Line 3603
	movss	xmm0, DWORD PTR x12$1[rsp]
	addss	xmm0, DWORD PTR x23$8[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xb$10[rsp], xmm0
; Line 3604
	movss	xmm0, DWORD PTR y12$2[rsp]
	addss	xmm0, DWORD PTR y23$7[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR yb$9[rsp], xmm0
; Line 3606
	movss	xmm0, DWORD PTR xa$4[rsp]
	addss	xmm0, DWORD PTR xb$10[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR mx$12[rsp], xmm0
; Line 3607
	movss	xmm0, DWORD PTR ya$3[rsp]
	addss	xmm0, DWORD PTR yb$9[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR my$11[rsp], xmm0
; Line 3609
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR my$11[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR mx$12[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR ya$3[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR xa$4[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR y01$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR x01$6[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_cubic
; Line 3610
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR y3$[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR x3$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR y23$7[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR x23$8[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR yb$9[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR xb$10[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR my$11[rsp]
	movss	xmm2, DWORD PTR mx$12[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_cubic
; Line 3611
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3612
	movss	xmm3, DWORD PTR y3$[rsp]
	movss	xmm2, DWORD PTR x3$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__add_point
; Line 3613
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:
; Line 3615
	add	rsp, 216				; 000000d8H
	ret	0
stbtt__tesselate_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
my$ = 80
mx$ = 84
dx$ = 88
dy$ = 92
points$ = 112
num_points$ = 120
x0$ = 128
y0$ = 136
x1$ = 144
y1$ = 152
x2$ = 160
y2$ = 168
objspace_flatness_squared$ = 176
n$ = 184
stbtt__tesselate_curve PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3556
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3558
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR mx$[rsp], xmm0
; Line 3559
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$[rsp]
	movss	xmm1, DWORD PTR y0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR my$[rsp], xmm0
; Line 3561
	movss	xmm0, DWORD PTR x0$[rsp]
	addss	xmm0, DWORD PTR x2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR mx$[rsp]
	movss	DWORD PTR dx$[rsp], xmm0
; Line 3562
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR my$[rsp]
	movss	DWORD PTR dy$[rsp], xmm0
; Line 3563
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3564
	mov	eax, 1
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3565
	movss	xmm0, DWORD PTR dx$[rsp]
	mulss	xmm0, DWORD PTR dx$[rsp]
	movss	xmm1, DWORD PTR dy$[rsp]
	mulss	xmm1, DWORD PTR dy$[rsp]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3566
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR y1$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, DWORD PTR x1$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR my$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR mx$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_curve
; Line 3567
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR y2$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, DWORD PTR x2$[rsp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR y2$[rsp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR my$[rsp]
	movss	xmm2, DWORD PTR mx$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__tesselate_curve
; Line 3568
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3569
	movss	xmm3, DWORD PTR y2$[rsp]
	movss	xmm2, DWORD PTR x2$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	stbtt__add_point
; Line 3570
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
; Line 3572
	mov	eax, 1
$LN1@stbtt__tes:
; Line 3573
	add	rsp, 104				; 00000068H
	ret	0
stbtt__tesselate_curve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
points$ = 8
n$ = 16
x$ = 24
y$ = 32
stbtt__add_point PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3548
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3549
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN2@stbtt__add
	jmp	SHORT $LN1@stbtt__add
$LN2@stbtt__add:
; Line 3550
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 3551
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:
; Line 3552
	ret	0
stbtt__add_point ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
i$ = 68
k$ = 72
j$ = 76
p$1 = 80
e$ = 88
m$ = 96
a$2 = 100
b$3 = 104
vsubsample$ = 108
tv66 = 112
tv169 = 116
tv168 = 120
tv171 = 124
y_scale_inv$ = 128
tv77 = 136
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
result$ = 304
pts$ = 312
wcount$ = 320
windings$ = 328
scale_x$ = 336
scale_y$ = 344
shift_x$ = 352
shift_y$ = 360
off_x$ = 368
off_y$ = 376
invert$ = 384
userdata$ = 392
stbtt__rasterize PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3491
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
; Line 3492
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN15@stbtt__ras
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
$LN16@stbtt__ras:
	movss	xmm0, DWORD PTR tv66[rsp]
	movss	DWORD PTR y_scale_inv$[rsp], xmm0
; Line 3498
	mov	DWORD PTR vsubsample$[rsp], 1
; Line 3505
	mov	DWORD PTR n$[rsp], 0
; Line 3506
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__ras
; Line 3507
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3509
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 20
	mov	QWORD PTR tv77[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84407
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3509				; 00000db5H
	lea	r8, OFFSET FLAT:$SG84408
	mov	edx, 154				; 0000009aH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv77[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	mov	QWORD PTR e$[rsp], rax
; Line 3510
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN11@stbtt__ras
	jmp	$LN1@stbtt__ras
$LN11@stbtt__ras:
; Line 3511
	mov	DWORD PTR n$[rsp], 0
; Line 3513
	mov	DWORD PTR m$[rsp], 0
; Line 3514
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbtt__ras
; Line 3515
	movsxd	rax, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR pts$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$1[rsp], rax
; Line 3516
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR m$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rsp], eax
; Line 3517
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3518
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR j$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbtt__ras:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3519
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR b$3[rsp], eax
; Line 3521
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	rdi, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	ucomiss	xmm0, DWORD PTR [rdi+rcx*8+4]
	jp	SHORT $LN12@stbtt__ras
	jne	SHORT $LN12@stbtt__ras
; Line 3522
	jmp	SHORT $LN8@stbtt__ras
$LN12@stbtt__ras:
; Line 3524
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
; Line 3525
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN21@stbtt__ras
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	rdi, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	comiss	xmm0, DWORD PTR [rdi+rcx*8+4]
	jbe	SHORT $LN19@stbtt__ras
	mov	DWORD PTR tv169[rsp], 1
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
	mov	DWORD PTR tv169[rsp], 0
$LN20@stbtt__ras:
	mov	eax, DWORD PTR tv169[rsp]
	mov	DWORD PTR tv171[rsp], eax
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	rdi, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*8+4]
	comiss	xmm0, DWORD PTR [rdi+rax*8+4]
	jbe	SHORT $LN17@stbtt__ras
	mov	DWORD PTR tv168[rsp], 1
	jmp	SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
	mov	DWORD PTR tv168[rsp], 0
$LN18@stbtt__ras:
	mov	eax, DWORD PTR tv168[rsp]
	mov	DWORD PTR tv171[rsp], eax
$LN22@stbtt__ras:
	cmp	DWORD PTR tv171[rsp], 0
	je	SHORT $LN13@stbtt__ras
; Line 3526
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 1
; Line 3527
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR b$3[rsp], eax
$LN13@stbtt__ras:
; Line 3529
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 3530
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 3531
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3532
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rsp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3533
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3534
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3535
	jmp	$LN5@stbtt__ras
$LN6@stbtt__ras:
; Line 3539
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	call	stbtt__sort_edges
; Line 3542
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR off_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR vsubsample$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbtt__rasterize_sorted_edges
; Line 3544
	lea	rax, OFFSET FLAT:$SG84412
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3544				; 00000dd8H
	lea	r8, OFFSET FLAT:$SG84413
	mov	edx, 155				; 0000009bH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR e$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
$LN1@stbtt__ras:
; Line 3545
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
stbtt__rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
n$ = 56
stbtt__sort_edges PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3480
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3481
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	stbtt__sort_edges_quicksort
; Line 3482
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	stbtt__sort_edges_ins_sort
; Line 3483
	add	rsp, 40					; 00000028H
	ret	0
stbtt__sort_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
j$2 = 36
m$3 = 40
tv74 = 44
tv85 = 48
tv128 = 52
c12$4 = 56
tv131 = 60
z$5 = 64
c01$6 = 68
c$7 = 72
tv235 = 80
tv252 = 88
tv279 = 96
t$8 = 104
__$ArrayPad$ = 128
p$ = 176
n$ = 184
stbtt__sort_edges_quicksort PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3418
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@stbtt__sor:
; Line 3420
	cmp	DWORD PTR n$[rsp], 12
	jle	$LN3@stbtt__sor
; Line 3425
	mov	eax, DWORD PTR n$[rsp]
	sar	eax, 1
	mov	DWORD PTR m$3[rsp], eax
; Line 3426
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR m$3[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN20@stbtt__sor
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
	mov	DWORD PTR tv74[rsp], 0
$LN21@stbtt__sor:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR c01$6[rsp], eax
; Line 3427
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN22@stbtt__sor
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
	mov	DWORD PTR tv85[rsp], 0
$LN23@stbtt__sor:
	mov	eax, DWORD PTR tv85[rsp]
	mov	DWORD PTR c12$4[rsp], eax
; Line 3429
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c01$6[rsp], eax
	je	$LN13@stbtt__sor
; Line 3432
	mov	eax, 20
	imul	rax, rax, 0
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN24@stbtt__sor
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
	mov	DWORD PTR tv128[rsp], 0
$LN25@stbtt__sor:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR c$7[rsp], eax
; Line 3435
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c$7[rsp], eax
	jne	SHORT $LN26@stbtt__sor
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR tv131[rsp], eax
$LN27@stbtt__sor:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR z$5[rsp], eax
; Line 3436
	movsxd	rax, DWORD PTR z$5[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3437
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR z$5[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv235[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv235[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3438
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN13@stbtt__sor:
; Line 3442
	mov	eax, 20
	imul	rax, rax, 0
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3443
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv252[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv252[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3444
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3447
	mov	DWORD PTR i$1[rsp], 1
; Line 3448
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN4@stbtt__sor:
; Line 3452
	jmp	SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__sor:
; Line 3453
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN14@stbtt__sor
	jmp	SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:
; Line 3454
	jmp	SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:
; Line 3455
	jmp	SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN12@stbtt__sor:
; Line 3456
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR j$2[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN15@stbtt__sor
	jmp	SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:
; Line 3457
	jmp	SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:
; Line 3459
	mov	eax, DWORD PTR j$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jl	SHORT $LN16@stbtt__sor
	jmp	$LN5@stbtt__sor
$LN16@stbtt__sor:
; Line 3460
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3461
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv279[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv279[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3462
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3464
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
; Line 3465
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
; Line 3466
	jmp	$LN4@stbtt__sor
$LN5@stbtt__sor:
; Line 3468
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR j$2[rsp], eax
	jge	SHORT $LN17@stbtt__sor
; Line 3469
	mov	edx, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	stbtt__sort_edges_quicksort
; Line 3470
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 3471
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 3472
	jmp	SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:
; Line 3473
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	stbtt__sort_edges_quicksort
; Line 3474
	mov	eax, DWORD PTR j$2[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN18@stbtt__sor:
; Line 3476
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbtt__sort_edges_quicksort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 0
i$ = 4
tv78 = 8
c$1 = 12
b$2 = 16
a$3 = 24
tv142 = 32
t$4 = 40
__$ArrayPad$ = 64
p$ = 112
n$ = 120
stbtt__sort_edges_ins_sort PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3400
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3402
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__sor
; Line 3403
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
	lea	rax, QWORD PTR t$4[rsp]
	mov	QWORD PTR a$3[rsp], rax
; Line 3404
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN5@stbtt__sor:
; Line 3405
	cmp	DWORD PTR j$[rsp], 0
	jle	$LN6@stbtt__sor
; Line 3406
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$2[rsp], rax
; Line 3407
	mov	rax, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR a$3[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN10@stbtt__sor
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
	mov	DWORD PTR tv78[rsp], 0
$LN11@stbtt__sor:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR c$1[rsp], eax
; Line 3408
	cmp	DWORD PTR c$1[rsp], 0
	jne	SHORT $LN7@stbtt__sor
	jmp	SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:
; Line 3409
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv142[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv142[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3410
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3411
	jmp	$LN5@stbtt__sor
$LN6@stbtt__sor:
; Line 3412
	mov	eax, DWORD PTR j$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	je	SHORT $LN8@stbtt__sor
; Line 3413
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$4[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN8@stbtt__sor:
; Line 3414
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3415
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
stbtt__sort_edges_ins_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scan_y_top$1 = 48
i$ = 52
j$ = 56
step$2 = 64
y$ = 72
sum$3 = 76
k$4 = 80
m$5 = 84
scanline$ = 88
z$6 = 96
active$ = 104
z$7 = 112
scan_y_bottom$8 = 120
scanline2$ = 128
z$9 = 136
tv72 = 144
hh$ = 152
$T10 = 176
$T11 = 208
$T12 = 240
$T13 = 272
scanline_data$ = 304
__$ArrayPad$ = 832
result$ = 880
e$ = 888
n$ = 896
vsubsample$ = 904
off_x$ = 912
off_y$ = 920
userdata$ = 928
stbtt__rasterize_sorted_edges PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3298
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 856				; 00000358H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3299
	mov	QWORD PTR hh$[rsp], 0
	mov	QWORD PTR hh$[rsp+8], 0
	mov	DWORD PTR hh$[rsp+16], 0
; Line 3300
	mov	QWORD PTR active$[rsp], 0
; Line 3301
	mov	DWORD PTR j$[rsp], 0
; Line 3306
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jle	SHORT $LN13@stbtt__ras
; Line 3307
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	shl	rax, 2
	mov	QWORD PTR tv72[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84283
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3307				; 00000cebH
	lea	r8, OFFSET FLAT:$SG84284
	mov	edx, 152				; 00000098H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv72[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	mov	QWORD PTR scanline$[rsp], rax
	jmp	SHORT $LN14@stbtt__ras
$LN13@stbtt__ras:
; Line 3309
	lea	rax, QWORD PTR scanline_data$[rsp]
	mov	QWORD PTR scanline$[rsp], rax
$LN14@stbtt__ras:
; Line 3311
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR scanline$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR scanline2$[rsp], rax
; Line 3313
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 3314
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR off_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	movss	DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:
; Line 3316
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__ras
; Line 3318
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR scan_y_top$1[rsp], xmm0
; Line 3319
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR scan_y_bottom$8[rsp], xmm0
; Line 3320
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
; Line 3322
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline$[rsp]
	call	memset
; Line 3323
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline2$[rsp]
	call	memset
$LN4@stbtt__ras:
; Line 3327
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN5@stbtt__ras
; Line 3328
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$7[rsp], rax
; Line 3329
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jb	SHORT $LN15@stbtt__ras
; Line 3330
	mov	rax, QWORD PTR step$2[rsp]
	mov	rcx, QWORD PTR z$7[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 3331
	mov	rax, QWORD PTR z$7[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN25@stbtt__ras
	jne	SHORT $LN25@stbtt__ras
	mov	r8d, 3331				; 00000d03H
	lea	rdx, OFFSET FLAT:$SG84287
	lea	rcx, OFFSET FLAT:$SG84288
	call	_wassert
	xor	eax, eax
$LN25@stbtt__ras:
; Line 3332
	mov	rax, QWORD PTR z$7[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3333
	mov	rdx, QWORD PTR z$7[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	stbtt__hheap_free
; Line 3334
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
; Line 3335
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
$LN16@stbtt__ras:
; Line 3337
	jmp	$LN4@stbtt__ras
$LN5@stbtt__ras:
$LN6@stbtt__ras:
; Line 3340
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR scan_y_bottom$8[rsp]
	comiss	xmm0, DWORD PTR [rax+4]
	jb	$LN7@stbtt__ras
; Line 3341
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN27@stbtt__ras
	je	$LN17@stbtt__ras
$LN27@stbtt__ras:
; Line 3342
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scan_y_top$1[rsp]
	mov	r8d, DWORD PTR off_x$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	stbtt__new_active
	mov	QWORD PTR z$6[rsp], rax
; Line 3343
	cmp	QWORD PTR z$6[rsp], 0
	je	SHORT $LN18@stbtt__ras
; Line 3344
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN19@stbtt__ras
	cmp	DWORD PTR off_y$[rsp], 0
	je	SHORT $LN19@stbtt__ras
; Line 3345
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN20@stbtt__ras
; Line 3347
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rax+28], xmm0
$LN20@stbtt__ras:
$LN19@stbtt__ras:
; Line 3350
	mov	rax, QWORD PTR z$6[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR scan_y_top$1[rsp]
	jae	SHORT $LN26@stbtt__ras
	mov	r8d, 3350				; 00000d16H
	lea	rdx, OFFSET FLAT:$SG84293
	lea	rcx, OFFSET FLAT:$SG84294
	call	_wassert
	xor	eax, eax
$LN26@stbtt__ras:
; Line 3352
	mov	rax, QWORD PTR z$6[rsp]
	mov	rcx, QWORD PTR active$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3353
	mov	rax, QWORD PTR z$6[rsp]
	mov	QWORD PTR active$[rsp], rax
$LN18@stbtt__ras:
$LN17@stbtt__ras:
; Line 3356
	mov	rax, QWORD PTR e$[rsp]
	add	rax, 20
	mov	QWORD PTR e$[rsp], rax
; Line 3357
	jmp	$LN6@stbtt__ras
$LN7@stbtt__ras:
; Line 3360
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN21@stbtt__ras
; Line 3361
	mov	rax, QWORD PTR scanline2$[rsp]
	add	rax, 4
	movss	xmm0, DWORD PTR scan_y_top$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	r8d, DWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__fill_active_edges_new
$LN21@stbtt__ras:
; Line 3364
	xorps	xmm0, xmm0
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3365
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt__ras:
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3368
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline2$[rsp]
	movss	xmm0, DWORD PTR sum$3[rsp]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR sum$3[rsp], xmm0
; Line 3369
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR sum$3[rsp]
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3370
	cvtss2sd xmm0, DWORD PTR k$4[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR k$4[rsp], xmm0
; Line 3371
	cvttss2si eax, DWORD PTR k$4[rsp]
	mov	DWORD PTR m$5[rsp], eax
; Line 3372
	cmp	DWORD PTR m$5[rsp], 255			; 000000ffH
	jle	SHORT $LN22@stbtt__ras
	mov	DWORD PTR m$5[rsp], 255			; 000000ffH
$LN22@stbtt__ras:
; Line 3373
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax+8]
	mov	eax, ecx
	add	eax, DWORD PTR i$[rsp]
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR m$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3374
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3377
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
$LN11@stbtt__ras:
; Line 3378
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stbtt__ras
; Line 3379
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$9[rsp], rax
; Line 3380
	mov	rax, QWORD PTR z$9[rsp]
	mov	rcx, QWORD PTR z$9[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR z$9[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3381
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
; Line 3382
	jmp	SHORT $LN11@stbtt__ras
$LN12@stbtt__ras:
; Line 3384
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
; Line 3385
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3386
	jmp	$LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3388
	mov	rdx, QWORD PTR userdata$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	stbtt__hheap_cleanup
; Line 3390
	lea	rax, QWORD PTR scanline_data$[rsp]
	cmp	QWORD PTR scanline$[rsp], rax
	je	SHORT $LN23@stbtt__ras
; Line 3391
	lea	rax, OFFSET FLAT:$SG84298
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3391				; 00000d3fH
	lea	r8, OFFSET FLAT:$SG84299
	mov	edx, 153				; 00000099H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
$LN23@stbtt__ras:
; Line 3392
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 856				; 00000358H
	pop	rdi
	pop	rsi
	ret	0
stbtt__rasterize_sorted_edges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$1 = 64
x$2 = 68
x1$3 = 72
x2$4 = 76
y_bottom$ = 80
x3$5 = 84
x_top$6 = 88
x0$7 = 92
x_bottom$8 = 96
x2$9 = 100
sy1$10 = 104
x$11 = 108
sy0$12 = 112
dx$13 = 116
y1$14 = 120
y2$15 = 124
dy$16 = 128
y3$17 = 132
y0$18 = 136
x1$19 = 140
area$20 = 144
t$21 = 148
x$22 = 152
y_final$23 = 156
y_crossing$24 = 160
sign$25 = 164
xb$26 = 168
height$27 = 172
step$28 = 176
tv305 = 180
tv307 = 184
tv184 = 192
tv245 = 200
tv294 = 208
scanline$ = 240
scanline_fill$ = 248
len$ = 256
e$ = 264
y_top$ = 272
stbtt__fill_active_edges_new PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3083
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 3084
	movss	xmm0, DWORD PTR y_top$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y_bottom$[rsp], xmm0
$LN2@stbtt__fil:
; Line 3086
	cmp	QWORD PTR e$[rsp], 0
	je	$LN3@stbtt__fil
; Line 3090
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN39@stbtt__fil
	mov	r8d, 3090				; 00000c12H
	lea	rdx, OFFSET FLAT:$SG84182
	lea	rcx, OFFSET FLAT:$SG84183
	call	_wassert
	xor	eax, eax
$LN39@stbtt__fil:
; Line 3092
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN10@stbtt__fil
	jne	$LN10@stbtt__fil
; Line 3093
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$7[rsp], xmm0
; Line 3094
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x0$7[rsp]
	jbe	$LN12@stbtt__fil
; Line 3095
	movss	xmm0, DWORD PTR x0$7[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN13@stbtt__fil
; Line 3096
	cvttss2si eax, DWORD PTR x0$7[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3097
	cvttss2si eax, DWORD PTR x0$7[rsp]
	inc	eax
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	sub	rcx, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	call	stbtt__handle_clipped_edge
; Line 3098
	jmp	SHORT $LN14@stbtt__fil
$LN13@stbtt__fil:
; Line 3099
	mov	rax, QWORD PTR scanline_fill$[rsp]
	sub	rax, 4
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$7[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	stbtt__handle_clipped_edge
$LN14@stbtt__fil:
$LN12@stbtt__fil:
; Line 3102
	jmp	$LN11@stbtt__fil
$LN10@stbtt__fil:
; Line 3103
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$1[rsp], xmm0
; Line 3104
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3105
	movss	xmm0, DWORD PTR x0$1[rsp]
	addss	xmm0, DWORD PTR dx$13[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
; Line 3108
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3109
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+24]
	jb	SHORT $LN40@stbtt__fil
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN41@stbtt__fil
$LN40@stbtt__fil:
	mov	r8d, 3109				; 00000c25H
	lea	rdx, OFFSET FLAT:$SG84189
	lea	rcx, OFFSET FLAT:$SG84190
	call	_wassert
	xor	eax, eax
$LN41@stbtt__fil:
; Line 3114
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y_top$[rsp]
	jbe	SHORT $LN15@stbtt__fil
; Line 3115
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3116
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3117
	jmp	SHORT $LN16@stbtt__fil
$LN15@stbtt__fil:
; Line 3118
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3119
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
$LN16@stbtt__fil:
; Line 3121
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN17@stbtt__fil
; Line 3122
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR dx$13[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$1[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3123
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3124
	jmp	SHORT $LN18@stbtt__fil
$LN17@stbtt__fil:
; Line 3125
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3126
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
$LN18@stbtt__fil:
; Line 3129
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_top$6[rsp]
	jbe	$LN19@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN19@stbtt__fil
; Line 3132
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	cvttss2si ecx, DWORD PTR x_bottom$8[rsp]
	cmp	eax, ecx
	jne	$LN21@stbtt__fil
; Line 3135
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x$11[rsp], eax
; Line 3136
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	mov	rax, QWORD PTR e$[rsp]
	mulss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR height$27[rsp], xmm0
; Line 3137
	cmp	DWORD PTR x$11[rsp], 0
	jl	SHORT $LN42@stbtt__fil
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$11[rsp], eax
	jl	SHORT $LN43@stbtt__fil
$LN42@stbtt__fil:
	mov	r8d, 3137				; 00000c41H
	lea	rdx, OFFSET FLAT:$SG84199
	lea	rcx, OFFSET FLAT:$SG84200
	call	_wassert
	xor	eax, eax
$LN43@stbtt__fil:
; Line 3138
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	QWORD PTR tv184[rsp], rax
	cvtsi2ss xmm0, DWORD PTR x$11[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x$11[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR x_top$6[rsp]
	movss	xmm0, DWORD PTR height$27[rsp]
	call	stbtt__position_trapezoid_area
	mov	rax, QWORD PTR scanline$[rsp]
	mov	rcx, QWORD PTR tv184[rsp]
	movss	xmm1, DWORD PTR [rax+rcx*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3139
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR height$27[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3140
	jmp	$LN22@stbtt__fil
$LN21@stbtt__fil:
; Line 3144
	movss	xmm0, DWORD PTR x_top$6[rsp]
	comiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN23@stbtt__fil
; Line 3147
	movss	xmm0, DWORD PTR sy0$12[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy0$12[rsp], xmm0
; Line 3148
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR y_top$[rsp]
	movss	xmm1, DWORD PTR y_bottom$[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3149
	movss	xmm0, DWORD PTR sy0$12[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR sy1$10[rsp]
	movss	DWORD PTR sy0$12[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR sy1$10[rsp], xmm0
; Line 3150
	movss	xmm0, DWORD PTR x_bottom$8[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR x_top$6[rsp]
	movss	DWORD PTR x_bottom$8[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR x_top$6[rsp], xmm0
; Line 3151
	movss	xmm0, DWORD PTR dx$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx$13[rsp], xmm0
; Line 3152
	movss	xmm0, DWORD PTR dy$16[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy$16[rsp], xmm0
; Line 3153
	movss	xmm0, DWORD PTR x0$1[rsp]
	movss	DWORD PTR t$21[rsp], xmm0
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x0$1[rsp], xmm0
	movss	xmm0, DWORD PTR t$21[rsp]
	movss	DWORD PTR xb$26[rsp], xmm0
$LN23@stbtt__fil:
; Line 3155
	movss	xmm0, DWORD PTR dy$16[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN44@stbtt__fil
	mov	r8d, 3155				; 00000c53H
	lea	rdx, OFFSET FLAT:$SG84202
	lea	rcx, OFFSET FLAT:$SG84203
	call	_wassert
	xor	eax, eax
$LN44@stbtt__fil:
; Line 3156
	movss	xmm0, DWORD PTR dx$13[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN45@stbtt__fil
	mov	r8d, 3156				; 00000c54H
	lea	rdx, OFFSET FLAT:$SG84204
	lea	rcx, OFFSET FLAT:$SG84205
	call	_wassert
	xor	eax, eax
$LN45@stbtt__fil:
; Line 3158
	cvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x1$19[rsp], eax
; Line 3159
	cvttss2si eax, DWORD PTR x_bottom$8[rsp]
	mov	DWORD PTR x2$9[rsp], eax
; Line 3161
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_crossing$24[rsp], xmm0
; Line 3164
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	movss	xmm1, DWORD PTR dy$16[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_top$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3185
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN24@stbtt__fil
; Line 3186
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_crossing$24[rsp], xmm0
$LN24@stbtt__fil:
; Line 3188
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR sign$25[rsp], xmm0
; Line 3191
	movss	xmm0, DWORD PTR y_crossing$24[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3194
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	QWORD PTR tv245[rsp], rax
	mov	ecx, DWORD PTR x1$19[rsp]
	inc	ecx
	cvtsi2ss xmm0, ecx
	subss	xmm0, DWORD PTR x_top$6[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR area$20[rsp]
	call	stbtt__sized_triangle_area
	mov	rax, QWORD PTR scanline$[rsp]
	mov	rcx, QWORD PTR tv245[rsp]
	movss	xmm1, DWORD PTR [rax+rcx*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3197
	movss	xmm0, DWORD PTR y_final$23[rsp]
	comiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN25@stbtt__fil
; Line 3198
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y_final$23[rsp], xmm0
; Line 3199
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR y_crossing$24[rsp]
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	ecx, DWORD PTR x2$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
	movss	DWORD PTR dy$16[rsp], xmm0
$LN25@stbtt__fil:
; Line 3212
	movss	xmm0, DWORD PTR sign$25[rsp]
	mulss	xmm0, DWORD PTR dy$16[rsp]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR step$28[rsp], xmm0
; Line 3216
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
	jmp	SHORT $LN6@stbtt__fil
$LN4@stbtt__fil:
	mov	eax, DWORD PTR x$22[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
$LN6@stbtt__fil:
	mov	eax, DWORD PTR x2$9[rsp]
	cmp	DWORD PTR x$22[rsp], eax
	jge	SHORT $LN5@stbtt__fil
; Line 3217
	movsxd	rax, DWORD PTR x$22[rsp]
	movss	xmm0, DWORD PTR step$28[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3218
	movss	xmm0, DWORD PTR area$20[rsp]
	addss	xmm0, DWORD PTR step$28[rsp]
	movss	DWORD PTR area$20[rsp], xmm0
; Line 3219
	jmp	$LN4@stbtt__fil
$LN5@stbtt__fil:
; Line 3220
	cvtss2sd xmm0, DWORD PTR area$20[rsp]
	call	fabs
	movsd	xmm1, QWORD PTR __real@3ff028f5c0000000
	comisd	xmm1, xmm0
	jae	SHORT $LN46@stbtt__fil
	mov	r8d, 3220				; 00000c94H
	lea	rdx, OFFSET FLAT:$SG84208
	lea	rcx, OFFSET FLAT:$SG84209
	call	_wassert
	xor	eax, eax
$LN46@stbtt__fil:
; Line 3221
	movss	xmm0, DWORD PTR y_final$23[rsp]
	subss	xmm0, DWORD PTR __real@3c23d70a
	movss	xmm1, DWORD PTR sy1$10[rsp]
	comiss	xmm1, xmm0
	ja	SHORT $LN47@stbtt__fil
	mov	r8d, 3221				; 00000c95H
	lea	rdx, OFFSET FLAT:$SG84210
	lea	rcx, OFFSET FLAT:$SG84211
	call	_wassert
	xor	eax, eax
$LN47@stbtt__fil:
; Line 3225
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	QWORD PTR tv294[rsp], rax
	cvtsi2ss xmm0, DWORD PTR x2$9[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
	cvtsi2ss xmm1, DWORD PTR x2$9[rsp]
	addss	xmm1, DWORD PTR __real@3f800000
	cvtsi2ss xmm2, DWORD PTR x2$9[rsp]
	movss	DWORD PTR tv305[rsp], xmm2
	movss	xmm3, DWORD PTR sy1$10[rsp]
	subss	xmm3, DWORD PTR y_final$23[rsp]
	movss	DWORD PTR tv307[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x_bottom$8[rsp]
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv305[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv307[rsp]
	call	stbtt__position_trapezoid_area
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR area$20[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR scanline$[rsp]
	mov	rcx, QWORD PTR tv294[rsp]
	movss	xmm1, DWORD PTR [rax+rcx*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3228
	movsxd	rax, DWORD PTR x2$9[rsp]
	movss	xmm0, DWORD PTR sy1$10[rsp]
	subss	xmm0, DWORD PTR sy0$12[rsp]
	movss	xmm1, DWORD PTR sign$25[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN22@stbtt__fil:
; Line 3230
	jmp	$LN20@stbtt__fil
$LN19@stbtt__fil:
; Line 3239
	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN9@stbtt__fil
$LN7@stbtt__fil:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN9@stbtt__fil:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN8@stbtt__fil
; Line 3254
	movss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y0$18[rsp], xmm0
; Line 3255
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	movss	DWORD PTR x1$3[rsp], xmm0
; Line 3256
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x2$4[rsp], xmm0
; Line 3257
	movss	xmm0, DWORD PTR xb$26[rsp]
	movss	DWORD PTR x3$5[rsp], xmm0
; Line 3258
	movss	xmm0, DWORD PTR y_bottom$[rsp]
	movss	DWORD PTR y3$17[rsp], xmm0
; Line 3263
	cvtsi2ss xmm0, DWORD PTR x$2[rsp]
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y1$14[rsp], xmm0
; Line 3264
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$1[rsp]
	divss	xmm0, DWORD PTR dx$13[rsp]
	addss	xmm0, DWORD PTR y_top$[rsp]
	movss	DWORD PTR y2$15[rsp], xmm0
; Line 3266
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN26@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN26@stbtt__fil
; Line 3267
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3268
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3269
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
	jmp	$LN27@stbtt__fil
$LN26@stbtt__fil:
; Line 3270
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN28@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN28@stbtt__fil
; Line 3271
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3272
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3273
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
	jmp	$LN29@stbtt__fil
$LN28@stbtt__fil:
; Line 3274
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN30@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN30@stbtt__fil
; Line 3275
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3276
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
	jmp	$LN31@stbtt__fil
$LN30@stbtt__fil:
; Line 3277
	movss	xmm0, DWORD PTR x1$3[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN32@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN32@stbtt__fil
; Line 3278
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$3[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3279
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$14[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
	jmp	$LN33@stbtt__fil
$LN32@stbtt__fil:
; Line 3280
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN34@stbtt__fil
	movss	xmm0, DWORD PTR x3$5[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN34@stbtt__fil
; Line 3281
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3282
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
	jmp	$LN35@stbtt__fil
$LN34@stbtt__fil:
; Line 3283
	movss	xmm0, DWORD PTR x2$4[rsp]
	comiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN36@stbtt__fil
	movss	xmm0, DWORD PTR x0$1[rsp]
	comiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN36@stbtt__fil
; Line 3284
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$4[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3285
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$15[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
; Line 3286
	jmp	SHORT $LN37@stbtt__fil
$LN36@stbtt__fil:
; Line 3287
	movss	xmm0, DWORD PTR y3$17[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$18[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	stbtt__handle_clipped_edge
$LN37@stbtt__fil:
$LN35@stbtt__fil:
$LN33@stbtt__fil:
$LN31@stbtt__fil:
$LN29@stbtt__fil:
$LN27@stbtt__fil:
; Line 3289
	jmp	$LN7@stbtt__fil
$LN8@stbtt__fil:
$LN20@stbtt__fil:
$LN11@stbtt__fil:
; Line 3292
	mov	rax, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR e$[rsp], rax
; Line 3293
	jmp	$LN2@stbtt__fil
$LN3@stbtt__fil:
; Line 3294
	add	rsp, 232				; 000000e8H
	ret	0
stbtt__fill_active_edges_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 8
width$ = 16
stbtt__sized_triangle_area PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3078
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 3079
	movss	xmm0, DWORD PTR height$[rsp]
	mulss	xmm0, DWORD PTR width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
; Line 3080
	ret	0
stbtt__sized_triangle_area ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
tx0$ = 56
tx1$ = 64
bx0$ = 72
bx1$ = 80
stbtt__position_trapezoid_area PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3073
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3074
	movss	xmm0, DWORD PTR bx1$[rsp]
	subss	xmm0, DWORD PTR bx0$[rsp]
	movss	xmm1, DWORD PTR tx1$[rsp]
	subss	xmm1, DWORD PTR tx0$[rsp]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR height$[rsp]
	call	stbtt__sized_trapezoid_area
; Line 3075
	add	rsp, 40					; 00000028H
	ret	0
stbtt__position_trapezoid_area ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
top_width$ = 56
bottom_width$ = 64
stbtt__sized_trapezoid_area PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3066
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3067
	movss	xmm0, DWORD PTR top_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@stbtt__siz
	mov	r8d, 3067				; 00000bfbH
	lea	rdx, OFFSET FLAT:$SG84087
	lea	rcx, OFFSET FLAT:$SG84088
	call	_wassert
	xor	eax, eax
$LN3@stbtt__siz:
; Line 3068
	movss	xmm0, DWORD PTR bottom_width$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@stbtt__siz
	mov	r8d, 3068				; 00000bfcH
	lea	rdx, OFFSET FLAT:$SG84089
	lea	rcx, OFFSET FLAT:$SG84090
	call	_wassert
	xor	eax, eax
$LN4@stbtt__siz:
; Line 3069
	movss	xmm0, DWORD PTR top_width$[rsp]
	addss	xmm0, DWORD PTR bottom_width$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR height$[rsp]
; Line 3070
	add	rsp, 40					; 00000028H
	ret	0
stbtt__sized_trapezoid_area ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scanline$ = 48
x$ = 56
e$ = 64
x0$ = 72
y0$ = 80
x1$ = 88
y1$ = 96
stbtt__handle_clipped_edge PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3029
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3030
	movss	xmm0, DWORD PTR y0$[rsp]
	ucomiss	xmm0, DWORD PTR y1$[rsp]
	jp	SHORT $LN2@stbtt__han
	jne	SHORT $LN2@stbtt__han
	jmp	$LN1@stbtt__han
$LN2@stbtt__han:
; Line 3031
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR y0$[rsp]
	ja	SHORT $LN20@stbtt__han
	mov	r8d, 3031				; 00000bd7H
	lea	rdx, OFFSET FLAT:$SG84043
	lea	rcx, OFFSET FLAT:$SG84044
	call	_wassert
	xor	eax, eax
$LN20@stbtt__han:
; Line 3032
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR [rcx+24]
	jae	SHORT $LN21@stbtt__han
	mov	r8d, 3032				; 00000bd8H
	lea	rdx, OFFSET FLAT:$SG84045
	lea	rcx, OFFSET FLAT:$SG84046
	call	_wassert
	xor	eax, eax
$LN21@stbtt__han:
; Line 3033
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y0$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN3@stbtt__han
	jmp	$LN1@stbtt__han
$LN3@stbtt__han:
; Line 3034
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y1$[rsp]
	jbe	SHORT $LN4@stbtt__han
	jmp	$LN1@stbtt__han
$LN4@stbtt__han:
; Line 3035
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN5@stbtt__han
; Line 3036
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+24]
	subss	xmm1, DWORD PTR y0$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x0$[rsp], xmm0
; Line 3037
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR y0$[rsp], xmm0
$LN5@stbtt__han:
; Line 3039
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR y1$[rsp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN6@stbtt__han
; Line 3040
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+28]
	subss	xmm1, DWORD PTR y1$[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rsp]
	subss	xmm1, DWORD PTR y0$[rsp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x1$[rsp], xmm0
; Line 3041
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR y1$[rsp], xmm0
$LN6@stbtt__han:
; Line 3044
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN7@stbtt__han
	jne	SHORT $LN7@stbtt__han
; Line 3045
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN22@stbtt__han
	mov	r8d, 3045				; 00000be5H
	lea	rdx, OFFSET FLAT:$SG84053
	lea	rcx, OFFSET FLAT:$SG84054
	call	_wassert
	xor	eax, eax
$LN22@stbtt__han:
	jmp	$LN8@stbtt__han
$LN7@stbtt__han:
; Line 3046
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN9@stbtt__han
	jne	SHORT $LN9@stbtt__han
; Line 3047
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN23@stbtt__han
	mov	r8d, 3047				; 00000be7H
	lea	rdx, OFFSET FLAT:$SG84057
	lea	rcx, OFFSET FLAT:$SG84058
	call	_wassert
	xor	eax, eax
$LN23@stbtt__han:
	jmp	$LN10@stbtt__han
$LN9@stbtt__han:
; Line 3048
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN11@stbtt__han
; Line 3049
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN24@stbtt__han
	mov	r8d, 3049				; 00000be9H
	lea	rdx, OFFSET FLAT:$SG84061
	lea	rcx, OFFSET FLAT:$SG84062
	call	_wassert
	xor	eax, eax
$LN24@stbtt__han:
	jmp	$LN12@stbtt__han
$LN11@stbtt__han:
; Line 3050
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN13@stbtt__han
; Line 3051
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jae	SHORT $LN25@stbtt__han
	mov	r8d, 3051				; 00000bebH
	lea	rdx, OFFSET FLAT:$SG84065
	lea	rcx, OFFSET FLAT:$SG84066
	call	_wassert
	xor	eax, eax
$LN25@stbtt__han:
	jmp	SHORT $LN14@stbtt__han
$LN13@stbtt__han:
; Line 3053
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN26@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN27@stbtt__han
$LN26@stbtt__han:
	mov	r8d, 3053				; 00000bedH
	lea	rdx, OFFSET FLAT:$SG84067
	lea	rcx, OFFSET FLAT:$SG84068
	call	_wassert
	xor	eax, eax
$LN27@stbtt__han:
$LN14@stbtt__han:
$LN12@stbtt__han:
$LN10@stbtt__han:
$LN8@stbtt__han:
; Line 3055
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN15@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR x1$[rsp]
	jb	SHORT $LN15@stbtt__han
; Line 3056
	movsxd	rax, DWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rcx+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN16@stbtt__han
$LN15@stbtt__han:
; Line 3057
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
; Line 3058
	jmp	$LN18@stbtt__han
$LN17@stbtt__han:
; Line 3060
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN28@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	comiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN29@stbtt__han
$LN28@stbtt__han:
	mov	r8d, 3060				; 00000bf4H
	lea	rdx, OFFSET FLAT:$SG84073
	lea	rcx, OFFSET FLAT:$SG84074
	call	_wassert
	xor	eax, eax
$LN29@stbtt__han:
; Line 3061
	movsxd	rax, DWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rcx+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR x0$[rsp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtsi2ss xmm2, DWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR x1$[rsp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	addss	xmm1, xmm2
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN18@stbtt__han:
$LN16@stbtt__han:
$LN1@stbtt__han:
; Line 3063
	add	rsp, 40					; 00000028H
	ret	0
stbtt__handle_clipped_edge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dxdy$ = 32
tv88 = 36
tv135 = 40
z$ = 48
hh$ = 80
e$ = 88
off_x$ = 96
start_point$ = 104
userdata$ = 112
stbtt__new_active PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2858
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2859
	mov	r8, QWORD PTR userdata$[rsp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR hh$[rsp]
	call	stbtt__hheap_alloc
	mov	QWORD PTR z$[rsp], rax
; Line 2860
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR [rcx+4]
	divss	xmm0, xmm1
	movss	DWORD PTR dxdy$[rsp], xmm0
; Line 2861
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN4@stbtt__new
	mov	r8d, 2861				; 00000b2dH
	lea	rdx, OFFSET FLAT:$SG84007
	lea	rcx, OFFSET FLAT:$SG84008
	call	_wassert
	xor	eax, eax
$LN4@stbtt__new:
; Line 2863
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbtt__new
	mov	rax, QWORD PTR z$[rsp]
	jmp	$LN1@stbtt__new
$LN2@stbtt__new:
; Line 2864
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 2865
	movss	xmm0, DWORD PTR dxdy$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@stbtt__new
	je	SHORT $LN5@stbtt__new
$LN9@stbtt__new:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dxdy$[rsp]
	movss	DWORD PTR tv88[rsp], xmm0
	jmp	SHORT $LN6@stbtt__new
$LN5@stbtt__new:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv88[rsp], xmm0
$LN6@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv88[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2866
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR start_point$[rsp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR dxdy$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR e$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2867
	cvtsi2ss xmm0, DWORD PTR off_x$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2868
	mov	rax, QWORD PTR e$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN7@stbtt__new
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv135[rsp], xmm0
	jmp	SHORT $LN8@stbtt__new
$LN7@stbtt__new:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv135[rsp], xmm0
$LN8@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	movss	xmm0, DWORD PTR tv135[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 2869
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+24], xmm0
; Line 2870
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+28], xmm0
; Line 2871
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2872
	mov	rax, QWORD PTR z$[rsp]
$LN1@stbtt__new:
; Line 2873
	add	rsp, 72					; 00000048H
	ret	0
stbtt__new_active ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 48
n$1 = 56
$T2 = 64
$T3 = 96
hh$ = 160
userdata$ = 168
stbtt__hheap_cleanup PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2798
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 2799
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rsp], rax
$LN2@stbtt__hhe:
; Line 2800
	cmp	QWORD PTR c$[rsp], 0
	je	SHORT $LN3@stbtt__hhe
; Line 2801
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$1[rsp], rax
; Line 2802
	lea	rax, OFFSET FLAT:$SG83971
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2802				; 00000af2H
	lea	r8, OFFSET FLAT:$SG83972
	mov	edx, 151				; 00000097H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR c$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 2803
	mov	rax, QWORD PTR n$1[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 2804
	jmp	SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:
; Line 2805
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbtt__hheap_cleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hh$ = 8
p$ = 16
stbtt__hheap_free PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2792
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 2793
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2794
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 2795
	ret	0
stbtt__hheap_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 48
tv73 = 52
count$1 = 56
c$2 = 64
p$3 = 72
tv78 = 80
$T4 = 96
$T5 = 128
hh$ = 192
size$ = 200
userdata$ = 208
stbtt__hheap_alloc PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2771
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 2772
	mov	rax, QWORD PTR hh$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stbtt__hhe
; Line 2773
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR p$3[rsp], rax
; Line 2774
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx
; Line 2775
	mov	rax, QWORD PTR p$3[rsp]
	jmp	$LN1@stbtt__hhe
; Line 2776
	jmp	$LN3@stbtt__hhe
$LN2@stbtt__hhe:
; Line 2777
	mov	rax, QWORD PTR hh$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	$LN4@stbtt__hhe
; Line 2778
	cmp	QWORD PTR size$[rsp], 32		; 00000020H
	jae	SHORT $LN9@stbtt__hhe
	mov	DWORD PTR tv73[rsp], 2000		; 000007d0H
	jmp	SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
	cmp	QWORD PTR size$[rsp], 128		; 00000080H
	jae	SHORT $LN7@stbtt__hhe
	mov	DWORD PTR tv72[rsp], 800		; 00000320H
	jmp	SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
	mov	DWORD PTR tv72[rsp], 100		; 00000064H
$LN8@stbtt__hhe:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN10@stbtt__hhe:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR count$1[rsp], eax
; Line 2779
	movsxd	rax, DWORD PTR count$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 8
	mov	QWORD PTR tv78[rsp], rax
	lea	rcx, OFFSET FLAT:$SG83951
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 2779				; 00000adbH
	lea	r8, OFFSET FLAT:$SG83952
	mov	edx, 150				; 00000096H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv78[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	mov	QWORD PTR c$2[rsp], rax
; Line 2780
	cmp	QWORD PTR c$2[rsp], 0
	jne	SHORT $LN5@stbtt__hhe
; Line 2781
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:
; Line 2782
	mov	rax, QWORD PTR c$2[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2783
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR c$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2784
	mov	rax, QWORD PTR hh$[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	mov	DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:
; Line 2786
	mov	rax, QWORD PTR hh$[rsp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	mov	rcx, QWORD PTR hh$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 2787
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR hh$[rsp]
	movsxd	rcx, DWORD PTR [rcx+16]
	mov	rdx, QWORD PTR size$[rsp]
	imul	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:
; Line 2789
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
stbtt__hheap_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
table$1 = 32
class2Count$2 = 40
i$ = 44
sti$ = 48
lookupOffset$3 = 52
lookupType$4 = 56
subTableCount$5 = 60
subtableOffset$6 = 64
coverageOffset$7 = 68
posFormat$8 = 72
valueFormat1$9 = 76
valueFormat2$10 = 80
pairPosOffset$11 = 84
pairSetCount$12 = 88
pairValueCount$13 = 92
secondGlyph$14 = 96
xAdvance$15 = 100
valueFormat1$16 = 104
classDef1Offset$17 = 108
classDef2Offset$18 = 112
class1Count$19 = 116
xAdvance$20 = 120
valueFormat2$21 = 124
lookupListOffset$ = 128
coverageIndex$22 = 132
r$23 = 136
m$24 = 140
l$25 = 144
glyph1class$26 = 148
glyph2class$27 = 152
lookupCount$ = 156
straw$28 = 160
needle$29 = 164
tv159 = 168
data$ = 176
lookupTable$30 = 184
valueRecordPairSizeInBytes$31 = 192
lookupList$ = 200
pairValueTable$32 = 208
pairValue$33 = 216
subTableOffsets$34 = 224
pairValueArray$35 = 232
class1Records$36 = 240
class2Records$37 = 248
info$ = 272
glyph1$ = 280
glyph2$ = 288
stbtt__GetGlyphGPOSInfoAdvance PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2497
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 2504
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN12@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
; Line 2506
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2508
	mov	rcx, QWORD PTR data$[rsp]
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN13@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN13@stbtt__Get:
; Line 2509
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	test	eax, eax
	je	SHORT $LN14@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN14@stbtt__Get:
; Line 2511
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR lookupListOffset$[rsp], ax
; Line 2512
	movzx	eax, WORD PTR lookupListOffset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupList$[rsp], rax
; Line 2513
	mov	rcx, QWORD PTR lookupList$[rsp]
	call	ttUSHORT
	mov	WORD PTR lookupCount$[rsp], ax
; Line 2515
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__Get:
	movzx	eax, WORD PTR lookupCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__Get
; Line 2516
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR lookupList$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR lookupOffset$3[rsp], ax
; Line 2517
	movzx	eax, WORD PTR lookupOffset$3[rsp]
	mov	rcx, QWORD PTR lookupList$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupTable$30[rsp], rax
; Line 2519
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	call	ttUSHORT
	mov	WORD PTR lookupType$4[rsp], ax
; Line 2520
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR subTableCount$5[rsp], ax
; Line 2521
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 6
	mov	QWORD PTR subTableOffsets$34[rsp], rax
; Line 2522
	movzx	eax, WORD PTR lookupType$4[rsp]
	cmp	eax, 2
	je	SHORT $LN15@stbtt__Get
; Line 2523
	jmp	$LN2@stbtt__Get
$LN15@stbtt__Get:
; Line 2525
	mov	DWORD PTR sti$[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR sti$[rsp]
	inc	eax
	mov	DWORD PTR sti$[rsp], eax
$LN7@stbtt__Get:
	movzx	eax, WORD PTR subTableCount$5[rsp]
	cmp	DWORD PTR sti$[rsp], eax
	jge	$LN6@stbtt__Get
; Line 2526
	mov	eax, DWORD PTR sti$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR subTableOffsets$34[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR subtableOffset$6[rsp], ax
; Line 2527
	movzx	eax, WORD PTR subtableOffset$6[rsp]
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR table$1[rsp], rax
; Line 2528
	mov	rcx, QWORD PTR table$1[rsp]
	call	ttUSHORT
	mov	WORD PTR posFormat$8[rsp], ax
; Line 2529
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR coverageOffset$7[rsp], ax
; Line 2530
	movzx	eax, WORD PTR coverageOffset$7[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	stbtt__GetCoverageIndex
	mov	DWORD PTR coverageIndex$22[rsp], eax
; Line 2531
	cmp	DWORD PTR coverageIndex$22[rsp], -1
	jne	SHORT $LN16@stbtt__Get
	jmp	$LN5@stbtt__Get
$LN16@stbtt__Get:
; Line 2533
	movzx	eax, WORD PTR posFormat$8[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 1
	je	SHORT $LN17@stbtt__Get
	cmp	DWORD PTR tv159[rsp], 2
	je	$LN25@stbtt__Get
	jmp	$LN32@stbtt__Get
$LN17@stbtt__Get:
; Line 2537
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR valueFormat1$9[rsp], ax
; Line 2538
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR valueFormat2$10[rsp], ax
; Line 2539
	movzx	eax, WORD PTR valueFormat1$9[rsp]
	cmp	eax, 4
	jne	$LN18@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$10[rsp]
	test	eax, eax
	jne	$LN18@stbtt__Get
; Line 2540
	mov	DWORD PTR valueRecordPairSizeInBytes$31[rsp], 2
; Line 2541
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR pairSetCount$12[rsp], ax
; Line 2542
	mov	eax, DWORD PTR coverageIndex$22[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR table$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR pairPosOffset$11[rsp], ax
; Line 2543
	movzx	eax, WORD PTR pairPosOffset$11[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValueTable$32[rsp], rax
; Line 2544
	mov	rcx, QWORD PTR pairValueTable$32[rsp]
	call	ttUSHORT
	mov	WORD PTR pairValueCount$13[rsp], ax
; Line 2545
	mov	rax, QWORD PTR pairValueTable$32[rsp]
	add	rax, 2
	mov	QWORD PTR pairValueArray$35[rsp], rax
; Line 2547
	movzx	eax, WORD PTR pairSetCount$12[rsp]
	cmp	DWORD PTR coverageIndex$22[rsp], eax
	jl	SHORT $LN20@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN20@stbtt__Get:
; Line 2549
	mov	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$29[rsp], eax
; Line 2550
	movzx	eax, WORD PTR pairValueCount$13[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
; Line 2551
	mov	DWORD PTR l$25[rsp], 0
$LN10@stbtt__Get:
; Line 2554
	mov	eax, DWORD PTR r$23[rsp]
	cmp	DWORD PTR l$25[rsp], eax
	jg	$LN11@stbtt__Get
; Line 2557
	mov	eax, DWORD PTR r$23[rsp]
	mov	ecx, DWORD PTR l$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$24[rsp], eax
; Line 2558
	mov	eax, DWORD PTR valueRecordPairSizeInBytes$31[rsp]
	add	eax, 2
	imul	eax, DWORD PTR m$24[rsp]
	cdqe
	mov	rcx, QWORD PTR pairValueArray$35[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValue$33[rsp], rax
; Line 2559
	mov	rcx, QWORD PTR pairValue$33[rsp]
	call	ttUSHORT
	mov	WORD PTR secondGlyph$14[rsp], ax
; Line 2560
	movzx	eax, WORD PTR secondGlyph$14[rsp]
	mov	DWORD PTR straw$28[rsp], eax
; Line 2561
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jge	SHORT $LN21@stbtt__Get
; Line 2562
	mov	eax, DWORD PTR m$24[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
	jmp	SHORT $LN22@stbtt__Get
$LN21@stbtt__Get:
; Line 2563
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jle	SHORT $LN23@stbtt__Get
; Line 2564
	mov	eax, DWORD PTR m$24[rsp]
	inc	eax
	mov	DWORD PTR l$25[rsp], eax
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 2566
	mov	rax, QWORD PTR pairValue$33[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttSHORT
	mov	WORD PTR xAdvance$15[rsp], ax
; Line 2567
	movsx	eax, WORD PTR xAdvance$15[rsp]
	jmp	$LN1@stbtt__Get
$LN24@stbtt__Get:
$LN22@stbtt__Get:
; Line 2569
	jmp	$LN10@stbtt__Get
$LN11@stbtt__Get:
; Line 2570
	jmp	SHORT $LN19@stbtt__Get
$LN18@stbtt__Get:
; Line 2571
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 2572
	jmp	$LN8@stbtt__Get
$LN25@stbtt__Get:
; Line 2576
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR valueFormat1$16[rsp], ax
; Line 2577
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR valueFormat2$21[rsp], ax
; Line 2578
	movzx	eax, WORD PTR valueFormat1$16[rsp]
	cmp	eax, 4
	jne	$LN26@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$21[rsp]
	test	eax, eax
	jne	$LN26@stbtt__Get
; Line 2579
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR classDef1Offset$17[rsp], ax
; Line 2580
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 10
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR classDef2Offset$18[rsp], ax
; Line 2581
	movzx	eax, WORD PTR classDef1Offset$17[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	stbtt__GetGlyphClass
	mov	DWORD PTR glyph1class$26[rsp], eax
; Line 2582
	movzx	eax, WORD PTR classDef2Offset$18[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph2$[rsp]
	mov	rcx, rax
	call	stbtt__GetGlyphClass
	mov	DWORD PTR glyph2class$27[rsp], eax
; Line 2584
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 12
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR class1Count$19[rsp], ax
; Line 2585
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 14
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR class2Count$2[rsp], ax
; Line 2589
	cmp	DWORD PTR glyph1class$26[rsp], 0
	jl	SHORT $LN29@stbtt__Get
	movzx	eax, WORD PTR class1Count$19[rsp]
	cmp	DWORD PTR glyph1class$26[rsp], eax
	jl	SHORT $LN28@stbtt__Get
$LN29@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN28@stbtt__Get:
; Line 2590
	cmp	DWORD PTR glyph2class$27[rsp], 0
	jl	SHORT $LN31@stbtt__Get
	movzx	eax, WORD PTR class2Count$2[rsp]
	cmp	DWORD PTR glyph2class$27[rsp], eax
	jl	SHORT $LN30@stbtt__Get
$LN31@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN30@stbtt__Get:
; Line 2592
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 16
	mov	QWORD PTR class1Records$36[rsp], rax
; Line 2593
	movzx	eax, WORD PTR class2Count$2[rsp]
	mov	ecx, DWORD PTR glyph1class$26[rsp]
	imul	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class1Records$36[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR class2Records$37[rsp], rax
; Line 2594
	mov	eax, DWORD PTR glyph2class$27[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class2Records$37[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttSHORT
	mov	WORD PTR xAdvance$20[rsp], ax
; Line 2595
	movsx	eax, WORD PTR xAdvance$20[rsp]
	jmp	SHORT $LN1@stbtt__Get
; Line 2596
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 2597
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN27@stbtt__Get:
; Line 2598
	jmp	SHORT $LN8@stbtt__Get
$LN32@stbtt__Get:
; Line 2602
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN8@stbtt__Get:
; Line 2604
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 2605
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2607
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2608
	add	rsp, 264				; 00000108H
	ret	0
stbtt__GetGlyphGPOSInfoAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
startGlyphID$1 = 32
classDefFormat$ = 36
glyphCount$2 = 40
classRangeCount$3 = 44
r$4 = 48
m$5 = 52
l$6 = 56
tv67 = 60
needle$7 = 64
strawStart$8 = 68
strawEnd$9 = 72
classRangeRecord$10 = 80
classDef1ValueArray$11 = 88
classRangeRecords$12 = 96
classDefTable$ = 128
glyph$ = 136
stbtt__GetGlyphClass PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2448
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2449
	mov	rcx, QWORD PTR classDefTable$[rsp]
	call	ttUSHORT
	mov	WORD PTR classDefFormat$[rsp], ax
; Line 2450
	movzx	eax, WORD PTR classDefFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN6@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN8@stbtt__Get
	jmp	$LN13@stbtt__Get
$LN6@stbtt__Get:
; Line 2453
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR startGlyphID$1[rsp], ax
; Line 2454
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2455
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 6
	mov	QWORD PTR classDef1ValueArray$11[rsp], rax
; Line 2457
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	cmp	DWORD PTR glyph$[rsp], eax
	jl	SHORT $LN7@stbtt__Get
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	movzx	ecx, WORD PTR glyphCount$2[rsp]
	add	eax, ecx
	cmp	DWORD PTR glyph$[rsp], eax
	jge	SHORT $LN7@stbtt__Get
; Line 2458
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	mov	ecx, DWORD PTR glyph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR classDef1ValueArray$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt__Get
$LN7@stbtt__Get:
; Line 2459
	jmp	$LN2@stbtt__Get
$LN8@stbtt__Get:
; Line 2463
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR classRangeCount$3[rsp], ax
; Line 2464
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	QWORD PTR classRangeRecords$12[rsp], rax
; Line 2467
	mov	DWORD PTR l$6[rsp], 0
	movzx	eax, WORD PTR classRangeCount$3[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
; Line 2468
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$7[rsp], eax
$LN4@stbtt__Get:
; Line 2469
	mov	eax, DWORD PTR r$4[rsp]
	cmp	DWORD PTR l$6[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2471
	mov	eax, DWORD PTR r$4[rsp]
	mov	ecx, DWORD PTR l$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$5[rsp], eax
; Line 2472
	imul	eax, DWORD PTR m$5[rsp], 6
	cdqe
	mov	rcx, QWORD PTR classRangeRecords$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR classRangeRecord$10[rsp], rax
; Line 2473
	mov	rcx, QWORD PTR classRangeRecord$10[rsp]
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$8[rsp], eax
; Line 2474
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$9[rsp], eax
; Line 2475
	mov	eax, DWORD PTR strawStart$8[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2476
	mov	eax, DWORD PTR m$5[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2477
	mov	eax, DWORD PTR strawEnd$9[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2478
	mov	eax, DWORD PTR m$5[rsp]
	inc	eax
	mov	DWORD PTR l$6[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2480
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	jmp	SHORT $LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2481
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2482
	jmp	SHORT $LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2486
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2490
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2491
	add	rsp, 120				; 00000078H
	ret	0
stbtt__GetGlyphClass ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$1 = 32
coverageFormat$ = 36
glyphCount$2 = 40
glyphID$3 = 44
rangeCount$4 = 48
startCoverageIndex$5 = 52
r$6 = 56
l$7 = 60
r$8 = 64
m$9 = 68
l$10 = 72
tv67 = 76
straw$11 = 80
needle$12 = 84
needle$13 = 88
strawStart$14 = 92
strawEnd$15 = 96
rangeRecord$16 = 104
glyphArray$17 = 112
rangeArray$18 = 120
coverageTable$ = 144
glyph$ = 152
stbtt__GetCoverageIndex PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2390
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2391
	mov	rcx, QWORD PTR coverageTable$[rsp]
	call	ttUSHORT
	mov	WORD PTR coverageFormat$[rsp], ax
; Line 2392
	movzx	eax, WORD PTR coverageFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN8@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN13@stbtt__Get
	jmp	$LN18@stbtt__Get
$LN8@stbtt__Get:
; Line 2394
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2397
	mov	DWORD PTR l$7[rsp], 0
	movzx	eax, WORD PTR glyphCount$2[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
; Line 2398
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$12[rsp], eax
$LN4@stbtt__Get:
; Line 2399
	mov	eax, DWORD PTR r$6[rsp]
	cmp	DWORD PTR l$7[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2400
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR glyphArray$17[rsp], rax
; Line 2402
	mov	eax, DWORD PTR r$6[rsp]
	mov	ecx, DWORD PTR l$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$1[rsp], eax
; Line 2403
	mov	eax, DWORD PTR m$1[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR glyphArray$17[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR glyphID$3[rsp], ax
; Line 2404
	movzx	eax, WORD PTR glyphID$3[rsp]
	mov	DWORD PTR straw$11[rsp], eax
; Line 2405
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2406
	mov	eax, DWORD PTR m$1[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2407
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2408
	mov	eax, DWORD PTR m$1[rsp]
	inc	eax
	mov	DWORD PTR l$7[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2410
	mov	eax, DWORD PTR m$1[rsp]
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2412
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2413
	jmp	$LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2417
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR rangeCount$4[rsp], ax
; Line 2418
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR rangeArray$18[rsp], rax
; Line 2421
	mov	DWORD PTR l$10[rsp], 0
	movzx	eax, WORD PTR rangeCount$4[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
; Line 2422
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$13[rsp], eax
$LN6@stbtt__Get:
; Line 2423
	mov	eax, DWORD PTR r$8[rsp]
	cmp	DWORD PTR l$10[rsp], eax
	jg	$LN7@stbtt__Get
; Line 2425
	mov	eax, DWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR l$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$9[rsp], eax
; Line 2426
	imul	eax, DWORD PTR m$9[rsp], 6
	cdqe
	mov	rcx, QWORD PTR rangeArray$18[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rangeRecord$16[rsp], rax
; Line 2427
	mov	rcx, QWORD PTR rangeRecord$16[rsp]
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$14[rsp], eax
; Line 2428
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$15[rsp], eax
; Line 2429
	mov	eax, DWORD PTR strawStart$14[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jge	SHORT $LN14@stbtt__Get
; Line 2430
	mov	eax, DWORD PTR m$9[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
	jmp	SHORT $LN15@stbtt__Get
$LN14@stbtt__Get:
; Line 2431
	mov	eax, DWORD PTR strawEnd$15[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jle	SHORT $LN16@stbtt__Get
; Line 2432
	mov	eax, DWORD PTR m$9[rsp]
	inc	eax
	mov	DWORD PTR l$10[rsp], eax
	jmp	SHORT $LN17@stbtt__Get
$LN16@stbtt__Get:
; Line 2434
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR startCoverageIndex$5[rsp], ax
; Line 2435
	movzx	eax, WORD PTR startCoverageIndex$5[rsp]
	add	eax, DWORD PTR glyph$[rsp]
	sub	eax, DWORD PTR strawStart$14[rsp]
	jmp	SHORT $LN1@stbtt__Get
$LN17@stbtt__Get:
$LN15@stbtt__Get:
; Line 2437
	jmp	$LN6@stbtt__Get
$LN7@stbtt__Get:
; Line 2438
	jmp	SHORT $LN2@stbtt__Get
$LN18@stbtt__Get:
; Line 2441
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2444
	mov	eax, -1
$LN1@stbtt__Get:
; Line 2445
	add	rsp, 136				; 00000088H
	ret	0
stbtt__GetCoverageIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
r$ = 36
l$ = 40
straw$ = 44
needle$ = 48
data$ = 56
info$ = 80
glyph1$ = 88
glyph2$ = 96
stbtt__GetGlyphKernInfoAdvance PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2360
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2361
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2366
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN4@stbtt__Get
; Line 2367
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN4@stbtt__Get:
; Line 2368
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN5@stbtt__Get
; Line 2369
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN5@stbtt__Get:
; Line 2370
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN6@stbtt__Get
; Line 2371
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN6@stbtt__Get:
; Line 2373
	mov	DWORD PTR l$[rsp], 0
; Line 2374
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	dec	eax
	mov	DWORD PTR r$[rsp], eax
; Line 2375
	mov	eax, DWORD PTR glyph1$[rsp]
	shl	eax, 16
	or	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$[rsp], eax
$LN2@stbtt__Get:
; Line 2376
	mov	eax, DWORD PTR r$[rsp]
	cmp	DWORD PTR l$[rsp], eax
	jg	SHORT $LN3@stbtt__Get
; Line 2377
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR l$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$[rsp], eax
; Line 2378
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR straw$[rsp], eax
; Line 2379
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jae	SHORT $LN7@stbtt__Get
; Line 2380
	mov	eax, DWORD PTR m$[rsp]
	dec	eax
	mov	DWORD PTR r$[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
; Line 2381
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jbe	SHORT $LN9@stbtt__Get
; Line 2382
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2384
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	ttSHORT
	cwde
	jmp	SHORT $LN1@stbtt__Get
$LN10@stbtt__Get:
$LN8@stbtt__Get:
; Line 2385
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2386
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2387
	add	rsp, 72					; 00000048H
	ret	0
stbtt__GetGlyphKernInfoAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output_ctx$ = 48
count_ctx$ = 104
tv72 = 160
$T1 = 176
$T2 = 208
info$ = 272
glyph_index$ = 280
pvertices$ = 288
stbtt__GetGlyphShapeT2 PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2270
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 2272
	mov	DWORD PTR count_ctx$[rsp], 1
	mov	DWORD PTR count_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rsp+20], xmm0
	mov	DWORD PTR count_ctx$[rsp+24], 0
	mov	DWORD PTR count_ctx$[rsp+28], 0
	mov	DWORD PTR count_ctx$[rsp+32], 0
	mov	DWORD PTR count_ctx$[rsp+36], 0
	mov	QWORD PTR count_ctx$[rsp+40], 0
	mov	DWORD PTR count_ctx$[rsp+48], 0
; Line 2273
	mov	DWORD PTR output_ctx$[rsp], 0
	mov	DWORD PTR output_ctx$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rsp+20], xmm0
	mov	DWORD PTR output_ctx$[rsp+24], 0
	mov	DWORD PTR output_ctx$[rsp+28], 0
	mov	DWORD PTR output_ctx$[rsp+32], 0
	mov	DWORD PTR output_ctx$[rsp+36], 0
	mov	QWORD PTR output_ctx$[rsp+40], 0
	mov	DWORD PTR output_ctx$[rsp+48], 0
; Line 2274
	lea	r8, QWORD PTR count_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__run_charstring
	test	eax, eax
	je	$LN2@stbtt__Get
; Line 2275
	movsxd	rax, DWORD PTR count_ctx$[rsp+48]
	imul	rax, rax, 14
	mov	QWORD PTR tv72[rsp], rax
	lea	rcx, OFFSET FLAT:$SG83451
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 2275				; 000008e3H
	lea	r8, OFFSET FLAT:$SG83452
	mov	edx, 148				; 00000094H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv72[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	rcx, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2276
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR output_ctx$[rsp+40], rax
; Line 2277
	lea	r8, QWORD PTR output_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN3@stbtt__Get
; Line 2278
	mov	eax, DWORD PTR count_ctx$[rsp+48]
	cmp	DWORD PTR output_ctx$[rsp+48], eax
	je	SHORT $LN5@stbtt__Get
	mov	r8d, 2278				; 000008e6H
	lea	rdx, OFFSET FLAT:$SG83454
	lea	rcx, OFFSET FLAT:$SG83455
	call	_wassert
	xor	eax, eax
$LN5@stbtt__Get:
; Line 2279
	mov	eax, DWORD PTR output_ctx$[rsp+48]
	jmp	SHORT $LN1@stbtt__Get
$LN3@stbtt__Get:
$LN2@stbtt__Get:
; Line 2282
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2283
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2284
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
stbtt__GetGlyphShapeT2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
sp$ = 68
dy2$1 = 72
subr_stack_height$ = 76
dx3$2 = 80
dx2$3 = 84
dx1$4 = 88
dx6$5 = 92
dx5$6 = 96
dx4$7 = 100
dy1$8 = 104
dy5$9 = 108
b0$ = 112
f$ = 116
maskbits$ = 120
in_header$ = 124
dy6$10 = 128
tv76 = 132
tv465 = 136
dy3$11 = 140
dy4$12 = 144
clear_stack$ = 148
b$ = 152
tv188 = 168
tv225 = 172
has_subrs$ = 176
dy$13 = 180
dx$14 = 184
v$ = 188
b1$15 = 192
tv450 = 200
tv635 = 208
subrs$ = 216
$T16 = 240
$T17 = 256
$T18 = 272
$T19 = 288
$T20 = 304
s$ = 320
subr_stack$ = 512
__$ArrayPad$ = 672
info$ = 720
glyph_index$ = 728
c$ = 736
stbtt__run_charstring PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2011
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 696				; 000002b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2012
	mov	DWORD PTR in_header$[rsp], 1
	mov	DWORD PTR maskbits$[rsp], 0
	mov	DWORD PTR subr_stack_height$[rsp], 0
	mov	DWORD PTR sp$[rsp], 0
; Line 2013
	mov	DWORD PTR has_subrs$[rsp], 0
; Line 2015
	lea	rax, QWORD PTR subrs$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+112]
	mov	ecx, 16
	rep movsb
; Line 2021
	lea	rax, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR glyph_index$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	stbtt__cff_index_get
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN2@stbtt__run:
; Line 2022
	mov	eax, DWORD PTR b$[rsp+12]
	cmp	DWORD PTR b$[rsp+8], eax
	jge	$LN3@stbtt__run
; Line 2023
	mov	DWORD PTR i$[rsp], 0
; Line 2024
	mov	DWORD PTR clear_stack$[rsp], 1
; Line 2025
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 2026
	mov	eax, DWORD PTR b0$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	dec	eax
	mov	DWORD PTR tv76[rsp], eax
	cmp	DWORD PTR tv76[rsp], 30
	ja	$LN92@stbtt__run
	movsxd	rax, DWORD PTR tv76[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN105@stbtt__run[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN29@stbtt__run:
$LN30@stbtt__run:
; Line 2030
	cmp	DWORD PTR in_header$[rsp], 0
	je	SHORT $LN31@stbtt__run
; Line 2031
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
$LN31@stbtt__run:
; Line 2032
	mov	DWORD PTR in_header$[rsp], 0
; Line 2033
	mov	eax, DWORD PTR maskbits$[rsp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, eax
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
; Line 2034
	jmp	$LN4@stbtt__run
$LN32@stbtt__run:
$LN33@stbtt__run:
$LN34@stbtt__run:
$LN35@stbtt__run:
; Line 2040
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
; Line 2041
	jmp	$LN4@stbtt__run
$LN36@stbtt__run:
; Line 2044
	mov	DWORD PTR in_header$[rsp], 0
; Line 2045
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN37@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN37@stbtt__run:
; Line 2046
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	movsxd	rcx, ecx
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rmove_to
; Line 2047
	jmp	$LN4@stbtt__run
$LN38@stbtt__run:
; Line 2049
	mov	DWORD PTR in_header$[rsp], 0
; Line 2050
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN39@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN39@stbtt__run:
; Line 2051
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rmove_to
; Line 2052
	jmp	$LN4@stbtt__run
$LN40@stbtt__run:
; Line 2054
	mov	DWORD PTR in_header$[rsp], 0
; Line 2055
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN41@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN41@stbtt__run:
; Line 2056
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rmove_to
; Line 2057
	jmp	$LN4@stbtt__run
$LN42@stbtt__run:
; Line 2060
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN43@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN43@stbtt__run:
; Line 2061
	jmp	SHORT $LN8@stbtt__run
$LN6@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN8@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jge	SHORT $LN7@stbtt__run
; Line 2062
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rline_to
	jmp	SHORT $LN6@stbtt__run
$LN7@stbtt__run:
; Line 2063
	jmp	$LN4@stbtt__run
$LN44@stbtt__run:
; Line 2069
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN45@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN45@stbtt__run:
; Line 2070
	jmp	SHORT $vlineto$106
$LN46@stbtt__run:
; Line 2072
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN47@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN47@stbtt__run:
$LN9@stbtt__run:
; Line 2074
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN48@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN48@stbtt__run:
; Line 2075
	movsxd	rax, DWORD PTR i$[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rline_to
; Line 2076
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$vlineto$106:
; Line 2078
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN49@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN49@stbtt__run:
; Line 2079
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rline_to
; Line 2080
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 2081
	jmp	SHORT $LN9@stbtt__run
$LN10@stbtt__run:
; Line 2082
	jmp	$LN4@stbtt__run
$LN50@stbtt__run:
; Line 2085
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN51@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN51@stbtt__run:
; Line 2086
	jmp	$hvcurveto$107
$LN52@stbtt__run:
; Line 2088
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN53@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN53@stbtt__run:
$LN12@stbtt__run:
; Line 2090
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN54@stbtt__run
	jmp	$LN13@stbtt__run
$LN54@stbtt__run:
; Line 2091
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN99@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv188[rsp], xmm0
	jmp	SHORT $LN100@stbtt__run
$LN99@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv188[rsp], xmm0
$LN100@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR tv188[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2092
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$hvcurveto$107:
; Line 2094
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN55@stbtt__run
	jmp	$LN13@stbtt__run
$LN55@stbtt__run:
; Line 2095
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN101@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR tv225[rsp], xmm0
	jmp	SHORT $LN102@stbtt__run
$LN101@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv225[rsp], xmm0
$LN102@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR tv225[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rsp+rdi*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2096
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
; Line 2097
	jmp	$LN12@stbtt__run
$LN13@stbtt__run:
; Line 2098
	jmp	$LN4@stbtt__run
$LN56@stbtt__run:
; Line 2101
	cmp	DWORD PTR sp$[rsp], 6
	jge	SHORT $LN57@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN57@stbtt__run:
; Line 2102
	jmp	SHORT $LN17@stbtt__run
$LN15@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN17@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN16@stbtt__run
; Line 2103
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
	jmp	$LN15@stbtt__run
$LN16@stbtt__run:
; Line 2104
	jmp	$LN4@stbtt__run
$LN58@stbtt__run:
; Line 2107
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN59@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN59@stbtt__run:
; Line 2108
	jmp	SHORT $LN20@stbtt__run
$LN18@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN20@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	cmp	eax, ecx
	jge	$LN19@stbtt__run
; Line 2109
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
	jmp	$LN18@stbtt__run
$LN19@stbtt__run:
; Line 2110
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN60@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN60@stbtt__run:
; Line 2111
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rline_to
; Line 2112
	jmp	$LN4@stbtt__run
$LN61@stbtt__run:
; Line 2115
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN62@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN62@stbtt__run:
; Line 2116
	jmp	SHORT $LN23@stbtt__run
$LN21@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN23@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 6
	cmp	eax, ecx
	jge	SHORT $LN22@stbtt__run
; Line 2117
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	movss	xmm2, DWORD PTR s$[rsp+rax*4]
	movss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rline_to
	jmp	SHORT $LN21@stbtt__run
$LN22@stbtt__run:
; Line 2118
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN63@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN63@stbtt__run:
; Line 2119
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdi*4]
	movss	xmm2, DWORD PTR s$[rsp+rsi*4]
	movss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2120
	jmp	$LN4@stbtt__run
$LN64@stbtt__run:
$LN65@stbtt__run:
; Line 2124
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN66@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN66@stbtt__run:
; Line 2125
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2126
	mov	eax, DWORD PTR sp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN67@stbtt__run
	movsxd	rax, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR f$[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN67@stbtt__run:
; Line 2127
	jmp	SHORT $LN26@stbtt__run
$LN24@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN26@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN25@stbtt__run
; Line 2128
	cmp	DWORD PTR b0$[rsp], 27
	jne	SHORT $LN68@stbtt__run
; Line 2129
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR s$[rsp+rdi*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
	jmp	SHORT $LN69@stbtt__run
$LN68@stbtt__run:
; Line 2131
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR s$[rsp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rsp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rsp+rdx*4]
	movss	xmm2, DWORD PTR s$[rsp+rdi*4]
	movss	xmm1, DWORD PTR f$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
$LN69@stbtt__run:
; Line 2132
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rsp], xmm0
; Line 2133
	jmp	$LN24@stbtt__run
$LN25@stbtt__run:
; Line 2134
	jmp	$LN4@stbtt__run
$LN70@stbtt__run:
; Line 2137
	cmp	DWORD PTR has_subrs$[rsp], 0
	jne	SHORT $LN71@stbtt__run
; Line 2138
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN72@stbtt__run
; Line 2139
	mov	r8d, DWORD PTR glyph_index$[rsp]
	mov	rdx, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	stbtt__cid_get_glyph_subrs
	lea	rcx, QWORD PTR subrs$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN72@stbtt__run:
; Line 2140
	mov	DWORD PTR has_subrs$[rsp], 1
$LN71@stbtt__run:
$LN73@stbtt__run:
; Line 2144
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN74@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN74@stbtt__run:
; Line 2145
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	mov	DWORD PTR sp$[rsp], eax
	movsxd	rax, DWORD PTR sp$[rsp]
	cvttss2si eax, DWORD PTR s$[rsp+rax*4]
	mov	DWORD PTR v$[rsp], eax
; Line 2146
	cmp	DWORD PTR subr_stack_height$[rsp], 10
	jl	SHORT $LN75@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN75@stbtt__run:
; Line 2147
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR subr_stack$[rsp+rax]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	inc	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
; Line 2148
	cmp	DWORD PTR b0$[rsp], 10
	jne	SHORT $LN103@stbtt__run
	lea	rax, QWORD PTR subrs$[rsp]
	mov	QWORD PTR tv450[rsp], rax
	jmp	SHORT $LN104@stbtt__run
$LN103@stbtt__run:
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv450[rsp], rax
$LN104@stbtt__run:
	lea	rax, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv450[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR v$[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	stbtt__get_subr
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2149
	cmp	DWORD PTR b$[rsp+12], 0
	jne	SHORT $LN76@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN76@stbtt__run:
; Line 2150
	mov	DWORD PTR b$[rsp+8], 0
; Line 2151
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2152
	jmp	$LN4@stbtt__run
$LN77@stbtt__run:
; Line 2155
	cmp	DWORD PTR subr_stack_height$[rsp], 0
	jg	SHORT $LN78@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN78@stbtt__run:
; Line 2156
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	dec	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR subr_stack$[rsp+rax]
	mov	ecx, 16
	rep movsb
; Line 2157
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2158
	jmp	$LN4@stbtt__run
$LN79@stbtt__run:
; Line 2161
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_close_shape
; Line 2162
	mov	eax, 1
	jmp	$LN1@stbtt__run
$LN80@stbtt__run:
; Line 2167
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b1$15[rsp], eax
; Line 2168
	mov	eax, DWORD PTR b1$15[rsp]
	mov	DWORD PTR tv465[rsp], eax
	cmp	DWORD PTR tv465[rsp], 34		; 00000022H
	je	SHORT $LN81@stbtt__run
	cmp	DWORD PTR tv465[rsp], 35		; 00000023H
	je	$LN83@stbtt__run
	cmp	DWORD PTR tv465[rsp], 36		; 00000024H
	je	$LN85@stbtt__run
	cmp	DWORD PTR tv465[rsp], 37		; 00000025H
	je	$LN87@stbtt__run
	jmp	$LN91@stbtt__run
$LN81@stbtt__run:
; Line 2172
	cmp	DWORD PTR sp$[rsp], 7
	jge	SHORT $LN82@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN82@stbtt__run:
; Line 2173
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2174
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2175
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2176
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2177
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2178
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2179
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2180
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2181
	movss	xmm0, DWORD PTR dy2$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm1, xmm1
	movss	DWORD PTR [rsp+48], xmm1
	movss	xmm1, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm1
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2182
	jmp	$LN27@stbtt__run
$LN83@stbtt__run:
; Line 2185
	cmp	DWORD PTR sp$[rsp], 13
	jge	SHORT $LN84@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN84@stbtt__run:
; Line 2186
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2187
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2188
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2189
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2190
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2191
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2192
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2193
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2194
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2195
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2196
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2197
	mov	eax, 4
	imul	rax, rax, 11
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
; Line 2199
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2200
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2201
	jmp	$LN27@stbtt__run
$LN85@stbtt__run:
; Line 2204
	cmp	DWORD PTR sp$[rsp], 9
	jge	SHORT $LN86@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN86@stbtt__run:
; Line 2205
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2206
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2207
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2208
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2209
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2210
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2211
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2212
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2213
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2214
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2215
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2216
	jmp	$LN27@stbtt__run
$LN87@stbtt__run:
; Line 2219
	cmp	DWORD PTR sp$[rsp], 11
	jge	SHORT $LN88@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN88@stbtt__run:
; Line 2220
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx1$4[rsp], xmm0
; Line 2221
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy1$8[rsp], xmm0
; Line 2222
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx2$3[rsp], xmm0
; Line 2223
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy2$1[rsp], xmm0
; Line 2224
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx3$2[rsp], xmm0
; Line 2225
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy3$11[rsp], xmm0
; Line 2226
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx4$7[rsp], xmm0
; Line 2227
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy4$12[rsp], xmm0
; Line 2228
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dx5$6[rsp], xmm0
; Line 2229
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy5$9[rsp], xmm0
; Line 2230
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rsp+rax]
	movss	DWORD PTR dy6$10[rsp], xmm0
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR dx6$5[rsp], xmm0
; Line 2231
	movss	xmm0, DWORD PTR dx1$4[rsp]
	addss	xmm0, DWORD PTR dx2$3[rsp]
	addss	xmm0, DWORD PTR dx3$2[rsp]
	addss	xmm0, DWORD PTR dx4$7[rsp]
	addss	xmm0, DWORD PTR dx5$6[rsp]
	movss	DWORD PTR dx$14[rsp], xmm0
; Line 2232
	movss	xmm0, DWORD PTR dy1$8[rsp]
	addss	xmm0, DWORD PTR dy2$1[rsp]
	addss	xmm0, DWORD PTR dy3$11[rsp]
	addss	xmm0, DWORD PTR dy4$12[rsp]
	addss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR dy$13[rsp], xmm0
; Line 2233
	cvtss2sd xmm0, DWORD PTR dx$14[rsp]
	call	fabs
	movsd	QWORD PTR tv635[rsp], xmm0
	cvtss2sd xmm1, DWORD PTR dy$13[rsp]
	movaps	xmm0, xmm1
	call	fabs
	movsd	xmm1, QWORD PTR tv635[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN89@stbtt__run
; Line 2234
	movss	xmm0, DWORD PTR dy$13[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy6$10[rsp], xmm0
	jmp	SHORT $LN90@stbtt__run
$LN89@stbtt__run:
; Line 2236
	movss	xmm0, DWORD PTR dx$14[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx6$5[rsp], xmm0
$LN90@stbtt__run:
; Line 2237
	movss	xmm0, DWORD PTR dy3$11[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$2[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$1[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$3[rsp]
	movss	xmm2, DWORD PTR dy1$8[rsp]
	movss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2238
	movss	xmm0, DWORD PTR dy6$10[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$5[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$9[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$6[rsp]
	movss	xmm2, DWORD PTR dy4$12[rsp]
	movss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__csctx_rccurve_to
; Line 2239
	jmp	SHORT $LN27@stbtt__run
$LN91@stbtt__run:
; Line 2242
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN27@stbtt__run:
; Line 2244
	jmp	$LN4@stbtt__run
$LN92@stbtt__run:
; Line 2247
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	je	SHORT $LN93@stbtt__run
	cmp	DWORD PTR b0$[rsp], 28
	je	SHORT $LN93@stbtt__run
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jge	SHORT $LN93@stbtt__run
; Line 2248
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN93@stbtt__run:
; Line 2251
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	jne	SHORT $LN94@stbtt__run
; Line 2252
	mov	edx, 4
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR f$[rsp], xmm0
; Line 2253
	jmp	SHORT $LN95@stbtt__run
$LN94@stbtt__run:
; Line 2254
	mov	edx, -1
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
; Line 2255
	lea	rcx, QWORD PTR b$[rsp]
	call	stbtt__cff_int
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR f$[rsp], xmm0
$LN95@stbtt__run:
; Line 2257
	cmp	DWORD PTR sp$[rsp], 48			; 00000030H
	jl	SHORT $LN96@stbtt__run
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__run
$LN96@stbtt__run:
; Line 2258
	movsxd	rax, DWORD PTR sp$[rsp]
	movss	xmm0, DWORD PTR f$[rsp]
	movss	DWORD PTR s$[rsp+rax*4], xmm0
	mov	eax, DWORD PTR sp$[rsp]
	inc	eax
	mov	DWORD PTR sp$[rsp], eax
; Line 2259
	mov	DWORD PTR clear_stack$[rsp], 0
$LN4@stbtt__run:
; Line 2262
	cmp	DWORD PTR clear_stack$[rsp], 0
	je	SHORT $LN97@stbtt__run
	mov	DWORD PTR sp$[rsp], 0
$LN97@stbtt__run:
; Line 2263
	jmp	$LN2@stbtt__run
$LN3@stbtt__run:
; Line 2264
	xor	eax, eax
$LN1@stbtt__run:
; Line 2267
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 696				; 000002b8H
	pop	rdi
	pop	rsi
	ret	0
$LN105@stbtt__run:
	DD	$LN32@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN33@stbtt__run
	DD	$LN38@stbtt__run
	DD	$LN42@stbtt__run
	DD	$LN46@stbtt__run
	DD	$LN44@stbtt__run
	DD	$LN56@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN70@stbtt__run
	DD	$LN77@stbtt__run
	DD	$LN80@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN79@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN34@stbtt__run
	DD	$LN29@stbtt__run
	DD	$LN30@stbtt__run
	DD	$LN36@stbtt__run
	DD	$LN40@stbtt__run
	DD	$LN35@stbtt__run
	DD	$LN58@stbtt__run
	DD	$LN61@stbtt__run
	DD	$LN64@stbtt__run
	DD	$LN65@stbtt__run
	DD	$LN92@stbtt__run
	DD	$LN73@stbtt__run
	DD	$LN52@stbtt__run
	DD	$LN50@stbtt__run
stbtt__run_charstring ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fdselector$ = 32
i$ = 36
fmt$ = 40
end$ = 44
start$ = 48
fdselect$ = 56
nranges$ = 72
v$ = 76
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
__$ReturnAddress$ = 208
info$ = 216
glyph_index$ = 224
stbtt__cid_get_glyph_subrs PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1983
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 1984
	lea	rax, QWORD PTR fdselect$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+144]
	mov	ecx, 16
	rep movsb
; Line 1985
	mov	DWORD PTR fdselector$[rsp], -1
; Line 1987
	xor	edx, edx
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_seek
; Line 1988
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fmt$[rsp], eax
; Line 1989
	cmp	DWORD PTR fmt$[rsp], 0
	jne	SHORT $LN5@stbtt__cid
; Line 1991
	mov	edx, DWORD PTR glyph_index$[rsp]
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_skip
; Line 1992
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fdselector$[rsp], eax
	jmp	$LN6@stbtt__cid
$LN5@stbtt__cid:
; Line 1993
	cmp	DWORD PTR fmt$[rsp], 3
	jne	$LN7@stbtt__cid
; Line 1994
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR nranges$[rsp], eax
; Line 1995
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1996
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__cid:
	mov	eax, DWORD PTR nranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__cid
; Line 1997
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1998
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1999
	mov	eax, DWORD PTR start$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN8@stbtt__cid
	mov	eax, DWORD PTR end$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	SHORT $LN8@stbtt__cid
; Line 2000
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR fdselector$[rsp], eax
; Line 2001
	jmp	SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:
; Line 2003
	mov	eax, DWORD PTR end$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 2004
	jmp	SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:
; Line 2006
	cmp	DWORD PTR fdselector$[rsp], -1
	jne	SHORT $LN9@stbtt__cid
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	stbtt__new_buf
$LN9@stbtt__cid:
; Line 2007
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+128]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR fdselector$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	stbtt__cff_index_get
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T2[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	stbtt__get_subrs
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 2008
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
stbtt__cid_get_glyph_subrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bias$ = 32
count$ = 36
$T1 = 48
$T2 = 64
$T3 = 80
__$ReturnAddress$ = 128
idx$ = 136
n$ = 144
stbtt__get_subr PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1969
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 1970
	mov	rcx, QWORD PTR idx$[rsp]
	call	stbtt__cff_index_count
	mov	DWORD PTR count$[rsp], eax
; Line 1971
	mov	DWORD PTR bias$[rsp], 107		; 0000006bH
; Line 1972
	cmp	DWORD PTR count$[rsp], 33900		; 0000846cH
	jl	SHORT $LN2@stbtt__get
; Line 1973
	mov	DWORD PTR bias$[rsp], 32768		; 00008000H
	jmp	SHORT $LN3@stbtt__get
$LN2@stbtt__get:
; Line 1974
	cmp	DWORD PTR count$[rsp], 1240		; 000004d8H
	jl	SHORT $LN4@stbtt__get
; Line 1975
	mov	DWORD PTR bias$[rsp], 1131		; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:
; Line 1976
	mov	eax, DWORD PTR bias$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1977
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN6@stbtt__get
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN5@stbtt__get
$LN6@stbtt__get:
; Line 1978
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	stbtt__new_buf
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN5@stbtt__get:
; Line 1979
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR idx$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	stbtt__cff_index_get
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1980
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
stbtt__get_subr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cy2$ = 64
cx2$ = 68
cy1$ = 72
cx1$ = 76
ctx$ = 96
dx1$ = 104
dy1$ = 112
dx2$ = 120
dy2$ = 128
dx3$ = 136
dy3$ = 144
stbtt__csctx_rccurve_to PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1958
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1959
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx1$[rsp]
	movss	DWORD PTR cx1$[rsp], xmm0
; Line 1960
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy1$[rsp]
	movss	DWORD PTR cy1$[rsp], xmm0
; Line 1961
	movss	xmm0, DWORD PTR cx1$[rsp]
	addss	xmm0, DWORD PTR dx2$[rsp]
	movss	DWORD PTR cx2$[rsp], xmm0
; Line 1962
	movss	xmm0, DWORD PTR cy1$[rsp]
	addss	xmm0, DWORD PTR dy2$[rsp]
	movss	DWORD PTR cy2$[rsp], xmm0
; Line 1963
	movss	xmm0, DWORD PTR cx2$[rsp]
	addss	xmm0, DWORD PTR dx3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1964
	movss	xmm0, DWORD PTR cy2$[rsp]
	addss	xmm0, DWORD PTR dy3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1965
	cvttss2si eax, DWORD PTR cy2$[rsp]
	cvttss2si ecx, DWORD PTR cx2$[rsp]
	cvttss2si edx, DWORD PTR cy1$[rsp]
	cvttss2si r8d, DWORD PTR cx1$[rsp]
	mov	r9, QWORD PTR ctx$[rsp]
	cvttss2si r9d, DWORD PTR [r9+20]
	mov	r10, QWORD PTR ctx$[rsp]
	cvttss2si r10d, DWORD PTR [r10+16]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r10d
	mov	dl, 4
	mov	rcx, QWORD PTR ctx$[rsp]
	call	stbtt__csctx_v
; Line 1966
	add	rsp, 88					; 00000058H
	ret	0
stbtt__csctx_rccurve_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
dx$ = 88
dy$ = 96
stbtt__csctx_rline_to PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1951
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1952
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1953
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1954
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	stbtt__csctx_v
; Line 1955
	add	rsp, 72					; 00000048H
	ret	0
stbtt__csctx_rline_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 64
tv72 = 68
ctx$ = 96
dx$ = 104
dy$ = 112
stbtt__csctx_rmove_to PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1943
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1944
	mov	rcx, QWORD PTR ctx$[rsp]
	call	stbtt__csctx_close_shape
; Line 1945
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rsp]
	movss	DWORD PTR tv68[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv68[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 1946
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 1947
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	stbtt__csctx_v
; Line 1948
	add	rsp, 88					; 00000058H
	ret	0
stbtt__csctx_rmove_to ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
stbtt__csctx_close_shape PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1937
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1938
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+16]
	jp	SHORT $LN3@stbtt__csc
	jne	SHORT $LN3@stbtt__csc
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+20]
	jp	SHORT $LN5@stbtt__csc
	je	SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:
; Line 1939
	mov	rax, QWORD PTR ctx$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR ctx$[rsp]
	cvttss2si ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	stbtt__csctx_v
$LN2@stbtt__csc:
; Line 1940
	add	rsp, 72					; 00000048H
	ret	0
stbtt__csctx_close_shape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 64
type$ = 72
x$ = 80
y$ = 88
cx$ = 96
cy$ = 104
cx1$ = 112
cy1$ = 120
stbtt__csctx_v PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1921
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1922
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@stbtt__csc
; Line 1923
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__track_vertex
; Line 1924
	movzx	eax, BYTE PTR type$[rsp]
	cmp	eax, 4
	jne	SHORT $LN4@stbtt__csc
; Line 1925
	mov	r8d, DWORD PTR cy$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__track_vertex
; Line 1926
	mov	r8d, DWORD PTR cy1$[rsp]
	mov	edx, DWORD PTR cx1$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	stbtt__track_vertex
$LN4@stbtt__csc:
; Line 1928
	jmp	SHORT $LN3@stbtt__csc
$LN2@stbtt__csc:
; Line 1929
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	ecx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	movzx	edx, BYTE PTR type$[rsp]
	mov	rcx, rax
	call	stbtt_setvertex
; Line 1930
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cx1$[rsp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 1931
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cy1$[rsp]
	mov	WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:
; Line 1933
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+48]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1934
	add	rsp, 56					; 00000038H
	ret	0
stbtt__csctx_v ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 8
x$ = 16
y$ = 24
stbtt__track_vertex PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1912
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1913
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR x$[rsp], eax
	jg	SHORT $LN3@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:
; Line 1914
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rsp], eax
	jg	SHORT $LN5@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:
; Line 1915
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR x$[rsp], eax
	jl	SHORT $LN7@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:
; Line 1916
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR y$[rsp], eax
	jl	SHORT $LN9@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:
; Line 1917
	mov	rax, QWORD PTR c$[rsp]
	mov	DWORD PTR [rax+4], 1
; Line 1918
	ret	0
stbtt__track_vertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flags$1 = 80
i$2 = 84
num_vertices$ = 88
flagcount$3 = 92
comp$4 = 96
vertices$ = 104
numberOfContours$ = 112
flags$5 = 116
off$6 = 120
y$7 = 124
x$8 = 128
x$9 = 132
y$10 = 136
points$11 = 144
sy$12 = 152
cy$13 = 156
cx$14 = 160
was_off$15 = 164
n$16 = 168
sx$17 = 172
g$ = 176
comp_num_verts$18 = 180
dx$19 = 184
dy$20 = 188
scy$21 = 192
scx$22 = 196
start_off$23 = 200
i$24 = 204
v$25 = 208
gidx$26 = 216
j$27 = 220
comp_verts$28 = 224
m$29 = 232
tv189 = 236
m$30 = 240
n$31 = 244
more$32 = 248
next_move$33 = 252
tv318 = 256
tv229 = 260
tv492 = 264
data$ = 272
tmp$34 = 280
ins$35 = 288
endPtsOfContours$ = 296
tv145 = 304
tv371 = 312
tv398 = 320
tv410 = 328
tv421 = 336
tv681 = 344
$T36 = 352
$T37 = 384
$T38 = 416
$T39 = 448
$T40 = 480
$T41 = 512
$T42 = 544
$T43 = 576
$T44 = 608
$T45 = 640
$T46 = 672
$T47 = 704
mtx$48 = 736
__$ArrayPad$ = 760
info$ = 800
glyph_index$ = 808
pvertices$ = 816
stbtt__GetGlyphShapeTT PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1675
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 776				; 00000308H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1678
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1679
	mov	QWORD PTR vertices$[rsp], 0
; Line 1680
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1681
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1683
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 1685
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN19@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 1687
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1689
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jle	$LN20@stbtt__Get
; Line 1690
	mov	BYTE PTR flags$1[rsp], 0
; Line 1691
	mov	DWORD PTR j$27[rsp], 0
	mov	DWORD PTR was_off$15[rsp], 0
	mov	DWORD PTR start_off$23[rsp], 0
; Line 1694
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR endPtsOfContours$[rsp], rax
; Line 1695
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR ins$35[rsp], eax
; Line 1696
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	movsxd	rcx, DWORD PTR ins$35[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	QWORD PTR points$11[rsp], rax
; Line 1698
	movsx	eax, WORD PTR numberOfContours$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	lea	rax, QWORD PTR [rcx+rax-2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR n$16[rsp], eax
; Line 1700
	movsx	eax, WORD PTR numberOfContours$[rsp]
	mov	ecx, DWORD PTR n$16[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR m$29[rsp], eax
; Line 1701
	movsxd	rax, DWORD PTR m$29[rsp]
	imul	rax, rax, 14
	mov	QWORD PTR tv145[rsp], rax
	lea	rcx, OFFSET FLAT:$SG83096
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1701				; 000006a5H
	lea	r8, OFFSET FLAT:$SG83097
	mov	edx, 142				; 0000008eH
	lea	rcx, QWORD PTR $T42[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T36[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv145[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T36[rsp]
	call	ccuserallocator_
	mov	QWORD PTR vertices$[rsp], rax
; Line 1702
	cmp	QWORD PTR vertices$[rsp], 0
	jne	SHORT $LN22@stbtt__Get
; Line 1703
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN22@stbtt__Get:
; Line 1705
	mov	DWORD PTR next_move$33[rsp], 0
; Line 1706
	mov	BYTE PTR flagcount$3[rsp], 0
; Line 1712
	mov	eax, DWORD PTR n$16[rsp]
	mov	ecx, DWORD PTR m$29[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR off$6[rsp], eax
; Line 1716
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@stbtt__Get
; Line 1717
	movzx	eax, BYTE PTR flagcount$3[rsp]
	test	eax, eax
	jne	SHORT $LN23@stbtt__Get
; Line 1718
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR flags$1[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
; Line 1719
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@stbtt__Get
; Line 1720
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR flagcount$3[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
$LN25@stbtt__Get:
; Line 1721
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 1722
	movzx	eax, BYTE PTR flagcount$3[rsp]
	dec	al
	mov	BYTE PTR flagcount$3[rsp], al
$LN24@stbtt__Get:
; Line 1723
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, BYTE PTR flags$1[rsp]
	mov	BYTE PTR [rcx+rax+12], dl
; Line 1724
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 1727
	mov	DWORD PTR x$8[rsp], 0
; Line 1728
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN6@stbtt__Get
; Line 1729
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1730
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN26@stbtt__Get
; Line 1731
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR dx$19[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
; Line 1732
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN62@stbtt__Get
	movsx	eax, WORD PTR dx$19[rsp]
	mov	DWORD PTR tv189[rsp], eax
	jmp	SHORT $LN63@stbtt__Get
$LN62@stbtt__Get:
	movsx	eax, WORD PTR dx$19[rsp]
	neg	eax
	mov	DWORD PTR tv189[rsp], eax
$LN63@stbtt__Get:
	mov	eax, DWORD PTR tv189[rsp]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1733
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 1734
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN28@stbtt__Get
; Line 1735
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1736
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN28@stbtt__Get:
$LN27@stbtt__Get:
; Line 1739
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR x$8[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 1740
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 1743
	mov	DWORD PTR y$7[rsp], 0
; Line 1744
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN9@stbtt__Get
; Line 1745
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1746
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN29@stbtt__Get
; Line 1747
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR dy$20[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
; Line 1748
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN64@stbtt__Get
	movsx	eax, WORD PTR dy$20[rsp]
	mov	DWORD PTR tv229[rsp], eax
	jmp	SHORT $LN65@stbtt__Get
$LN64@stbtt__Get:
	movsx	eax, WORD PTR dy$20[rsp]
	neg	eax
	mov	DWORD PTR tv229[rsp], eax
$LN65@stbtt__Get:
	mov	eax, DWORD PTR tv229[rsp]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1749
	jmp	SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:
; Line 1750
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN31@stbtt__Get
; Line 1751
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1752
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN31@stbtt__Get:
$LN30@stbtt__Get:
; Line 1755
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR y$7[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 1756
	jmp	$LN8@stbtt__Get
$LN9@stbtt__Get:
; Line 1759
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1760
	mov	DWORD PTR scy$21[rsp], 0
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR scx$22[rsp], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR cy$13[rsp], eax
	mov	eax, DWORD PTR cy$13[rsp]
	mov	DWORD PTR cx$14[rsp], eax
	mov	eax, DWORD PTR cx$14[rsp]
	mov	DWORD PTR sy$12[rsp], eax
	mov	eax, DWORD PTR sy$12[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1761
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN13@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN12@stbtt__Get
; Line 1762
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1763
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x$8[rsp], eax
; Line 1764
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y$7[rsp], eax
; Line 1766
	mov	eax, DWORD PTR i$2[rsp]
	cmp	DWORD PTR next_move$33[rsp], eax
	jne	$LN32@stbtt__Get
; Line 1767
	cmp	DWORD PTR i$2[rsp], 0
	je	SHORT $LN34@stbtt__Get
; Line 1768
	mov	eax, DWORD PTR cy$13[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$14[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$12[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
$LN34@stbtt__Get:
; Line 1771
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN66@stbtt__Get
	mov	DWORD PTR tv318[rsp], 1
	jmp	SHORT $LN67@stbtt__Get
$LN66@stbtt__Get:
	mov	DWORD PTR tv318[rsp], 0
$LN67@stbtt__Get:
	mov	eax, DWORD PTR tv318[rsp]
	mov	DWORD PTR start_off$23[rsp], eax
; Line 1772
	cmp	DWORD PTR start_off$23[rsp], 0
	je	$LN35@stbtt__Get
; Line 1775
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR scx$22[rsp], eax
; Line 1776
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR scy$21[rsp], eax
; Line 1777
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN37@stbtt__Get
; Line 1779
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sx$17[rsp], eax
; Line 1780
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sy$12[rsp], eax
; Line 1781
	jmp	SHORT $LN38@stbtt__Get
$LN37@stbtt__Get:
; Line 1783
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1784
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR sy$12[rsp], eax
; Line 1785
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN38@stbtt__Get:
; Line 1787
	jmp	SHORT $LN36@stbtt__Get
$LN35@stbtt__Get:
; Line 1788
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1789
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR sy$12[rsp], eax
$LN36@stbtt__Get:
; Line 1791
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv371[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$12[rsp]
	mov	r8d, DWORD PTR sx$17[rsp]
	mov	dl, 1
	mov	rcx, QWORD PTR tv371[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
; Line 1792
	mov	DWORD PTR was_off$15[rsp], 0
; Line 1793
	mov	eax, DWORD PTR j$27[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR next_move$33[rsp], eax
; Line 1794
	mov	eax, DWORD PTR j$27[rsp]
	inc	eax
	mov	DWORD PTR j$27[rsp], eax
; Line 1795
	jmp	$LN33@stbtt__Get
$LN32@stbtt__Get:
; Line 1796
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN39@stbtt__Get
; Line 1797
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN41@stbtt__Get
; Line 1798
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv398[rsp], rcx
	mov	eax, DWORD PTR y$7[rsp]
	mov	ecx, DWORD PTR cy$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR x$8[rsp]
	mov	edx, DWORD PTR cx$14[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$13[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$14[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv398[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
$LN41@stbtt__Get:
; Line 1799
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR cx$14[rsp], eax
; Line 1800
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR cy$13[rsp], eax
; Line 1801
	mov	DWORD PTR was_off$15[rsp], 1
; Line 1802
	jmp	$LN40@stbtt__Get
$LN39@stbtt__Get:
; Line 1803
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN42@stbtt__Get
; Line 1804
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv410[rsp], rcx
	mov	eax, DWORD PTR cy$13[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$14[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv410[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	SHORT $LN43@stbtt__Get
$LN42@stbtt__Get:
; Line 1806
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv421[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv421[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
$LN43@stbtt__Get:
; Line 1807
	mov	DWORD PTR was_off$15[rsp], 0
$LN40@stbtt__Get:
$LN33@stbtt__Get:
; Line 1810
	jmp	$LN11@stbtt__Get
$LN12@stbtt__Get:
; Line 1811
	mov	eax, DWORD PTR cy$13[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$14[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$12[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	$LN21@stbtt__Get
$LN20@stbtt__Get:
; Line 1812
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jge	$LN44@stbtt__Get
; Line 1814
	mov	DWORD PTR more$32[rsp], 1
; Line 1815
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR comp$4[rsp], rax
; Line 1816
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1817
	mov	QWORD PTR vertices$[rsp], 0
$LN14@stbtt__Get:
; Line 1818
	cmp	DWORD PTR more$32[rsp], 0
	je	$LN15@stbtt__Get
; Line 1820
	mov	DWORD PTR comp_num_verts$18[rsp], 0
; Line 1821
	mov	QWORD PTR comp_verts$28[rsp], 0
	mov	QWORD PTR tmp$34[rsp], 0
; Line 1822
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$48[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$48[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+20], xmm0
; Line 1824
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	mov	WORD PTR flags$5[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1825
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	mov	WORD PTR gidx$26[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1827
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN46@stbtt__Get
; Line 1828
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN48@stbtt__Get
; Line 1829
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	mov	ecx, 4
	imul	rcx, rcx, 4
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR mtx$48[rsp+rcx], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1830
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	mov	ecx, 4
	imul	rcx, rcx, 5
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR mtx$48[rsp+rcx], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1831
	jmp	SHORT $LN49@stbtt__Get
$LN48@stbtt__Get:
; Line 1832
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR comp$4[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
; Line 1833
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR comp$4[rsp]
	movsx	ecx, BYTE PTR [rcx]
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
$LN49@stbtt__Get:
; Line 1835
	jmp	SHORT $LN47@stbtt__Get
$LN46@stbtt__Get:
; Line 1838
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN68@stbtt__Get
	mov	r8d, 1838				; 0000072eH
	lea	rdx, OFFSET FLAT:$SG83126
	lea	rcx, OFFSET FLAT:$SG83127
	call	_wassert
	xor	eax, eax
$LN68@stbtt__Get:
$LN47@stbtt__Get:
; Line 1840
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 8
	test	eax, eax
	je	$LN50@stbtt__Get
; Line 1841
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	movss	DWORD PTR tv492[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR tv492[rsp]
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR tv492[rsp]
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1842
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	jmp	$LN51@stbtt__Get
$LN50@stbtt__Get:
; Line 1843
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	$LN52@stbtt__Get
; Line 1844
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1845
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
; Line 1846
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
	jmp	$LN53@stbtt__Get
$LN52@stbtt__Get:
; Line 1847
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN54@stbtt__Get
; Line 1848
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1849
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1850
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 2
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1851
	mov	rcx, QWORD PTR comp$4[rsp]
	call	ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$48[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
$LN54@stbtt__Get:
$LN53@stbtt__Get:
$LN51@stbtt__Get:
; Line 1855
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$48[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$48[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR m$30[rsp], xmm0
; Line 1856
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm0, DWORD PTR mtx$48[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, DWORD PTR mtx$48[rsp+rcx]
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR n$31[rsp], xmm0
; Line 1859
	movzx	eax, WORD PTR gidx$26[rsp]
	lea	r8, QWORD PTR comp_verts$28[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR comp_num_verts$18[rsp], eax
; Line 1860
	cmp	DWORD PTR comp_num_verts$18[rsp], 0
	jle	$LN55@stbtt__Get
; Line 1862
	mov	DWORD PTR i$24[rsp], 0
	jmp	SHORT $LN18@stbtt__Get
$LN16@stbtt__Get:
	mov	eax, DWORD PTR i$24[rsp]
	inc	eax
	mov	DWORD PTR i$24[rsp], eax
$LN18@stbtt__Get:
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	cmp	DWORD PTR i$24[rsp], eax
	jge	$LN17@stbtt__Get
; Line 1863
	movsxd	rax, DWORD PTR i$24[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$25[rsp], rax
; Line 1865
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR y$10[rsp], ax
; Line 1866
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$48[rsp+rax]
	movss	xmm1, DWORD PTR m$30[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx], ax
; Line 1867
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$48[rsp+rax]
	movss	xmm1, DWORD PTR n$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 1868
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	WORD PTR y$10[rsp], ax
; Line 1869
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$48[rsp+rax]
	movss	xmm1, DWORD PTR m$30[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 1870
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$48[rsp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$48[rsp+rax]
	movss	xmm1, DWORD PTR n$31[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 1871
	jmp	$LN16@stbtt__Get
$LN17@stbtt__Get:
; Line 1873
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	QWORD PTR tv681[rsp], rax
	lea	rcx, OFFSET FLAT:$SG83134
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1873				; 00000751H
	lea	r8, OFFSET FLAT:$SG83135
	mov	edx, 143				; 0000008fH
	lea	rcx, QWORD PTR $T43[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T37[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv681[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	ccuserallocator_
	mov	QWORD PTR tmp$34[rsp], rax
; Line 1874
	cmp	QWORD PTR tmp$34[rsp], 0
	jne	$LN56@stbtt__Get
; Line 1875
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN57@stbtt__Get
	lea	rax, OFFSET FLAT:$SG83138
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1875				; 00000753H
	lea	r8, OFFSET FLAT:$SG83139
	mov	edx, 144				; 00000090H
	lea	rcx, QWORD PTR $T44[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR vertices$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T38[rsp]
	call	ccuserallocator_
$LN57@stbtt__Get:
; Line 1876
	cmp	QWORD PTR comp_verts$28[rsp], 0
	je	SHORT $LN58@stbtt__Get
	lea	rax, OFFSET FLAT:$SG83141
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1876				; 00000754H
	lea	r8, OFFSET FLAT:$SG83142
	mov	edx, 145				; 00000091H
	lea	rcx, QWORD PTR $T45[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR comp_verts$28[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T39[rsp]
	call	ccuserallocator_
$LN58@stbtt__Get:
; Line 1877
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN56@stbtt__Get:
; Line 1879
	cmp	DWORD PTR num_vertices$[rsp], 0
	jle	SHORT $LN59@stbtt__Get
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN59@stbtt__Get
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	r8, rax
	mov	rdx, QWORD PTR vertices$[rsp]
	mov	rcx, QWORD PTR tmp$34[rsp]
	call	memcpy
$LN59@stbtt__Get:
; Line 1880
	movsxd	rax, DWORD PTR comp_num_verts$18[rsp]
	imul	rax, rax, 14
	movsxd	rcx, DWORD PTR num_vertices$[rsp]
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR tmp$34[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR comp_verts$28[rsp]
	call	memcpy
; Line 1881
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN60@stbtt__Get
	lea	rax, OFFSET FLAT:$SG83145
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1881				; 00000759H
	lea	r8, OFFSET FLAT:$SG83146
	mov	edx, 146				; 00000092H
	lea	rcx, QWORD PTR $T46[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T40[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR vertices$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T40[rsp]
	call	ccuserallocator_
$LN60@stbtt__Get:
; Line 1882
	mov	rax, QWORD PTR tmp$34[rsp]
	mov	QWORD PTR vertices$[rsp], rax
; Line 1883
	lea	rax, OFFSET FLAT:$SG83147
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1883				; 0000075bH
	lea	r8, OFFSET FLAT:$SG83148
	mov	edx, 147				; 00000093H
	lea	rcx, QWORD PTR $T47[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T41[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR comp_verts$28[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T41[rsp]
	call	ccuserallocator_
; Line 1884
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_vertices$[rsp], eax
$LN55@stbtt__Get:
; Line 1887
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR more$32[rsp], eax
; Line 1888
	jmp	$LN14@stbtt__Get
$LN15@stbtt__Get:
$LN44@stbtt__Get:
$LN21@stbtt__Get:
; Line 1893
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1894
	mov	eax, DWORD PTR num_vertices$[rsp]
$LN1@stbtt__Get:
; Line 1895
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 776				; 00000308H
	pop	rdi
	pop	rsi
	ret	0
stbtt__GetGlyphShapeTT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
tv90 = 56
tv134 = 64
tv145 = 72
vertices$ = 96
num_vertices$ = 104
was_off$ = 112
start_off$ = 120
sx$ = 128
sy$ = 136
scx$ = 144
scy$ = 152
cx$ = 160
cy$ = 168
stbtt__close_shape PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1660
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1661
	cmp	DWORD PTR start_off$[rsp], 0
	je	$LN2@stbtt__clo
; Line 1662
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN4@stbtt__clo
; Line 1663
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv79[rsp], rcx
	mov	eax, DWORD PTR scy$[rsp]
	mov	ecx, DWORD PTR cy$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR scx$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv79[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
$LN4@stbtt__clo:
; Line 1664
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv90[rsp], rcx
	mov	eax, DWORD PTR scy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR scx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv90[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
; Line 1665
	jmp	$LN3@stbtt__clo
$LN2@stbtt__clo:
; Line 1666
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN5@stbtt__clo
; Line 1667
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv134[rsp], rcx
	mov	eax, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv134[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:
; Line 1669
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv145[rsp], rcx
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv145[rsp]
	call	stbtt_setvertex
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
$LN6@stbtt__clo:
$LN3@stbtt__clo:
; Line 1671
	mov	eax, DWORD PTR num_vertices$[rsp]
; Line 1672
	add	rsp, 88					; 00000058H
	ret	0
stbtt__close_shape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
tv70 = 36
tv73 = 40
tv76 = 44
tv79 = 48
tv81 = 52
c$ = 56
info$ = 128
glyph_index$ = 136
x0$ = 144
y0$ = 152
x1$ = 160
y1$ = 168
stbtt__GetGlyphInfoT2 PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2287
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2288
	mov	DWORD PTR c$[rsp], 1
	mov	DWORD PTR c$[rsp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rsp+20], xmm0
	mov	DWORD PTR c$[rsp+24], 0
	mov	DWORD PTR c$[rsp+28], 0
	mov	DWORD PTR c$[rsp+32], 0
	mov	DWORD PTR c$[rsp+36], 0
	mov	QWORD PTR c$[rsp+40], 0
	mov	DWORD PTR c$[rsp+48], 0
; Line 2289
	lea	r8, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__run_charstring
	mov	DWORD PTR r$[rsp], eax
; Line 2290
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN2@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN7@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+24]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stbtt__Get:
	mov	rax, QWORD PTR x0$[rsp]
	mov	ecx, DWORD PTR tv70[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@stbtt__Get:
; Line 2291
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN3@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN9@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+32]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
	mov	DWORD PTR tv73[rsp], 0
$LN10@stbtt__Get:
	mov	rax, QWORD PTR y0$[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rax], ecx
$LN3@stbtt__Get:
; Line 2292
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN4@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN11@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+28]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	DWORD PTR tv76[rsp], 0
$LN12@stbtt__Get:
	mov	rax, QWORD PTR x1$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax], ecx
$LN4@stbtt__Get:
; Line 2293
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN5@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN13@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+36]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
	mov	DWORD PTR tv79[rsp], 0
$LN14@stbtt__Get:
	mov	rax, QWORD PTR y1$[rsp]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt__Get:
; Line 2294
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN15@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+48]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
	mov	DWORD PTR tv81[rsp], 0
$LN16@stbtt__Get:
	mov	eax, DWORD PTR tv81[rsp]
; Line 2295
	add	rsp, 120				; 00000078H
	ret	0
stbtt__GetGlyphInfoT2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g1$ = 32
g2$ = 36
tv159 = 40
info$ = 64
glyph_index$ = 72
stbtt__GetGlyfOffset PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1604
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1607
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN7@stbtt__Get
	mov	r8d, 1607				; 00000647H
	lea	rdx, OFFSET FLAT:$SG82907
	lea	rcx, OFFSET FLAT:$SG82908
	call	_wassert
	xor	eax, eax
$LN7@stbtt__Get:
; Line 1609
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN2@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 1610
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jl	SHORT $LN3@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN3@stbtt__Get:
; Line 1612
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 0
	jne	$LN4@stbtt__Get
; Line 1613
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g1$[rsp], eax
; Line 1614
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g2$[rsp], eax
; Line 1615
	jmp	SHORT $LN5@stbtt__Get
$LN4@stbtt__Get:
; Line 1616
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g1$[rsp], eax
; Line 1617
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+4]
	mov	rcx, rax
	call	ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g2$[rsp], eax
$LN5@stbtt__Get:
; Line 1620
	mov	eax, DWORD PTR g2$[rsp]
	cmp	DWORD PTR g1$[rsp], eax
	jne	SHORT $LN8@stbtt__Get
	mov	DWORD PTR tv159[rsp], -1
	jmp	SHORT $LN9@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR g1$[rsp]
	mov	DWORD PTR tv159[rsp], eax
$LN9@stbtt__Get:
	mov	eax, DWORD PTR tv159[rsp]
$LN1@stbtt__Get:
; Line 1621
	add	rsp, 56					; 00000038H
	ret	0
stbtt__GetGlyfOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
type$ = 16
x$ = 24
y$ = 32
cx$ = 40
cy$ = 48
stbtt_setvertex PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
; Line 1596
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR type$[rsp]
	mov	BYTE PTR [rax+12], cl
; Line 1597
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	mov	WORD PTR [rax], cx
; Line 1598
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	mov	WORD PTR [rax+2], cx
; Line 1599
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cx$[rsp]
	mov	WORD PTR [rax+4], cx
; Line 1600
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cy$[rsp]
	mov	WORD PTR [rax+6], cx
; Line 1601
	ret	0
stbtt_setvertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmap$ = 32
fdselectoff$1 = 36
i$ = 40
encoding_record$2 = 44
fdarrayoff$3 = 48
charstrings$4 = 52
b$5 = 56
cff$6 = 72
cstype$7 = 76
t$ = 80
tv285 = 84
tv292 = 88
numTables$ = 92
topdict$8 = 96
topdictidx$9 = 112
$T10 = 128
$T11 = 144
$T12 = 160
$T13 = 176
$T14 = 192
$T15 = 208
$T16 = 224
$T17 = 240
$T18 = 256
$T19 = 272
$T20 = 288
$T21 = 304
$T22 = 320
$T23 = 336
$T24 = 352
$T25 = 368
info$ = 416
data$ = 424
fontstart$ = 432
stbtt_InitFont_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1384
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 1388
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 1389
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR fontstart$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 1390
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	stbtt__new_buf
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+64]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1392
	lea	r8, OFFSET FLAT:$SG82772
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR cmap$[rsp], eax
; Line 1393
	lea	r8, OFFSET FLAT:$SG82773
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 1394
	lea	r8, OFFSET FLAT:$SG82774
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 1395
	lea	r8, OFFSET FLAT:$SG82775
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 1396
	lea	r8, OFFSET FLAT:$SG82776
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 1397
	lea	r8, OFFSET FLAT:$SG82777
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 1398
	lea	r8, OFFSET FLAT:$SG82778
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 1399
	lea	r8, OFFSET FLAT:$SG82779
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1401
	cmp	DWORD PTR cmap$[rsp], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:
; Line 1402
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN9@stbtt_Init:
; Line 1403
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN11@stbtt_Init
; Line 1405
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN13@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN13@stbtt_Init:
; Line 1406
	jmp	$LN12@stbtt_Init
$LN11@stbtt_Init:
; Line 1409
	mov	DWORD PTR cstype$7[rsp], 2
	mov	DWORD PTR charstrings$4[rsp], 0
	mov	DWORD PTR fdarrayoff$3[rsp], 0
	mov	DWORD PTR fdselectoff$1[rsp], 0
; Line 1412
	lea	r8, OFFSET FLAT:$SG82785
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR cff$6[rsp], eax
; Line 1413
	cmp	DWORD PTR cff$6[rsp], 0
	jne	SHORT $LN14@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN14@stbtt_Init:
; Line 1415
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	stbtt__new_buf
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+128]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1416
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	stbtt__new_buf
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+144]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1419
	mov	eax, DWORD PTR cff$6[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 536870912				; 20000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	stbtt__new_buf
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+64]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1420
	lea	rax, QWORD PTR b$5[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
; Line 1423
	mov	edx, 2
	lea	rcx, QWORD PTR b$5[rsp]
	call	stbtt__buf_skip
; Line 1424
	lea	rcx, QWORD PTR b$5[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	edx, eax
	lea	rcx, QWORD PTR b$5[rsp]
	call	stbtt__buf_seek
; Line 1428
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	stbtt__cff_get_index
; Line 1429
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	stbtt__cff_get_index
	lea	rcx, QWORD PTR topdictidx$9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1430
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR topdictidx$9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	xor	r8d, r8d
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	stbtt__cff_index_get
	lea	rcx, QWORD PTR topdict$8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1431
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	stbtt__cff_get_index
; Line 1432
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	stbtt__cff_get_index
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+96]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1434
	lea	r9, QWORD PTR charstrings$4[rsp]
	mov	r8d, 1
	mov	edx, 17
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	stbtt__dict_get_ints
; Line 1435
	lea	r9, QWORD PTR cstype$7[rsp]
	mov	r8d, 1
	mov	edx, 262				; 00000106H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	stbtt__dict_get_ints
; Line 1436
	lea	r9, QWORD PTR fdarrayoff$3[rsp]
	mov	r8d, 1
	mov	edx, 292				; 00000124H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	stbtt__dict_get_ints
; Line 1437
	lea	r9, QWORD PTR fdselectoff$1[rsp]
	mov	r8d, 1
	mov	edx, 293				; 00000125H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	stbtt__dict_get_ints
; Line 1438
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR topdict$8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T11[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	stbtt__get_subrs
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+112]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1441
	cmp	DWORD PTR cstype$7[rsp], 2
	je	SHORT $LN15@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN15@stbtt_Init:
; Line 1442
	cmp	DWORD PTR charstrings$4[rsp], 0
	jne	SHORT $LN16@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN16@stbtt_Init:
; Line 1444
	cmp	DWORD PTR fdarrayoff$3[rsp], 0
	je	$LN17@stbtt_Init
; Line 1446
	cmp	DWORD PTR fdselectoff$1[rsp], 0
	jne	SHORT $LN18@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN18@stbtt_Init:
; Line 1447
	mov	edx, DWORD PTR fdarrayoff$3[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	stbtt__buf_seek
; Line 1448
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	stbtt__cff_get_index
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+128]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1449
	mov	eax, DWORD PTR fdselectoff$1[rsp]
	mov	ecx, DWORD PTR b$5[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR fdselectoff$1[rsp]
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	stbtt__buf_range
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+144]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN17@stbtt_Init:
; Line 1452
	mov	edx, DWORD PTR charstrings$4[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	stbtt__buf_seek
; Line 1453
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	stbtt__cff_get_index
	mov	rcx, QWORD PTR info$[rsp]
	lea	rdi, QWORD PTR [rcx+80]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN12@stbtt_Init:
; Line 1456
	lea	r8, OFFSET FLAT:$SG82791
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1457
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN19@stbtt_Init
; Line 1458
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
	jmp	SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:
; Line 1460
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 65535		; 0000ffffH
$LN20@stbtt_Init:
; Line 1462
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], -1
; Line 1467
	mov	eax, DWORD PTR cmap$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numTables$[rsp], eax
; Line 1468
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 1469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Init:
	mov	eax, DWORD PTR numTables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Init
; Line 1470
	mov	eax, DWORD PTR cmap$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8+4]
	mov	DWORD PTR encoding_record$2[rsp], eax
; Line 1472
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv285[rsp], eax
	cmp	DWORD PTR tv285[rsp], 0
	je	SHORT $LN24@stbtt_Init
	cmp	DWORD PTR tv285[rsp], 3
	je	SHORT $LN21@stbtt_Init
	jmp	$LN5@stbtt_Init
$LN21@stbtt_Init:
; Line 1474
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv292[rsp], eax
	cmp	DWORD PTR tv292[rsp], 1
	je	SHORT $LN22@stbtt_Init
	cmp	DWORD PTR tv292[rsp], 10
	je	SHORT $LN23@stbtt_Init
	jmp	SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:
$LN23@stbtt_Init:
; Line 1478
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN7@stbtt_Init:
; Line 1481
	jmp	SHORT $LN5@stbtt_Init
$LN24@stbtt_Init:
; Line 1485
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN5@stbtt_Init:
; Line 1488
	jmp	$LN2@stbtt_Init
$LN3@stbtt_Init:
; Line 1489
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jne	SHORT $LN25@stbtt_Init
; Line 1490
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Init
$LN25@stbtt_Init:
; Line 1492
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+50]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+60], eax
; Line 1493
	mov	eax, 1
$LN1@stbtt_Init:
; Line 1494
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
stbtt_InitFont_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
offset$1 = 36
info$ = 64
stbtt__get_svg PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1369
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1371
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jge	SHORT $LN2@stbtt__get
; Line 1372
	lea	r8, OFFSET FLAT:$SG82738
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1373
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN3@stbtt__get
; Line 1374
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR offset$1[rsp], eax
; Line 1375
	mov	eax, DWORD PTR offset$1[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+52], eax
; Line 1376
	jmp	SHORT $LN4@stbtt__get
$LN3@stbtt__get:
; Line 1377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], 0
$LN4@stbtt__get:
$LN2@stbtt__get:
; Line 1380
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+52]
; Line 1381
	add	rsp, 56					; 00000038H
	ret	0
stbtt__get_svg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
subrsoff$ = 32
private_loc$ = 40
pdict$ = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
__$ReturnAddress$ = 160
cff$ = 168
fontdict$ = 176
stbtt__get_subrs PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1355
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1356
	mov	DWORD PTR subrsoff$[rsp], 0
	mov	DWORD PTR private_loc$[rsp], 0
	mov	DWORD PTR private_loc$[rsp+4], 0
; Line 1358
	lea	r9, QWORD PTR private_loc$[rsp]
	mov	r8d, 2
	mov	edx, 18
	mov	rcx, QWORD PTR fontdict$[rsp]
	call	stbtt__dict_get_ints
; Line 1359
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	je	SHORT $LN3@stbtt__get
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	jne	SHORT $LN2@stbtt__get
$LN3@stbtt__get:
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	stbtt__new_buf
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@stbtt__get
$LN2@stbtt__get:
; Line 1360
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9d, DWORD PTR private_loc$[rsp+rax]
	mov	r8d, DWORD PTR private_loc$[rsp+rcx]
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	stbtt__buf_range
	lea	rcx, QWORD PTR pdict$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1361
	lea	r9, QWORD PTR subrsoff$[rsp]
	mov	r8d, 1
	mov	edx, 19
	lea	rcx, QWORD PTR pdict$[rsp]
	call	stbtt__dict_get_ints
; Line 1362
	cmp	DWORD PTR subrsoff$[rsp], 0
	jne	SHORT $LN4@stbtt__get
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	stbtt__new_buf
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN4@stbtt__get:
; Line 1363
	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR private_loc$[rsp+rax]
	add	eax, DWORD PTR subrsoff$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR cff$[rsp]
	call	stbtt__buf_seek
; Line 1364
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	stbtt__cff_get_index
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1365
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbtt__get_subrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font_collection$ = 48
stbtt_GetNumberOfFonts_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1339
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1341
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetN
; Line 1342
	mov	eax, 1
	jmp	$LN1@stbtt_GetN
$LN2@stbtt_GetN:
; Line 1345
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82711
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82712
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82713
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82714
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
; Line 1347
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetN
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetN
$LN5@stbtt_GetN:
; Line 1348
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttLONG
	jmp	SHORT $LN1@stbtt_GetN
$LN4@stbtt_GetN:
$LN3@stbtt_GetN:
; Line 1351
	xor	eax, eax
$LN1@stbtt_GetN:
; Line 1352
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetNumberOfFonts_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
n$1 = 36
font_collection$ = 64
index$ = 72
stbtt_GetFontOffsetForIndex_internal PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1320
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1322
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetF
; Line 1323
	cmp	DWORD PTR index$[rsp], 0
	jne	SHORT $LN8@stbtt_GetF
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
	mov	DWORD PTR tv68[rsp], -1
$LN9@stbtt_GetF:
	mov	eax, DWORD PTR tv68[rsp]
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 1326
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82698
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82699
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82700
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82701
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetF
; Line 1328
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetF
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:
; Line 1329
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttLONG
	mov	DWORD PTR n$1[rsp], eax
; Line 1330
	mov	eax, DWORD PTR n$1[rsp]
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN6@stbtt_GetF
; Line 1331
	mov	eax, -1
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 1332
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR font_collection$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	ttULONG
	jmp	SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:
; Line 1335
	mov	eax, -1
$LN1@stbtt_GetF:
; Line 1336
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetFontOffsetForIndex_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
i$ = 36
num_tables$ = 40
tabledir$ = 44
data$ = 64
fontstart$ = 72
tag$ = 80
stbtt__find_table PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1307
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1308
	mov	eax, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR num_tables$[rsp], eax
; Line 1309
	mov	eax, DWORD PTR fontstart$[rsp]
	add	eax, 12
	mov	DWORD PTR tabledir$[rsp], eax
; Line 1311
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__fin:
	mov	eax, DWORD PTR num_tables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__fin
; Line 1312
	imul	eax, DWORD PTR i$[rsp], 16
	mov	ecx, DWORD PTR tabledir$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR loc$1[rsp], eax
; Line 1313
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
; Line 1314
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttULONG
	jmp	SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:
; Line 1315
	jmp	$LN2@stbtt__fin
$LN3@stbtt__fin:
; Line 1316
	xor	eax, eax
$LN1@stbtt__fin:
; Line 1317
	add	rsp, 56					; 00000038H
	ret	0
stbtt__find_table ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 8
stbtt__isfont PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1295
	mov	QWORD PTR [rsp+8], rcx
; Line 1297
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN2@stbtt__isf:
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82658
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82659
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82660
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82661
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN3@stbtt__isf:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82663
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82664
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82665
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82666
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN4@stbtt__isf:
; Line 1300
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 1
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN5@stbtt__isf:
; Line 1301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG82669
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG82670
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG82671
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG82672
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:
; Line 1302
	xor	eax, eax
$LN1@stbtt__isf:
; Line 1303
	ret	0
stbtt__isfont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
ttLONG	PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1289
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
ttLONG	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
ttULONG	PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1288
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
ttULONG	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
ttSHORT	PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1287
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
ttSHORT	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
ttUSHORT PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1286
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
ttUSHORT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
end$ = 44
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
i$ = 112
stbtt__cff_index_get PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1261
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1263
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_seek
; Line 1264
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1265
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1266
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@stbtt__cff
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@stbtt__cff
$LN3@stbtt__cff:
	mov	r8d, 1266				; 000004f2H
	lea	rdx, OFFSET FLAT:$SG82632
	lea	rcx, OFFSET FLAT:$SG82633
	call	_wassert
	xor	eax, eax
$LN4@stbtt__cff:
; Line 1267
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN5@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN6@stbtt__cff
$LN5@stbtt__cff:
	mov	r8d, 1267				; 000004f3H
	lea	rdx, OFFSET FLAT:$SG82634
	lea	rcx, OFFSET FLAT:$SG82635
	call	_wassert
	xor	eax, eax
$LN6@stbtt__cff:
; Line 1268
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR offsize$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
; Line 1269
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1270
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1271
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR end$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR count$[rsp]
	inc	ecx
	imul	ecx, DWORD PTR offsize$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx+2]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	stbtt__buf_range
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1272
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
stbtt__cff_index_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
stbtt__cff_index_count PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1255
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1256
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_seek
; Line 1257
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
; Line 1258
	add	rsp, 40					; 00000028H
	ret	0
stbtt__cff_index_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
operands$ = 40
$T1 = 56
b$ = 112
key$ = 120
outcount$ = 128
out$ = 136
stbtt__dict_get_ints PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1247
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1249
	mov	r8d, DWORD PTR key$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	stbtt__dict_get
	lea	rcx, QWORD PTR operands$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__dic:
	mov	eax, DWORD PTR outcount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__dic
	mov	eax, DWORD PTR operands$[rsp+12]
	cmp	DWORD PTR operands$[rsp+8], eax
	jge	SHORT $LN3@stbtt__dic
; Line 1251
	lea	rcx, QWORD PTR operands$[rsp]
	call	stbtt__cff_int
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1252
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
stbtt__dict_get_ints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
op$1 = 32
start$2 = 36
end$3 = 40
$T4 = 48
$T5 = 64
__$ReturnAddress$ = 112
b$ = 120
key$ = 128
stbtt__dict_get PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1232
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1233
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_seek
$LN2@stbtt__dic:
; Line 1234
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN3@stbtt__dic
; Line 1235
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$2[rsp], eax
$LN4@stbtt__dic:
; Line 1236
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_peek8
	movzx	eax, al
	cmp	eax, 28
	jl	SHORT $LN5@stbtt__dic
; Line 1237
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__cff_skip_operand
	jmp	SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:
; Line 1238
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR end$3[rsp], eax
; Line 1239
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR op$1[rsp], eax
; Line 1240
	cmp	DWORD PTR op$1[rsp], 12
	jne	SHORT $LN6@stbtt__dic
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	bts	eax, 8
	mov	DWORD PTR op$1[rsp], eax
$LN6@stbtt__dic:
; Line 1241
	mov	eax, DWORD PTR key$[rsp]
	cmp	DWORD PTR op$1[rsp], eax
	jne	SHORT $LN7@stbtt__dic
	mov	eax, DWORD PTR start$2[rsp]
	mov	ecx, DWORD PTR end$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$2[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	stbtt__buf_range
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:
; Line 1242
	jmp	$LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1243
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	stbtt__buf_range
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__dic:
; Line 1244
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
stbtt__dict_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
v$ = 36
b$ = 64
stbtt__cff_skip_operand PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1216
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1217
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_peek8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1218
	cmp	DWORD PTR b0$[rsp], 28
	jge	SHORT $LN9@stbtt__cff
	mov	r8d, 1218				; 000004c2H
	lea	rdx, OFFSET FLAT:$SG82578
	lea	rcx, OFFSET FLAT:$SG82579
	call	_wassert
	xor	eax, eax
$LN9@stbtt__cff:
; Line 1219
	cmp	DWORD PTR b0$[rsp], 30
	jne	SHORT $LN4@stbtt__cff
; Line 1220
	mov	edx, 1
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1221
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN3@stbtt__cff
; Line 1222
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1223
	mov	eax, DWORD PTR v$[rsp]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN7@stbtt__cff
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 4
	cmp	eax, 15
	jne	SHORT $LN6@stbtt__cff
$LN7@stbtt__cff:
; Line 1224
	jmp	SHORT $LN3@stbtt__cff
$LN6@stbtt__cff:
; Line 1225
	jmp	SHORT $LN2@stbtt__cff
$LN3@stbtt__cff:
; Line 1226
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1227
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__cff_int
$LN5@stbtt__cff:
; Line 1229
	add	rsp, 56					; 00000038H
	ret	0
stbtt__cff_skip_operand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
tv73 = 36
tv83 = 40
b$ = 64
stbtt__cff_int PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1205
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1206
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1207
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jl	SHORT $LN2@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 246			; 000000f6H
	jg	SHORT $LN2@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 139				; 0000008bH
	jmp	$LN1@stbtt__cff
	jmp	$LN3@stbtt__cff
$LN2@stbtt__cff:
; Line 1208
	cmp	DWORD PTR b0$[rsp], 247			; 000000f7H
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 250			; 000000faH
	jg	SHORT $LN4@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 247				; 000000f7H
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv73[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv73[rsp]
	lea	eax, DWORD PTR [rcx+rax+108]
	jmp	$LN1@stbtt__cff
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1209
	cmp	DWORD PTR b0$[rsp], 251			; 000000fbH
	jl	SHORT $LN6@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 254			; 000000feH
	jg	SHORT $LN6@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 251				; 000000fbH
	neg	eax
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv83[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv83[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 108				; 0000006cH
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN7@stbtt__cff
$LN6@stbtt__cff:
; Line 1210
	cmp	DWORD PTR b0$[rsp], 28
	jne	SHORT $LN8@stbtt__cff
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN9@stbtt__cff
$LN8@stbtt__cff:
; Line 1211
	cmp	DWORD PTR b0$[rsp], 29
	jne	SHORT $LN10@stbtt__cff
	mov	edx, 4
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
$LN10@stbtt__cff:
$LN9@stbtt__cff:
$LN7@stbtt__cff:
$LN5@stbtt__cff:
$LN3@stbtt__cff:
; Line 1212
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbtt__cff
	mov	r8d, 1212				; 000004bcH
	lea	rdx, OFFSET FLAT:$SG82566
	lea	rcx, OFFSET FLAT:$SG82567
	call	_wassert
	xor	eax, eax
$LN12@stbtt__cff:
; Line 1213
	xor	eax, eax
$LN1@stbtt__cff:
; Line 1214
	add	rsp, 56					; 00000038H
	ret	0
stbtt__cff_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
stbtt__cff_get_index PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1191
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1193
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$[rsp], eax
; Line 1194
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1195
	cmp	DWORD PTR count$[rsp], 0
	je	SHORT $LN2@stbtt__cff
; Line 1196
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1197
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
	mov	r8d, 1197				; 000004adH
	lea	rdx, OFFSET FLAT:$SG82548
	lea	rcx, OFFSET FLAT:$SG82549
	call	_wassert
	xor	eax, eax
$LN5@stbtt__cff:
; Line 1198
	mov	eax, DWORD PTR offsize$[rsp]
	imul	eax, DWORD PTR count$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
; Line 1199
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1201
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	stbtt__buf_range
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1202
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
stbtt__cff_get_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
o$ = 112
s$ = 120
stbtt__buf_range PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1182
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1183
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	stbtt__new_buf
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1184
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR s$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR o$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cmp	DWORD PTR s$[rsp], eax
	jle	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1185
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR r$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR s$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1187
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__buf:
; Line 1188
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
stbtt__buf_range ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
__$ReturnAddress$ = 80
p$ = 88
size$ = 96
stbtt__new_buf PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1169
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 1171
	cmp	QWORD PTR size$[rsp], 1073741824	; 40000000H
	jb	SHORT $LN3@stbtt__new
	mov	r8d, 1171				; 00000493H
	lea	rdx, OFFSET FLAT:$SG82524
	lea	rcx, OFFSET FLAT:$SG82525
	call	_wassert
	xor	eax, eax
$LN3@stbtt__new:
; Line 1172
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 1173
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1174
	mov	DWORD PTR r$[rsp+8], 0
; Line 1175
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1176
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
stbtt__new_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
v$ = 36
tv72 = 40
b$ = 64
n$ = 72
stbtt__buf_get PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1159
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1160
	mov	DWORD PTR v$[rsp], 0
; Line 1162
	cmp	DWORD PTR n$[rsp], 1
	jl	SHORT $LN6@stbtt__buf
	cmp	DWORD PTR n$[rsp], 4
	jle	SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
	mov	r8d, 1162				; 0000048aH
	lea	rdx, OFFSET FLAT:$SG82511
	lea	rcx, OFFSET FLAT:$SG82512
	call	_wassert
	xor	eax, eax
$LN7@stbtt__buf:
; Line 1163
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__buf
$LN2@stbtt__buf:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__buf:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__buf
; Line 1164
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv72[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv72[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
; Line 1165
	mov	eax, DWORD PTR v$[rsp]
; Line 1166
	add	rsp, 56					; 00000038H
	ret	0
stbtt__buf_get ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
o$ = 56
stbtt__buf_skip PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1154
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1155
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR o$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	stbtt__buf_seek
; Line 1156
	add	rsp, 40					; 00000028H
	ret	0
stbtt__buf_skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
b$ = 64
o$ = 72
stbtt__buf_seek PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1148
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1149
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jge	SHORT $LN4@stbtt__buf
$LN3@stbtt__buf:
	mov	r8d, 1149				; 0000047dH
	lea	rdx, OFFSET FLAT:$SG82490
	lea	rcx, OFFSET FLAT:$SG82491
	call	_wassert
	xor	eax, eax
$LN4@stbtt__buf:
; Line 1150
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN5@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN5@stbtt__buf
	mov	eax, DWORD PTR o$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stbtt__buf
$LN5@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv76[rsp], eax
$LN6@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 1151
	add	rsp, 56					; 00000038H
	ret	0
stbtt__buf_seek ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
stbtt__buf_peek8 PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1141
	mov	QWORD PTR [rsp+8], rcx
; Line 1142
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1143
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1144
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:
; Line 1145
	ret	0
stbtt__buf_peek8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 0
b$ = 32
stbtt__buf_get8 PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1134
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1135
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1136
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1137
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv75[rsp], al
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rcx+8], eax
	movzx	eax, BYTE PTR tv75[rsp]
$LN1@stbtt__buf:
; Line 1138
	add	rsp, 24
	ret	0
stbtt__buf_get8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
nm$ = 36
i$ = 40
offset$ = 44
count$ = 48
stringOffset$ = 52
fc$ = 56
tv155 = 64
font$ = 96
length$ = 104
platformID$ = 112
encodingID$ = 120
languageID$ = 128
nameID$ = 136
stbtt_GetFontNameString PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4824
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4826
	mov	rax, QWORD PTR font$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR fc$[rsp], rax
; Line 4827
	mov	rax, QWORD PTR font$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR offset$[rsp], eax
; Line 4828
	lea	r8, OFFSET FLAT:$SG85818
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4829
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt_GetF
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN5@stbtt_GetF:
; Line 4831
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4832
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4833
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetF
$LN2@stbtt_GetF:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_GetF:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_GetF
; Line 4834
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4836
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR platformID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR encodingID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR languageID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR nameID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
; Line 4837
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR length$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4838
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv155[rsp], rax
	mov	ecx, DWORD PTR loc$1[rsp]
	mov	rdx, QWORD PTR fc$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+10]
	call	ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR tv155[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 4840
	jmp	$LN2@stbtt_GetF
$LN3@stbtt_GetF:
; Line 4841
	xor	eax, eax
$LN1@stbtt_GetF:
; Line 4842
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetFontNameString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s1$ = 48
len1$ = 56
s2$ = 64
len2$ = 72
stbtt_CompareUTF8toUTF16_bigendian PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4964
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4965
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	stbtt_CompareUTF8toUTF16_bigendian_internal
; Line 4966
	add	rsp, 40					; 00000028H
	ret	0
stbtt_CompareUTF8toUTF16_bigendian ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fontdata$ = 48
name$ = 56
flags$ = 64
stbtt_FindMatchingFont PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4959
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4960
	mov	r8d, DWORD PTR flags$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_FindMatchingFont_internal
; Line 4961
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FindMatchingFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale$ = 104
codepoint$ = 112
padding$ = 120
onedge_value$ = 128
pixel_dist_scale$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointSDF PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4762
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4763
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR pixel_dist_scale$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	ecx, BYTE PTR onedge_value$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9d, DWORD PTR padding$[rsp]
	mov	r8d, eax
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSDF
; Line 4764
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 80
min_dist$2 = 84
t$3 = 88
x0$4 = 92
y0$5 = 96
it$6 = 100
sx$7 = 104
sy$8 = 108
x1$9 = 112
y1$10 = 116
scale_y$ = 120
verts$11 = 128
dist2$12 = 136
scale_x$ = 140
num$13 = 144
ax$14 = 148
ay$15 = 152
x2$16 = 156
y2$17 = 160
px$18 = 164
py$19 = 168
ix0$ = 172
iy0$ = 176
b$20 = 180
j$21 = 184
iy1$ = 188
ix1$ = 192
num_verts$22 = 196
val$23 = 200
y$24 = 204
x$25 = 208
bx$26 = 212
by$27 = 216
bx$28 = 220
by$29 = 224
mx$30 = 228
my$31 = 232
a$32 = 236
a_inv$33 = 240
precompute$34 = 248
dx$35 = 256
dy$36 = 260
w$ = 264
x0$37 = 268
y1$38 = 272
y0$39 = 276
dist$40 = 280
tv237 = 284
dist2$41 = 288
x1$42 = 292
y1$43 = 296
t$44 = 300
dist$45 = 304
tv464 = 308
tv467 = 312
tv468 = 316
tv470 = 320
tv473 = 324
tv474 = 328
tv476 = 332
tv479 = 336
tv512 = 340
tv514 = 344
tv517 = 348
tv518 = 352
c$46 = 356
discriminant$47 = 360
root$48 = 364
h$ = 368
x1$49 = 372
x2$50 = 376
y1$51 = 380
y0$52 = 384
y2$53 = 388
len2$54 = 392
y_gspace$55 = 396
x1$56 = 400
px$57 = 404
py$58 = 408
box_x0$59 = 412
box_x1$60 = 416
box_y0$61 = 420
box_y1$62 = 424
d$63 = 428
c$64 = 432
b$65 = 436
winding$66 = 440
x0$67 = 444
x_gspace$68 = 448
data$ = 456
tv95 = 464
tv139 = 472
$T69 = 480
$T70 = 512
$T71 = 544
$T72 = 576
$T73 = 608
$T74 = 640
$T75 = 672
$T76 = 704
res$77 = 736
__$ArrayPad$ = 752
info$ = 800
scale$ = 808
glyph$ = 816
padding$ = 824
onedge_value$ = 832
pixel_dist_scale$ = 840
width$ = 848
height$ = 856
xoff$ = 864
yoff$ = 872
stbtt_GetGlyphSDF PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4577
$LN83:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 776				; 00000308H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4578
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4583
	movss	xmm0, DWORD PTR scale$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@stbtt_GetG
	jne	SHORT $LN14@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN14@stbtt_GetG:
; Line 4585
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale$[rsp]
	movss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4588
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR ix0$[rsp], eax
	je	SHORT $LN16@stbtt_GetG
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR iy0$[rsp], eax
	jne	SHORT $LN15@stbtt_GetG
$LN16@stbtt_GetG:
; Line 4589
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN15@stbtt_GetG:
; Line 4591
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix0$[rsp], eax
; Line 4592
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy0$[rsp], eax
; Line 4593
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix1$[rsp], eax
; Line 4594
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy1$[rsp], eax
; Line 4596
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR w$[rsp], eax
; Line 4597
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR h$[rsp], eax
; Line 4599
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN17@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@stbtt_GetG:
; Line 4600
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN18@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN18@stbtt_GetG:
; Line 4601
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN19@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN19@stbtt_GetG:
; Line 4602
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN20@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN20@stbtt_GetG:
; Line 4605
	movss	xmm0, DWORD PTR scale_y$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR scale_y$[rsp], xmm0
; Line 4611
	lea	r8, QWORD PTR verts$11[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$22[rsp], eax
; Line 4612
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	QWORD PTR tv95[rsp], rax
	lea	rcx, OFFSET FLAT:$SG85673
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 4612				; 00001204H
	lea	r8, OFFSET FLAT:$SG85674
	mov	edx, 175				; 000000afH
	lea	rcx, QWORD PTR $T73[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T69[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv95[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T69[rsp]
	call	ccuserallocator_
	mov	QWORD PTR data$[rsp], rax
; Line 4613
	movsxd	rax, DWORD PTR num_verts$22[rsp]
	shl	rax, 2
	mov	QWORD PTR tv139[rsp], rax
	lea	rcx, OFFSET FLAT:$SG85675
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 4613				; 00001205H
	lea	r8, OFFSET FLAT:$SG85676
	mov	edx, 176				; 000000b0H
	lea	rcx, QWORD PTR $T74[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T70[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv139[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T70[rsp]
	call	ccuserallocator_
	mov	QWORD PTR precompute$34[rsp], rax
; Line 4615
	mov	DWORD PTR i$1[rsp], 0
	mov	eax, DWORD PTR num_verts$22[rsp]
	dec	eax
	mov	DWORD PTR j$21[rsp], eax
	jmp	SHORT $LN4@stbtt_GetG
$LN2@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR j$21[rsp], eax
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@stbtt_GetG
; Line 4616
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN21@stbtt_GetG
; Line 4617
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$37[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$39[rsp], xmm0
; Line 4618
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$49[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$38[rsp], xmm0
; Line 4619
	movss	xmm0, DWORD PTR x1$49[rsp]
	subss	xmm0, DWORD PTR x0$37[rsp]
	movss	xmm1, DWORD PTR x1$49[rsp]
	subss	xmm1, DWORD PTR x0$37[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$38[rsp]
	subss	xmm1, DWORD PTR y0$39[rsp]
	movss	xmm2, DWORD PTR y1$38[rsp]
	subss	xmm2, DWORD PTR y0$39[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR dist$40[rsp], xmm0
; Line 4620
	movss	xmm0, DWORD PTR dist$40[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@stbtt_GetG
	jne	SHORT $LN53@stbtt_GetG
	xorps	xmm0, xmm0
	movss	DWORD PTR tv237[rsp], xmm0
	jmp	SHORT $LN54@stbtt_GetG
$LN53@stbtt_GetG:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dist$40[rsp]
	movss	DWORD PTR tv237[rsp], xmm0
$LN54@stbtt_GetG:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR tv237[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN22@stbtt_GetG
$LN21@stbtt_GetG:
; Line 4621
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN23@stbtt_GetG
; Line 4622
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$50[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$53[rsp], xmm0
; Line 4623
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$56[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$51[rsp], xmm0
; Line 4624
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$67[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$52[rsp], xmm0
; Line 4625
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$56[rsp]
	movss	xmm1, DWORD PTR x0$67[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$50[rsp]
	movss	DWORD PTR bx$26[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$51[rsp]
	movss	xmm1, DWORD PTR y0$52[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$53[rsp]
	movss	DWORD PTR by$27[rsp], xmm0
; Line 4626
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR len2$54[rsp], xmm0
; Line 4627
	movss	xmm0, DWORD PTR len2$54[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN82@stbtt_GetG
	je	SHORT $LN25@stbtt_GetG
$LN82@stbtt_GetG:
; Line 4628
	movss	xmm0, DWORD PTR bx$26[rsp]
	mulss	xmm0, DWORD PTR bx$26[rsp]
	movss	xmm1, DWORD PTR by$27[rsp]
	mulss	xmm1, DWORD PTR by$27[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN26@stbtt_GetG
$LN25@stbtt_GetG:
; Line 4630
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN26@stbtt_GetG:
; Line 4631
	jmp	SHORT $LN24@stbtt_GetG
$LN23@stbtt_GetG:
; Line 4632
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN24@stbtt_GetG:
$LN22@stbtt_GetG:
; Line 4633
	jmp	$LN2@stbtt_GetG
$LN3@stbtt_GetG:
; Line 4635
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR y$24[rsp], eax
	jmp	SHORT $LN7@stbtt_GetG
$LN5@stbtt_GetG:
	mov	eax, DWORD PTR y$24[rsp]
	inc	eax
	mov	DWORD PTR y$24[rsp], eax
$LN7@stbtt_GetG:
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR y$24[rsp], eax
	jge	$LN6@stbtt_GetG
; Line 4636
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR x$25[rsp], eax
	jmp	SHORT $LN10@stbtt_GetG
$LN8@stbtt_GetG:
	mov	eax, DWORD PTR x$25[rsp]
	inc	eax
	mov	DWORD PTR x$25[rsp], eax
$LN10@stbtt_GetG:
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR x$25[rsp], eax
	jge	$LN9@stbtt_GetG
; Line 4638
	movss	xmm0, DWORD PTR __real@497423f0
	movss	DWORD PTR min_dist$2[rsp], xmm0
; Line 4639
	cvtsi2ss xmm0, DWORD PTR x$25[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sx$7[rsp], xmm0
; Line 4640
	cvtsi2ss xmm0, DWORD PTR y$24[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR sy$8[rsp], xmm0
; Line 4641
	movss	xmm0, DWORD PTR sx$7[rsp]
	divss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x_gspace$68[rsp], xmm0
; Line 4642
	movss	xmm0, DWORD PTR sy$8[rsp]
	divss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y_gspace$55[rsp], xmm0
; Line 4644
	mov	r9, QWORD PTR verts$11[rsp]
	mov	r8d, DWORD PTR num_verts$22[rsp]
	movss	xmm1, DWORD PTR y_gspace$55[rsp]
	movss	xmm0, DWORD PTR x_gspace$68[rsp]
	call	stbtt__compute_crossings_x
	mov	DWORD PTR winding$66[rsp], eax
; Line 4646
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbtt_GetG
$LN11@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN12@stbtt_GetG
; Line 4647
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x0$4[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y0$5[rsp], xmm0
; Line 4649
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN27@stbtt_GetG
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN81@stbtt_GetG
	je	$LN27@stbtt_GetG
$LN81@stbtt_GetG:
; Line 4650
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$42[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$43[rsp], xmm0
; Line 4652
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$41[rsp], xmm0
; Line 4653
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$41[rsp]
	jbe	SHORT $LN29@stbtt_GetG
; Line 4654
	cvtss2sd xmm0, DWORD PTR dist2$41[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN29@stbtt_GetG:
; Line 4659
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$43[rsp]
	subss	xmm1, DWORD PTR y0$5[rsp]
	movss	xmm2, DWORD PTR x0$4[rsp]
	subss	xmm2, DWORD PTR sx$7[rsp]
	mulss	xmm1, xmm2
	subss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	call	fabs
	cvtsd2ss xmm0, xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR dist$45[rsp], xmm0
; Line 4660
	cmp	DWORD PTR i$1[rsp], 0
	jne	SHORT $LN55@stbtt_GetG
	mov	r8d, 4660				; 00001234H
	lea	rdx, OFFSET FLAT:$SG85686
	lea	rcx, OFFSET FLAT:$SG85687
	call	_wassert
	xor	eax, eax
$LN55@stbtt_GetG:
; Line 4661
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist$45[rsp]
	jbe	$LN30@stbtt_GetG
; Line 4665
	movss	xmm0, DWORD PTR x1$42[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR dx$35[rsp], xmm0
	movss	xmm0, DWORD PTR y1$43[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR dy$36[rsp], xmm0
; Line 4666
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR px$57[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR py$58[rsp], xmm0
; Line 4669
	movss	xmm0, DWORD PTR px$57[rsp]
	mulss	xmm0, DWORD PTR dx$35[rsp]
	movss	xmm1, DWORD PTR py$58[rsp]
	mulss	xmm1, DWORD PTR dy$36[rsp]
	addss	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR dx$35[rsp]
	mulss	xmm1, DWORD PTR dx$35[rsp]
	movss	xmm2, DWORD PTR dy$36[rsp]
	mulss	xmm2, DWORD PTR dy$36[rsp]
	addss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR t$44[rsp], xmm0
; Line 4670
	movss	xmm0, DWORD PTR t$44[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN31@stbtt_GetG
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR t$44[rsp]
	jb	SHORT $LN31@stbtt_GetG
; Line 4671
	movss	xmm0, DWORD PTR dist$45[rsp]
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN31@stbtt_GetG:
$LN30@stbtt_GetG:
; Line 4672
	jmp	$LN28@stbtt_GetG
$LN27@stbtt_GetG:
; Line 4673
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN32@stbtt_GetG
; Line 4674
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x2$16[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y2$17[rsp], xmm0
; Line 4675
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR x1$9[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR y1$10[rsp], xmm0
; Line 4676
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN56@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv464[rsp], xmm0
	jmp	SHORT $LN57@stbtt_GetG
$LN56@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv464[rsp], xmm0
$LN57@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv464[rsp]
	jbe	SHORT $LN60@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN58@stbtt_GetG
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv467[rsp], xmm0
	jmp	SHORT $LN59@stbtt_GetG
$LN58@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv467[rsp], xmm0
$LN59@stbtt_GetG:
	movss	xmm0, DWORD PTR tv467[rsp]
	movss	DWORD PTR tv468[rsp], xmm0
	jmp	SHORT $LN61@stbtt_GetG
$LN60@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv468[rsp], xmm0
$LN61@stbtt_GetG:
	movss	xmm0, DWORD PTR tv468[rsp]
	movss	DWORD PTR box_x0$59[rsp], xmm0
; Line 4677
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN62@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv470[rsp], xmm0
	jmp	SHORT $LN63@stbtt_GetG
$LN62@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv470[rsp], xmm0
$LN63@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv470[rsp]
	jbe	SHORT $LN66@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN64@stbtt_GetG
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv473[rsp], xmm0
	jmp	SHORT $LN65@stbtt_GetG
$LN64@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv473[rsp], xmm0
$LN65@stbtt_GetG:
	movss	xmm0, DWORD PTR tv473[rsp]
	movss	DWORD PTR tv474[rsp], xmm0
	jmp	SHORT $LN67@stbtt_GetG
$LN66@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv474[rsp], xmm0
$LN67@stbtt_GetG:
	movss	xmm0, DWORD PTR tv474[rsp]
	movss	DWORD PTR box_y0$61[rsp], xmm0
; Line 4678
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN68@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv476[rsp], xmm0
	jmp	SHORT $LN69@stbtt_GetG
$LN68@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv476[rsp], xmm0
$LN69@stbtt_GetG:
	movss	xmm0, DWORD PTR x2$16[rsp]
	comiss	xmm0, DWORD PTR tv476[rsp]
	jbe	SHORT $LN72@stbtt_GetG
	movss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR tv512[rsp], xmm0
	jmp	SHORT $LN73@stbtt_GetG
$LN72@stbtt_GetG:
	movss	xmm0, DWORD PTR x1$9[rsp]
	comiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN70@stbtt_GetG
	movss	xmm0, DWORD PTR x1$9[rsp]
	movss	DWORD PTR tv479[rsp], xmm0
	jmp	SHORT $LN71@stbtt_GetG
$LN70@stbtt_GetG:
	movss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR tv479[rsp], xmm0
$LN71@stbtt_GetG:
	movss	xmm0, DWORD PTR tv479[rsp]
	movss	DWORD PTR tv512[rsp], xmm0
$LN73@stbtt_GetG:
	movss	xmm0, DWORD PTR tv512[rsp]
	movss	DWORD PTR box_x1$60[rsp], xmm0
; Line 4679
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN74@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv514[rsp], xmm0
	jmp	SHORT $LN75@stbtt_GetG
$LN74@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv514[rsp], xmm0
$LN75@stbtt_GetG:
	movss	xmm0, DWORD PTR y2$17[rsp]
	comiss	xmm0, DWORD PTR tv514[rsp]
	jbe	SHORT $LN78@stbtt_GetG
	movss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR tv518[rsp], xmm0
	jmp	SHORT $LN79@stbtt_GetG
$LN78@stbtt_GetG:
	movss	xmm0, DWORD PTR y1$10[rsp]
	comiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN76@stbtt_GetG
	movss	xmm0, DWORD PTR y1$10[rsp]
	movss	DWORD PTR tv517[rsp], xmm0
	jmp	SHORT $LN77@stbtt_GetG
$LN76@stbtt_GetG:
	movss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR tv517[rsp], xmm0
$LN77@stbtt_GetG:
	movss	xmm0, DWORD PTR tv517[rsp]
	movss	DWORD PTR tv518[rsp], xmm0
$LN79@stbtt_GetG:
	movss	xmm0, DWORD PTR tv518[rsp]
	movss	DWORD PTR box_y1$62[rsp], xmm0
; Line 4681
	movss	xmm0, DWORD PTR box_x0$59[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sx$7[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_x1$60[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sx$7[rsp]
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y0$61[rsp]
	subss	xmm0, DWORD PTR min_dist$2[rsp]
	movss	xmm1, DWORD PTR sy$8[rsp]
	comiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	movss	xmm0, DWORD PTR box_y1$62[rsp]
	addss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR sy$8[rsp]
	jbe	$LN33@stbtt_GetG
; Line 4682
	mov	DWORD PTR num$13[rsp], 0
; Line 4683
	movss	xmm0, DWORD PTR x1$9[rsp]
	subss	xmm0, DWORD PTR x0$4[rsp]
	movss	DWORD PTR ax$14[rsp], xmm0
	movss	xmm0, DWORD PTR y1$10[rsp]
	subss	xmm0, DWORD PTR y0$5[rsp]
	movss	DWORD PTR ay$15[rsp], xmm0
; Line 4684
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$9[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$16[rsp]
	movss	DWORD PTR bx$28[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$10[rsp]
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$17[rsp]
	movss	DWORD PTR by$29[rsp], xmm0
; Line 4685
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	DWORD PTR mx$30[rsp], xmm0
	movss	xmm0, DWORD PTR y0$5[rsp]
	subss	xmm0, DWORD PTR sy$8[rsp]
	movss	DWORD PTR my$31[rsp], xmm0
; Line 4686
	xorps	xmm0, xmm0
	movss	DWORD PTR res$77[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$77[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR res$77[rsp+8], xmm0
; Line 4688
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR a_inv$33[rsp], xmm0
; Line 4689
	cvtss2sd xmm0, DWORD PTR a_inv$33[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	$LN34@stbtt_GetG
	jne	$LN34@stbtt_GetG
; Line 4690
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$28[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$29[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR a$32[rsp], xmm0
; Line 4691
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$30[rsp]
	mulss	xmm1, DWORD PTR bx$28[rsp]
	movss	xmm2, DWORD PTR my$31[rsp]
	mulss	xmm2, DWORD PTR by$29[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR b$20[rsp], xmm0
; Line 4692
	movss	xmm0, DWORD PTR mx$30[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$31[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR c$46[rsp], xmm0
; Line 4693
	cvtss2sd xmm0, DWORD PTR a$32[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN36@stbtt_GetG
	jne	SHORT $LN36@stbtt_GetG
; Line 4694
	cvtss2sd xmm0, DWORD PTR b$20[rsp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN80@stbtt_GetG
	je	SHORT $LN38@stbtt_GetG
$LN80@stbtt_GetG:
; Line 4695
	movss	xmm0, DWORD PTR c$46[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR b$20[rsp]
	movsxd	rax, DWORD PTR num$13[rsp]
	movss	DWORD PTR res$77[rsp+rax*4], xmm0
	mov	eax, DWORD PTR num$13[rsp]
	inc	eax
	mov	DWORD PTR num$13[rsp], eax
$LN38@stbtt_GetG:
; Line 4697
	jmp	$LN37@stbtt_GetG
$LN36@stbtt_GetG:
; Line 4698
	movss	xmm0, DWORD PTR b$20[rsp]
	mulss	xmm0, DWORD PTR b$20[rsp]
	movss	xmm1, DWORD PTR __real@40800000
	mulss	xmm1, DWORD PTR a$32[rsp]
	mulss	xmm1, DWORD PTR c$46[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR discriminant$47[rsp], xmm0
; Line 4699
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR discriminant$47[rsp]
	jbe	SHORT $LN39@stbtt_GetG
; Line 4700
	mov	DWORD PTR num$13[rsp], 0
	jmp	$LN40@stbtt_GetG
$LN39@stbtt_GetG:
; Line 4702
	cvtss2sd xmm0, DWORD PTR discriminant$47[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR root$48[rsp], xmm0
; Line 4703
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$32[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR res$77[rsp+rax], xmm0
; Line 4704
	movss	xmm0, DWORD PTR b$20[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR root$48[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR a$32[rsp]
	divss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR res$77[rsp+rax], xmm0
; Line 4705
	mov	DWORD PTR num$13[rsp], 2
$LN40@stbtt_GetG:
$LN37@stbtt_GetG:
; Line 4708
	jmp	$LN35@stbtt_GetG
$LN34@stbtt_GetG:
; Line 4709
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR bx$28[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR by$29[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR b$65[rsp], xmm0
; Line 4710
	movss	xmm0, DWORD PTR ax$14[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR ay$15[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR mx$30[rsp]
	mulss	xmm1, DWORD PTR bx$28[rsp]
	movss	xmm2, DWORD PTR my$31[rsp]
	mulss	xmm2, DWORD PTR by$29[rsp]
	addss	xmm1, xmm2
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR c$64[rsp], xmm0
; Line 4711
	movss	xmm0, DWORD PTR mx$30[rsp]
	mulss	xmm0, DWORD PTR ax$14[rsp]
	movss	xmm1, DWORD PTR my$31[rsp]
	mulss	xmm1, DWORD PTR ay$15[rsp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR a_inv$33[rsp]
	movss	DWORD PTR d$63[rsp], xmm0
; Line 4712
	lea	r9, QWORD PTR res$77[rsp]
	movss	xmm2, DWORD PTR d$63[rsp]
	movss	xmm1, DWORD PTR c$64[rsp]
	movss	xmm0, DWORD PTR b$65[rsp]
	call	stbtt__solve_cubic
	mov	DWORD PTR num$13[rsp], eax
$LN35@stbtt_GetG:
; Line 4714
	movss	xmm0, DWORD PTR x0$4[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR x0$4[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y0$5[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR y0$5[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4715
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN41@stbtt_GetG
; Line 4716
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN41@stbtt_GetG:
; Line 4718
	cmp	DWORD PTR num$13[rsp], 1
	jl	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$77[rsp+rax]
	jb	$LN42@stbtt_GetG
; Line 4719
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4720
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4721
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4722
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4723
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN43@stbtt_GetG
; Line 4724
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN43@stbtt_GetG:
$LN42@stbtt_GetG:
; Line 4726
	cmp	DWORD PTR num$13[rsp], 2
	jl	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$77[rsp+rax]
	jb	$LN44@stbtt_GetG
; Line 4727
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4728
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4729
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4730
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4731
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN45@stbtt_GetG
; Line 4732
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN45@stbtt_GetG:
$LN44@stbtt_GetG:
; Line 4734
	cmp	DWORD PTR num$13[rsp], 3
	jl	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR res$77[rsp+rax]
	jb	$LN46@stbtt_GetG
; Line 4735
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR res$77[rsp+rax]
	movss	DWORD PTR t$3[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$3[rsp]
	movss	DWORD PTR it$6[rsp], xmm0
; Line 4736
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR x0$4[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR x1$9[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR x2$16[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR px$18[rsp], xmm0
; Line 4737
	movss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR it$6[rsp]
	mulss	xmm0, DWORD PTR y0$5[rsp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR it$6[rsp]
	mulss	xmm1, DWORD PTR y1$10[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR t$3[rsp]
	mulss	xmm1, DWORD PTR y2$17[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR py$19[rsp], xmm0
; Line 4738
	movss	xmm0, DWORD PTR px$18[rsp]
	subss	xmm0, DWORD PTR sx$7[rsp]
	movss	xmm1, DWORD PTR px$18[rsp]
	subss	xmm1, DWORD PTR sx$7[rsp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR py$19[rsp]
	subss	xmm1, DWORD PTR sy$8[rsp]
	movss	xmm2, DWORD PTR py$19[rsp]
	subss	xmm2, DWORD PTR sy$8[rsp]
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR dist2$12[rsp], xmm0
; Line 4739
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	mulss	xmm0, DWORD PTR min_dist$2[rsp]
	comiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN47@stbtt_GetG
; Line 4740
	cvtss2sd xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN47@stbtt_GetG:
$LN46@stbtt_GetG:
$LN33@stbtt_GetG:
$LN32@stbtt_GetG:
$LN28@stbtt_GetG:
; Line 4744
	jmp	$LN11@stbtt_GetG
$LN12@stbtt_GetG:
; Line 4745
	cmp	DWORD PTR winding$66[rsp], 0
	jne	SHORT $LN48@stbtt_GetG
; Line 4746
	movss	xmm0, DWORD PTR min_dist$2[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR min_dist$2[rsp], xmm0
$LN48@stbtt_GetG:
; Line 4747
	movzx	eax, BYTE PTR onedge_value$[rsp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR pixel_dist_scale$[rsp]
	mulss	xmm1, DWORD PTR min_dist$2[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR val$23[rsp], xmm0
; Line 4748
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR val$23[rsp]
	jbe	SHORT $LN49@stbtt_GetG
; Line 4749
	xorps	xmm0, xmm0
	movss	DWORD PTR val$23[rsp], xmm0
	jmp	SHORT $LN50@stbtt_GetG
$LN49@stbtt_GetG:
; Line 4750
	movss	xmm0, DWORD PTR val$23[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN51@stbtt_GetG
; Line 4751
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR val$23[rsp], xmm0
$LN51@stbtt_GetG:
$LN50@stbtt_GetG:
; Line 4752
	cvttss2si eax, DWORD PTR val$23[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	edx, DWORD PTR y$24[rsp]
	sub	edx, ecx
	mov	ecx, edx
	imul	ecx, DWORD PTR w$[rsp]
	mov	edx, DWORD PTR ix0$[rsp]
	mov	edi, DWORD PTR x$25[rsp]
	sub	edi, edx
	mov	edx, edi
	add	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4753
	jmp	$LN8@stbtt_GetG
$LN9@stbtt_GetG:
; Line 4754
	jmp	$LN5@stbtt_GetG
$LN6@stbtt_GetG:
; Line 4755
	lea	rax, OFFSET FLAT:$SG85710
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4755				; 00001293H
	lea	r8, OFFSET FLAT:$SG85711
	mov	edx, 177				; 000000b1H
	lea	rcx, QWORD PTR $T75[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T71[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR precompute$34[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T71[rsp]
	call	ccuserallocator_
; Line 4756
	lea	rax, OFFSET FLAT:$SG85712
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4756				; 00001294H
	lea	r8, OFFSET FLAT:$SG85713
	mov	edx, 178				; 000000b2H
	lea	rcx, QWORD PTR $T76[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T72[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR verts$11[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T72[rsp]
	call	ccuserallocator_
; Line 4758
	mov	rax, QWORD PTR data$[rsp]
$LN1@stbtt_GetG:
; Line 4759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 776				; 00000308H
	pop	rdi
	pop	rsi
	ret	0
stbtt_GetGlyphSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
bitmap$ = 144
userdata$ = 152
stbtt_FreeSDF PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4767
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 4768
	lea	rax, OFFSET FLAT:$SG85740
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4768				; 000012a0H
	lea	r8, OFFSET FLAT:$SG85741
	mov	edx, 179				; 000000b3H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR bitmap$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4769
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbtt_FreeSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 96
winding_count$ = 100
scale$ = 104
winding_lengths$ = 112
windings$ = 120
$T1 = 128
$T2 = 160
$T3 = 192
$T4 = 224
result$ = 288
flatness_in_pixels$ = 296
vertices$ = 304
num_verts$ = 312
scale_x$ = 320
scale_y$ = 328
shift_x$ = 336
shift_y$ = 344
x_off$ = 352
y_off$ = 360
invert$ = 368
userdata$ = 376
stbtt_Rasterize PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3696
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
; Line 3697
	movss	xmm0, DWORD PTR scale_x$[rsp]
	comiss	xmm0, DWORD PTR scale_y$[rsp]
	jbe	SHORT $LN4@stbtt_Rast
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN5@stbtt_Rast:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 3698
	mov	DWORD PTR winding_count$[rsp], 0
; Line 3699
	mov	QWORD PTR winding_lengths$[rsp], 0
; Line 3700
	movss	xmm0, DWORD PTR flatness_in_pixels$[rsp]
	divss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR winding_count$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR winding_lengths$[rsp]
	movaps	xmm2, xmm0
	mov	edx, DWORD PTR num_verts$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	stbtt_FlattenCurves
	mov	QWORD PTR windings$[rsp], rax
; Line 3701
	cmp	QWORD PTR windings$[rsp], 0
	je	$LN2@stbtt_Rast
; Line 3702
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR invert$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR y_off$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR x_off$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR winding_count$[rsp]
	mov	r8, QWORD PTR winding_lengths$[rsp]
	mov	rdx, QWORD PTR windings$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbtt__rasterize
; Line 3703
	lea	rax, OFFSET FLAT:$SG84596
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3703				; 00000e77H
	lea	r8, OFFSET FLAT:$SG84597
	mov	edx, 160				; 000000a0H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR winding_lengths$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3704
	lea	rax, OFFSET FLAT:$SG84598
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3704				; 00000e78H
	lea	r8, OFFSET FLAT:$SG84599
	mov	edx, 161				; 000000a1H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR windings$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
$LN2@stbtt_Rast:
; Line 3706
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$ = 48
y0$ = 52
y1$ = 56
x1$ = 60
font$ = 80
glyph$ = 88
scale_x$ = 96
scale_y$ = 104
shift_x$ = 112
shift_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBoxSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2722
$LN13:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2723
	mov	DWORD PTR x0$[rsp], 0
	mov	DWORD PTR y0$[rsp], 0
; Line 2724
	lea	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR y0$[rsp]
	lea	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	jne	SHORT $LN2@stbtt_GetG
; Line 2726
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbtt_GetG:
; Line 2727
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], 0
$LN5@stbtt_GetG:
; Line 2728
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rax], 0
$LN6@stbtt_GetG:
; Line 2729
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rax], 0
$LN7@stbtt_GetG:
; Line 2730
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2732
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x0$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
; Line 2733
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN9@stbtt_GetG
	mov	eax, DWORD PTR y1$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN9@stbtt_GetG:
; Line 2734
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN10@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x1$[rsp]
	mulss	xmm0, DWORD PTR scale_x$[rsp]
	addss	xmm0, DWORD PTR shift_x$[rsp]
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN10@stbtt_GetG:
; Line 2735
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN11@stbtt_GetG
	mov	eax, DWORD PTR y0$[rsp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	addss	xmm0, DWORD PTR shift_y$[rsp]
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2737
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
glyph$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBox PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2740
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2741
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2742
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
prefilter_x$ = 168
prefilter_y$ = 176
sub_x$ = 184
sub_y$ = 192
glyph$ = 200
stbtt_MakeGlyphBitmapSubpixelPrefilter PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4185
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4186
	mov	eax, DWORD PTR prefilter_y$[rsp]
	dec	eax
	mov	ecx, DWORD PTR out_h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	dec	ecx
	mov	edx, DWORD PTR out_w$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], edx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	edx, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4197
	cmp	DWORD PTR prefilter_x$[rsp], 1
	jle	SHORT $LN2@stbtt_Make
; Line 4198
	mov	eax, DWORD PTR prefilter_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	stbtt__h_prefilter
$LN2@stbtt_Make:
; Line 4200
	cmp	DWORD PTR prefilter_y$[rsp], 1
	jle	SHORT $LN3@stbtt_Make
; Line 4201
	mov	eax, DWORD PTR prefilter_y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	stbtt__v_prefilter
$LN3@stbtt_Make:
; Line 4203
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	call	stbtt__oversample_shift
	mov	rax, QWORD PTR sub_x$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4204
	mov	ecx, DWORD PTR prefilter_y$[rsp]
	call	stbtt__oversample_shift
	mov	rax, QWORD PTR sub_y$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4205
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
num_verts$ = 104
vertices$ = 112
gbm$ = 120
$T1 = 144
$T2 = 176
info$ = 240
output$ = 248
out_w$ = 256
out_h$ = 264
out_stride$ = 272
scale_x$ = 280
scale_y$ = 288
shift_x$ = 296
shift_y$ = 304
glyph$ = 312
stbtt_MakeGlyphBitmapSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3759
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 3762
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3765
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3766
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3767
	mov	eax, DWORD PTR out_w$[rsp]
	mov	DWORD PTR gbm$[rsp], eax
; Line 3768
	mov	eax, DWORD PTR out_h$[rsp]
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3769
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3771
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN2@stbtt_Make
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN2@stbtt_Make
; Line 3772
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN2@stbtt_Make:
; Line 3774
	lea	rax, OFFSET FLAT:$SG84697
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3774				; 00000ebeH
	lea	r8, OFFSET FLAT:$SG84698
	mov	edx, 166				; 000000a6H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR vertices$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3775
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
glyph$ = 152
stbtt_MakeGlyphBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3778
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3779
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3780
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
gbm$ = 104
ix1$ = 128
iy1$ = 132
num_verts$ = 136
vertices$ = 144
tv133 = 152
$T1 = 160
$T2 = 192
$T3 = 224
$T4 = 256
$T5 = 288
$T6 = 320
info$ = 384
scale_x$ = 392
scale_y$ = 400
shift_x$ = 408
shift_y$ = 416
glyph$ = 424
width$ = 432
height$ = 440
xoff$ = 448
yoff$ = 456
stbtt_GetGlyphBitmapSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3714
$LN12:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
; Line 3718
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3720
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@stbtt_GetG
	jne	SHORT $LN2@stbtt_GetG
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR scale_x$[rsp], xmm0
$LN2@stbtt_GetG:
; Line 3721
	movss	xmm0, DWORD PTR scale_y$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN3@stbtt_GetG
	jne	$LN3@stbtt_GetG
; Line 3722
	movss	xmm0, DWORD PTR scale_x$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@stbtt_GetG
	jne	SHORT $LN4@stbtt_GetG
; Line 3723
	lea	rax, OFFSET FLAT:$SG84641
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3723				; 00000e8bH
	lea	r8, OFFSET FLAT:$SG84642
	mov	edx, 163				; 000000a3H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR vertices$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3724
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 3726
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR scale_y$[rsp], xmm0
$LN3@stbtt_GetG:
; Line 3729
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3732
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp], eax
; Line 3733
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3734
	mov	QWORD PTR gbm$[rsp+16], 0
; Line 3736
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt_GetG:
; Line 3737
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp+4]
	mov	DWORD PTR [rax], ecx
$LN6@stbtt_GetG:
; Line 3738
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbtt_GetG:
; Line 3739
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN8@stbtt_GetG:
; Line 3741
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN9@stbtt_GetG
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN9@stbtt_GetG
; Line 3742
	mov	eax, DWORD PTR gbm$[rsp]
	imul	eax, DWORD PTR gbm$[rsp+4]
	cdqe
	mov	QWORD PTR tv133[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84648
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3742				; 00000e9eH
	lea	r8, OFFSET FLAT:$SG84649
	mov	edx, 164				; 000000a4H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv133[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3743
	cmp	QWORD PTR gbm$[rsp+16], 0
	je	$LN10@stbtt_GetG
; Line 3744
	mov	eax, DWORD PTR gbm$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3746
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN10@stbtt_GetG:
$LN9@stbtt_GetG:
; Line 3749
	lea	rax, OFFSET FLAT:$SG84651
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3749				; 00000ea5H
	lea	r8, OFFSET FLAT:$SG84652
	mov	edx, 165				; 000000a5H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR vertices$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 3750
	mov	rax, QWORD PTR gbm$[rsp+16]
$LN1@stbtt_GetG:
; Line 3751
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
stbtt_GetGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
glyph$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetGlyphBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3754
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3755
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3756
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
shift_x$ = 128
shift_y$ = 136
ix0$ = 144
iy0$ = 152
ix1$ = 160
iy1$ = 168
stbtt_GetCodepointBitmapBoxSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2745
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2746
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2747
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetCodepointBitmapBox PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2750
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2751
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rsp]
	movss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetCodepointBitmapBoxSubpixel
; Line 2752
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 128
output$ = 136
out_w$ = 144
out_h$ = 152
out_stride$ = 160
scale_x$ = 168
scale_y$ = 176
shift_x$ = 184
shift_y$ = 192
oversample_x$ = 200
oversample_y$ = 208
sub_x$ = 216
sub_y$ = 224
codepoint$ = 232
stbtt_MakeCodepointBitmapSubpixelPrefilter PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 3789
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+104], eax
	mov	rax, QWORD PTR sub_y$[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR sub_x$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR oversample_y$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR oversample_x$[rsp]
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixelPrefilter
; Line 3790
	add	rsp, 120				; 00000078H
	ret	0
stbtt_MakeCodepointBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
codepoint$ = 168
stbtt_MakeCodepointBitmapSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3793
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3794
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+72], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR shift_x$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3795
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
codepoint$ = 152
stbtt_MakeCodepointBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3803
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3804
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+72], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR scale_y$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_x$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeCodepointBitmapSubpixel
; Line 3805
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
shift_x$ = 120
shift_y$ = 128
codepoint$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointBitmapSubpixel PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3783
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3784
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR shift_y$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR shift_x$[rsp]
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3785
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
codepoint$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetCodepointBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3798
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3799
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+40], eax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scale_y$[rsp]
	movss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetCodepointBitmapSubpixel
; Line 3800
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
bitmap$ = 144
userdata$ = 152
stbtt_FreeBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3709
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 3710
	lea	rax, OFFSET FLAT:$SG84605
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3710				; 00000e7eH
	lea	r8, OFFSET FLAT:$SG84606
	mov	edx, 162				; 000000a2H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR bitmap$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3711
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbtt_FreeBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
svg_doc$ = 32
data$ = 40
tv73 = 48
info$ = 80
gl$ = 88
svg$ = 96
stbtt_GetGlyphSVG PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2695
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2696
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2699
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2700
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2702
	mov	edx, DWORD PTR gl$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindSVGDoc
	mov	QWORD PTR svg_doc$[rsp], rax
; Line 2703
	cmp	QWORD PTR svg_doc$[rsp], 0
	je	SHORT $LN3@stbtt_GetG
; Line 2704
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+52]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR svg_doc$[rsp]
	add	rcx, 4
	call	ttULONG
	mov	eax, eax
	mov	rcx, QWORD PTR tv73[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR svg$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2705
	mov	rax, QWORD PTR svg_doc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttULONG
	jmp	SHORT $LN1@stbtt_GetG
; Line 2706
	jmp	SHORT $LN4@stbtt_GetG
$LN3@stbtt_GetG:
; Line 2707
	xor	eax, eax
$LN4@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2709
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
svg$ = 64
stbtt_GetCodepointSVG PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2712
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2713
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR svg$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSVG
; Line 2714
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
numEntries$ = 36
svg_doc$1 = 40
svg_doc_list$ = 48
data$ = 56
svg_docs$ = 64
info$ = 96
gl$ = 104
stbtt_FindSVGDoc PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2678
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2680
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2681
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__get_svg
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc_list$[rsp], rax
; Line 2683
	mov	rcx, QWORD PTR svg_doc_list$[rsp]
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numEntries$[rsp], eax
; Line 2684
	mov	rax, QWORD PTR svg_doc_list$[rsp]
	add	rax, 2
	mov	QWORD PTR svg_docs$[rsp], rax
; Line 2686
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
	mov	eax, DWORD PTR numEntries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Find
; Line 2687
	imul	eax, DWORD PTR i$[rsp], 12
	cdqe
	mov	rcx, QWORD PTR svg_docs$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc$1[rsp], rax
; Line 2688
	mov	rcx, QWORD PTR svg_doc$1[rsp]
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jl	SHORT $LN5@stbtt_Find
	mov	rax, QWORD PTR svg_doc$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jg	SHORT $LN5@stbtt_Find
; Line 2689
	mov	rax, QWORD PTR svg_doc$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 2690
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 2691
	xor	eax, eax
$LN1@stbtt_Find:
; Line 2692
	add	rsp, 88					; 00000058H
	ret	0
stbtt_FindSVGDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
info$ = 144
v$ = 152
stbtt_FreeShape PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2673
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 2674
	lea	rax, OFFSET FLAT:$SG83789
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2674				; 00000a72H
	lea	r8, OFFSET FLAT:$SG83790
	mov	edx, 149				; 00000095H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR v$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 2675
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbtt_FreeShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
glyph_index$ = 56
pvertices$ = 64
stbtt_GetGlyphShape PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2298
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2299
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2300
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphShapeTT
	jmp	SHORT $LN1@stbtt_GetG
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2302
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2303
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
vertices$ = 64
stbtt_GetCodepointShape PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1590
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1591
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR vertices$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
; Line 1592
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numberOfContours$ = 48
tv74 = 52
g$ = 56
tv86 = 60
info$ = 80
glyph_index$ = 88
stbtt_IsGlyphEmpty PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1647
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1650
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_IsGl
; Line 1651
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphInfoT2
	test	eax, eax
	jne	SHORT $LN5@stbtt_IsGl
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN6@stbtt_IsGl
$LN5@stbtt_IsGl:
	mov	DWORD PTR tv74[rsp], 0
$LN6@stbtt_IsGl:
	mov	eax, DWORD PTR tv74[rsp]
	jmp	SHORT $LN1@stbtt_IsGl
$LN2@stbtt_IsGl:
; Line 1652
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1653
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN3@stbtt_IsGl
	mov	eax, 1
	jmp	SHORT $LN1@stbtt_IsGl
$LN3@stbtt_IsGl:
; Line 1654
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1655
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jne	SHORT $LN7@stbtt_IsGl
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@stbtt_IsGl
$LN7@stbtt_IsGl:
	mov	DWORD PTR tv86[rsp], 0
$LN8@stbtt_IsGl:
	mov	eax, DWORD PTR tv86[rsp]
$LN1@stbtt_IsGl:
; Line 1656
	add	rsp, 72					; 00000048H
	ret	0
stbtt_IsGlyphEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
length$ = 36
data$ = 40
info$ = 64
table$ = 72
table_length$ = 80
stbtt_GetKerningTable PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2333
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2334
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2338
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN5@stbtt_GetK
; Line 2339
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN5@stbtt_GetK:
; Line 2340
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN6@stbtt_GetK
; Line 2341
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN6@stbtt_GetK:
; Line 2342
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN7@stbtt_GetK
; Line 2343
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN7@stbtt_GetK:
; Line 2345
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR length$[rsp], eax
; Line 2346
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR table_length$[rsp], eax
	jge	SHORT $LN8@stbtt_GetK
; Line 2347
	mov	eax, DWORD PTR table_length$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN8@stbtt_GetK:
; Line 2349
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetK
$LN2@stbtt_GetK:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbtt_GetK:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN3@stbtt_GetK
; Line 2351
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	ttUSHORT
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	movzx	eax, ax
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2352
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	ttUSHORT
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	movzx	eax, ax
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+4], eax
; Line 2353
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	ttSHORT
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	cwde
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 2354
	jmp	$LN2@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2356
	mov	eax, DWORD PTR length$[rsp]
$LN1@stbtt_GetK:
; Line 2357
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
info$ = 64
stbtt_GetKerningTableLength PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2318
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2319
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2322
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetK
; Line 2323
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN2@stbtt_GetK:
; Line 2324
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN3@stbtt_GetK
; Line 2325
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2326
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN4@stbtt_GetK
; Line 2327
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN4@stbtt_GetK:
; Line 2329
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
$LN1@stbtt_GetK:
; Line 2330
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTableLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$1 = 48
info$ = 80
glyph_index$ = 88
x0$ = 96
y0$ = 104
x1$ = 112
y1$ = 120
stbtt_GetGlyphBox PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1626
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1627
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_GetG
; Line 1628
	mov	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphInfoT2
; Line 1629
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 1630
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyfOffset
	mov	DWORD PTR g$1[rsp], eax
; Line 1631
	cmp	DWORD PTR g$1[rsp], 0
	jge	SHORT $LN4@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 1633
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 1634
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 1635
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
; Line 1636
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 1638
	mov	eax, 1
$LN1@stbtt_GetG:
; Line 1639
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
xAdvance$ = 32
info$ = 64
g1$ = 72
g2$ = 80
stbtt_GetGlyphKernAdvance PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2611
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2612
	mov	DWORD PTR xAdvance$[rsp], 0
; Line 2614
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN2@stbtt_GetG
; Line 2615
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphGPOSInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2616
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	je	SHORT $LN4@stbtt_GetG
; Line 2617
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt__GetGlyphKernInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
$LN4@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2619
	mov	eax, DWORD PTR xAdvance$[rsp]
; Line 2620
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numOfLongHorMetrics$ = 32
info$ = 64
glyph_index$ = 72
advanceWidth$ = 80
leftSideBearing$ = 88
stbtt_GetGlyphHMetrics PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2306
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2307
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+34]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR numOfLongHorMetrics$[rsp], ax
; Line 2308
	movzx	eax, WORD PTR numOfLongHorMetrics$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	$LN2@stbtt_GetG
; Line 2309
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetG:
; Line 2310
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 2311
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2312
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	lea	ecx, DWORD PTR [rcx*4-4]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 2313
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2315
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 64
codepoint$ = 72
x0$ = 80
y0$ = 88
x1$ = 96
y1$ = 104
stbtt_GetCodepointBox PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1642
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1643
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBox
; Line 1644
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
info$ = 64
ch1$ = 72
ch2$ = 80
stbtt_GetCodepointKernAdvance PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2623
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2624
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetC
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN2@stbtt_GetC
; Line 2625
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetC
$LN2@stbtt_GetC:
; Line 2626
	mov	edx, DWORD PTR ch2$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv69[rsp], eax
	mov	edx, DWORD PTR ch1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	ecx, DWORD PTR tv69[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphKernAdvance
$LN1@stbtt_GetC:
; Line 2627
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
codepoint$ = 56
advanceWidth$ = 64
leftSideBearing$ = 72
stbtt_GetCodepointHMetrics PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2630
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2631
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r9, QWORD PTR leftSideBearing$[rsp]
	mov	r8, QWORD PTR advanceWidth$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 2632
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
x0$ = 56
y0$ = 64
x1$ = 72
y1$ = 80
stbtt_GetFontBoundingBox PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2653
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2654
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+36]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2655
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+38]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2656
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2657
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+42]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2658
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontBoundingBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tab$ = 32
info$ = 64
typoAscent$ = 72
typoDescent$ = 80
typoLineGap$ = 88
stbtt_GetFontVMetricsOS2 PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2642
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2643
	lea	r8, OFFSET FLAT:$SG83755
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbtt__find_table
	mov	DWORD PTR tab$[rsp], eax
; Line 2644
	cmp	DWORD PTR tab$[rsp], 0
	jne	SHORT $LN2@stbtt_GetF
; Line 2645
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 2646
	cmp	QWORD PTR typoAscent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+68]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR typoAscent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2647
	cmp	QWORD PTR typoDescent$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+70]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR typoDescent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2648
	cmp	QWORD PTR typoLineGap$[rsp], 0
	je	SHORT $LN5@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+72]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR typoLineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetF:
; Line 2649
	mov	eax, 1
$LN1@stbtt_GetF:
; Line 2650
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetFontVMetricsOS2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
ascent$ = 56
descent$ = 64
lineGap$ = 72
stbtt_GetFontVMetrics PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2635
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2636
	cmp	QWORD PTR ascent$[rsp], 0
	je	SHORT $LN2@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR ascent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@stbtt_GetF:
; Line 2637
	cmp	QWORD PTR descent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR descent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2638
	cmp	QWORD PTR lineGap$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	rcx, QWORD PTR lineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2639
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unitsPerEm$ = 32
info$ = 64
pixels$ = 72
stbtt_ScaleForMappingEmToPixels PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2667
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2668
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR unitsPerEm$[rsp], eax
; Line 2669
	cvtsi2ss xmm0, DWORD PTR unitsPerEm$[rsp]
	movss	xmm1, DWORD PTR pixels$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2670
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
fheight$ = 36
info$ = 64
height$ = 72
stbtt_ScaleForPixelHeight PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 2661
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2662
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	DWORD PTR tv71[rsp], eax
	mov	rcx, QWORD PTR info$[rsp]
	movsxd	rcx, DWORD PTR [rcx+36]
	mov	rdx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+6]
	call	ttSHORT
	cwde
	mov	ecx, DWORD PTR tv71[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fheight$[rsp], eax
; Line 2663
	cvtsi2ss xmm0, DWORD PTR fheight$[rsp]
	movss	xmm1, DWORD PTR height$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2664
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index_map$ = 32
format$ = 36
item$1 = 40
search$2 = 44
data$ = 48
searchRange$3 = 56
segcount$4 = 60
entrySelector$5 = 64
rangeShift$6 = 68
offset$7 = 72
start$8 = 76
mid$9 = 80
low$10 = 84
end$11 = 88
last$12 = 92
first$13 = 96
endCount$14 = 100
high$15 = 104
start_char$16 = 108
start_glyph$17 = 112
bytes$18 = 116
count$19 = 120
ngroups$20 = 124
end_char$21 = 128
info$ = 160
unicode_codepoint$ = 168
stbtt_FindGlyphIndex PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 1497
$LN33:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 1498
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1499
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR index_map$[rsp], eax
; Line 1501
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR format$[rsp], ax
; Line 1502
	movzx	eax, WORD PTR format$[rsp]
	test	eax, eax
	jne	SHORT $LN6@stbtt_Find
; Line 1503
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR bytes$18[rsp], eax
; Line 1504
	mov	eax, DWORD PTR bytes$18[rsp]
	sub	eax, 6
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jge	SHORT $LN8@stbtt_Find
; Line 1505
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR unicode_codepoint$[rsp]
	movzx	eax, BYTE PTR [rax+rcx+6]
	jmp	$LN1@stbtt_Find
$LN8@stbtt_Find:
; Line 1506
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN7@stbtt_Find
$LN6@stbtt_Find:
; Line 1507
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 6
	jne	$LN9@stbtt_Find
; Line 1508
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR first$13[rsp], eax
; Line 1509
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$19[rsp], eax
; Line 1510
	mov	eax, DWORD PTR first$13[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jb	SHORT $LN11@stbtt_Find
	mov	eax, DWORD PTR count$19[rsp]
	mov	ecx, DWORD PTR first$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN11@stbtt_Find
; Line 1511
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR first$13[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	mov	ecx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN11@stbtt_Find:
; Line 1512
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN10@stbtt_Find
$LN9@stbtt_Find:
; Line 1513
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 2
	jne	SHORT $LN12@stbtt_Find
; Line 1514
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN31@stbtt_Find
	mov	r8d, 1514				; 000005eaH
	lea	rdx, OFFSET FLAT:$SG82852
	lea	rcx, OFFSET FLAT:$SG82853
	call	_wassert
	xor	eax, eax
$LN31@stbtt_Find:
; Line 1515
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN13@stbtt_Find
$LN12@stbtt_Find:
; Line 1516
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 4
	jne	$LN14@stbtt_Find
; Line 1517
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR segcount$4[rsp], ax
; Line 1518
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1519
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1520
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR rangeShift$6[rsp], ax
; Line 1523
	mov	eax, DWORD PTR index_map$[rsp]
	add	eax, 14
	mov	DWORD PTR endCount$14[rsp], eax
; Line 1524
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	DWORD PTR search$2[rsp], eax
; Line 1526
	cmp	DWORD PTR unicode_codepoint$[rsp], 65535 ; 0000ffffH
	jle	SHORT $LN16@stbtt_Find
; Line 1527
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN16@stbtt_Find:
; Line 1531
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR rangeShift$6[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN17@stbtt_Find
; Line 1532
	movzx	eax, WORD PTR rangeShift$6[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN17@stbtt_Find:
; Line 1535
	mov	eax, DWORD PTR search$2[rsp]
	sub	eax, 2
	mov	DWORD PTR search$2[rsp], eax
$LN2@stbtt_Find:
; Line 1536
	movzx	eax, WORD PTR entrySelector$5[rsp]
	test	eax, eax
	je	SHORT $LN3@stbtt_Find
; Line 1538
	movzx	eax, WORD PTR searchRange$3[rsp]
	shr	ax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1539
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR searchRange$3[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR end$11[rsp], ax
; Line 1540
	movzx	eax, WORD PTR end$11[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN18@stbtt_Find
; Line 1541
	movzx	eax, WORD PTR searchRange$3[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN18@stbtt_Find:
; Line 1542
	movzx	eax, WORD PTR entrySelector$5[rsp]
	dec	ax
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1543
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 1544
	mov	eax, DWORD PTR search$2[rsp]
	add	eax, 2
	mov	DWORD PTR search$2[rsp], eax
; Line 1548
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	WORD PTR item$1[rsp], ax
; Line 1550
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR start$8[rsp], ax
; Line 1551
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR last$12[rsp], ax
; Line 1552
	movzx	eax, WORD PTR start$8[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN20@stbtt_Find
	movzx	eax, WORD PTR last$12[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN19@stbtt_Find
$LN20@stbtt_Find:
; Line 1553
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN19@stbtt_Find:
; Line 1555
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttUSHORT
	mov	WORD PTR offset$7[rsp], ax
; Line 1556
	movzx	eax, WORD PTR offset$7[rsp]
	test	eax, eax
	jne	SHORT $LN21@stbtt_Find
; Line 1557
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttSHORT
	cwde
	mov	ecx, DWORD PTR unicode_codepoint$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN21@stbtt_Find:
; Line 1559
	movzx	eax, WORD PTR offset$7[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR start$8[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR index_map$[rsp]
	add	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
	jmp	$LN15@stbtt_Find
$LN14@stbtt_Find:
; Line 1561
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	je	SHORT $LN23@stbtt_Find
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 13
	jne	$LN22@stbtt_Find
$LN23@stbtt_Find:
; Line 1562
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR ngroups$20[rsp], eax
; Line 1564
	mov	DWORD PTR low$10[rsp], 0
	mov	eax, DWORD PTR ngroups$20[rsp]
	mov	DWORD PTR high$15[rsp], eax
$LN4@stbtt_Find:
; Line 1566
	mov	eax, DWORD PTR high$15[rsp]
	cmp	DWORD PTR low$10[rsp], eax
	jge	$LN5@stbtt_Find
; Line 1567
	mov	eax, DWORD PTR low$10[rsp]
	mov	ecx, DWORD PTR high$15[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR low$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR mid$9[rsp], eax
; Line 1568
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+16]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR start_char$16[rsp], eax
; Line 1569
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+20]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR end_char$21[rsp], eax
; Line 1570
	mov	eax, DWORD PTR start_char$16[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN24@stbtt_Find
; Line 1571
	mov	eax, DWORD PTR mid$9[rsp]
	mov	DWORD PTR high$15[rsp], eax
	jmp	SHORT $LN25@stbtt_Find
$LN24@stbtt_Find:
; Line 1572
	mov	eax, DWORD PTR end_char$21[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jbe	SHORT $LN26@stbtt_Find
; Line 1573
	mov	eax, DWORD PTR mid$9[rsp]
	inc	eax
	mov	DWORD PTR low$10[rsp], eax
	jmp	SHORT $LN27@stbtt_Find
$LN26@stbtt_Find:
; Line 1575
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	rcx, rax
	call	ttULONG
	mov	DWORD PTR start_glyph$17[rsp], eax
; Line 1576
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	jne	SHORT $LN28@stbtt_Find
; Line 1577
	mov	eax, DWORD PTR unicode_codepoint$[rsp]
	mov	ecx, DWORD PTR start_glyph$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start_char$16[rsp]
	jmp	SHORT $LN1@stbtt_Find
	jmp	SHORT $LN29@stbtt_Find
$LN28@stbtt_Find:
; Line 1579
	mov	eax, DWORD PTR start_glyph$17[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN29@stbtt_Find:
$LN27@stbtt_Find:
$LN25@stbtt_Find:
; Line 1581
	jmp	$LN4@stbtt_Find
$LN5@stbtt_Find:
; Line 1582
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Find
$LN22@stbtt_Find:
$LN15@stbtt_Find:
$LN13@stbtt_Find:
$LN10@stbtt_Find:
$LN7@stbtt_Find:
; Line 1585
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN32@stbtt_Find
	mov	r8d, 1585				; 00000631H
	lea	rdx, OFFSET FLAT:$SG82870
	lea	rcx, OFFSET FLAT:$SG82871
	call	_wassert
	xor	eax, eax
$LN32@stbtt_Find:
; Line 1586
	xor	eax, eax
$LN1@stbtt_Find:
; Line 1587
	add	rsp, 152				; 00000098H
	ret	0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
data$ = 56
offset$ = 64
stbtt_InitFont PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4954
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4955
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont_internal
; Line 4956
	add	rsp, 40					; 00000028H
	ret	0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
index$ = 56
stbtt_GetFontOffsetForIndex PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4944
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4945
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt_GetFontOffsetForIndex_internal
; Line 4946
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
stbtt_GetNumberOfFonts PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4949
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4950
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt_GetNumberOfFonts_internal
; Line 4951
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetNumberOfFonts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 80
i$ = 88
j$ = 92
scale$2 = 96
pad$3 = 100
glyph$4 = 104
bc$5 = 112
fh$6 = 120
missing_glyph$ = 124
k$ = 128
return_value$ = 132
tv80 = 136
tv176 = 140
x0$7 = 144
recip_h$8 = 148
sub_x$9 = 152
y0$10 = 156
recip_v$11 = 160
sub_y$12 = 164
codepoint$13 = 168
advance$14 = 172
old_h_over$ = 176
old_v_over$ = 180
lsb$15 = 184
y1$16 = 188
x1$17 = 192
spc$ = 240
info$ = 248
ranges$ = 256
num_ranges$ = 264
rects$ = 272
stbtt_PackFontRangesRenderIntoRects PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4209
$LN22:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 4210
	mov	DWORD PTR missing_glyph$[rsp], -1
	mov	DWORD PTR return_value$[rsp], 1
; Line 4213
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR old_h_over$[rsp], eax
; Line 4214
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR old_v_over$[rsp], eax
; Line 4216
	mov	DWORD PTR k$[rsp], 0
; Line 4217
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$6[rsp], xmm0
; Line 4219
	movss	xmm0, DWORD PTR fh$6[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@stbtt_Pack
	movss	xmm1, DWORD PTR fh$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN19@stbtt_Pack
$LN18@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$6[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv80[rsp], xmm0
$LN19@stbtt_Pack:
	movss	xmm0, DWORD PTR tv80[rsp]
	movss	DWORD PTR scale$2[rsp], xmm0
; Line 4221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+32]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 4222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+33]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 4223
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_h$8[rsp], xmm0
; Line 4224
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_v$11[rsp], xmm0
; Line 4225
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	stbtt__oversample_shift
	movss	DWORD PTR sub_x$9[rsp], xmm0
; Line 4226
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	stbtt__oversample_shift
	movss	DWORD PTR sub_y$12[rsp], xmm0
; Line 4227
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4228
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$1[rsp], rax
; Line 4229
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN8@stbtt_Pack
; Line 4230
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	QWORD PTR bc$5[rsp], rax
; Line 4232
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN20@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN21@stbtt_Pack
$LN20@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv176[rsp], eax
$LN21@stbtt_Pack:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR codepoint$13[rsp], eax
; Line 4233
	mov	edx, DWORD PTR codepoint$13[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$4[rsp], eax
; Line 4234
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR pad$3[rsp], eax
; Line 4237
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4238
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 4239
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 4240
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4241
	lea	r9, QWORD PTR lsb$15[rsp]
	lea	r8, QWORD PTR advance$14[rsp]
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 4242
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$16[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$17[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$7[rsp]
	mov	QWORD PTR [rsp+32], rax
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 4246
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$2[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	edx, DWORD PTR [rdx+36]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, edx
	inc	ecx
	mov	rdx, QWORD PTR r$1[rsp]
	movsxd	rdx, DWORD PTR [rdx]
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$1[rsp]
	mov	r9, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	r8d, DWORD PTR glyph$4[rsp]
	mov	DWORD PTR [rsp+72], r8d
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+64], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+24]
	mov	DWORD PTR [rsp+32], r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4256
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+36], 1
	jbe	SHORT $LN10@stbtt_Pack
; Line 4257
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	stbtt__h_prefilter
$LN10@stbtt_Pack:
; Line 4261
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+40], 1
	jbe	SHORT $LN11@stbtt_Pack
; Line 4262
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	stbtt__v_prefilter
$LN11@stbtt_Pack:
; Line 4266
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
; Line 4267
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx
; Line 4268
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 4269
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 4270
	cvtsi2ss xmm0, DWORD PTR advance$14[rsp]
	movss	xmm1, DWORD PTR scale$2[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4271
	cvtsi2ss xmm0, DWORD PTR x0$7[rsp]
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4272
	cvtsi2ss xmm0, DWORD PTR y0$10[rsp]
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4273
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR x0$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_h$8[rsp]
	addss	xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4274
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR y0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_v$11[rsp]
	addss	xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4276
	cmp	DWORD PTR glyph$4[rsp], 0
	jne	SHORT $LN12@stbtt_Pack
; Line 4277
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR missing_glyph$[rsp], eax
$LN12@stbtt_Pack:
; Line 4278
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN13@stbtt_Pack
; Line 4279
	mov	DWORD PTR return_value$[rsp], 0
	jmp	$LN14@stbtt_Pack
$LN13@stbtt_Pack:
; Line 4280
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	jne	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN15@stbtt_Pack
	cmp	DWORD PTR missing_glyph$[rsp], 0
	jl	SHORT $LN15@stbtt_Pack
; Line 4281
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR missing_glyph$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 40				; 00000028H
	movsxd	r8, DWORD PTR j$[rsp]
	imul	r8, r8, 28
	mov	r9, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR [r9+rdx+24]
	lea	rdi, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [rax+rcx]
	mov	ecx, 28
	rep movsb
; Line 4282
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
; Line 4283
	mov	DWORD PTR return_value$[rsp], 0
$LN16@stbtt_Pack:
$LN14@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4286
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4287
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4288
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4291
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_h_over$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 4292
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_v_over$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 4294
	mov	eax, DWORD PTR return_value$[rsp]
; Line 4295
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
rects$ = 56
num_rects$ = 64
stbtt_PackFontRangesPackRects PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4298
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4299
	mov	r8d, DWORD PTR num_rects$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbrp_pack_rects
; Line 4300
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackFontRangesPackRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
k$ = 84
j$ = 88
fh$1 = 92
glyph$2 = 96
tv78 = 100
tv144 = 104
scale$3 = 108
missing_glyph_added$ = 112
codepoint$4 = 116
x0$5 = 120
x1$6 = 124
y0$7 = 128
y1$8 = 132
spc$ = 160
info$ = 168
ranges$ = 176
num_ranges$ = 184
rects$ = 192
stbtt_PackFontRangesGatherRects PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4150
$LN17:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 4152
	mov	DWORD PTR missing_glyph_added$[rsp], 0
; Line 4154
	mov	DWORD PTR k$[rsp], 0
; Line 4155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4156
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$1[rsp], xmm0
; Line 4157
	movss	xmm0, DWORD PTR fh$1[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@stbtt_Pack
	movss	xmm1, DWORD PTR fh$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN14@stbtt_Pack
$LN13@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$1[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN14@stbtt_Pack:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$3[rsp], xmm0
; Line 4158
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+36]
	mov	BYTE PTR [rcx+rax+32], dl
; Line 4159
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+rax+33], dl
; Line 4160
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4162
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN15@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv144[rsp], eax
$LN16@stbtt_Pack:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR codepoint$4[rsp], eax
; Line 4163
	mov	edx, DWORD PTR codepoint$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$2[rsp], eax
; Line 4164
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN8@stbtt_Pack
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN10@stbtt_Pack
	cmp	DWORD PTR missing_glyph_added$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
$LN10@stbtt_Pack:
; Line 4165
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+12], 0
; Line 4166
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4167
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$3[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$3[rsp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$8[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR y0$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x0$5[rsp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+40], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+32], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$2[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4172
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+12], eax
; Line 4173
	mov	eax, DWORD PTR y0$7[rsp]
	mov	ecx, DWORD PTR y1$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+16], eax
; Line 4174
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4175
	mov	DWORD PTR missing_glyph_added$[rsp], 1
$LN11@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4177
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4178
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4179
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4181
	mov	eax, DWORD PTR k$[rsp]
; Line 4182
	add	rsp, 152				; 00000098H
	ret	0
stbtt_PackFontRangesGatherRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
y$2 = 36
ipw$ = 40
iph$ = 44
b$ = 48
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
align_to_integer$ = 136
stbtt_GetPackedQuad PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4364
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4365
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 4366
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 4368
	cmp	DWORD PTR align_to_integer$[rsp], 0
	je	$LN2@stbtt_GetP
; Line 4369
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rsp], xmm0
; Line 4370
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rsp], xmm0
; Line 4371
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4372
	mov	rax, QWORD PTR q$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4373
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR x$1[rsp]
	addss	xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4374
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR y$2[rsp]
	addss	xmm0, DWORD PTR [rax+24]
	mov	rax, QWORD PTR b$[rsp]
	subss	xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4375
	jmp	SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:
; Line 4376
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4377
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4378
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+20]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4379
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:
; Line 4382
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4383
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4384
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4385
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 4387
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4388
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 8
skip$ = 16
stbtt_PackSetSkipMissingCodepoints PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4006
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4007
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR skip$[rsp]
	mov	DWORD PTR [rax+32], ecx
; Line 4008
	ret	0
stbtt_PackSetSkipMissingCodepoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
h_oversample$ = 56
v_oversample$ = 64
stbtt_PackSetOversampling PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3996
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3997
	cmp	DWORD PTR h_oversample$[rsp], 8
	jbe	SHORT $LN5@stbtt_Pack
	mov	r8d, 3997				; 00000f9dH
	lea	rdx, OFFSET FLAT:$SG85007
	lea	rcx, OFFSET FLAT:$SG85008
	call	_wassert
	xor	eax, eax
$LN5@stbtt_Pack:
; Line 3998
	cmp	DWORD PTR v_oversample$[rsp], 8
	jbe	SHORT $LN6@stbtt_Pack
	mov	r8d, 3998				; 00000f9eH
	lea	rdx, OFFSET FLAT:$SG85009
	lea	rcx, OFFSET FLAT:$SG85010
	call	_wassert
	xor	eax, eax
$LN6@stbtt_Pack:
; Line 3999
	cmp	DWORD PTR h_oversample$[rsp], 8
	ja	SHORT $LN2@stbtt_Pack
; Line 4000
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR h_oversample$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN2@stbtt_Pack:
; Line 4001
	cmp	DWORD PTR v_oversample$[rsp], 8
	ja	SHORT $LN3@stbtt_Pack
; Line 4002
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR v_oversample$[rsp]
	mov	DWORD PTR [rax+40], ecx
$LN3@stbtt_Pack:
; Line 4003
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackSetOversampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
j$ = 52
n$ = 56
return_value$ = 60
rects$ = 64
tv146 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
info$ = 208
spc$ = 400
fontdata$ = 408
font_index$ = 416
ranges$ = 424
num_ranges$ = 432
stbtt_PackFontRanges PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4303
$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 4305
	mov	DWORD PTR return_value$[rsp], 1
; Line 4310
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4311
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+6], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+4], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+2], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx], dx
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4315
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4317
	mov	DWORD PTR n$[rsp], 0
; Line 4318
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbtt_Pack
; Line 4319
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN8@stbtt_Pack
$LN9@stbtt_Pack:
; Line 4321
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	QWORD PTR tv146[rsp], rax
	lea	rcx, OFFSET FLAT:$SG85298
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 4321				; 000010e1H
	lea	r8, OFFSET FLAT:$SG85299
	mov	edx, 173				; 000000adH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv146[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR rects$[rsp], rax
; Line 4322
	cmp	QWORD PTR rects$[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4323
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN11@stbtt_Pack:
; Line 4325
	mov	rax, QWORD PTR spc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR info$[rsp], rax
; Line 4326
	mov	edx, DWORD PTR font_index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4328
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesGatherRects
	mov	DWORD PTR n$[rsp], eax
; Line 4330
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesPackRects
; Line 4332
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesRenderIntoRects
	mov	DWORD PTR return_value$[rsp], eax
; Line 4334
	lea	rax, OFFSET FLAT:$SG85301
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4334				; 000010eeH
	lea	r8, OFFSET FLAT:$SG85302
	mov	edx, 174				; 000000aeH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR rects$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 4335
	mov	eax, DWORD PTR return_value$[rsp]
$LN1@stbtt_Pack:
; Line 4336
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackFontRanges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 48
spc$ = 112
fontdata$ = 120
font_index$ = 128
font_size$ = 136
first_unicode_codepoint_in_range$ = 144
num_chars_in_range$ = 152
chardata_for_range$ = 160
stbtt_PackFontRange PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4340
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4342
	mov	eax, DWORD PTR first_unicode_codepoint_in_range$[rsp]
	mov	DWORD PTR range$[rsp+4], eax
; Line 4343
	mov	QWORD PTR range$[rsp+8], 0
; Line 4344
	mov	eax, DWORD PTR num_chars_in_range$[rsp]
	mov	DWORD PTR range$[rsp+16], eax
; Line 4345
	mov	rax, QWORD PTR chardata_for_range$[rsp]
	mov	QWORD PTR range$[rsp+24], rax
; Line 4346
	movss	xmm0, DWORD PTR font_size$[rsp]
	movss	DWORD PTR range$[rsp], xmm0
; Line 4347
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR range$[rsp]
	mov	r8d, DWORD PTR font_index$[rsp]
	mov	rdx, QWORD PTR fontdata$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRanges
; Line 4348
	add	rsp, 104				; 00000068H
	ret	0
stbtt_PackFontRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
$T4 = 144
spc$ = 208
stbtt_PackEnd PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3990
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 3991
	lea	rax, OFFSET FLAT:$SG84992
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3991				; 00000f97H
	lea	r8, OFFSET FLAT:$SG84993
	mov	edx, 171				; 000000abH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [rax+56]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3992
	lea	rax, OFFSET FLAT:$SG84994
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3992				; 00000f98H
	lea	r8, OFFSET FLAT:$SG84995
	mov	edx, 172				; 000000acH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 3993
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv149 = 48
num_nodes$ = 52
nodes$ = 56
context$ = 64
tv77 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
spc$ = 368
pixels$ = 376
pw$ = 384
ph$ = 392
stride_in_bytes$ = 400
padding$ = 408
alloc_context$ = 416
stbtt_PackBegin PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3958
$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
; Line 3959
	lea	rax, OFFSET FLAT:$SG84976
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3959				; 00000f77H
	lea	r8, OFFSET FLAT:$SG84977
	mov	edx, 167				; 000000a7H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 20
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR context$[rsp], rax
; Line 3960
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_nodes$[rsp], eax
; Line 3961
	movsxd	rax, DWORD PTR num_nodes$[rsp]
	mov	QWORD PTR tv77[rsp], rax
	lea	rcx, OFFSET FLAT:$SG84978
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3961				; 00000f79H
	lea	r8, OFFSET FLAT:$SG84979
	mov	edx, 168				; 000000a8H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv77[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR nodes$[rsp], rax
; Line 3963
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN3@stbtt_Pack
	cmp	QWORD PTR nodes$[rsp], 0
	jne	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 3964
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN4@stbtt_Pack
	lea	rax, OFFSET FLAT:$SG84983
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3964				; 00000f7cH
	lea	r8, OFFSET FLAT:$SG84984
	mov	edx, 169				; 000000a9H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR context$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
$LN4@stbtt_Pack:
; Line 3965
	cmp	QWORD PTR nodes$[rsp], 0
	je	SHORT $LN5@stbtt_Pack
	lea	rax, OFFSET FLAT:$SG84986
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3965				; 00000f7dH
	lea	r8, OFFSET FLAT:$SG84987
	mov	edx, 170				; 000000aaH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR nodes$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
$LN5@stbtt_Pack:
; Line 3966
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN2@stbtt_Pack:
; Line 3969
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3970
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 3971
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 3972
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 3973
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 3974
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR nodes$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 3975
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR padding$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 3976
	cmp	DWORD PTR stride_in_bytes$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
	mov	eax, DWORD PTR stride_in_bytes$[rsp]
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR tv149[rsp], eax
$LN9@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR tv149[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 3977
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+36], 1
; Line 3978
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 3979
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 3981
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR padding$[rsp]
	mov	edx, DWORD PTR pw$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR num_nodes$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR nodes$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR context$[rsp]
	call	stbrp_init_target
; Line 3983
	cmp	QWORD PTR pixels$[rsp], 0
	je	SHORT $LN6@stbtt_Pack
; Line 3984
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
$LN6@stbtt_Pack:
; Line 3986
	mov	eax, 1
$LN1@stbtt_Pack:
; Line 3987
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 32
tv78 = 36
i_ascent$ = 40
i_descent$ = 44
i_lineGap$ = 48
info$ = 64
fontdata$ = 240
index$ = 248
size$ = 256
ascent$ = 264
descent$ = 272
lineGap$ = 280
stbtt_GetScaledFontVMetrics PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4351
$LN5:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 4355
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4356
	movss	xmm0, DWORD PTR size$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@stbtt_GetS
	movss	xmm1, DWORD PTR size$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetS
$LN3@stbtt_GetS:
	movss	xmm0, DWORD PTR size$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv78[rsp], xmm0
$LN4@stbtt_GetS:
	movss	xmm0, DWORD PTR tv78[rsp]
	movss	DWORD PTR scale$[rsp], xmm0
; Line 4357
	lea	r9, QWORD PTR i_lineGap$[rsp]
	lea	r8, QWORD PTR i_descent$[rsp]
	lea	rdx, QWORD PTR i_ascent$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetFontVMetrics
; Line 4358
	cvtsi2ss xmm0, DWORD PTR i_ascent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR ascent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4359
	cvtsi2ss xmm0, DWORD PTR i_descent$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR descent$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4360
	cvtsi2ss xmm0, DWORD PTR i_lineGap$[rsp]
	mulss	xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR lineGap$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 4361
	add	rsp, 232				; 000000e8H
	ret	0
stbtt_GetScaledFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d3d_bias$ = 32
tv65 = 36
round_x$ = 40
round_y$ = 44
ipw$ = 48
iph$ = 52
b$ = 56
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
opengl_fillrule$ = 136
stbtt_GetBakedQuad PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 3860
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3861
	cmp	DWORD PTR opengl_fillrule$[rsp], 0
	je	SHORT $LN3@stbtt_GetB
	xorps	xmm0, xmm0
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetB
$LN3@stbtt_GetB:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@stbtt_GetB:
	movss	xmm0, DWORD PTR tv65[rsp]
	movss	DWORD PTR d3d_bias$[rsp], xmm0
; Line 3862
	cvtsi2ss xmm0, DWORD PTR pw$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rsp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rsp], xmm0
; Line 3863
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 3864
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_x$[rsp], eax
; Line 3865
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR __real@00000000
	mov	rax, QWORD PTR ypos$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	call	floor
	cvttsd2si eax, xmm0
	mov	DWORD PTR round_y$[rsp], eax
; Line 3867
	cvtsi2ss xmm0, DWORD PTR round_x$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3868
	cvtsi2ss xmm0, DWORD PTR round_y$[rsp]
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3869
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	ecx, DWORD PTR round_x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+16], xmm0
; Line 3870
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR round_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+20], xmm0
; Line 3872
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3873
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 3874
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+24], xmm0
; Line 3875
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	movss	DWORD PTR [rax+28], xmm0
; Line 3877
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 3878
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetBakedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 96
offset$ = 104
pixel_height$ = 112
pixels$ = 120
pw$ = 128
ph$ = 136
first_char$ = 144
num_chars$ = 152
chardata$ = 160
stbtt_BakeFontBitmap PROC
; File W:\cpp\void\rx\stb_truetype.h
; Line 4939
$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4940
	mov	rax, QWORD PTR chardata$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR num_chars$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR first_char$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR pixels$[rsp]
	movss	xmm2, DWORD PTR pixel_height$[rsp]
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbtt_BakeFontBitmap_internal
; Line 4941
	add	rsp, 88					; 00000058H
	ret	0
stbtt_BakeFontBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 80
col$ = 84
pos$1 = 88
y$2 = 92
x$3 = 96
DCY$4 = 100
bitCnt$5 = 104
bitBuf$6 = 108
j$7 = 112
i$ = 116
k$ = 120
yy$8 = 124
xx$9 = 128
DCU$10 = 132
DCV$11 = 136
yti$12 = 140
uvti$13 = 144
p$14 = 148
r$15 = 152
g$16 = 156
b$17 = 160
p$18 = 164
r$19 = 168
g$20 = 172
b$21 = 176
tv70 = 180
tv72 = 184
tv75 = 188
tv76 = 192
tv81 = 196
tv130 = 200
tv131 = 204
tv147 = 208
tv148 = 212
tv206 = 216
tv350 = 220
tv352 = 224
subsample$ = 228
tv367 = 232
clamped_row$22 = 236
tv371 = 240
tv380 = 244
tv551 = 248
clamped_row$23 = 252
tv555 = 256
tv564 = 260
dataR$24 = 264
ofsG$25 = 272
ofsB$26 = 276
base_p$27 = 280
base_p$28 = 284
dataG$29 = 288
dataB$30 = 296
fdtbl_Y$ = 304
fdtbl_UV$ = 560
subU$31 = 816
subV$32 = 1072
Y$33 = 1328
U$34 = 1584
V$35 = 1840
Y$36 = 2096
U$37 = 3120
V$38 = 4144
head1$39 = 5168
YTable$ = 5200
UVTable$ = 5264
__$ArrayPad$ = 5328
s$ = 5360
width$ = 5368
height$ = 5376
comp$ = 5384
data$ = 5392
quality$ = 5400
stbi_write_jpg_core PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1398
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 5352				; 000014e8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1474
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR width$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR height$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	jg	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 1
	jge	SHORT $LN41@stbi_write
$LN42@stbi_write:
; Line 1475
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN41@stbi_write:
; Line 1478
	cmp	DWORD PTR quality$[rsp], 0
	je	SHORT $LN46@stbi_write
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN47@stbi_write
$LN46@stbi_write:
	mov	DWORD PTR tv70[rsp], 90			; 0000005aH
$LN47@stbi_write:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1479
	cmp	DWORD PTR quality$[rsp], 90		; 0000005aH
	jg	SHORT $LN48@stbi_write
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN49@stbi_write
$LN48@stbi_write:
	mov	DWORD PTR tv72[rsp], 0
$LN49@stbi_write:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR subsample$[rsp], eax
; Line 1480
	cmp	DWORD PTR quality$[rsp], 1
	jge	SHORT $LN52@stbi_write
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN53@stbi_write
$LN52@stbi_write:
	cmp	DWORD PTR quality$[rsp], 100		; 00000064H
	jle	SHORT $LN50@stbi_write
	mov	DWORD PTR tv75[rsp], 100		; 00000064H
	jmp	SHORT $LN51@stbi_write
$LN50@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN51@stbi_write:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN53@stbi_write:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1481
	cmp	DWORD PTR quality$[rsp], 50		; 00000032H
	jge	SHORT $LN54@stbi_write
	mov	eax, 5000				; 00001388H
	cdq
	idiv	DWORD PTR quality$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN55@stbi_write
$LN54@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	shl	eax, 1
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
$LN55@stbi_write:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1483
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_write:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@stbi_write
; Line 1484
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?YQT@?1??stbi_write_jpg_core@@9@9
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR yti$12[rsp], eax
; Line 1485
	cmp	DWORD PTR yti$12[rsp], 1
	jge	SHORT $LN58@stbi_write
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN59@stbi_write
$LN58@stbi_write:
	cmp	DWORD PTR yti$12[rsp], 255		; 000000ffH
	jle	SHORT $LN56@stbi_write
	mov	DWORD PTR tv130[rsp], 255		; 000000ffH
	jmp	SHORT $LN57@stbi_write
$LN56@stbi_write:
	mov	eax, DWORD PTR yti$12[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN57@stbi_write:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv131[rsp], eax
$LN59@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv131[rsp]
	mov	BYTE PTR YTable$[rsp+rax], cl
; Line 1486
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?UVQT@?1??stbi_write_jpg_core@@9@9
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR uvti$13[rsp], eax
; Line 1487
	cmp	DWORD PTR uvti$13[rsp], 1
	jge	SHORT $LN62@stbi_write
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN63@stbi_write
$LN62@stbi_write:
	cmp	DWORD PTR uvti$13[rsp], 255		; 000000ffH
	jle	SHORT $LN60@stbi_write
	mov	DWORD PTR tv147[rsp], 255		; 000000ffH
	jmp	SHORT $LN61@stbi_write
$LN60@stbi_write:
	mov	eax, DWORD PTR uvti$13[rsp]
	mov	DWORD PTR tv147[rsp], eax
$LN61@stbi_write:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN63@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv148[rsp]
	mov	BYTE PTR UVTable$[rsp+rax], cl
; Line 1488
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1490
	mov	DWORD PTR row$[rsp], 0
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR row$[rsp], 8
	jge	$LN6@stbi_write
; Line 1491
	mov	DWORD PTR col$[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi_write:
	cmp	DWORD PTR col$[rsp], 8
	jge	$LN9@stbi_write
; Line 1492
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR YTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_Y$[rsp+rax*4], xmm0
; Line 1493
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR UVTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_UV$[rsp+rax*4], xmm0
; Line 1494
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 1495
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1501
	mov	BYTE PTR head1$39[rsp], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+1], 192		; 000000c0H
	mov	BYTE PTR head1$39[rsp+2], 0
	mov	BYTE PTR head1$39[rsp+3], 17
	mov	BYTE PTR head1$39[rsp+4], 8
	mov	eax, DWORD PTR height$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+5], al
	mov	eax, DWORD PTR height$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+6], al
	mov	eax, DWORD PTR width$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+7], al
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+8], al
	mov	BYTE PTR head1$39[rsp+9], 3
	mov	BYTE PTR head1$39[rsp+10], 1
	cmp	DWORD PTR subsample$[rsp], 0
	je	SHORT $LN64@stbi_write
	mov	DWORD PTR tv206[rsp], 34		; 00000022H
	jmp	SHORT $LN65@stbi_write
$LN64@stbi_write:
	mov	DWORD PTR tv206[rsp], 17
$LN65@stbi_write:
	movzx	eax, BYTE PTR tv206[rsp]
	mov	BYTE PTR head1$39[rsp+11], al
	mov	BYTE PTR head1$39[rsp+12], 0
	mov	BYTE PTR head1$39[rsp+13], 2
	mov	BYTE PTR head1$39[rsp+14], 17
	mov	BYTE PTR head1$39[rsp+15], 1
	mov	BYTE PTR head1$39[rsp+16], 3
	mov	BYTE PTR head1$39[rsp+17], 17
	mov	BYTE PTR head1$39[rsp+18], 1
	mov	BYTE PTR head1$39[rsp+19], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+20], 196		; 000000c4H
	mov	BYTE PTR head1$39[rsp+21], 1
	mov	BYTE PTR head1$39[rsp+22], 162		; 000000a2H
	mov	BYTE PTR head1$39[rsp+23], 0
; Line 1503
	mov	r8d, 25
	lea	rdx, OFFSET FLAT:?head0@?9??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1504
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR YTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1505
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1506
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR UVTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1507
	mov	r8d, 24
	lea	rdx, QWORD PTR head1$39[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1508
	lea	rax, OFFSET FLAT:?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1509
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_luminance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1510
	mov	dl, 16
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1511
	lea	rax, OFFSET FLAT:?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1512
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_luminance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1513
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1514
	lea	rax, OFFSET FLAT:?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1515
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_chrominance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1516
	mov	dl, 17
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1517
	lea	rax, OFFSET FLAT:?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1518
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_chrominance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1519
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:?head2@?9??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1525
	mov	DWORD PTR DCY$4[rsp], 0
	mov	DWORD PTR DCU$10[rsp], 0
	mov	DWORD PTR DCV$11[rsp], 0
; Line 1526
	mov	DWORD PTR bitBuf$6[rsp], 0
	mov	DWORD PTR bitCnt$5[rsp], 0
; Line 1528
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN66@stbi_write
	mov	DWORD PTR tv350[rsp], 1
	jmp	SHORT $LN67@stbi_write
$LN66@stbi_write:
	mov	DWORD PTR tv350[rsp], 0
$LN67@stbi_write:
	mov	eax, DWORD PTR tv350[rsp]
	mov	DWORD PTR ofsG$25[rsp], eax
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN68@stbi_write
	mov	DWORD PTR tv352[rsp], 2
	jmp	SHORT $LN69@stbi_write
$LN68@stbi_write:
	mov	DWORD PTR tv352[rsp], 0
$LN69@stbi_write:
	mov	eax, DWORD PTR tv352[rsp]
	mov	DWORD PTR ofsB$26[rsp], eax
; Line 1529
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dataR$24[rsp], rax
; Line 1530
	movsxd	rax, DWORD PTR ofsG$25[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataG$29[rsp], rax
; Line 1531
	movsxd	rax, DWORD PTR ofsB$26[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataB$30[rsp], rax
; Line 1533
	cmp	DWORD PTR subsample$[rsp], 0
	je	$LN43@stbi_write
; Line 1534
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	mov	DWORD PTR y$2[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN12@stbi_write
; Line 1535
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	mov	DWORD PTR x$3[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN15@stbi_write
; Line 1537
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN19@stbi_write
$LN17@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN19@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN18@stbi_write
; Line 1539
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN70@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv367[rsp], eax
	jmp	SHORT $LN71@stbi_write
$LN70@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv367[rsp], eax
$LN71@stbi_write:
	mov	eax, DWORD PTR tv367[rsp]
	mov	DWORD PTR clamped_row$22[rsp], eax
; Line 1540
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN72@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv371[rsp], eax
	jmp	SHORT $LN73@stbi_write
$LN72@stbi_write:
	mov	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv371[rsp], eax
$LN73@stbi_write:
	mov	eax, DWORD PTR tv371[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$27[rsp], eax
; Line 1541
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN22@stbi_write
$LN20@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN22@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN21@stbi_write
; Line 1543
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN74@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv380[rsp], eax
	jmp	SHORT $LN75@stbi_write
$LN74@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv380[rsp], eax
$LN75@stbi_write:
	mov	eax, DWORD PTR tv380[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$14[rsp], eax
; Line 1544
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$15[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$16[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$17[rsp], xmm0
; Line 1545
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$16[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$36[rsp+rax*4], xmm0
; Line 1546
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$37[rsp+rax*4], xmm0
; Line 1547
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$17[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$38[rsp+rax*4], xmm0
; Line 1548
	jmp	$LN20@stbi_write
$LN21@stbi_write:
; Line 1549
	jmp	$LN17@stbi_write
$LN18@stbi_write:
; Line 1550
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 16
	lea	r9, QWORD PTR Y$36[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1551
	lea	rax, QWORD PTR Y$36[rsp+32]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1552
	lea	rax, QWORD PTR Y$36[rsp+512]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1553
	lea	rax, QWORD PTR Y$36[rsp+544]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1559
	mov	DWORD PTR yy$8[rsp], 0
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN25@stbi_write
$LN23@stbi_write:
	mov	eax, DWORD PTR yy$8[rsp]
	inc	eax
	mov	DWORD PTR yy$8[rsp], eax
$LN25@stbi_write:
	cmp	DWORD PTR yy$8[rsp], 8
	jge	$LN24@stbi_write
; Line 1560
	mov	DWORD PTR xx$9[rsp], 0
	jmp	SHORT $LN28@stbi_write
$LN26@stbi_write:
	mov	eax, DWORD PTR xx$9[rsp]
	inc	eax
	mov	DWORD PTR xx$9[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN28@stbi_write:
	cmp	DWORD PTR xx$9[rsp], 8
	jge	$LN27@stbi_write
; Line 1561
	imul	eax, DWORD PTR yy$8[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR xx$9[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR j$7[rsp], eax
; Line 1562
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR U$37[rsp+rax*4]
	addss	xmm0, DWORD PTR U$37[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subU$31[rsp+rax*4], xmm0
; Line 1563
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR V$38[rsp+rax*4]
	addss	xmm0, DWORD PTR V$38[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subV$32[rsp+rax*4], xmm0
; Line 1564
	jmp	$LN26@stbi_write
$LN27@stbi_write:
; Line 1565
	jmp	$LN23@stbi_write
$LN24@stbi_write:
; Line 1566
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subU$31[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1567
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subV$32[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1569
	jmp	$LN14@stbi_write
$LN15@stbi_write:
; Line 1570
	jmp	$LN11@stbi_write
$LN12@stbi_write:
; Line 1571
	jmp	$LN44@stbi_write
$LN43@stbi_write:
; Line 1572
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN31@stbi_write
$LN29@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	mov	DWORD PTR y$2[rsp], eax
$LN31@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN30@stbi_write
; Line 1573
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN32@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	mov	DWORD PTR x$3[rsp], eax
$LN34@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN33@stbi_write
; Line 1575
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN37@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN37@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN36@stbi_write
; Line 1577
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN76@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv551[rsp], eax
	jmp	SHORT $LN77@stbi_write
$LN76@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv551[rsp], eax
$LN77@stbi_write:
	mov	eax, DWORD PTR tv551[rsp]
	mov	DWORD PTR clamped_row$23[rsp], eax
; Line 1578
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN78@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv555[rsp], eax
	jmp	SHORT $LN79@stbi_write
$LN78@stbi_write:
	mov	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv555[rsp], eax
$LN79@stbi_write:
	mov	eax, DWORD PTR tv555[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$28[rsp], eax
; Line 1579
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN40@stbi_write
$LN38@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN40@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN39@stbi_write
; Line 1581
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN80@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv564[rsp], eax
	jmp	SHORT $LN81@stbi_write
$LN80@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv564[rsp], eax
$LN81@stbi_write:
	mov	eax, DWORD PTR tv564[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$28[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$18[rsp], eax
; Line 1582
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$19[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$20[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$21[rsp], xmm0
; Line 1583
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$20[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$33[rsp+rax*4], xmm0
; Line 1584
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$34[rsp+rax*4], xmm0
; Line 1585
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$21[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$35[rsp+rax*4], xmm0
; Line 1586
	jmp	$LN38@stbi_write
$LN39@stbi_write:
; Line 1587
	jmp	$LN35@stbi_write
$LN36@stbi_write:
; Line 1589
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR Y$33[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1590
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR U$34[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1591
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR V$35[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1592
	jmp	$LN32@stbi_write
$LN33@stbi_write:
; Line 1593
	jmp	$LN29@stbi_write
$LN30@stbi_write:
$LN44@stbi_write:
; Line 1597
	lea	r9, OFFSET FLAT:?fillBits@?L@??stbi_write_jpg_core@@9@9
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1601
	mov	dl, 255					; 000000ffH
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1602
	mov	dl, 217					; 000000d9H
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1604
	mov	eax, 1
$LN1@stbi_write:
; Line 1605
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 5352				; 000014e8H
	ret	0
stbi_write_jpg_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dataOff$ = 64
i$ = 68
end0pos$ = 72
nrzeroes$1 = 76
y$ = 80
x$ = 84
j$ = 88
v$2 = 92
nrmarker$3 = 96
EOB$ = 100
tv224 = 104
diff$ = 108
bits$4 = 112
M16zeroes$ = 116
bits$5 = 120
n$ = 124
startpos$6 = 128
lng$7 = 132
tv195 = 136
DU$ = 144
__$ArrayPad$ = 400
s$ = 448
bitBuf$ = 456
bitCnt$ = 464
CDU$ = 472
du_stride$ = 480
fdtbl$ = 488
DC$ = 496
HTDC$ = 504
HTAC$ = 512
stbiw__jpg_processDU PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1328
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1329
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp+2], ax
; Line 1330
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp+2], ax
; Line 1335
	mov	DWORD PTR dataOff$[rsp], 0
	mov	eax, DWORD PTR du_stride$[rsp]
	shl	eax, 3
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN4@stbiw__jpg
$LN2@stbiw__jpg:
	mov	eax, DWORD PTR du_stride$[rsp]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dataOff$[rsp], eax
$LN4@stbiw__jpg:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR dataOff$[rsp], eax
	jge	$LN3@stbiw__jpg
; Line 1336
	mov	eax, DWORD PTR dataOff$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, 6
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, 5
	movsxd	rdx, edx
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, 4
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR dataOff$[rsp]
	add	r9d, 3
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, 2
	movsxd	r10, r10d
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	r11d, DWORD PTR dataOff$[rsp]
	inc	r11d
	movsxd	r11, r11d
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rbx+r11*4]
	movsxd	r11, DWORD PTR dataOff$[rsp]
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [rdi+r11*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, r10
	mov	rdx, rbx
	mov	rcx, rdi
	call	stbiw__jpg_DCT
; Line 1337
	jmp	$LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1339
	mov	DWORD PTR dataOff$[rsp], 0
	jmp	SHORT $LN7@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR dataOff$[rsp]
	inc	eax
	mov	DWORD PTR dataOff$[rsp], eax
$LN7@stbiw__jpg:
	cmp	DWORD PTR dataOff$[rsp], 8
	jge	$LN6@stbiw__jpg
; Line 1340
	imul	eax, DWORD PTR du_stride$[rsp], 7
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	imul	ecx, DWORD PTR du_stride$[rsp], 6
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	imul	edx, DWORD PTR du_stride$[rsp], 5
	mov	ebx, DWORD PTR dataOff$[rsp]
	add	ebx, edx
	mov	edx, ebx
	movsxd	rdx, edx
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR dataOff$[rsp]
	mov	edi, DWORD PTR du_stride$[rsp]
	lea	ebx, DWORD PTR [rbx+rdi*4]
	movsxd	rbx, ebx
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rdi+rbx*4]
	imul	edi, DWORD PTR du_stride$[rsp], 3
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, edi
	mov	edi, r8d
	movsxd	rdi, edi
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [r8+rdi*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	mov	r9d, DWORD PTR du_stride$[rsp]
	lea	r8d, DWORD PTR [r8+r9*2]
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR du_stride$[rsp]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, r9d
	mov	r9d, r10d
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	QWORD PTR tv195[rsp], r9
	movsxd	r10, DWORD PTR dataOff$[rsp]
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, rdi
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	stbiw__jpg_DCT
; Line 1342
	jmp	$LN5@stbiw__jpg
$LN6@stbiw__jpg:
; Line 1344
	mov	DWORD PTR y$[rsp], 0
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbiw__jpg
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN10@stbiw__jpg:
	cmp	DWORD PTR y$[rsp], 8
	jge	$LN9@stbiw__jpg
; Line 1345
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN13@stbiw__jpg
$LN11@stbiw__jpg:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbiw__jpg:
	cmp	DWORD PTR x$[rsp], 8
	jge	$LN12@stbiw__jpg
; Line 1347
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR du_stride$[rsp]
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 1348
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR CDU$[rsp]
	mov	rbx, QWORD PTR fdtbl$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	mulss	xmm0, DWORD PTR [rbx+rcx*4]
	movss	DWORD PTR v$2[rsp], xmm0
; Line 1351
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN32@stbiw__jpg
	movss	xmm0, DWORD PTR v$2[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
	jmp	SHORT $LN33@stbiw__jpg
$LN32@stbiw__jpg:
	movss	xmm0, DWORD PTR v$2[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
$LN33@stbiw__jpg:
	cvttss2si eax, DWORD PTR tv224[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	lea	rdx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR DU$[rsp+rcx*4], eax
; Line 1352
	jmp	$LN11@stbiw__jpg
$LN12@stbiw__jpg:
; Line 1353
	jmp	$LN8@stbiw__jpg
$LN9@stbiw__jpg:
; Line 1356
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR DC$[rsp]
	mov	eax, DWORD PTR DU$[rsp+rax]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 1357
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN26@stbiw__jpg
; Line 1358
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTDC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1359
	jmp	SHORT $LN27@stbiw__jpg
$LN26@stbiw__jpg:
; Line 1361
	lea	rdx, QWORD PTR bits$4[rsp]
	mov	ecx, DWORD PTR diff$[rsp]
	call	stbiw__jpg_calcBits
; Line 1362
	mov	eax, 2
	imul	rax, rax, 1
	movzx	eax, WORD PTR bits$4[rsp+rax]
	mov	rcx, QWORD PTR HTDC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1363
	lea	r9, QWORD PTR bits$4[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
$LN27@stbiw__jpg:
; Line 1366
	mov	DWORD PTR end0pos$[rsp], 63		; 0000003fH
; Line 1367
	jmp	SHORT $LN16@stbiw__jpg
$LN14@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	dec	eax
	mov	DWORD PTR end0pos$[rsp], eax
$LN16@stbiw__jpg:
	cmp	DWORD PTR end0pos$[rsp], 0
	jle	SHORT $LN15@stbiw__jpg
	movsxd	rax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN15@stbiw__jpg
; Line 1368
	jmp	SHORT $LN14@stbiw__jpg
$LN15@stbiw__jpg:
; Line 1370
	cmp	DWORD PTR end0pos$[rsp], 0
	jne	SHORT $LN28@stbiw__jpg
; Line 1371
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1372
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
	jmp	$LN1@stbiw__jpg
$LN28@stbiw__jpg:
; Line 1374
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN19@stbiw__jpg
$LN17@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN18@stbiw__jpg
; Line 1375
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR startpos$6[rsp], eax
; Line 1378
	jmp	SHORT $LN22@stbiw__jpg
$LN20@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbiw__jpg:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN21@stbiw__jpg
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN21@stbiw__jpg
; Line 1379
	jmp	SHORT $LN20@stbiw__jpg
$LN21@stbiw__jpg:
; Line 1380
	mov	eax, DWORD PTR startpos$6[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nrzeroes$1[rsp], eax
; Line 1381
	cmp	DWORD PTR nrzeroes$1[rsp], 16
	jl	SHORT $LN29@stbiw__jpg
; Line 1382
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	sar	eax, 4
	mov	DWORD PTR lng$7[rsp], eax
; Line 1384
	mov	DWORD PTR nrmarker$3[rsp], 1
	jmp	SHORT $LN25@stbiw__jpg
$LN23@stbiw__jpg:
	mov	eax, DWORD PTR nrmarker$3[rsp]
	inc	eax
	mov	DWORD PTR nrmarker$3[rsp], eax
$LN25@stbiw__jpg:
	mov	eax, DWORD PTR lng$7[rsp]
	cmp	DWORD PTR nrmarker$3[rsp], eax
	jg	SHORT $LN24@stbiw__jpg
; Line 1385
	lea	r9, QWORD PTR M16zeroes$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
	jmp	SHORT $LN23@stbiw__jpg
$LN24@stbiw__jpg:
; Line 1386
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	and	eax, 15
	mov	DWORD PTR nrzeroes$1[rsp], eax
$LN29@stbiw__jpg:
; Line 1388
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, QWORD PTR bits$5[rsp]
	mov	ecx, DWORD PTR DU$[rsp+rax*4]
	call	stbiw__jpg_calcBits
; Line 1389
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	shl	eax, 4
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	ecx, WORD PTR bits$5[rsp+rcx]
	add	eax, ecx
	cdqe
	mov	rcx, QWORD PTR HTAC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1390
	lea	r9, QWORD PTR bits$5[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1391
	jmp	$LN17@stbiw__jpg
$LN18@stbiw__jpg:
; Line 1392
	cmp	DWORD PTR end0pos$[rsp], 63		; 0000003fH
	je	SHORT $LN30@stbiw__jpg
; Line 1393
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
$LN30@stbiw__jpg:
; Line 1395
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
$LN1@stbiw__jpg:
; Line 1396
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
stbiw__jpg_processDU ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp1$ = 0
tv66 = 4
tv69 = 8
tv140 = 12
val$ = 32
bits$ = 40
stbiw__jpg_calcBits PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1319
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN5@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	neg	eax
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN6@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN6@stbiw__jpg:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tmp1$[rsp], eax
; Line 1320
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN7@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN8@stbiw__jpg
$LN7@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR val$[rsp], eax
; Line 1321
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@stbiw__jpg:
; Line 1322
	mov	eax, DWORD PTR tmp1$[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp1$[rsp], eax
	cmp	DWORD PTR tmp1$[rsp], 0
	je	SHORT $LN3@stbiw__jpg
; Line 1323
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	inc	ax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1324
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1325
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 1
	mov	DWORD PTR tv140[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rsp]
	shl	eax, cl
	dec	eax
	mov	ecx, DWORD PTR val$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1326
	add	rsp, 24
	ret	0
stbiw__jpg_calcBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp10$ = 0
tmp12$ = 4
tmp11$ = 8
d0$ = 12
d2$ = 16
d4$ = 20
d6$ = 24
tmp13$ = 28
tmp7$ = 32
d7$ = 36
d1$ = 40
d5$ = 44
d3$ = 48
tmp0$ = 52
tmp3$ = 56
tmp1$ = 60
tmp2$ = 64
z1$ = 68
tmp5$ = 72
tmp6$ = 76
z5$ = 80
z3$ = 84
z13$ = 88
z2$ = 92
z11$ = 96
z4$ = 100
tmp4$ = 104
d0p$ = 128
d1p$ = 136
d2p$ = 144
d3p$ = 152
d4p$ = 160
d5p$ = 168
d6p$ = 176
d7p$ = 184
stbiw__jpg_DCT PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1270
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1271
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d0$[rsp], xmm0
	mov	rax, QWORD PTR d1p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d1$[rsp], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d2$[rsp], xmm0
	mov	rax, QWORD PTR d3p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d3$[rsp], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d4$[rsp], xmm0
	mov	rax, QWORD PTR d5p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d5$[rsp], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d6$[rsp], xmm0
	mov	rax, QWORD PTR d7p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d7$[rsp], xmm0
; Line 1274
	movss	xmm0, DWORD PTR d0$[rsp]
	addss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp0$[rsp], xmm0
; Line 1275
	movss	xmm0, DWORD PTR d0$[rsp]
	subss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp7$[rsp], xmm0
; Line 1276
	movss	xmm0, DWORD PTR d1$[rsp]
	addss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp1$[rsp], xmm0
; Line 1277
	movss	xmm0, DWORD PTR d1$[rsp]
	subss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp6$[rsp], xmm0
; Line 1278
	movss	xmm0, DWORD PTR d2$[rsp]
	addss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp2$[rsp], xmm0
; Line 1279
	movss	xmm0, DWORD PTR d2$[rsp]
	subss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp5$[rsp], xmm0
; Line 1280
	movss	xmm0, DWORD PTR d3$[rsp]
	addss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp3$[rsp], xmm0
; Line 1281
	movss	xmm0, DWORD PTR d3$[rsp]
	subss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp4$[rsp], xmm0
; Line 1284
	movss	xmm0, DWORD PTR tmp0$[rsp]
	addss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1285
	movss	xmm0, DWORD PTR tmp0$[rsp]
	subss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp13$[rsp], xmm0
; Line 1286
	movss	xmm0, DWORD PTR tmp1$[rsp]
	addss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1287
	movss	xmm0, DWORD PTR tmp1$[rsp]
	subss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1289
	movss	xmm0, DWORD PTR tmp10$[rsp]
	addss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d0$[rsp], xmm0
; Line 1290
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d4$[rsp], xmm0
; Line 1292
	movss	xmm0, DWORD PTR tmp12$[rsp]
	addss	xmm0, DWORD PTR tmp13$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z1$[rsp], xmm0
; Line 1293
	movss	xmm0, DWORD PTR tmp13$[rsp]
	addss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d2$[rsp], xmm0
; Line 1294
	movss	xmm0, DWORD PTR tmp13$[rsp]
	subss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d6$[rsp], xmm0
; Line 1297
	movss	xmm0, DWORD PTR tmp4$[rsp]
	addss	xmm0, DWORD PTR tmp5$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1298
	movss	xmm0, DWORD PTR tmp5$[rsp]
	addss	xmm0, DWORD PTR tmp6$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1299
	movss	xmm0, DWORD PTR tmp6$[rsp]
	addss	xmm0, DWORD PTR tmp7$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1302
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3ec3ef15
	movss	DWORD PTR z5$[rsp], xmm0
; Line 1303
	movss	xmm0, DWORD PTR tmp10$[rsp]
	mulss	xmm0, DWORD PTR __real@3f0a8bd4
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 1304
	movss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3fa73d75
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z4$[rsp], xmm0
; Line 1305
	movss	xmm0, DWORD PTR tmp11$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z3$[rsp], xmm0
; Line 1307
	movss	xmm0, DWORD PTR tmp7$[rsp]
	addss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z11$[rsp], xmm0
; Line 1308
	movss	xmm0, DWORD PTR tmp7$[rsp]
	subss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z13$[rsp], xmm0
; Line 1310
	movss	xmm0, DWORD PTR z13$[rsp]
	addss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d5p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1311
	movss	xmm0, DWORD PTR z13$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d3p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1312
	movss	xmm0, DWORD PTR z11$[rsp]
	addss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d1p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1313
	movss	xmm0, DWORD PTR z11$[rsp]
	subss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d7p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1315
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR d0$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR d2$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1316
	add	rsp, 120				; 00000078H
	ret	0
stbiw__jpg_DCT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
bitCnt$ = 36
bitBuf$ = 40
s$ = 64
bitBufP$ = 72
bitCntP$ = 80
bs$ = 88
stbiw__jpg_writeBits PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1253
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1254
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitBuf$[rsp], eax
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1255
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1256
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 24
	sub	ecx, DWORD PTR bitCnt$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitBuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitBuf$[rsp], eax
$LN2@stbiw__jpg:
; Line 1257
	cmp	DWORD PTR bitCnt$[rsp], 8
	jl	SHORT $LN3@stbiw__jpg
; Line 1258
	mov	eax, DWORD PTR bitBuf$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c$1[rsp], al
; Line 1259
	movzx	edx, BYTE PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1260
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@stbiw__jpg
; Line 1261
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
$LN4@stbiw__jpg:
; Line 1263
	mov	eax, DWORD PTR bitBuf$[rsp]
	shl	eax, 8
	mov	DWORD PTR bitBuf$[rsp], eax
; Line 1264
	mov	eax, DWORD PTR bitCnt$[rsp]
	sub	eax, 8
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1265
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1266
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	ecx, DWORD PTR bitBuf$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1267
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1268
	add	rsp, 56					; 00000038H
	ret	0
stbiw__jpg_writeBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 64
filter_type$1 = 72
zlen$ = 76
j$ = 80
force_filter$ = 84
i$2 = 88
est$3 = 92
best_filter$4 = 96
line_buffer$ = 104
filt$ = 112
best_filter_val$5 = 120
out$ = 128
zlib$ = 136
tv72 = 144
tv85 = 152
tv257 = 160
$T6 = 176
$T7 = 208
$T8 = 240
$T9 = 272
$T10 = 304
$T11 = 336
$T12 = 368
$T13 = 400
$T14 = 432
$T15 = 464
$T16 = 496
$T17 = 528
$T18 = 560
$T19 = 592
ctype$ = 624
sig$ = 648
__$ArrayPad$ = 656
pixels$ = 704
stride_bytes$ = 712
x$ = 720
y$ = 728
n$ = 736
out_len$ = 744
stbi_write_png_to_mem PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1129
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 680				; 000002a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1130
	mov	eax, DWORD PTR stbi_write_force_png_filter
	mov	DWORD PTR force_filter$[rsp], eax
; Line 1131
	mov	DWORD PTR ctype$[rsp], -1
	mov	DWORD PTR ctype$[rsp+4], 0
	mov	DWORD PTR ctype$[rsp+8], 4
	mov	DWORD PTR ctype$[rsp+12], 2
	mov	DWORD PTR ctype$[rsp+16], 6
; Line 1132
	mov	BYTE PTR sig$[rsp], 137			; 00000089H
	mov	BYTE PTR sig$[rsp+1], 80		; 00000050H
	mov	BYTE PTR sig$[rsp+2], 78		; 0000004eH
	mov	BYTE PTR sig$[rsp+3], 71		; 00000047H
	mov	BYTE PTR sig$[rsp+4], 13
	mov	BYTE PTR sig$[rsp+5], 10
	mov	BYTE PTR sig$[rsp+6], 26
	mov	BYTE PTR sig$[rsp+7], 10
; Line 1137
	cmp	DWORD PTR stride_bytes$[rsp], 0
	jne	SHORT $LN11@stbi_write
; Line 1138
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR stride_bytes$[rsp], eax
$LN11@stbi_write:
; Line 1140
	cmp	DWORD PTR force_filter$[rsp], 5
	jl	SHORT $LN12@stbi_write
; Line 1141
	mov	DWORD PTR force_filter$[rsp], -1
$LN12@stbi_write:
; Line 1144
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	cdqe
	mov	QWORD PTR tv72[rsp], rax
	lea	rcx, OFFSET FLAT:$SG81164
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1144				; 00000478H
	lea	r8, OFFSET FLAT:$SG81165
	mov	edx, 132				; 00000084H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv72[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
	mov	QWORD PTR filt$[rsp], rax
	cmp	QWORD PTR filt$[rsp], 0
	jne	SHORT $LN13@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN13@stbi_write:
; Line 1145
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	QWORD PTR tv85[rsp], rax
	lea	rcx, OFFSET FLAT:$SG81167
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1145				; 00000479H
	lea	r8, OFFSET FLAT:$SG81168
	mov	edx, 133				; 00000085H
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv85[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccuserallocator_
	mov	QWORD PTR line_buffer$[rsp], rax
	cmp	QWORD PTR line_buffer$[rsp], 0
	jne	SHORT $LN14@stbi_write
	lea	rax, OFFSET FLAT:$SG81170
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1145				; 00000479H
	lea	r8, OFFSET FLAT:$SG81171
	mov	edx, 134				; 00000086H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR filt$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN14@stbi_write:
; Line 1146
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi_write
; Line 1148
	cmp	DWORD PTR force_filter$[rsp], -1
	jle	SHORT $LN15@stbi_write
; Line 1149
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
; Line 1150
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1151
	jmp	$LN16@stbi_write
$LN15@stbi_write:
; Line 1152
	mov	DWORD PTR best_filter$4[rsp], 0
	mov	DWORD PTR best_filter_val$5[rsp], 2147483647 ; 7fffffffH
; Line 1153
	mov	DWORD PTR filter_type$1[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR filter_type$1[rsp]
	inc	eax
	mov	DWORD PTR filter_type$1[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR filter_type$1[rsp], 5
	jge	$LN6@stbi_write
; Line 1154
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1157
	mov	DWORD PTR est$3[rsp], 0
; Line 1158
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@stbi_write
; Line 1159
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	abs
	mov	ecx, DWORD PTR est$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR est$3[rsp], eax
; Line 1160
	jmp	SHORT $LN8@stbi_write
$LN9@stbi_write:
; Line 1161
	mov	eax, DWORD PTR best_filter_val$5[rsp]
	cmp	DWORD PTR est$3[rsp], eax
	jge	SHORT $LN17@stbi_write
; Line 1162
	mov	eax, DWORD PTR est$3[rsp]
	mov	DWORD PTR best_filter_val$5[rsp], eax
; Line 1163
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR best_filter$4[rsp], eax
$LN17@stbi_write:
; Line 1165
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1166
	mov	eax, DWORD PTR best_filter$4[rsp]
	cmp	DWORD PTR filter_type$1[rsp], eax
	je	SHORT $LN18@stbi_write
; Line 1167
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1168
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
$LN18@stbi_write:
$LN16@stbi_write:
; Line 1172
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR filt$[rsp]
	movzx	edx, BYTE PTR filter_type$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 1173
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR n$[rsp]
	inc	ecx
	mov	edx, DWORD PTR j$[rsp]
	imul	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filt$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR line_buffer$[rsp]
	call	memmove
; Line 1174
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1175
	lea	rax, OFFSET FLAT:$SG81176
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1175				; 00000497H
	lea	r8, OFFSET FLAT:$SG81177
	mov	edx, 135				; 00000087H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR line_buffer$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
; Line 1176
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR stbi_write_png_compression_level
	lea	r8, QWORD PTR zlen$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR filt$[rsp]
	call	stbi_zlib_compress
	mov	QWORD PTR zlib$[rsp], rax
; Line 1177
	lea	rax, OFFSET FLAT:$SG81178
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1177				; 00000499H
	lea	r8, OFFSET FLAT:$SG81179
	mov	edx, 136				; 00000088H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR filt$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
; Line 1178
	cmp	QWORD PTR zlib$[rsp], 0
	jne	SHORT $LN19@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN19@stbi_write:
; Line 1181
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	cdqe
	mov	QWORD PTR tv257[rsp], rax
	lea	rcx, OFFSET FLAT:$SG81181
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1181				; 0000049dH
	lea	r8, OFFSET FLAT:$SG81182
	mov	edx, 137				; 00000089H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv257[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	mov	QWORD PTR out$[rsp], rax
; Line 1182
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN20@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN20@stbi_write:
; Line 1183
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1185
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
; Line 1186
	mov	r8d, 8
	lea	rdx, QWORD PTR sig$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 8
	mov	QWORD PTR o$[rsp], rax
; Line 1187
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 13
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1188
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG81184
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG81185
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG81186
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG81187
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1189
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1191
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 8
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1192
	movsxd	rax, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR ctype$[rsp+rax*4]
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1193
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1194
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1195
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1196
	mov	edx, 13
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1198
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG81188
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG81189
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG81190
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG81191
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1200
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR zlib$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
; Line 1201
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
; Line 1202
	lea	rax, OFFSET FLAT:$SG81192
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1202				; 000004b2H
	lea	r8, OFFSET FLAT:$SG81193
	mov	edx, 138				; 0000008aH
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR zlib$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 1203
	mov	edx, DWORD PTR zlen$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1205
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1206
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG81194
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG81195
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG81196
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG81197
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1207
	xor	edx, edx
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1209
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR o$[rsp], rax
	je	SHORT $LN22@stbi_write
	mov	r8d, 1209				; 000004b9H
	lea	rdx, OFFSET FLAT:$SG81198
	lea	rcx, OFFSET FLAT:$SG81199
	call	_wassert
	xor	eax, eax
$LN22@stbi_write:
; Line 1211
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi_write:
; Line 1212
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 680				; 000002a8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png_to_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 40
signed_stride$ = 48
tv87 = 52
tv188 = 56
type$ = 60
tv72 = 64
tv78 = 68
tv161 = 72
tv275 = 76
tv256 = 80
tv307 = 84
tv65 = 88
mymap$ = 96
pixels$ = 128
stride_bytes$ = 136
width$ = 144
height$ = 152
y$ = 160
n$ = 168
filter_type$ = 176
line_buffer$ = 184
stbiw__encode_png_line PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1093
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1096
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN41@stbiw__enc
	lea	rax, OFFSET FLAT:?mapping@?1??stbiw__encode_png_line@@9@9
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN42@stbiw__enc
$LN41@stbiw__enc:
	lea	rax, OFFSET FLAT:?firstmap@?1??stbiw__encode_png_line@@9@9
	mov	QWORD PTR tv65[rsp], rax
$LN42@stbiw__enc:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR mymap$[rsp], rax
; Line 1098
	movsxd	rax, DWORD PTR filter_type$[rsp]
	mov	rcx, QWORD PTR mymap$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR type$[rsp], eax
; Line 1099
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN43@stbiw__enc
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN44@stbiw__enc
$LN43@stbiw__enc:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN44@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	imul	eax, DWORD PTR tv72[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 1100
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN45@stbiw__enc
	mov	eax, DWORD PTR stride_bytes$[rsp]
	neg	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN46@stbiw__enc
$LN45@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN46@stbiw__enc:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR signed_stride$[rsp], eax
; Line 1102
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN27@stbiw__enc
; Line 1103
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	memcpy
; Line 1104
	jmp	$LN1@stbiw__enc
$LN27@stbiw__enc:
; Line 1108
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__enc
$LN2@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__enc:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbiw__enc
; Line 1109
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 5
	ja	$LN5@stbiw__enc
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN48@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN28@stbiw__enc:
; Line 1110
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN29@stbiw__enc:
; Line 1111
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN30@stbiw__enc:
; Line 1112
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN31@stbiw__enc:
; Line 1113
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv161[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv161[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN32@stbiw__enc:
; Line 1114
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN33@stbiw__enc:
; Line 1115
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbiw__enc:
; Line 1117
	jmp	$LN2@stbiw__enc
$LN3@stbiw__enc:
; Line 1118
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	dec	eax
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 5
	ja	$LN7@stbiw__enc
	movsxd	rax, DWORD PTR tv188[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN47@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN34@stbiw__enc:
; Line 1119
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN11@stbiw__enc
$LN9@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN11@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN10@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN9@stbiw__enc
$LN10@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN35@stbiw__enc:
; Line 1120
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN14@stbiw__enc
$LN12@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN13@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbiw__enc
$LN13@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN36@stbiw__enc:
; Line 1121
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN17@stbiw__enc
$LN15@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN16@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbiw__enc
$LN16@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN37@stbiw__enc:
; Line 1122
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN20@stbiw__enc
$LN18@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv256[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR n$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR n$[rsp]
	mov	r9d, DWORD PTR i$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR z$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv275[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv275[rsp]
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv256[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN18@stbiw__enc
$LN19@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN38@stbiw__enc:
; Line 1123
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN23@stbiw__enc
$LN21@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN21@stbiw__enc
$LN22@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN39@stbiw__enc:
; Line 1124
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN26@stbiw__enc
$LN24@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN25@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv307[rsp], eax
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv307[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbiw__enc
$LN25@stbiw__enc:
$LN7@stbiw__enc:
$LN1@stbiw__enc:
; Line 1126
	add	rsp, 120				; 00000078H
	ret	0
	npad	1
$LN48@stbiw__enc:
	DD	$LN28@stbiw__enc
	DD	$LN29@stbiw__enc
	DD	$LN30@stbiw__enc
	DD	$LN31@stbiw__enc
	DD	$LN32@stbiw__enc
	DD	$LN33@stbiw__enc
$LN47@stbiw__enc:
	DD	$LN34@stbiw__enc
	DD	$LN35@stbiw__enc
	DD	$LN36@stbiw__enc
	DD	$LN37@stbiw__enc
	DD	$LN38@stbiw__enc
	DD	$LN39@stbiw__enc
stbiw__encode_png_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
stbiw__paeth PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1084
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1085
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 1086
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN2@stbiw__pae:
; Line 1087
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbiw__pae
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN3@stbiw__pae:
; Line 1088
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 255				; 000000ffH
$LN1@stbiw__pae:
; Line 1089
	add	rsp, 56					; 00000038H
	ret	0
stbiw__paeth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
crc$ = 32
data$ = 64
len$ = 72
stbiw__wpcrc PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1078
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1079
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 4
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rcx
	mov	rcx, rdx
	sub	rcx, 4
	mov	edx, eax
	call	stbiw__crc32
	mov	DWORD PTR crc$[rsp], eax
; Line 1080
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1081
	add	rsp, 56					; 00000038H
	ret	0
stbiw__wpcrc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
crc$ = 4
buffer$ = 32
len$ = 40
stbiw__crc32 PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1025
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1065
	mov	DWORD PTR crc$[rsp], -1			; ffffffffH
; Line 1067
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__crc
$LN2@stbiw__crc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__crc:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__crc
; Line 1068
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stbiw__crc32@@9@9
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN2@stbiw__crc
$LN3@stbiw__crc:
; Line 1069
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 1071
	add	rsp, 24
	ret	0
stbiw__crc32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
bitcount$ = 56
j$ = 60
bitbuf$ = 64
i$ = 68
h$1 = 72
blocklen$2 = 76
hash_table$ = 80
best$3 = 88
s1$4 = 92
s2$5 = 96
hlist$6 = 104
n$7 = 112
d$8 = 116
blocklen$9 = 120
tv195 = 124
d$10 = 128
tv318 = 132
tv649 = 136
bestloc$11 = 144
tv1104 = 152
tv1109 = 156
e$12 = 160
tv1276 = 164
tv595 = 168
tv417 = 176
tv418 = 184
tv89 = 192
tv148 = 200
tv211 = 208
tv242 = 216
tv276 = 224
tv336 = 232
tv419 = 240
tv517 = 248
tv557 = 256
tv585 = 264
tv606 = 272
tv633 = 280
tv664 = 288
tv693 = 296
tv723 = 304
tv753 = 312
tv781 = 320
tv817 = 328
tv847 = 336
tv876 = 344
tv906 = 352
$T13 = 368
$T14 = 400
$T15 = 432
$T16 = 464
$T17 = 496
$T18 = 528
data$ = 592
data_len$ = 600
out_len$ = 608
quality$ = 616
stbi_zlib_compress PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 896
$LN94:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
; Line 905
	mov	DWORD PTR bitbuf$[rsp], 0
; Line 906
	mov	DWORD PTR bitcount$[rsp], 0
; Line 907
	mov	QWORD PTR out$[rsp], 0
; Line 908
	lea	rax, OFFSET FLAT:$SG80952
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 908				; 0000038cH
	lea	r8, OFFSET FLAT:$SG80953
	mov	edx, 129				; 00000081H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 131072				; 00020000H
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
	mov	QWORD PTR hash_table$[rsp], rax
; Line 909
	cmp	QWORD PTR hash_table$[rsp], 0
	jne	SHORT $LN35@stbi_zlib_
; Line 910
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN35@stbi_zlib_:
; Line 911
	cmp	DWORD PTR quality$[rsp], 5
	jge	SHORT $LN36@stbi_zlib_
	mov	DWORD PTR quality$[rsp], 5
$LN36@stbi_zlib_:
; Line 913
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN50@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN50@stbi_zlib_
	mov	QWORD PTR tv89[rsp], 0
	jmp	SHORT $LN51@stbi_zlib_
$LN50@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv89[rsp], rax
$LN51@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 120			; 00000078H
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 914
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN52@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN52@stbi_zlib_
	mov	QWORD PTR tv148[rsp], 0
	jmp	SHORT $LN53@stbi_zlib_
$LN52@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv148[rsp], rax
$LN53@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 94			; 0000005eH
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 915
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1104[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1104[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 916
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1109[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1109[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 2
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 918
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_zlib_
$LN2@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN3@stbi_zlib_
; Line 919
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stbi_zlib_
$LN3@stbi_zlib_:
; Line 921
	mov	DWORD PTR i$[rsp], 0
$LN5@stbi_zlib_:
; Line 922
	mov	eax, DWORD PTR data_len$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi_zlib_
; Line 924
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
	mov	DWORD PTR best$3[rsp], 3
; Line 925
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 926
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 927
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN54@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv195[rsp], eax
	jmp	SHORT $LN55@stbi_zlib_
$LN54@stbi_zlib_:
	mov	DWORD PTR tv195[rsp], 0
$LN55@stbi_zlib_:
	mov	eax, DWORD PTR tv195[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 928
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi_zlib_
$LN7@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi_zlib_
; Line 929
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32768				; 00008000H
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	$LN37@stbi_zlib_
; Line 930
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv211[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv211[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	stbiw__zlib_countm
	mov	DWORD PTR d$10[rsp], eax
; Line 931
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR d$10[rsp], eax
	jl	SHORT $LN38@stbi_zlib_
	mov	eax, DWORD PTR d$10[rsp]
	mov	DWORD PTR best$3[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR bestloc$11[rsp], rax
$LN38@stbi_zlib_:
$LN37@stbi_zlib_:
; Line 933
	jmp	$LN7@stbi_zlib_
$LN8@stbi_zlib_:
; Line 935
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN39@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	shl	edx, 1
	cmp	DWORD PTR [rax+rcx-8], edx
	jne	SHORT $LN39@stbi_zlib_
; Line 936
	movsxd	rax, DWORD PTR quality$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR quality$[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdi+rcx*8]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	QWORD PTR tv242[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR tv242[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	memmove
; Line 937
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN39@stbi_zlib_:
; Line 939
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN56@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN56@stbi_zlib_
	mov	QWORD PTR tv276[rsp], 0
	jmp	SHORT $LN57@stbi_zlib_
$LN56@stbi_zlib_:
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8
	mov	edx, 1
	mov	rcx, rax
	call	stbiw__sbgrowf
	mov	QWORD PTR tv276[rsp], rax
$LN57@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	edi, 4
	imul	rdi, rdi, 1
	movsxd	rdx, DWORD PTR [rdx+rdi-8]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdi+rcx*8]
	mov	QWORD PTR [rcx+rdx*8], rax
	mov	eax, 4
	imul	rax, rax, 1
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 941
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN40@stbi_zlib_
; Line 943
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
; Line 944
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 945
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN58@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv318[rsp], eax
	jmp	SHORT $LN59@stbi_zlib_
$LN58@stbi_zlib_:
	mov	DWORD PTR tv318[rsp], 0
$LN59@stbi_zlib_:
	mov	eax, DWORD PTR tv318[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 946
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN12@stbi_zlib_
$LN10@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN12@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN11@stbi_zlib_
; Line 947
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32767				; 00007fffH
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN41@stbi_zlib_
; Line 948
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv336[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv336[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	stbiw__zlib_countm
	mov	DWORD PTR e$12[rsp], eax
; Line 949
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR e$12[rsp], eax
	jle	SHORT $LN42@stbi_zlib_
; Line 950
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 951
	jmp	SHORT $LN11@stbi_zlib_
$LN42@stbi_zlib_:
$LN41@stbi_zlib_:
; Line 954
	jmp	$LN10@stbi_zlib_
$LN11@stbi_zlib_:
$LN40@stbi_zlib_:
; Line 957
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN43@stbi_zlib_
; Line 958
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR bestloc$11[rsp]
	mov	DWORD PTR d$8[rsp], eax
; Line 959
	cmp	DWORD PTR d$8[rsp], 32767		; 00007fffH
	jg	SHORT $LN60@stbi_zlib_
	cmp	DWORD PTR best$3[rsp], 258		; 00000102H
	jle	SHORT $LN61@stbi_zlib_
$LN60@stbi_zlib_:
	mov	r8d, 959				; 000003bfH
	lea	rdx, OFFSET FLAT:$SG80964
	lea	rcx, OFFSET FLAT:$SG80965
	call	_wassert
	xor	eax, eax
$LN61@stbi_zlib_:
; Line 960
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi_zlib_
$LN13@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR best$3[rsp], eax
	jle	SHORT $LN14@stbi_zlib_
	jmp	SHORT $LN13@stbi_zlib_
$LN14@stbi_zlib_:
; Line 961
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN66@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 305				; 00000131H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv419[rsp], rax
	jmp	$LN67@stbi_zlib_
$LN66@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 255				; 000000ffH
	jg	SHORT $LN64@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 513				; 00000201H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv418[rsp], rax
	jmp	$LN65@stbi_zlib_
$LN64@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 279				; 00000117H
	jg	SHORT $LN62@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	edx, 7
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv417[rsp], rax
	jmp	SHORT $LN63@stbi_zlib_
$LN62@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 169				; 000000a9H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv417[rsp], rax
$LN63@stbi_zlib_:
	mov	rax, QWORD PTR tv417[rsp]
	mov	QWORD PTR tv418[rsp], rax
$LN65@stbi_zlib_:
	mov	rax, QWORD PTR tv418[rsp]
	mov	QWORD PTR tv419[rsp], rax
$LN67@stbi_zlib_:
; Line 962
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN45@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR best$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN45@stbi_zlib_:
; Line 963
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi_zlib_
$LN16@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR d$8[rsp], eax
	jle	SHORT $LN17@stbi_zlib_
	jmp	SHORT $LN16@stbi_zlib_
$LN17@stbi_zlib_:
; Line 964
	mov	edx, 5
	mov	ecx, DWORD PTR j$[rsp]
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 5
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 965
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN46@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR d$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN46@stbi_zlib_:
; Line 966
	mov	eax, DWORD PTR best$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
; Line 967
	jmp	$LN44@stbi_zlib_
$LN43@stbi_zlib_:
; Line 968
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN68@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv517[rsp], rax
	jmp	SHORT $LN69@stbi_zlib_
$LN68@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv517[rsp], rax
$LN69@stbi_zlib_:
; Line 969
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN44@stbi_zlib_:
; Line 971
	jmp	$LN5@stbi_zlib_
$LN6@stbi_zlib_:
; Line 973
	jmp	SHORT $LN21@stbi_zlib_
$LN19@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN20@stbi_zlib_
; Line 974
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN70@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv557[rsp], rax
	jmp	SHORT $LN71@stbi_zlib_
$LN70@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv557[rsp], rax
$LN71@stbi_zlib_:
	jmp	$LN19@stbi_zlib_
$LN20@stbi_zlib_:
; Line 975
	mov	edx, 7
	xor	ecx, ecx
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN22@stbi_zlib_:
; Line 977
	cmp	DWORD PTR bitcount$[rsp], 0
	je	SHORT $LN23@stbi_zlib_
; Line 978
	mov	eax, DWORD PTR bitcount$[rsp]
	xor	ecx, ecx
	mov	DWORD PTR tv1276[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1276[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN22@stbi_zlib_
$LN23@stbi_zlib_:
; Line 980
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN26@stbi_zlib_
$LN24@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	$LN25@stbi_zlib_
; Line 981
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN72@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, 8
	mov	QWORD PTR tv585[rsp], rax
	lea	rcx, OFFSET FLAT:$SG80968
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 981				; 000003d5H
	lea	r8, OFFSET FLAT:$SG80969
	mov	edx, 130				; 00000082H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tv585[rsp]
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
	mov	DWORD PTR tv595[rsp], 0
	jmp	SHORT $LN73@stbi_zlib_
$LN72@stbi_zlib_:
	mov	DWORD PTR tv595[rsp], 0
$LN73@stbi_zlib_:
	jmp	$LN24@stbi_zlib_
$LN25@stbi_zlib_:
; Line 982
	lea	rax, OFFSET FLAT:$SG80970
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 982				; 000003d6H
	lea	r8, OFFSET FLAT:$SG80971
	mov	edx, 131				; 00000083H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hash_table$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccuserallocator_
; Line 985
	mov	eax, 4
	imul	rax, rax, 1
	mov	QWORD PTR tv606[rsp], rax
	mov	ecx, DWORD PTR data_len$[rsp]
	add	ecx, 32766				; 00007ffeH
	mov	eax, ecx
	cdq
	mov	ecx, 32767				; 00007fffH
	idiv	ecx
	imul	eax, eax, 5
	mov	ecx, DWORD PTR data_len$[rsp]
	lea	eax, DWORD PTR [rcx+rax+2]
	mov	rcx, QWORD PTR out$[rsp]
	mov	rdx, QWORD PTR tv606[rsp]
	cmp	DWORD PTR [rcx+rdx-8], eax
	jle	$LN47@stbi_zlib_
; Line 986
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rcx+rax-8], 2
; Line 987
	mov	DWORD PTR j$[rsp], 0
$LN27@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN28@stbi_zlib_
; Line 988
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR blocklen$2[rsp], eax
; Line 989
	cmp	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
	jle	SHORT $LN48@stbi_zlib_
	mov	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
$LN48@stbi_zlib_:
; Line 990
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN74@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN74@stbi_zlib_
	mov	QWORD PTR tv633[rsp], 0
	jmp	SHORT $LN75@stbi_zlib_
$LN74@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv633[rsp], rax
$LN75@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR blocklen$2[rsp]
	jne	SHORT $LN76@stbi_zlib_
	mov	DWORD PTR tv649[rsp], 1
	jmp	SHORT $LN77@stbi_zlib_
$LN76@stbi_zlib_:
	mov	DWORD PTR tv649[rsp], 0
$LN77@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv649[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 991
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN78@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN78@stbi_zlib_
	mov	QWORD PTR tv664[rsp], 0
	jmp	SHORT $LN79@stbi_zlib_
$LN78@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv664[rsp], rax
$LN79@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 992
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN80@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN80@stbi_zlib_
	mov	QWORD PTR tv693[rsp], 0
	jmp	SHORT $LN81@stbi_zlib_
$LN80@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv693[rsp], rax
$LN81@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 993
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN82@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN82@stbi_zlib_
	mov	QWORD PTR tv723[rsp], 0
	jmp	SHORT $LN83@stbi_zlib_
$LN82@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv723[rsp], rax
$LN83@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 994
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN84@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN84@stbi_zlib_
	mov	QWORD PTR tv753[rsp], 0
	jmp	SHORT $LN85@stbi_zlib_
$LN84@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv753[rsp], rax
$LN85@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 995
	movsxd	rax, DWORD PTR blocklen$2[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	rdi, QWORD PTR out$[rsp]
	movsxd	rdx, DWORD PTR [rdi+rdx-8]
	mov	rdi, QWORD PTR out$[rsp]
	add	rdi, rdx
	mov	rdx, rdi
	mov	QWORD PTR tv781[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv781[rsp]
	mov	rcx, rax
	call	memcpy
; Line 996
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	add	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 997
	mov	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 998
	jmp	$LN27@stbi_zlib_
$LN28@stbi_zlib_:
$LN47@stbi_zlib_:
; Line 1003
	mov	DWORD PTR s1$4[rsp], 1
	mov	DWORD PTR s2$5[rsp], 0
; Line 1004
	mov	eax, DWORD PTR data_len$[rsp]
	cdq
	mov	ecx, 5552				; 000015b0H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$9[rsp], eax
; Line 1005
	mov	DWORD PTR j$[rsp], 0
$LN30@stbi_zlib_:
; Line 1006
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN31@stbi_zlib_
; Line 1007
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi_zlib_
$LN32@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$9[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi_zlib_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$4[rsp], eax
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, DWORD PTR s2$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$5[rsp], eax
	jmp	SHORT $LN32@stbi_zlib_
$LN33@stbi_zlib_:
; Line 1008
	xor	edx, edx
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$4[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$5[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$5[rsp], eax
; Line 1009
	mov	eax, DWORD PTR blocklen$9[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 1010
	mov	DWORD PTR blocklen$9[rsp], 5552		; 000015b0H
; Line 1011
	jmp	$LN30@stbi_zlib_
$LN31@stbi_zlib_:
; Line 1012
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN86@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN86@stbi_zlib_
	mov	QWORD PTR tv817[rsp], 0
	jmp	SHORT $LN87@stbi_zlib_
$LN86@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv817[rsp], rax
$LN87@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1013
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN88@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN88@stbi_zlib_
	mov	QWORD PTR tv847[rsp], 0
	jmp	SHORT $LN89@stbi_zlib_
$LN88@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv847[rsp], rax
$LN89@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1014
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN90@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN90@stbi_zlib_
	mov	QWORD PTR tv876[rsp], 0
	jmp	SHORT $LN91@stbi_zlib_
$LN90@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv876[rsp], rax
$LN91@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1015
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN92@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN92@stbi_zlib_
	mov	QWORD PTR tv906[rsp], 0
	jmp	SHORT $LN93@stbi_zlib_
$LN92@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv906[rsp], rax
$LN93@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1017
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax-8]
	mov	DWORD PTR [rcx], eax
; Line 1019
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	sub	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR out$[rsp]
	call	memmove
; Line 1020
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
$LN1@stbi_zlib_:
; Line 1022
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
data$ = 32
stbiw__zhash PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 868
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 869
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 870
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 871
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 872
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 873
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 874
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 875
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 876
	mov	eax, DWORD PTR hash$[rsp]
; Line 877
	add	rsp, 24
	ret	0
stbiw__zhash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
a$ = 32
b$ = 40
limit$ = 48
stbiw__zlib_countm PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 860
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__zli
$LN2@stbiw__zli:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__zli:
	mov	eax, DWORD PTR limit$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__zli
	cmp	DWORD PTR i$[rsp], 258			; 00000102H
	jge	SHORT $LN3@stbiw__zli
; Line 863
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbiw__zli
	jmp	SHORT $LN3@stbiw__zli
$LN5@stbiw__zli:
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 864
	mov	eax, DWORD PTR i$[rsp]
; Line 865
	add	rsp, 24
	ret	0
stbiw__zlib_countm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
tv66 = 4
code$ = 32
codebits$ = 40
stbiw__zlib_bitrev PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 850
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 851
	mov	DWORD PTR res$[rsp], 0
$LN2@stbiw__zli:
; Line 852
	mov	eax, DWORD PTR codebits$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR codebits$[rsp]
	dec	eax
	mov	DWORD PTR codebits$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN3@stbiw__zli
; Line 853
	mov	eax, DWORD PTR res$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR code$[rsp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR res$[rsp], eax
; Line 854
	mov	eax, DWORD PTR code$[rsp]
	sar	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 855
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 856
	mov	eax, DWORD PTR res$[rsp]
; Line 857
	add	rsp, 24
	ret	0
stbiw__zlib_bitrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
data$ = 64
bitbuffer$ = 72
bitcount$ = 80
stbiw__zlib_flushf PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 840
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@stbiw__zli:
; Line 841
	mov	rax, QWORD PTR bitcount$[rsp]
	cmp	DWORD PTR [rax], 8
	jl	$LN3@stbiw__zli
; Line 842
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN5@stbiw__zli
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN5@stbiw__zli
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbiw__zli
$LN5@stbiw__zli:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR data$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv78[rsp], rax
$LN6@stbiw__zli:
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 843
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	rcx, QWORD PTR bitbuffer$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 844
	mov	rax, QWORD PTR bitcount$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 8
	mov	rcx, QWORD PTR bitcount$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 845
	jmp	$LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 846
	mov	rax, QWORD PTR data$[rsp]
; Line 847
	add	rsp, 56					; 00000038H
	ret	0
stbiw__zlib_flushf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
m$ = 52
p$ = 56
tv75 = 64
tv79 = 72
$T1 = 80
$T2 = 112
arr$ = 176
increment$ = 184
itemsize$ = 192
stbiw__sbgrowf PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 827
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 828
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stbiw__sbg
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	ecx, DWORD PTR increment$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN6@stbiw__sbg
$LN5@stbiw__sbg:
	mov	eax, DWORD PTR increment$[rsp]
	inc	eax
	mov	DWORD PTR tv71[rsp], eax
$LN6@stbiw__sbg:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 829
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stbiw__sbg
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 8
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN8@stbiw__sbg
$LN7@stbiw__sbg:
	mov	QWORD PTR tv75[rsp], 0
$LN8@stbiw__sbg:
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv79[rsp], rax
	lea	rcx, OFFSET FLAT:$SG80703
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 829				; 0000033dH
	lea	r8, OFFSET FLAT:$SG80704
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tv75[rsp]
	mov	rax, QWORD PTR tv79[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR p$[rsp], rax
; Line 830
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stbiw__sbg
	mov	r8d, 830				; 0000033eH
	lea	rdx, OFFSET FLAT:$SG80705
	lea	rcx, OFFSET FLAT:$SG80706
	call	_wassert
	xor	eax, eax
$LN9@stbiw__sbg:
; Line 831
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stbiw__sbg
; Line 832
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN3@stbiw__sbg
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN3@stbiw__sbg:
; Line 833
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR arr$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 834
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN2@stbiw__sbg:
; Line 836
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
; Line 837
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbiw__sbgrowf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv139 = 52
len$2 = 56
scratch$3 = 64
tv70 = 72
$T4 = 80
$T5 = 112
$T6 = 144
$T7 = 176
header$8 = 208
buffer$9 = 288
__$ArrayPad$ = 416
s$ = 464
x$ = 472
y$ = 480
comp$ = 488
data$ = 496
stbi_write_hdr_core PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 762
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 440				; 000001b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 763
	cmp	DWORD PTR y$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN5@stbi_write
$LN7@stbi_write:
; Line 764
	xor	eax, eax
	jmp	$LN1@stbi_write
	jmp	$LN6@stbi_write
$LN5@stbi_write:
; Line 767
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	cdqe
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, OFFSET FLAT:$SG80644
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 767				; 000002ffH
	lea	r8, OFFSET FLAT:$SG80645
	mov	edx, 126				; 0000007eH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv70[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	mov	QWORD PTR scratch$3[rsp], rax
; Line 770
	lea	rax, QWORD PTR header$8[rsp]
	lea	rcx, OFFSET FLAT:$SG80646
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 66					; 00000042H
	rep movsb
; Line 771
	mov	r8d, 65					; 00000041H
	lea	rdx, QWORD PTR header$8[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 776
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	lea	rdx, OFFSET FLAT:$SG80647
	lea	rcx, QWORD PTR buffer$9[rsp]
	call	sprintf
	mov	DWORD PTR len$2[rsp], eax
; Line 778
	mov	r8d, DWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR buffer$9[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 780
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stbi_write
; Line 781
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN9@stbi_write
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	sub	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv139[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN9@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv139[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR tv139[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR scratch$3[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_hdr_scanline
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 782
	lea	rax, OFFSET FLAT:$SG80648
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 782				; 0000030eH
	lea	r8, OFFSET FLAT:$SG80649
	mov	edx, 127				; 0000007fH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scratch$3[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
; Line 783
	mov	eax, 1
$LN6@stbi_write:
$LN1@stbi_write:
; Line 785
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 440				; 000001b8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_hdr_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$1 = 36
rgbe$ = 40
scanlineheader$ = 44
c$2 = 48
len$3 = 52
len$4 = 56
comp$5 = 64
tv77 = 72
tv157 = 76
linear$ = 80
__$ArrayPad$ = 96
s$ = 128
width$ = 136
ncomp$ = 144
scratch$ = 152
scanline$ = 160
stbiw__write_hdr_scanline PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 673
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 674
	mov	BYTE PTR scanlineheader$[rsp], 2
	mov	BYTE PTR scanlineheader$[rsp+1], 2
	mov	BYTE PTR scanlineheader$[rsp+2], 0
	mov	BYTE PTR scanlineheader$[rsp+3], 0
; Line 679
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 680
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 683
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN27@stbiw__wri
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN25@stbiw__wri
$LN27@stbiw__wri:
; Line 684
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbiw__wri
; Line 685
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 3
	je	SHORT $LN29@stbiw__wri
	cmp	DWORD PTR tv77[rsp], 4
	je	SHORT $LN28@stbiw__wri
	jmp	$LN30@stbiw__wri
$LN28@stbiw__wri:
$LN29@stbiw__wri:
; Line 687
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 688
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 689
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 690
	jmp	SHORT $LN5@stbiw__wri
$LN30@stbiw__wri:
; Line 692
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN5@stbiw__wri:
; Line 695
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	stbiw__linear_to_rgbe
; Line 696
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 697
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
; Line 698
	jmp	$LN26@stbiw__wri
$LN25@stbiw__wri:
; Line 701
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbiw__wri
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN8@stbiw__wri
; Line 702
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv157[rsp], eax
	cmp	DWORD PTR tv157[rsp], 3
	je	SHORT $LN32@stbiw__wri
	cmp	DWORD PTR tv157[rsp], 4
	je	SHORT $LN31@stbiw__wri
	jmp	$LN33@stbiw__wri
$LN31@stbiw__wri:
$LN32@stbiw__wri:
; Line 704
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 705
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 706
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 707
	jmp	SHORT $LN10@stbiw__wri
$LN33@stbiw__wri:
; Line 709
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN10@stbiw__wri:
; Line 712
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	stbiw__linear_to_rgbe
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	imul	ecx, DWORD PTR width$[rsp], 0
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 714
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 715
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 716
	mov	eax, 1
	imul	rax, rax, 3
	imul	ecx, DWORD PTR width$[rsp], 3
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 717
	jmp	$LN7@stbiw__wri
$LN8@stbiw__wri:
; Line 719
	mov	r8d, 4
	lea	rdx, QWORD PTR scanlineheader$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 722
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN14@stbiw__wri
$LN12@stbiw__wri:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN14@stbiw__wri:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN13@stbiw__wri
; Line 723
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR c$2[rsp]
	cdqe
	mov	rcx, QWORD PTR scratch$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR comp$5[rsp], rax
; Line 725
	mov	DWORD PTR x$[rsp], 0
$LN15@stbiw__wri:
; Line 726
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN16@stbiw__wri
; Line 728
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN17@stbiw__wri:
; Line 729
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	SHORT $LN18@stbiw__wri
; Line 730
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
; Line 731
	jmp	SHORT $LN18@stbiw__wri
$LN34@stbiw__wri:
; Line 732
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
; Line 733
	jmp	SHORT $LN17@stbiw__wri
$LN18@stbiw__wri:
; Line 734
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jl	SHORT $LN35@stbiw__wri
; Line 735
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN35@stbiw__wri:
$LN19@stbiw__wri:
; Line 737
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN20@stbiw__wri
; Line 738
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
; Line 739
	cmp	DWORD PTR len$3[rsp], 128		; 00000080H
	jle	SHORT $LN36@stbiw__wri
	mov	DWORD PTR len$3[rsp], 128		; 00000080H
$LN36@stbiw__wri:
; Line 740
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_dump_data
; Line 741
	mov	eax, DWORD PTR len$3[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 742
	jmp	SHORT $LN19@stbiw__wri
$LN20@stbiw__wri:
; Line 744
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	$LN37@stbiw__wri
$LN21@stbiw__wri:
; Line 746
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR r$1[rsp], eax
	jge	SHORT $LN22@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN22@stbiw__wri
; Line 747
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
	jmp	SHORT $LN21@stbiw__wri
$LN22@stbiw__wri:
$LN23@stbiw__wri:
; Line 749
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN24@stbiw__wri
; Line 750
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$4[rsp], eax
; Line 751
	cmp	DWORD PTR len$4[rsp], 127		; 0000007fH
	jle	SHORT $LN38@stbiw__wri
	mov	DWORD PTR len$4[rsp], 127		; 0000007fH
$LN38@stbiw__wri:
; Line 752
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	edx, DWORD PTR len$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_run_data
; Line 753
	mov	eax, DWORD PTR len$4[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 754
	jmp	SHORT $LN23@stbiw__wri
$LN24@stbiw__wri:
$LN37@stbiw__wri:
; Line 756
	jmp	$LN15@stbiw__wri
$LN16@stbiw__wri:
; Line 757
	jmp	$LN12@stbiw__wri
$LN13@stbiw__wri:
$LN26@stbiw__wri:
; Line 759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbiw__write_hdr_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
s$ = 64
length$ = 72
data$ = 80
stbiw__write_dump_data PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 665
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 666
	mov	eax, DWORD PTR length$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 667
	cmp	DWORD PTR length$[rsp], 128		; 00000080H
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 667				; 0000029bH
	lea	rdx, OFFSET FLAT:$SG80559
	lea	rcx, OFFSET FLAT:$SG80560
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 668
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 669
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 670
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write_dump_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
s$ = 64
length$ = 72
databyte$ = 80
stbiw__write_run_data PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 657
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 658
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 659
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG80545
	lea	rcx, OFFSET FLAT:$SG80546
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 660
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 661
	mov	r8d, 1
	lea	rdx, QWORD PTR databyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 662
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write_run_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
maxcomp$ = 32
normalize$1 = 36
tv80 = 40
tv130 = 44
tv131 = 48
exponent$ = 52
rgbe$ = 80
linear$ = 88
stbiw__linear_to_rgbe PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 640
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 642
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN6@stbiw__lin
$LN5@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv80[rsp], xmm0
$LN6@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	comiss	xmm0, DWORD PTR tv80[rsp]
	jbe	SHORT $LN9@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv131[rsp], xmm0
	jmp	SHORT $LN10@stbiw__lin
$LN9@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv130[rsp], xmm0
	jmp	SHORT $LN8@stbiw__lin
$LN7@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv130[rsp], xmm0
$LN8@stbiw__lin:
	movss	xmm0, DWORD PTR tv130[rsp]
	movss	DWORD PTR tv131[rsp], xmm0
$LN10@stbiw__lin:
	movss	xmm0, DWORD PTR tv131[rsp]
	movss	DWORD PTR maxcomp$[rsp], xmm0
; Line 644
	movss	xmm0, DWORD PTR __real@0a4fb11f
	comiss	xmm0, DWORD PTR maxcomp$[rsp]
	jbe	SHORT $LN2@stbiw__lin
; Line 645
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 646
	jmp	$LN3@stbiw__lin
$LN2@stbiw__lin:
; Line 647
	cvtss2sd xmm0, DWORD PTR maxcomp$[rsp]
	lea	rdx, QWORD PTR exponent$[rsp]
	call	frexp
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@43800000
	divss	xmm0, DWORD PTR maxcomp$[rsp]
	movss	DWORD PTR normalize$1[rsp], xmm0
; Line 649
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 650
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 651
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 652
	mov	eax, DWORD PTR exponent$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN3@stbiw__lin:
; Line 654
	add	rsp, 72					; 00000048H
	ret	0
stbiw__linear_to_rgbe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$1 = 192
len$2 = 196
i$3 = 200
has_alpha$ = 204
header$4 = 208
header$5 = 209
j$6 = 212
colorbytes$ = 216
diff$7 = 220
tv66 = 224
tv69 = 228
tv71 = 232
format$ = 236
jdir$8 = 240
jend$9 = 244
begin$10 = 248
row$11 = 256
prev$12 = 264
s$ = 288
x$ = 296
y$ = 304
comp$ = 312
data$ = 320
stbi_write_tga_core PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 533
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
; Line 534
	cmp	DWORD PTR comp$[rsp], 2
	je	SHORT $LN33@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	je	SHORT $LN33@stbi_write
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN33@stbi_write:
	mov	DWORD PTR tv66[rsp], 1
$LN34@stbi_write:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR has_alpha$[rsp], eax
; Line 535
	cmp	DWORD PTR has_alpha$[rsp], 0
	je	SHORT $LN35@stbi_write
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN36@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN36@stbi_write:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR colorbytes$[rsp], eax
; Line 536
	cmp	DWORD PTR colorbytes$[rsp], 2
	jge	SHORT $LN37@stbi_write
	mov	DWORD PTR tv71[rsp], 3
	jmp	SHORT $LN38@stbi_write
$LN37@stbi_write:
	mov	DWORD PTR tv71[rsp], 2
$LN38@stbi_write:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR format$[rsp], eax
; Line 538
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN18@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN17@stbi_write
$LN18@stbi_write:
; Line 539
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN17@stbi_write:
; Line 541
	cmp	DWORD PTR stbi_write_tga_with_rle, 0
	jne	$LN19@stbi_write
; Line 542
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	DWORD PTR [rsp+176], eax
	mov	DWORD PTR [rsp+168], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	QWORD PTR [rsp+144], 0
	mov	QWORD PTR [rsp+136], 0
	mov	QWORD PTR [rsp+128], 0
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	QWORD PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], 0
	lea	rax, OFFSET FLAT:$SG80473
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	eax, DWORD PTR has_alpha$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
	jmp	$LN1@stbi_write
; Line 544
	jmp	$LN20@stbi_write
$LN19@stbi_write:
; Line 548
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	edx, DWORD PTR format$[rsp]
	add	edx, 8
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+88], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edx
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG80474
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writef
; Line 550
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN21@stbi_write
; Line 551
	mov	DWORD PTR j$6[rsp], 0
; Line 552
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR jend$9[rsp], eax
; Line 553
	mov	DWORD PTR jdir$8[rsp], 1
; Line 554
	jmp	SHORT $LN22@stbi_write
$LN21@stbi_write:
; Line 555
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$6[rsp], eax
; Line 556
	mov	DWORD PTR jend$9[rsp], -1
; Line 557
	mov	DWORD PTR jdir$8[rsp], -1
$LN22@stbi_write:
; Line 559
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR jdir$8[rsp]
	mov	ecx, DWORD PTR j$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$6[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR jend$9[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	je	$LN3@stbi_write
; Line 560
	mov	eax, DWORD PTR j$6[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row$11[rsp], rax
; Line 563
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$3[rsp], eax
$LN7@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN6@stbi_write
; Line 564
	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR row$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR begin$10[rsp], rax
; Line 565
	mov	DWORD PTR diff$7[rsp], 1
; Line 566
	mov	DWORD PTR len$2[rsp], 1
; Line 568
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN23@stbi_write
; Line 569
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 570
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	inc	ecx
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	mov	DWORD PTR diff$7[rsp], eax
; Line 571
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN24@stbi_write
; Line 572
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR prev$12[rsp], rax
; Line 573
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	$LN9@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	$LN9@stbi_write
; Line 574
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR prev$12[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN26@stbi_write
; Line 575
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR prev$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prev$12[rsp], rax
; Line 576
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 577
	jmp	SHORT $LN27@stbi_write
$LN26@stbi_write:
; Line 578
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 579
	jmp	SHORT $LN9@stbi_write
$LN27@stbi_write:
; Line 581
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 582
	jmp	$LN25@stbi_write
$LN24@stbi_write:
; Line 583
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN12@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	SHORT $LN12@stbi_write
; Line 584
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@stbi_write
; Line 585
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 586
	jmp	SHORT $LN29@stbi_write
$LN28@stbi_write:
; Line 587
	jmp	SHORT $LN12@stbi_write
$LN29@stbi_write:
; Line 589
	jmp	$LN11@stbi_write
$LN12@stbi_write:
$LN25@stbi_write:
$LN23@stbi_write:
; Line 593
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN30@stbi_write
; Line 594
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$4[rsp], al
; Line 595
	movzx	edx, BYTE PTR header$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
; Line 596
	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN15@stbi_write
; Line 597
	mov	eax, DWORD PTR k$1[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR begin$10[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
; Line 598
	jmp	SHORT $LN14@stbi_write
$LN15@stbi_write:
; Line 599
	jmp	SHORT $LN31@stbi_write
$LN30@stbi_write:
; Line 600
	mov	eax, DWORD PTR len$2[rsp]
	sub	eax, 129				; 00000081H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$5[rsp], al
; Line 601
	movzx	edx, BYTE PTR header$5[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
; Line 602
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
$LN31@stbi_write:
; Line 604
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 605
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 606
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN20@stbi_write:
; Line 608
	mov	eax, 1
$LN1@stbi_write:
; Line 609
	add	rsp, 280				; 00000118H
	ret	0
stbi_write_tga_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$1 = 368
s$ = 400
x$ = 408
y$ = 416
comp$ = 424
data$ = 432
stbi_write_bmp_core PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 493
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
; Line 494
	cmp	DWORD PTR comp$[rsp], 4
	je	$LN2@stbi_write
; Line 496
	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	imul	eax, eax, 3
	and	eax, 3
	mov	DWORD PTR pad$1[rsp], eax
; Line 497
	imul	eax, DWORD PTR x$[rsp], 3
	add	eax, DWORD PTR pad$1[rsp]
	imul	eax, DWORD PTR y$[rsp]
	add	eax, 54					; 00000036H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	QWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 24
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 40			; 00000028H
	mov	DWORD PTR [rsp+128], 54			; 00000036H
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG80392
	mov	QWORD PTR [rsp+80], rax
	mov	eax, DWORD PTR pad$1[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	QWORD PTR [rsp+64], 0
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
	jmp	$LN1@stbi_write
; Line 501
	jmp	$LN3@stbi_write
$LN2@stbi_write:
; Line 505
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	lea	eax, DWORD PTR [rax*4+122]
	mov	QWORD PTR [rsp+352], 0
	mov	QWORD PTR [rsp+344], 0
	mov	QWORD PTR [rsp+336], 0
	mov	QWORD PTR [rsp+328], 0
	mov	QWORD PTR [rsp+320], 0
	mov	QWORD PTR [rsp+312], 0
	mov	QWORD PTR [rsp+304], 0
	mov	QWORD PTR [rsp+296], 0
	mov	QWORD PTR [rsp+288], 0
	mov	QWORD PTR [rsp+280], 0
	mov	QWORD PTR [rsp+272], 0
	mov	QWORD PTR [rsp+264], 0
	mov	QWORD PTR [rsp+256], 0
	mov	DWORD PTR [rsp+248], -16777216		; ff000000H
	mov	DWORD PTR [rsp+240], 255		; 000000ffH
	mov	DWORD PTR [rsp+232], 65280		; 0000ff00H
	mov	DWORD PTR [rsp+224], 16711680		; 00ff0000H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	DWORD PTR [rsp+176], 3
	mov	DWORD PTR [rsp+168], 32			; 00000020H
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 108		; 0000006cH
	mov	DWORD PTR [rsp+128], 122		; 0000007aH
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG80393
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 1
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
$LN3@stbi_write:
$LN1@stbi_write:
; Line 510
	add	rsp, 392				; 00000188H
	ret	0
stbi_write_bmp_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 80
s$ = 112
rgb_dir$ = 120
vdir$ = 128
x$ = 136
y$ = 144
comp$ = 152
expand_mono$ = 160
data$ = 168
alpha$ = 176
pad$ = 184
fmt$ = 192
stbiw__outfile PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 479
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 480
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN4@stbiw__out
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@stbiw__out
$LN4@stbiw__out:
; Line 481
	xor	eax, eax
	jmp	$LN1@stbiw__out
; Line 482
	jmp	$LN3@stbiw__out
$LN2@stbiw__out:
; Line 484
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$1[rsp], rax
; Line 485
	mov	r8, QWORD PTR v$1[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writefv
; Line 486
	mov	QWORD PTR v$1[rsp], 0
; Line 487
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR pad$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR alpha$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR vdir$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixels
; Line 488
	mov	eax, 1
$LN3@stbiw__out:
$LN1@stbiw__out:
; Line 490
	add	rsp, 104				; 00000068H
	ret	0
stbiw__outfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
j_end$ = 56
zero$ = 60
d$1 = 64
s$ = 96
rgb_dir$ = 104
vdir$ = 112
x$ = 120
y$ = 128
comp$ = 136
data$ = 144
write_alpha$ = 152
scanline_pad$ = 160
expand_mono$ = 168
stbiw__write_pixels PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 452
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	DWORD PTR zero$[rsp], 0
; Line 456
	cmp	DWORD PTR y$[rsp], 0
	jg	SHORT $LN8@stbiw__wri
; Line 457
	jmp	$LN1@stbiw__wri
$LN8@stbiw__wri:
; Line 459
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN9@stbiw__wri
; Line 460
	imul	eax, DWORD PTR vdir$[rsp], -1
	mov	DWORD PTR vdir$[rsp], eax
$LN9@stbiw__wri:
; Line 462
	cmp	DWORD PTR vdir$[rsp], 0
	jge	SHORT $LN10@stbiw__wri
; Line 463
	mov	DWORD PTR j_end$[rsp], -1
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 464
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 465
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR j_end$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
$LN11@stbiw__wri:
; Line 468
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR vdir$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR j_end$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	je	$LN3@stbiw__wri
; Line 469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbiw__wri
$LN5@stbiw__wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbiw__wri
; Line 470
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	add	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR d$1[rsp], rax
; Line 471
	mov	rax, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR write_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
; Line 472
	jmp	SHORT $LN5@stbiw__wri
$LN6@stbiw__wri:
; Line 473
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
; Line 474
	mov	r8d, DWORD PTR scanline_pad$[rsp]
	lea	rdx, QWORD PTR zero$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 475
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 476
	add	rsp, 88					; 00000058H
	ret	0
stbiw__write_pixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bg$ = 32
px$ = 36
k$ = 40
tv71 = 44
tv128 = 48
s$ = 80
rgb_dir$ = 88
comp$ = 96
write_alpha$ = 104
expand_mono$ = 112
d$ = 120
stbiw__write_pixel PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 419
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 420
	mov	BYTE PTR bg$[rsp], 255			; 000000ffH
	mov	BYTE PTR bg$[rsp+1], 0
	mov	BYTE PTR bg$[rsp+2], 255		; 000000ffH
; Line 423
	cmp	DWORD PTR write_alpha$[rsp], 0
	jge	SHORT $LN7@stbiw__wri
; Line 424
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN7@stbiw__wri:
; Line 426
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 1
	je	SHORT $LN9@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN14@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 4
	je	SHORT $LN12@stbiw__wri
	jmp	$LN2@stbiw__wri
$LN8@stbiw__wri:
$LN9@stbiw__wri:
; Line 429
	cmp	DWORD PTR expand_mono$[rsp], 0
	je	SHORT $LN10@stbiw__wri
; Line 430
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 432
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN11@stbiw__wri:
; Line 433
	jmp	$LN2@stbiw__wri
$LN12@stbiw__wri:
; Line 435
	cmp	DWORD PTR write_alpha$[rsp], 0
	jne	$LN13@stbiw__wri
; Line 437
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN6@stbiw__wri
$LN4@stbiw__wri:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbiw__wri:
	cmp	DWORD PTR k$[rsp], 3
	jge	SHORT $LN5@stbiw__wri
; Line 438
	movsxd	rax, DWORD PTR k$[rsp]
	movzx	eax, BYTE PTR bg$[rsp+rax]
	mov	DWORD PTR tv128[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	movzx	edx, BYTE PTR bg$[rsp+rdx]
	sub	ecx, edx
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	imul	ecx, edx
	mov	eax, ecx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, DWORD PTR tv128[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR px$[rsp+rcx], al
	jmp	SHORT $LN4@stbiw__wri
$LN5@stbiw__wri:
; Line 439
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	movzx	r9d, BYTE PTR px$[rsp+rax]
	movzx	r8d, BYTE PTR px$[rsp+rcx]
	movzx	edx, BYTE PTR px$[rsp+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
; Line 440
	jmp	SHORT $LN2@stbiw__wri
$LN13@stbiw__wri:
$LN14@stbiw__wri:
; Line 444
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
$LN2@stbiw__wri:
; Line 447
	cmp	DWORD PTR write_alpha$[rsp], 0
	jle	SHORT $LN15@stbiw__wri
; Line 448
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN15@stbiw__wri:
; Line 449
	add	rsp, 72					; 00000048H
	ret	0
stbiw__write_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
a$ = 72
b$ = 80
c$ = 88
stbiw__write3 PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 407
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	add	rax, 3
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 410
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN2@stbiw__wri:
; Line 411
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR n$[rsp], eax
; Line 412
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 3
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 413
	mov	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 414
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 415
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 416
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
a$ = 56
stbiw__write1 PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 400
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 401
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	inc	rax
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 402
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN2@stbiw__wri:
; Line 403
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 404
	add	rsp, 40					; 00000028H
	ret	0
stbiw__write1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
stbiw__putc PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 395
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 396
	mov	r8d, 1
	lea	rdx, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 397
	add	rsp, 40					; 00000028H
	ret	0
stbiw__putc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbiw__write_flush PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 387
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 388
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+80], 0
	je	SHORT $LN2@stbiw__wri
; Line 389
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+80]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 390
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+80], 0
$LN2@stbiw__wri:
; Line 392
	add	rsp, 40					; 00000028H
	ret	0
stbiw__write_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
s$ = 64
fmt$ = 72
stbiw__writef PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 381
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 382
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writefv
; Line 383
	mov	QWORD PTR v$[rsp], 0
; Line 384
	add	rsp, 56					; 00000038H
	ret	0
stbiw__writef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
b$2 = 36
tv69 = 40
x$3 = 44
b$4 = 48
x$5 = 52
tv68 = 56
s$ = 80
fmt$ = 88
v$ = 96
stbiw__writefv PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 350
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN2@stbiw__wri:
; Line 351
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stbiw__wri
; Line 352
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	rax, QWORD PTR fmt$[rsp]
	inc	rax
	mov	QWORD PTR fmt$[rsp], rax
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 32			; 00000020H
	je	SHORT $LN6@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 49			; 00000031H
	je	SHORT $LN7@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 50			; 00000032H
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 52			; 00000034H
	je	$LN9@stbiw__wri
	jmp	$LN10@stbiw__wri
$LN6@stbiw__wri:
; Line 353
	jmp	$LN4@stbiw__wri
$LN7@stbiw__wri:
; Line 354
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR x$1[rsp], al
; Line 355
	mov	r8d, 1
	lea	rdx, QWORD PTR x$1[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 356
	jmp	$LN4@stbiw__wri
$LN8@stbiw__wri:
; Line 357
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR x$5[rsp], eax
; Line 359
	mov	eax, DWORD PTR x$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 360
	mov	eax, DWORD PTR x$5[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 361
	mov	r8d, 2
	lea	rdx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 362
	jmp	$LN4@stbiw__wri
$LN9@stbiw__wri:
; Line 363
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR x$3[rsp], eax
; Line 365
	mov	eax, DWORD PTR x$3[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 366
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 367
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 368
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 369
	mov	r8d, 4
	lea	rdx, QWORD PTR b$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 370
	jmp	SHORT $LN4@stbiw__wri
$LN10@stbiw__wri:
; Line 372
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbiw__wri
	mov	r8d, 372				; 00000174H
	lea	rdx, OFFSET FLAT:$SG80231
	lea	rcx, OFFSET FLAT:$SG80232
	call	_wassert
	xor	eax, eax
$LN12@stbiw__wri:
; Line 373
	jmp	SHORT $LN1@stbiw__wri
$LN4@stbiw__wri:
; Line 375
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 376
	add	rsp, 72					; 00000048H
	ret	0
stbiw__writefv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__end_write_file PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 341
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	fclose
; Line 342
	add	rsp, 40					; 00000028H
	ret	0
stbi__end_write_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
f$ = 40
s$ = 64
filename$ = 72
stbi__start_write_file PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 333
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 334
	lea	rdx, OFFSET FLAT:$SG80161
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 335
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:stbi__stdio_write
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 336
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stbi__star
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@stbi__star
$LN3@stbi__star:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stbi__star:
	mov	eax, DWORD PTR tv71[rsp]
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
stbi__start_write_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
stbiw__fopen PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 324
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbiw__fop
; Line 325
	mov	QWORD PTR f$[rsp], 0
$LN2@stbiw__fop:
; Line 329
	mov	rax, QWORD PTR f$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
stbiw__fopen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
data$ = 56
size$ = 64
stbi__stdio_write PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 285
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 286
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR context$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fwrite
; Line 287
	add	rsp, 40					; 00000028H
	ret	0
stbi__stdio_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
c$ = 16
context$ = 24
stbi__start_write_callbacks PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 277
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 278
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 279
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 280
	ret	0
stbi__start_write_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag$ = 8
stbi_flip_vertically_on_write PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 263
	mov	DWORD PTR [rsp+8], ecx
; Line 264
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR stbi__flip_vertically_on_write, eax
; Line 265
	ret	0
stbi_flip_vertically_on_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
quality$ = 224
stbi_write_jpg_to_func PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1608
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1609
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1610
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 1611
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_jpg_core
; Line 1612
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_jpg_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_hdr_to_func PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 789
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 790
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 791
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_hdr_core
; Line 792
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_hdr_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_tga_to_func PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 612
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 613
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 614
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 615
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_tga_core
; Line 616
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_tga_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_bmp_to_func PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 515
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 516
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_bmp_core
; Line 517
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_bmp_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
$T1 = 64
$T2 = 96
func$ = 160
context$ = 168
x$ = 176
y$ = 184
comp$ = 192
data$ = 200
stride_bytes$ = 208
stbi_write_png_to_func PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1232
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1234
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1235
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1236
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR png$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR func$[rsp]
; Line 1237
	lea	rax, OFFSET FLAT:$SG81245
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1237				; 000004d5H
	lea	r8, OFFSET FLAT:$SG81246
	mov	edx, 141				; 0000008dH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1238
	mov	eax, 1
$LN1@stbi_write:
; Line 1239
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
quality$ = 232
stbi_write_jpg PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1617
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1618
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1619
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 1620
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_jpg_core
	mov	DWORD PTR r$1[rsp], eax
; Line 1621
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 1622
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 1623
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 1624
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 1625
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_jpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_hdr PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 795
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 796
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 797
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 798
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_hdr_core
	mov	DWORD PTR r$1[rsp], eax
; Line 799
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 800
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 801
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 802
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 803
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_tga PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 620
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 621
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 622
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 623
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_tga_core
	mov	DWORD PTR r$1[rsp], eax
; Line 624
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 625
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 626
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 627
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 628
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_tga ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_bmp PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 521
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 522
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 523
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 524
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_bmp_core
	mov	DWORD PTR r$1[rsp], eax
; Line 525
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 526
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 527
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 528
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
png$ = 48
len$ = 56
f$ = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
filename$ = 240
x$ = 248
y$ = 256
comp$ = 264
data$ = 272
stride_bytes$ = 280
stbi_write_png PROC
; File W:\cpp\void\rx\stb_image_write.h
; Line 1216
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 1219
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1220
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN2@stbi_write:
; Line 1222
	lea	rdx, OFFSET FLAT:$SG81219
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1223
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN3@stbi_write
	lea	rax, OFFSET FLAT:$SG81221
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1223				; 000004c7H
	lea	r8, OFFSET FLAT:$SG81222
	mov	edx, 139				; 0000008bH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN3@stbi_write:
; Line 1224
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR png$[rsp]
	call	fwrite
; Line 1225
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1226
	lea	rax, OFFSET FLAT:$SG81223
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1226				; 000004caH
	lea	r8, OFFSET FLAT:$SG81224
	mov	edx, 140				; 0000008cH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 1227
	mov	eax, 1
$LN1@stbi_write:
; Line 1228
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 112
extra_memory$ = 120
memory_required$ = 128
$T1 = 144
$T2 = 176
$T3 = 208
$T4 = 240
info$ = 272
alloc_context$ = 576
input_data$ = 584
input_w$ = 592
input_h$ = 600
input_stride_in_bytes$ = 608
output_data$ = 616
output_w$ = 624
output_h$ = 632
output_stride_in_bytes$ = 640
s0$ = 648
t0$ = 656
s1$ = 664
t1$ = 672
transform$ = 680
channels$ = 688
alpha_channel$ = 696
flags$ = 704
type$ = 712
h_filter$ = 720
v_filter$ = 728
edge_horizontal$ = 736
edge_vertical$ = 744
colorspace$ = 752
stbir__resize_arbitrary PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2436
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 552				; 00000228H
; Line 2442
	mov	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR output_w$[rsp]
	mov	r8d, DWORD PTR input_h$[rsp]
	mov	edx, DWORD PTR input_w$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbir__setup
; Line 2443
	mov	rax, QWORD PTR transform$[rsp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR t1$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s1$[rsp]
	movss	xmm2, DWORD PTR t0$[rsp]
	movss	xmm1, DWORD PTR s0$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbir__calculate_transform
; Line 2444
	mov	r8d, DWORD PTR v_filter$[rsp]
	mov	edx, DWORD PTR h_filter$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbir__choose_filter
; Line 2445
	lea	rcx, QWORD PTR info$[rsp]
	call	stbir__calculate_memory
	mov	eax, eax
	mov	QWORD PTR memory_required$[rsp], rax
; Line 2446
	lea	rax, OFFSET FLAT:$SG79644
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2446				; 0000098eH
	lea	r8, OFFSET FLAT:$SG79645
	mov	edx, 124				; 0000007cH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rdx, QWORD PTR memory_required$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR extra_memory$[rsp], rax
; Line 2448
	cmp	QWORD PTR extra_memory$[rsp], 0
	jne	SHORT $LN2@stbir__res
; Line 2449
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN2@stbir__res:
; Line 2451
	mov	rax, QWORD PTR memory_required$[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR extra_memory$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR colorspace$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR edge_vertical$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR edge_horizontal$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR output_data$[rsp]
	mov	r8d, DWORD PTR input_stride_in_bytes$[rsp]
	mov	rdx, QWORD PTR input_data$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbir__resize_allocated
	mov	DWORD PTR result$[rsp], eax
; Line 2457
	lea	rax, OFFSET FLAT:$SG79647
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2457				; 00000999H
	lea	r8, OFFSET FLAT:$SG79648
	mov	edx, 125				; 0000007dH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR extra_memory$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 2459
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbir__res:
; Line 2460
	add	rsp, 552				; 00000228H
	pop	rdi
	pop	rsi
	ret	0
stbir__resize_arbitrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 64
tv86 = 68
width_stride_input$ = 72
width_stride_output$ = 76
memory_required$ = 80
info$ = 112
input_data$ = 120
input_stride_in_bytes$ = 128
output_data$ = 136
output_stride_in_bytes$ = 144
alpha_channel$ = 152
flags$ = 160
type$ = 168
edge_horizontal$ = 176
edge_vertical$ = 184
colorspace$ = 192
tempmem$ = 200
tempmem_size_in_bytes$ = 208
stbir__resize_allocated PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2296
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2297
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__calculate_memory
	mov	eax, eax
	mov	QWORD PTR memory_required$[rsp], rax
; Line 2299
	cmp	DWORD PTR input_stride_in_bytes$[rsp], 0
	je	SHORT $LN17@stbir__res
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN18@stbir__res
$LN17@stbir__res:
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	imul	eax, DWORD PTR [rcx+8]
	movsxd	rcx, DWORD PTR type$[rsp]
	lea	rdx, OFFSET FLAT:stbir__type_size
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	mov	DWORD PTR tv76[rsp], eax
$LN18@stbir__res:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR width_stride_input$[rsp], eax
; Line 2300
	cmp	DWORD PTR output_stride_in_bytes$[rsp], 0
	je	SHORT $LN19@stbir__res
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR tv86[rsp], eax
	jmp	SHORT $LN20@stbir__res
$LN19@stbir__res:
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	imul	eax, DWORD PTR [rcx+32]
	movsxd	rcx, DWORD PTR type$[rsp]
	lea	rdx, OFFSET FLAT:stbir__type_size
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	mov	DWORD PTR tv86[rsp], eax
$LN20@stbir__res:
	mov	eax, DWORD PTR tv86[rsp]
	mov	DWORD PTR width_stride_output$[rsp], eax
; Line 2316
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jge	SHORT $LN21@stbir__res
	mov	r8d, 2316				; 0000090cH
	lea	rdx, OFFSET FLAT:$SG79560
	lea	rcx, OFFSET FLAT:$SG79561
	call	_wassert
	xor	eax, eax
$LN21@stbir__res:
; Line 2317
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 64			; 00000040H
	jle	SHORT $LN22@stbir__res
	mov	r8d, 2317				; 0000090dH
	lea	rdx, OFFSET FLAT:$SG79562
	lea	rcx, OFFSET FLAT:$SG79563
	call	_wassert
	xor	eax, eax
$LN22@stbir__res:
; Line 2319
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jl	SHORT $LN3@stbir__res
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 64			; 00000040H
	jle	SHORT $LN2@stbir__res
$LN3@stbir__res:
; Line 2320
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN2@stbir__res:
; Line 2322
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+92]
	cmp	rax, 6
	jb	SHORT $LN23@stbir__res
	mov	r8d, 2322				; 00000912H
	lea	rdx, OFFSET FLAT:$SG79566
	lea	rcx, OFFSET FLAT:$SG79567
	call	_wassert
	xor	eax, eax
$LN23@stbir__res:
; Line 2323
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	cmp	rax, 6
	jb	SHORT $LN24@stbir__res
	mov	r8d, 2323				; 00000913H
	lea	rdx, OFFSET FLAT:$SG79568
	lea	rcx, OFFSET FLAT:$SG79569
	call	_wassert
	xor	eax, eax
$LN24@stbir__res:
; Line 2325
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+92]
	cmp	rax, 6
	jb	SHORT $LN4@stbir__res
; Line 2326
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN4@stbir__res:
; Line 2327
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	cmp	rax, 6
	jb	SHORT $LN5@stbir__res
; Line 2328
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN5@stbir__res:
; Line 2330
	cmp	DWORD PTR alpha_channel$[rsp], 0
	jge	SHORT $LN6@stbir__res
; Line 2331
	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 3
	mov	DWORD PTR flags$[rsp], eax
$LN6@stbir__res:
; Line 2333
	mov	eax, DWORD PTR flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN8@stbir__res
	mov	eax, DWORD PTR flags$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN7@stbir__res
$LN8@stbir__res:
; Line 2334
	cmp	DWORD PTR alpha_channel$[rsp], 0
	jl	SHORT $LN25@stbir__res
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	cmp	DWORD PTR alpha_channel$[rsp], eax
	jl	SHORT $LN26@stbir__res
$LN25@stbir__res:
	mov	r8d, 2334				; 0000091eH
	lea	rdx, OFFSET FLAT:$SG79575
	lea	rcx, OFFSET FLAT:$SG79576
	call	_wassert
	xor	eax, eax
$LN26@stbir__res:
$LN7@stbir__res:
; Line 2337
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	cmp	DWORD PTR alpha_channel$[rsp], eax
	jl	SHORT $LN9@stbir__res
; Line 2338
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN9@stbir__res:
; Line 2340
	cmp	QWORD PTR tempmem$[rsp], 0
	jne	SHORT $LN27@stbir__res
	mov	r8d, 2340				; 00000924H
	lea	rdx, OFFSET FLAT:$SG79578
	lea	rcx, OFFSET FLAT:$SG79579
	call	_wassert
	xor	eax, eax
$LN27@stbir__res:
; Line 2342
	cmp	QWORD PTR tempmem$[rsp], 0
	jne	SHORT $LN10@stbir__res
; Line 2343
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN10@stbir__res:
; Line 2345
	mov	rax, QWORD PTR memory_required$[rsp]
	cmp	QWORD PTR tempmem_size_in_bytes$[rsp], rax
	jae	SHORT $LN28@stbir__res
	mov	r8d, 2345				; 00000929H
	lea	rdx, OFFSET FLAT:$SG79581
	lea	rcx, OFFSET FLAT:$SG79582
	call	_wassert
	xor	eax, eax
$LN28@stbir__res:
; Line 2347
	mov	rax, QWORD PTR memory_required$[rsp]
	cmp	QWORD PTR tempmem_size_in_bytes$[rsp], rax
	jae	SHORT $LN11@stbir__res
; Line 2348
	xor	eax, eax
	jmp	$LN1@stbir__res
$LN11@stbir__res:
; Line 2350
	mov	r8, QWORD PTR tempmem_size_in_bytes$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR tempmem$[rsp]
	call	memset
; Line 2352
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR input_data$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2353
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR width_stride_input$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 2355
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR output_data$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 2356
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR width_stride_output$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 2358
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rax+80], ecx
; Line 2359
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rax+84], ecx
; Line 2360
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR type$[rsp]
	mov	DWORD PTR [rax+88], ecx
; Line 2361
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	mov	DWORD PTR [rax+100], ecx
; Line 2362
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR edge_vertical$[rsp]
	mov	DWORD PTR [rax+104], ecx
; Line 2363
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR colorspace$[rsp]
	mov	DWORD PTR [rax+108], ecx
; Line 2365
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+92]
	call	stbir__get_coefficient_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 2366
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	call	stbir__get_coefficient_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+172], eax
; Line 2367
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+92]
	call	stbir__get_filter_pixel_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+176], eax
; Line 2368
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	call	stbir__get_filter_pixel_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+180], eax
; Line 2369
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+92]
	call	stbir__get_filter_pixel_margin
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 2370
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	call	stbir__get_filter_pixel_margin
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+188], eax
; Line 2372
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+200], eax
; Line 2373
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+144], eax
; Line 2377
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR tempmem$[rsp]
	mov	QWORD PTR [rax+112], rcx
; Line 2378
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+240]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+112]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+120], rax
; Line 2379
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+244]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+120]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+128], rax
; Line 2380
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+248]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+128]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 2381
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+252]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+136]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+152], rax
; Line 2383
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	je	$LN12@stbir__res
; Line 2385
	mov	rax, QWORD PTR info$[rsp]
	mov	QWORD PTR [rax+160], 0
; Line 2386
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+256]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+152]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+224], rax
; Line 2387
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+264]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+224]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+232], rax
; Line 2389
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+268]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+232]
	mov	rcx, QWORD PTR tempmem_size_in_bytes$[rsp]
	mov	rdx, QWORD PTR tempmem$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN29@stbir__res
	mov	r8d, 2389				; 00000955H
	lea	rdx, OFFSET FLAT:$SG79586
	lea	rcx, OFFSET FLAT:$SG79587
	call	_wassert
	xor	eax, eax
$LN29@stbir__res:
; Line 2390
	jmp	$LN13@stbir__res
$LN12@stbir__res:
; Line 2393
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+256]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+152]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+160], rax
; Line 2394
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+260]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+160]
	mov	rcx, QWORD PTR info$[rsp]
	mov	QWORD PTR [rcx+224], rax
; Line 2395
	mov	rax, QWORD PTR info$[rsp]
	mov	QWORD PTR [rax+232], 0
; Line 2397
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+264]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+224]
	mov	rcx, QWORD PTR tempmem_size_in_bytes$[rsp]
	mov	rdx, QWORD PTR tempmem$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN30@stbir__res
	mov	r8d, 2397				; 0000095dH
	lea	rdx, OFFSET FLAT:$SG79588
	lea	rcx, OFFSET FLAT:$SG79589
	call	_wassert
	xor	eax, eax
$LN30@stbir__res:
$LN13@stbir__res:
; Line 2403
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+216], -1
; Line 2405
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+60]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm3, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+92]
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rax+120]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+112]
	call	stbir__calculate_filters
; Line 2406
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm3, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+96]
	mov	rax, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+128]
	call	stbir__calculate_filters
; Line 2410
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	je	SHORT $LN14@stbir__res
; Line 2411
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__buffer_loop_upsample
	jmp	SHORT $LN15@stbir__res
$LN14@stbir__res:
; Line 2413
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__buffer_loop_downsample
$LN15@stbir__res:
; Line 2424
	mov	eax, 1
$LN1@stbir__res:
; Line 2425
	add	rsp, 104				; 00000068H
	ret	0
stbir__resize_allocated ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filter_height$ = 32
pixel_margin$ = 36
info$ = 64
stbir__calculate_memory PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2250
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2251
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+92]
	call	stbir__get_filter_pixel_margin
	mov	DWORD PTR pixel_margin$[rsp], eax
; Line 2252
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	call	stbir__get_filter_pixel_width
	mov	DWORD PTR filter_height$[rsp], eax
; Line 2254
	mov	rax, QWORD PTR info$[rsp]
	mov	r9d, DWORD PTR [rax+32]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+92]
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+68]
	call	stbir__get_contributors
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+192], eax
; Line 2255
	mov	rax, QWORD PTR info$[rsp]
	mov	r9d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+96]
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+72]
	call	stbir__get_contributors
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+196], eax
; Line 2258
	mov	eax, DWORD PTR filter_height$[rsp]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+204], eax
; Line 2260
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+192]
	shl	rax, 3
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+240], eax
; Line 2261
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__get_total_horizontal_coefficients
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+244], eax
; Line 2262
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+196]
	shl	rax, 3
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+248], eax
; Line 2263
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__get_total_vertical_coefficients
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+252], eax
; Line 2264
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR pixel_margin$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	rcx, QWORD PTR info$[rsp]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+256], eax
; Line 2265
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+260], eax
; Line 2266
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	eax, DWORD PTR [rcx+76]
	mov	rcx, QWORD PTR info$[rsp]
	imul	eax, DWORD PTR [rcx+204]
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+264], eax
; Line 2267
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	shl	rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+268], eax
; Line 2269
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+92], 0
	jne	SHORT $LN5@stbir__cal
	mov	r8d, 2269				; 000008ddH
	lea	rdx, OFFSET FLAT:$SG79473
	lea	rcx, OFFSET FLAT:$SG79474
	call	_wassert
	xor	eax, eax
$LN5@stbir__cal:
; Line 2270
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+92]
	cmp	rax, 6
	jb	SHORT $LN6@stbir__cal
	mov	r8d, 2270				; 000008deH
	lea	rdx, OFFSET FLAT:$SG79475
	lea	rcx, OFFSET FLAT:$SG79476
	call	_wassert
	xor	eax, eax
$LN6@stbir__cal:
; Line 2271
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+96], 0
	jne	SHORT $LN7@stbir__cal
	mov	r8d, 2271				; 000008dfH
	lea	rdx, OFFSET FLAT:$SG79477
	lea	rcx, OFFSET FLAT:$SG79478
	call	_wassert
	xor	eax, eax
$LN7@stbir__cal:
; Line 2272
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	cmp	rax, 6
	jb	SHORT $LN8@stbir__cal
	mov	r8d, 2272				; 000008e0H
	lea	rdx, OFFSET FLAT:$SG79479
	lea	rcx, OFFSET FLAT:$SG79480
	call	_wassert
	xor	eax, eax
$LN8@stbir__cal:
; Line 2274
	mov	rcx, QWORD PTR info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__cal
; Line 2278
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+260], 0
	jmp	SHORT $LN3@stbir__cal
$LN2@stbir__cal:
; Line 2282
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+268], 0
$LN3@stbir__cal:
; Line 2284
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+240]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+244]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+248]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+252]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+256]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+260]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+264]
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+268]
; Line 2288
	add	rsp, 56					; 00000038H
	ret	0
stbir__calculate_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
tv75 = 36
info$ = 64
h_filter$ = 72
v_filter$ = 80
stbir__choose_filter PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2240
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2241
	cmp	DWORD PTR h_filter$[rsp], 0
	jne	SHORT $LN2@stbir__cho
; Line 2242
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+68]
	call	stbir__use_upsampling
	test	eax, eax
	je	SHORT $LN5@stbir__cho
	mov	DWORD PTR tv69[rsp], 4
	jmp	SHORT $LN6@stbir__cho
$LN5@stbir__cho:
	mov	DWORD PTR tv69[rsp], 5
$LN6@stbir__cho:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR h_filter$[rsp], eax
$LN2@stbir__cho:
; Line 2243
	cmp	DWORD PTR v_filter$[rsp], 0
	jne	SHORT $LN3@stbir__cho
; Line 2244
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR [rax+72]
	call	stbir__use_upsampling
	test	eax, eax
	je	SHORT $LN7@stbir__cho
	mov	DWORD PTR tv75[rsp], 4
	jmp	SHORT $LN8@stbir__cho
$LN7@stbir__cho:
	mov	DWORD PTR tv75[rsp], 5
$LN8@stbir__cho:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR v_filter$[rsp], eax
$LN3@stbir__cho:
; Line 2245
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR h_filter$[rsp]
	mov	DWORD PTR [rax+92], ecx
; Line 2246
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR v_filter$[rsp]
	mov	DWORD PTR [rax+96], ecx
; Line 2247
	add	rsp, 56					; 00000038H
	ret	0
stbir__choose_filter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
s0$ = 16
t0$ = 24
s1$ = 32
t1$ = 40
transform$ = 48
stbir__calculate_transform PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2216
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
; Line 2217
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR s0$[rsp]
	movss	DWORD PTR [rax+44], xmm0
; Line 2218
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR t0$[rsp]
	movss	DWORD PTR [rax+48], xmm0
; Line 2219
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax+52], xmm0
; Line 2220
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm0, DWORD PTR t1$[rsp]
	movss	DWORD PTR [rax+56], xmm0
; Line 2222
	cmp	QWORD PTR transform$[rsp], 0
	je	SHORT $LN2@stbir__cal
; Line 2224
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR transform$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	movss	DWORD PTR [rcx+68], xmm0
; Line 2225
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR transform$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	movss	DWORD PTR [rcx+72], xmm0
; Line 2226
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR transform$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	movss	DWORD PTR [rcx+60], xmm0
; Line 2227
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR transform$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax]
	movss	DWORD PTR [rcx+64], xmm0
; Line 2228
	jmp	$LN3@stbir__cal
$LN2@stbir__cal:
; Line 2231
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+32]
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	subss	xmm1, DWORD PTR s0$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR info$[rsp]
	movss	DWORD PTR [rax+68], xmm0
; Line 2232
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+36]
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+12]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR t1$[rsp]
	subss	xmm1, DWORD PTR t0$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR info$[rsp]
	movss	DWORD PTR [rax+72], xmm0
; Line 2234
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+32]
	movss	xmm1, DWORD PTR s0$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR s1$[rsp]
	subss	xmm1, DWORD PTR s0$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR info$[rsp]
	movss	DWORD PTR [rax+60], xmm0
; Line 2235
	mov	rax, QWORD PTR info$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+36]
	movss	xmm1, DWORD PTR t0$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR t1$[rsp]
	subss	xmm1, DWORD PTR t0$[rsp]
	divss	xmm0, xmm1
	mov	rax, QWORD PTR info$[rsp]
	movss	DWORD PTR [rax+64], xmm0
$LN3@stbir__cal:
; Line 2237
	ret	0
stbir__calculate_transform ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
input_w$ = 16
input_h$ = 24
output_w$ = 32
output_h$ = 40
channels$ = 48
stbir__setup PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2207
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 2208
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR input_w$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 2209
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR input_h$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 2210
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rax+32], ecx
; Line 2211
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 2212
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR channels$[rsp]
	mov	DWORD PTR [rax+76], ecx
; Line 2213
	ret	0
stbir__setup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 64
out_first_scanline$1 = 68
scale_ratio$ = 72
out_last_scanline$2 = 76
pixel_margin$ = 80
max_y$ = 84
in_pixels_radius$ = 88
output_h$ = 92
out_center_of_in$3 = 96
stbir_info$ = 128
stbir__buffer_loop_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2166
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2168
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR scale_ratio$[rsp], xmm0
; Line 2169
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR output_h$[rsp], eax
; Line 2170
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	QWORD PTR [rcx+rax+8]
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR in_pixels_radius$[rsp], xmm0
; Line 2171
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+188]
	mov	DWORD PTR pixel_margin$[rsp], eax
; Line 2172
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR pixel_margin$[rsp]
	mov	DWORD PTR max_y$[rsp], eax
; Line 2174
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	je	SHORT $LN11@stbir__buf
	mov	r8d, 2174				; 0000087eH
	lea	rdx, OFFSET FLAT:$SG79402
	lea	rcx, OFFSET FLAT:$SG79403
	call	_wassert
	xor	eax, eax
$LN11@stbir__buf:
; Line 2176
	mov	eax, DWORD PTR pixel_margin$[rsp]
	neg	eax
	mov	DWORD PTR y$[rsp], eax
	jmp	SHORT $LN4@stbir__buf
$LN2@stbir__buf:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN4@stbir__buf:
	mov	eax, DWORD PTR max_y$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN3@stbir__buf
; Line 2181
	lea	rax, QWORD PTR out_center_of_in$3[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR out_last_scanline$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR out_first_scanline$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm3, DWORD PTR [rax+64]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	movss	xmm1, DWORD PTR in_pixels_radius$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	call	stbir__calculate_sample_range_downsample
; Line 2183
	mov	eax, DWORD PTR out_first_scanline$1[rsp]
	mov	ecx, DWORD PTR out_last_scanline$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	cmp	eax, DWORD PTR [rcx+204]
	jle	SHORT $LN12@stbir__buf
	mov	r8d, 2183				; 00000887H
	lea	rdx, OFFSET FLAT:$SG79404
	lea	rcx, OFFSET FLAT:$SG79405
	call	_wassert
	xor	eax, eax
$LN12@stbir__buf:
; Line 2185
	cmp	DWORD PTR out_last_scanline$2[rsp], 0
	jl	SHORT $LN8@stbir__buf
	mov	eax, DWORD PTR output_h$[rsp]
	cmp	DWORD PTR out_first_scanline$1[rsp], eax
	jl	SHORT $LN7@stbir__buf
$LN8@stbir__buf:
; Line 2186
	jmp	$LN2@stbir__buf
$LN7@stbir__buf:
; Line 2188
	mov	edx, DWORD PTR out_first_scanline$1[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__empty_ring_buffer
; Line 2190
	mov	edx, DWORD PTR y$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__decode_and_resample_downsample
; Line 2193
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+216], 0
	jge	SHORT $LN9@stbir__buf
; Line 2194
	mov	edx, DWORD PTR out_first_scanline$1[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__add_empty_ring_buffer_entry
$LN9@stbir__buf:
$LN5@stbir__buf:
; Line 2196
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+212]
	cmp	DWORD PTR out_last_scanline$2[rsp], eax
	jle	SHORT $LN6@stbir__buf
; Line 2197
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+212]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__add_empty_ring_buffer_entry
	jmp	SHORT $LN5@stbir__buf
$LN6@stbir__buf:
; Line 2200
	mov	edx, DWORD PTR y$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_vertical_downsample
; Line 2201
	jmp	$LN2@stbir__buf
$LN3@stbir__buf:
; Line 2203
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	edx, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__empty_ring_buffer
; Line 2204
	add	rsp, 120				; 00000078H
	ret	0
stbir__buffer_loop_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
colorspace$ = 64
type$ = 68
output_stride_bytes$ = 72
ring_buffer_length$ = 76
output_row_start$1 = 80
decode$ = 84
alpha_channel$ = 88
channels$ = 92
output_w$ = 96
ring_buffer$ = 104
output_data$ = 112
ring_buffer_entry$2 = 120
stbir_info$ = 144
first_necessary_scanline$ = 152
stbir__empty_ring_buffer PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2121
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2122
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR output_stride_bytes$[rsp], eax
; Line 2123
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 2124
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR alpha_channel$[rsp], eax
; Line 2125
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+88]
	mov	DWORD PTR type$[rsp], eax
; Line 2126
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+108]
	mov	DWORD PTR colorspace$[rsp], eax
; Line 2127
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR output_w$[rsp], eax
; Line 2128
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR output_data$[rsp], rax
; Line 2129
	mov	eax, DWORD PTR colorspace$[rsp]
	mov	ecx, DWORD PTR type$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR decode$[rsp], eax
; Line 2131
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR ring_buffer$[rsp], rax
; Line 2132
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+200]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR ring_buffer_length$[rsp], eax
; Line 2134
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+216], 0
	jl	$LN4@stbir__emp
$LN2@stbir__emp:
; Line 2137
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	cmp	DWORD PTR first_necessary_scanline$[rsp], eax
	jle	$LN3@stbir__emp
; Line 2139
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+208], 0
	jl	$LN5@stbir__emp
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	cmp	DWORD PTR [rax+208], ecx
	jge	SHORT $LN5@stbir__emp
; Line 2141
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	imul	eax, DWORD PTR output_stride_bytes$[rsp]
	mov	DWORD PTR output_row_start$1[rsp], eax
; Line 2142
	mov	r8d, DWORD PTR ring_buffer_length$[rsp]
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	edx, DWORD PTR [rax+216]
	mov	rcx, QWORD PTR ring_buffer$[rsp]
	call	stbir__get_ring_buffer_entry
	mov	QWORD PTR ring_buffer_entry$2[rsp], rax
; Line 2143
	movsxd	rax, DWORD PTR output_row_start$1[rsp]
	mov	rcx, QWORD PTR output_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR decode$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR channels$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9, QWORD PTR ring_buffer_entry$2[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR output_w$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__encode_scanline
$LN5@stbir__emp:
; Line 2147
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR [rcx+212]
	cmp	DWORD PTR [rax+208], ecx
	jne	SHORT $LN6@stbir__emp
; Line 2151
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+216], -1
; Line 2152
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+208], 0
; Line 2153
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+212], 0
; Line 2154
	jmp	SHORT $LN3@stbir__emp
; Line 2155
	jmp	SHORT $LN7@stbir__emp
$LN6@stbir__emp:
; Line 2158
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	inc	eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rcx+208], eax
; Line 2159
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+216]
	inc	eax
	cdq
	mov	rcx, QWORD PTR stbir_info$[rsp]
	idiv	DWORD PTR [rcx+204]
	mov	eax, edx
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rcx+216], eax
$LN7@stbir__emp:
; Line 2161
	jmp	$LN2@stbir__emp
$LN3@stbir__emp:
$LN4@stbir__emp:
; Line 2163
	add	rsp, 136				; 00000088H
	ret	0
stbir__empty_ring_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 64
in_first_scanline$1 = 68
scale_ratio$ = 72
in_last_scanline$2 = 76
in_center_of_out$3 = 80
out_scanlines_radius$ = 84
stbir_info$ = 112
stbir__buffer_loop_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2068
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2070
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR scale_ratio$[rsp], xmm0
; Line 2071
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR out_scanlines_radius$[rsp], xmm0
; Line 2073
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	jne	SHORT $LN14@stbir__buf
	mov	r8d, 2073				; 00000819H
	lea	rdx, OFFSET FLAT:$SG79344
	lea	rcx, OFFSET FLAT:$SG79345
	call	_wassert
	xor	eax, eax
$LN14@stbir__buf:
; Line 2075
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN4@stbir__buf
$LN2@stbir__buf:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN4@stbir__buf:
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN3@stbir__buf
; Line 2077
	xorps	xmm0, xmm0
	movss	DWORD PTR in_center_of_out$3[rsp], xmm0
; Line 2078
	mov	DWORD PTR in_first_scanline$1[rsp], 0
	mov	DWORD PTR in_last_scanline$2[rsp], 0
; Line 2080
	lea	rax, QWORD PTR in_center_of_out$3[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR in_last_scanline$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR in_first_scanline$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm3, DWORD PTR [rax+64]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	movss	xmm1, DWORD PTR out_scanlines_radius$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	call	stbir__calculate_sample_range_upsample
; Line 2082
	mov	eax, DWORD PTR in_first_scanline$1[rsp]
	mov	ecx, DWORD PTR in_last_scanline$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	cmp	eax, DWORD PTR [rcx+204]
	jle	SHORT $LN15@stbir__buf
	mov	r8d, 2082				; 00000822H
	lea	rdx, OFFSET FLAT:$SG79346
	lea	rcx, OFFSET FLAT:$SG79347
	call	_wassert
	xor	eax, eax
$LN15@stbir__buf:
; Line 2084
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+216], 0
	jl	$LN9@stbir__buf
$LN5@stbir__buf:
; Line 2087
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	cmp	DWORD PTR in_first_scanline$1[rsp], eax
	jle	$LN6@stbir__buf
; Line 2089
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR [rcx+212]
	cmp	DWORD PTR [rax+208], ecx
	jne	SHORT $LN10@stbir__buf
; Line 2093
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+216], -1
; Line 2094
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+208], 0
; Line 2095
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+212], 0
; Line 2096
	jmp	SHORT $LN6@stbir__buf
; Line 2097
	jmp	SHORT $LN11@stbir__buf
$LN10@stbir__buf:
; Line 2100
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	inc	eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rcx+208], eax
; Line 2101
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+216]
	inc	eax
	cdq
	mov	rcx, QWORD PTR stbir_info$[rsp]
	idiv	DWORD PTR [rcx+204]
	mov	eax, edx
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rcx+216], eax
$LN11@stbir__buf:
; Line 2103
	jmp	$LN5@stbir__buf
$LN6@stbir__buf:
$LN9@stbir__buf:
; Line 2107
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+216], 0
	jge	SHORT $LN12@stbir__buf
; Line 2108
	mov	edx, DWORD PTR in_first_scanline$1[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__decode_and_resample_upsample
$LN12@stbir__buf:
$LN7@stbir__buf:
; Line 2110
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+212]
	cmp	DWORD PTR in_last_scanline$2[rsp], eax
	jle	SHORT $LN8@stbir__buf
; Line 2111
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+212]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__decode_and_resample_upsample
	jmp	SHORT $LN7@stbir__buf
$LN8@stbir__buf:
; Line 2114
	mov	edx, DWORD PTR y$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_vertical_upsample
; Line 2117
	jmp	$LN2@stbir__buf
$LN3@stbir__buf:
; Line 2118
	add	rsp, 104				; 00000068H
	ret	0
stbir__buffer_loop_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
in_pixel_index$1 = 52
coefficient$2 = 56
ring_buffer_entry$3 = 64
in_pixel_index$4 = 72
in_pixel_index$5 = 76
c$6 = 80
k$ = 84
output_w$ = 88
horizontal_buffer$ = 96
tv142 = 104
contributor$ = 108
in_pixel_index$7 = 112
channels$ = 116
in_pixel_index$8 = 120
n0$ = 124
n1$ = 128
coefficient_width$ = 132
coefficient_index$9 = 136
coefficient_group$10 = 140
ring_buffer_length$ = 144
ring_buffer_entries$ = 148
ring_buffer_first_scanline$ = 152
ring_buffer_begin_index$ = 156
vertical_contributors$ = 160
vertical_coefficients$ = 168
ring_buffer$ = 176
stbir_info$ = 208
n$ = 216
stbir__resample_vertical_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1988
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 1990
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR output_w$[rsp], eax
; Line 1991
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR vertical_contributors$[rsp], rax
; Line 1992
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR vertical_coefficients$[rsp], rax
; Line 1993
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 1994
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+204]
	mov	DWORD PTR ring_buffer_entries$[rsp], eax
; Line 1995
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+160]
	mov	QWORD PTR horizontal_buffer$[rsp], rax
; Line 1996
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+172]
	mov	DWORD PTR coefficient_width$[rsp], eax
; Line 1997
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+188]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR contributor$[rsp], eax
; Line 1999
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR ring_buffer$[rsp], rax
; Line 2000
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+216]
	mov	DWORD PTR ring_buffer_begin_index$[rsp], eax
; Line 2001
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	mov	DWORD PTR ring_buffer_first_scanline$[rsp], eax
; Line 2002
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+200]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR ring_buffer_length$[rsp], eax
; Line 2005
	movsxd	rax, DWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR vertical_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$[rsp], eax
; Line 2006
	movsxd	rax, DWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR vertical_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$[rsp], eax
; Line 2008
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	je	SHORT $LN31@stbir__res
	mov	r8d, 2008				; 000007d8H
	lea	rdx, OFFSET FLAT:$SG79316
	lea	rcx, OFFSET FLAT:$SG79317
	call	_wassert
	xor	eax, eax
$LN31@stbir__res:
; Line 2010
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbir__res
$LN2@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN3@stbir__res
; Line 2012
	mov	eax, DWORD PTR n0$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR coefficient_index$9[rsp], eax
; Line 2013
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR contributor$[rsp]
	mov	DWORD PTR coefficient_group$10[rsp], eax
; Line 2014
	mov	eax, DWORD PTR coefficient_index$9[rsp]
	mov	ecx, DWORD PTR coefficient_group$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$2[rsp], xmm0
; Line 2016
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$3[rsp], rax
; Line 2018
	mov	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR tv142[rsp], eax
	cmp	DWORD PTR tv142[rsp], 1
	je	SHORT $LN25@stbir__res
	cmp	DWORD PTR tv142[rsp], 2
	je	$LN26@stbir__res
	cmp	DWORD PTR tv142[rsp], 3
	je	$LN27@stbir__res
	cmp	DWORD PTR tv142[rsp], 4
	je	$LN28@stbir__res
	jmp	$LN29@stbir__res
$LN25@stbir__res:
; Line 2020
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbir__res
$LN7@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN8@stbir__res
; Line 2022
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR in_pixel_index$7[rsp], eax
; Line 2023
	mov	eax, DWORD PTR in_pixel_index$7[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$7[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$7[rsp]
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2024
	jmp	SHORT $LN7@stbir__res
$LN8@stbir__res:
; Line 2025
	jmp	$LN5@stbir__res
$LN26@stbir__res:
; Line 2027
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN12@stbir__res
$LN10@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN12@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN11@stbir__res
; Line 2029
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 1
	mov	DWORD PTR in_pixel_index$5[rsp], eax
; Line 2030
	mov	eax, DWORD PTR in_pixel_index$5[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$5[rsp]
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2031
	mov	eax, DWORD PTR in_pixel_index$5[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$5[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2032
	jmp	$LN10@stbir__res
$LN11@stbir__res:
; Line 2033
	jmp	$LN5@stbir__res
$LN27@stbir__res:
; Line 2035
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN15@stbir__res
$LN13@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN15@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN14@stbir__res
; Line 2037
	imul	eax, DWORD PTR x$[rsp], 3
	mov	DWORD PTR in_pixel_index$4[rsp], eax
; Line 2038
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$4[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2039
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$4[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2040
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$4[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$4[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2041
	jmp	$LN13@stbir__res
$LN14@stbir__res:
; Line 2042
	jmp	$LN5@stbir__res
$LN28@stbir__res:
; Line 2044
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN18@stbir__res
$LN16@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN18@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN17@stbir__res
; Line 2046
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR in_pixel_index$1[rsp], eax
; Line 2047
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2048
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2049
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2050
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	add	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 2051
	jmp	$LN16@stbir__res
$LN17@stbir__res:
; Line 2052
	jmp	$LN5@stbir__res
$LN29@stbir__res:
; Line 2054
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN21@stbir__res
$LN19@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN21@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN20@stbir__res
; Line 2056
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR in_pixel_index$8[rsp], eax
; Line 2059
	mov	DWORD PTR c$6[rsp], 0
	jmp	SHORT $LN24@stbir__res
$LN22@stbir__res:
	mov	eax, DWORD PTR c$6[rsp]
	inc	eax
	mov	DWORD PTR c$6[rsp], eax
$LN24@stbir__res:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$6[rsp], eax
	jge	SHORT $LN23@stbir__res
; Line 2060
	mov	eax, DWORD PTR c$6[rsp]
	mov	ecx, DWORD PTR in_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR c$6[rsp]
	mov	edx, DWORD PTR in_pixel_index$8[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR horizontal_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$2[rsp]
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR c$6[rsp]
	mov	ecx, DWORD PTR in_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR ring_buffer_entry$3[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN22@stbir__res
$LN23@stbir__res:
; Line 2061
	jmp	$LN19@stbir__res
$LN20@stbir__res:
$LN5@stbir__res:
; Line 2064
	jmp	$LN2@stbir__res
$LN3@stbir__res:
; Line 2065
	add	rsp, 200				; 000000c8H
	ret	0
stbir__resample_vertical_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 64
x$ = 68
coefficient_counter$ = 72
in_pixel_index$1 = 76
encode_buffer$ = 80
in_pixel_index$2 = 88
output_w$ = 92
in_pixel_index$3 = 96
c$4 = 100
n0$ = 104
n1$ = 108
ring_buffer_length$ = 112
ring_buffer_entries$ = 116
ring_buffer_first_scanline$ = 120
ring_buffer_begin_index$ = 124
coefficient_group$ = 128
channels$ = 132
tv134 = 136
coefficient$5 = 140
contributor$ = 144
in_pixel_index$6 = 148
coefficient$7 = 152
in_pixel_index$8 = 156
coefficient$9 = 160
ring_buffer$ = 168
vertical_coefficients$ = 176
ring_buffer_entry$10 = 184
coefficient$11 = 192
coefficient_index$12 = 196
coefficient_index$13 = 200
coefficient_index$14 = 204
coefficient_index$15 = 208
coefficient$16 = 212
output_row_start$ = 216
decode$ = 220
alpha_channel$ = 224
colorspace$ = 228
type$ = 232
coefficient_width$ = 236
coefficient_index$17 = 240
ring_buffer_entry$18 = 248
vertical_contributors$ = 256
ring_buffer_entry$19 = 264
ring_buffer_entry$20 = 272
ring_buffer_entry$21 = 280
output_data$ = 288
stbir_info$ = 320
n$ = 328
stbir__resample_vertical_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1871
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
; Line 1873
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR output_w$[rsp], eax
; Line 1874
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR vertical_contributors$[rsp], rax
; Line 1875
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR vertical_coefficients$[rsp], rax
; Line 1876
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 1877
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR alpha_channel$[rsp], eax
; Line 1878
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+88]
	mov	DWORD PTR type$[rsp], eax
; Line 1879
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+108]
	mov	DWORD PTR colorspace$[rsp], eax
; Line 1880
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+204]
	mov	DWORD PTR ring_buffer_entries$[rsp], eax
; Line 1881
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR output_data$[rsp], rax
; Line 1882
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+232]
	mov	QWORD PTR encode_buffer$[rsp], rax
; Line 1883
	mov	eax, DWORD PTR colorspace$[rsp]
	mov	ecx, DWORD PTR type$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR decode$[rsp], eax
; Line 1884
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+172]
	mov	DWORD PTR coefficient_width$[rsp], eax
; Line 1886
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR contributor$[rsp], eax
; Line 1888
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+224]
	mov	QWORD PTR ring_buffer$[rsp], rax
; Line 1889
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+216]
	mov	DWORD PTR ring_buffer_begin_index$[rsp], eax
; Line 1890
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+208]
	mov	DWORD PTR ring_buffer_first_scanline$[rsp], eax
; Line 1891
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+200]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	DWORD PTR ring_buffer_length$[rsp], eax
; Line 1894
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR contributor$[rsp]
	mov	DWORD PTR coefficient_group$[rsp], eax
; Line 1896
	movsxd	rax, DWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR vertical_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$[rsp], eax
; Line 1897
	movsxd	rax, DWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR vertical_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$[rsp], eax
; Line 1899
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax+40]
	mov	eax, ecx
	mov	DWORD PTR output_row_start$[rsp], eax
; Line 1901
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_height_upsampling
	test	eax, eax
	jne	SHORT $LN43@stbir__res
	mov	r8d, 1901				; 0000076dH
	lea	rdx, OFFSET FLAT:$SG79251
	lea	rcx, OFFSET FLAT:$SG79252
	call	_wassert
	xor	eax, eax
$LN43@stbir__res:
; Line 1903
	movsxd	rax, DWORD PTR output_w$[rsp]
	shl	rax, 2
	movsxd	rcx, DWORD PTR channels$[rsp]
	imul	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	call	memset
; Line 1908
	mov	DWORD PTR coefficient_counter$[rsp], 0
; Line 1909
	mov	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR tv134[rsp], eax
	cmp	DWORD PTR tv134[rsp], 1
	je	SHORT $LN37@stbir__res
	cmp	DWORD PTR tv134[rsp], 2
	je	$LN38@stbir__res
	cmp	DWORD PTR tv134[rsp], 3
	je	$LN39@stbir__res
	cmp	DWORD PTR tv134[rsp], 4
	je	$LN40@stbir__res
	jmp	$LN41@stbir__res
$LN37@stbir__res:
; Line 1911
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN6@stbir__res
$LN4@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN5@stbir__res
; Line 1913
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	mov	DWORD PTR coefficient_index$17[rsp], eax
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$[rsp], eax
; Line 1914
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$20[rsp], rax
; Line 1915
	mov	eax, DWORD PTR coefficient_index$17[rsp]
	mov	ecx, DWORD PTR coefficient_group$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$11[rsp], xmm0
; Line 1916
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbir__res
$LN7@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN8@stbir__res
; Line 1918
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR in_pixel_index$6[rsp], eax
; Line 1919
	mov	eax, DWORD PTR in_pixel_index$6[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$6[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$20[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$11[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$6[rsp]
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1920
	jmp	SHORT $LN7@stbir__res
$LN8@stbir__res:
; Line 1921
	jmp	$LN4@stbir__res
$LN5@stbir__res:
; Line 1922
	jmp	$LN2@stbir__res
$LN38@stbir__res:
; Line 1924
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN12@stbir__res
$LN10@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN12@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN11@stbir__res
; Line 1926
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	mov	DWORD PTR coefficient_index$12[rsp], eax
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$[rsp], eax
; Line 1927
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$19[rsp], rax
; Line 1928
	mov	eax, DWORD PTR coefficient_index$12[rsp]
	mov	ecx, DWORD PTR coefficient_group$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$9[rsp], xmm0
; Line 1929
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN15@stbir__res
$LN13@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN15@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN14@stbir__res
; Line 1931
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 1
	mov	DWORD PTR in_pixel_index$3[rsp], eax
; Line 1932
	mov	eax, DWORD PTR in_pixel_index$3[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$3[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$19[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$9[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$3[rsp]
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1933
	mov	eax, DWORD PTR in_pixel_index$3[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$3[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$19[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$9[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$3[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1934
	jmp	$LN13@stbir__res
$LN14@stbir__res:
; Line 1935
	jmp	$LN10@stbir__res
$LN11@stbir__res:
; Line 1936
	jmp	$LN2@stbir__res
$LN39@stbir__res:
; Line 1938
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN18@stbir__res
$LN16@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN17@stbir__res
; Line 1940
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	mov	DWORD PTR coefficient_index$13[rsp], eax
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$[rsp], eax
; Line 1941
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$18[rsp], rax
; Line 1942
	mov	eax, DWORD PTR coefficient_index$13[rsp]
	mov	ecx, DWORD PTR coefficient_group$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$7[rsp], xmm0
; Line 1943
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN21@stbir__res
$LN19@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN21@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN20@stbir__res
; Line 1945
	imul	eax, DWORD PTR x$[rsp], 3
	mov	DWORD PTR in_pixel_index$2[rsp], eax
; Line 1946
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$18[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$7[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1947
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$18[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$7[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1948
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$18[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$7[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$2[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1949
	jmp	$LN19@stbir__res
$LN20@stbir__res:
; Line 1950
	jmp	$LN16@stbir__res
$LN17@stbir__res:
; Line 1951
	jmp	$LN2@stbir__res
$LN40@stbir__res:
; Line 1953
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN24@stbir__res
$LN22@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN24@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN23@stbir__res
; Line 1955
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	mov	DWORD PTR coefficient_index$14[rsp], eax
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$[rsp], eax
; Line 1956
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$10[rsp], rax
; Line 1957
	mov	eax, DWORD PTR coefficient_index$14[rsp]
	mov	ecx, DWORD PTR coefficient_group$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$5[rsp], xmm0
; Line 1958
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN27@stbir__res
$LN25@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN27@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN26@stbir__res
; Line 1960
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR in_pixel_index$1[rsp], eax
; Line 1961
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$10[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$5[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1962
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$10[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$5[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1963
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$10[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$5[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1964
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$1[rsp]
	add	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$10[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$5[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR in_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1965
	jmp	$LN25@stbir__res
$LN26@stbir__res:
; Line 1966
	jmp	$LN22@stbir__res
$LN23@stbir__res:
; Line 1967
	jmp	$LN2@stbir__res
$LN41@stbir__res:
; Line 1969
	mov	eax, DWORD PTR n0$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN30@stbir__res
$LN28@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN30@stbir__res:
	mov	eax, DWORD PTR n1$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN29@stbir__res
; Line 1971
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	mov	DWORD PTR coefficient_index$15[rsp], eax
	mov	eax, DWORD PTR coefficient_counter$[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$[rsp], eax
; Line 1972
	mov	eax, DWORD PTR ring_buffer_length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ring_buffer_entries$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ring_buffer_first_scanline$[rsp]
	mov	r8d, DWORD PTR ring_buffer_begin_index$[rsp]
	mov	rdx, QWORD PTR ring_buffer$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	call	stbir__get_ring_buffer_scanline
	mov	QWORD PTR ring_buffer_entry$21[rsp], rax
; Line 1973
	mov	eax, DWORD PTR coefficient_index$15[rsp]
	mov	ecx, DWORD PTR coefficient_group$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR vertical_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$16[rsp], xmm0
; Line 1974
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN33@stbir__res
$LN31@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN33@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN32@stbir__res
; Line 1976
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR in_pixel_index$8[rsp], eax
; Line 1978
	mov	DWORD PTR c$4[rsp], 0
	jmp	SHORT $LN36@stbir__res
$LN34@stbir__res:
	mov	eax, DWORD PTR c$4[rsp]
	inc	eax
	mov	DWORD PTR c$4[rsp], eax
$LN36@stbir__res:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$4[rsp], eax
	jge	SHORT $LN35@stbir__res
; Line 1979
	mov	eax, DWORD PTR c$4[rsp]
	mov	ecx, DWORD PTR in_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR c$4[rsp]
	mov	edx, DWORD PTR in_pixel_index$8[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ring_buffer_entry$21[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$16[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR c$4[rsp]
	mov	ecx, DWORD PTR in_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN34@stbir__res
$LN35@stbir__res:
; Line 1980
	jmp	$LN31@stbir__res
$LN32@stbir__res:
; Line 1981
	jmp	$LN28@stbir__res
$LN29@stbir__res:
$LN2@stbir__res:
; Line 1984
	movsxd	rax, DWORD PTR output_row_start$[rsp]
	mov	rcx, QWORD PTR output_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR decode$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR channels$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9, QWORD PTR encode_buffer$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR output_w$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__encode_scanline
; Line 1985
	add	rsp, 312				; 00000138H
	ret	0
stbir__resample_vertical_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
n$ = 36
num_nonalpha$ = 40
pixel_index$1 = 44
pixel_index$2 = 48
pixel_index$3 = 52
pixel_index$4 = 56
pixel_index$5 = 60
alpha$6 = 64
tv76 = 68
tv131 = 72
index$7 = 76
index$8 = 80
index$9 = 84
index$10 = 88
index$11 = 92
index$12 = 96
index$13 = 100
index$14 = 104
reciprocal_alpha$15 = 108
pixel_index$16 = 112
pixel_index$17 = 116
pixel_index$18 = 120
pixel_index$19 = 124
nonalpha$ = 128
__$ArrayPad$ = 256
stbir_info$ = 288
num_pixels$ = 296
output_buffer$ = 304
encode_buffer$ = 312
channels$ = 320
alpha_channel$ = 328
decode$ = 336
stbir__encode_scanline PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1697
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1703
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 1
	test	eax, eax
	jne	$LN61@stbir__enc
; Line 1705
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbir__enc
$LN2@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbir__enc
; Line 1707
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$1[rsp], eax
; Line 1709
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR pixel_index$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR alpha$6[rsp], xmm0
; Line 1710
	movss	xmm0, DWORD PTR alpha$6[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN83@stbir__enc
	je	SHORT $LN79@stbir__enc
$LN83@stbir__enc:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR alpha$6[rsp]
	movss	DWORD PTR tv76[rsp], xmm0
	jmp	SHORT $LN80@stbir__enc
$LN79@stbir__enc:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv76[rsp], xmm0
$LN80@stbir__enc:
	movss	xmm0, DWORD PTR tv76[rsp]
	movss	DWORD PTR reciprocal_alpha$15[rsp], xmm0
; Line 1713
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN7@stbir__enc
$LN5@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN6@stbir__enc
; Line 1714
	mov	eax, DWORD PTR alpha_channel$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN62@stbir__enc
; Line 1715
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR reciprocal_alpha$15[rsp]
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN62@stbir__enc:
	jmp	SHORT $LN5@stbir__enc
$LN6@stbir__enc:
; Line 1721
	jmp	$LN2@stbir__enc
$LN3@stbir__enc:
$LN61@stbir__enc:
; Line 1726
	mov	DWORD PTR x$[rsp], 0
	mov	DWORD PTR num_nonalpha$[rsp], 0
	jmp	SHORT $LN10@stbir__enc
$LN8@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN10@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN9@stbir__enc
; Line 1728
	mov	eax, DWORD PTR alpha_channel$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jne	SHORT $LN64@stbir__enc
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN63@stbir__enc
$LN64@stbir__enc:
; Line 1730
	movsxd	rax, DWORD PTR num_nonalpha$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	mov	WORD PTR nonalpha$[rsp+rax*2], cx
	mov	eax, DWORD PTR num_nonalpha$[rsp]
	inc	eax
	mov	DWORD PTR num_nonalpha$[rsp], eax
$LN63@stbir__enc:
; Line 1732
	jmp	SHORT $LN8@stbir__enc
$LN9@stbir__enc:
; Line 1745
	mov	eax, DWORD PTR decode$[rsp]
	mov	DWORD PTR tv131[rsp], eax
	cmp	DWORD PTR tv131[rsp], 7
	ja	$LN77@stbir__enc
	movsxd	rax, DWORD PTR tv131[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN82@stbir__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN65@stbir__enc:
; Line 1748
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN15@stbir__enc
$LN13@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN15@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN14@stbir__enc
; Line 1750
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$16[rsp], eax
; Line 1752
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN18@stbir__enc
$LN16@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN18@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN17@stbir__enc
; Line 1754
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$16[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$7[rsp], eax
; Line 1755
	movsxd	rax, DWORD PTR index$7[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	mulss	xmm0, DWORD PTR stbir__max_uint8_as_float
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	movsxd	rcx, DWORD PTR index$7[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1756
	jmp	SHORT $LN16@stbir__enc
$LN17@stbir__enc:
; Line 1757
	jmp	$LN13@stbir__enc
$LN14@stbir__enc:
; Line 1758
	jmp	$LN11@stbir__enc
$LN66@stbir__enc:
; Line 1761
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN21@stbir__enc
$LN19@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN21@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN20@stbir__enc
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$2[rsp], eax
; Line 1765
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN24@stbir__enc
$LN22@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN24@stbir__enc:
	mov	eax, DWORD PTR num_nonalpha$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN23@stbir__enc
; Line 1767
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	eax, WORD PTR nonalpha$[rsp+rax*2]
	mov	ecx, DWORD PTR pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$8[rsp], eax
; Line 1768
	movsxd	rax, DWORD PTR index$8[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__linear_to_srgb_uchar
	movsxd	rcx, DWORD PTR index$8[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1769
	jmp	SHORT $LN22@stbir__enc
$LN23@stbir__enc:
; Line 1771
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN67@stbir__enc
; Line 1772
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	mulss	xmm0, DWORD PTR stbir__max_uint8_as_float
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	edx, DWORD PTR pixel_index$2[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN67@stbir__enc:
; Line 1773
	jmp	$LN19@stbir__enc
$LN20@stbir__enc:
; Line 1774
	jmp	$LN11@stbir__enc
$LN68@stbir__enc:
; Line 1777
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN27@stbir__enc
$LN25@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN27@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN26@stbir__enc
; Line 1779
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$17[rsp], eax
; Line 1781
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN30@stbir__enc
$LN28@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN30@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN29@stbir__enc
; Line 1783
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$9[rsp], eax
; Line 1784
	movsxd	rax, DWORD PTR index$9[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	mulss	xmm0, DWORD PTR stbir__max_uint16_as_float
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	movsxd	rcx, DWORD PTR index$9[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 1785
	jmp	SHORT $LN28@stbir__enc
$LN29@stbir__enc:
; Line 1786
	jmp	$LN25@stbir__enc
$LN26@stbir__enc:
; Line 1787
	jmp	$LN11@stbir__enc
$LN69@stbir__enc:
; Line 1790
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN33@stbir__enc
$LN31@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN33@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN32@stbir__enc
; Line 1792
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$3[rsp], eax
; Line 1794
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN36@stbir__enc
$LN34@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN36@stbir__enc:
	mov	eax, DWORD PTR num_nonalpha$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN35@stbir__enc
; Line 1796
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	eax, WORD PTR nonalpha$[rsp+rax*2]
	mov	ecx, DWORD PTR pixel_index$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$10[rsp], eax
; Line 1797
	movsxd	rax, DWORD PTR index$10[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	call	stbir__linear_to_srgb
	mulss	xmm0, DWORD PTR stbir__max_uint16_as_float
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	movsxd	rcx, DWORD PTR index$10[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 1798
	jmp	SHORT $LN34@stbir__enc
$LN35@stbir__enc:
; Line 1800
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN70@stbir__enc
; Line 1801
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR pixel_index$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	mulss	xmm0, DWORD PTR stbir__max_uint16_as_float
	cvtss2sd xmm0, xmm0
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	edx, DWORD PTR pixel_index$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN70@stbir__enc:
; Line 1802
	jmp	$LN31@stbir__enc
$LN32@stbir__enc:
; Line 1804
	jmp	$LN11@stbir__enc
$LN71@stbir__enc:
; Line 1807
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN39@stbir__enc
$LN37@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN39@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN38@stbir__enc
; Line 1809
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$18[rsp], eax
; Line 1811
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN42@stbir__enc
$LN40@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN42@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN41@stbir__enc
; Line 1813
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$11[rsp], eax
; Line 1814
	movsxd	rax, DWORD PTR index$11[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si rax, xmm0
	movsxd	rcx, DWORD PTR index$11[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 1815
	jmp	SHORT $LN40@stbir__enc
$LN41@stbir__enc:
; Line 1816
	jmp	$LN37@stbir__enc
$LN38@stbir__enc:
; Line 1817
	jmp	$LN11@stbir__enc
$LN72@stbir__enc:
; Line 1820
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN45@stbir__enc
$LN43@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN45@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN44@stbir__enc
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$4[rsp], eax
; Line 1824
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN48@stbir__enc
$LN46@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN48@stbir__enc:
	mov	eax, DWORD PTR num_nonalpha$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN47@stbir__enc
; Line 1826
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	eax, WORD PTR nonalpha$[rsp+rax*2]
	mov	ecx, DWORD PTR pixel_index$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$12[rsp], eax
; Line 1827
	movsxd	rax, DWORD PTR index$12[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	call	stbir__linear_to_srgb
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si rax, xmm0
	movsxd	rcx, DWORD PTR index$12[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 1828
	jmp	SHORT $LN46@stbir__enc
$LN47@stbir__enc:
; Line 1830
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN73@stbir__enc
; Line 1831
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR pixel_index$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__saturate
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	edx, DWORD PTR pixel_index$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN73@stbir__enc:
; Line 1832
	jmp	$LN43@stbir__enc
$LN44@stbir__enc:
; Line 1833
	jmp	$LN11@stbir__enc
$LN74@stbir__enc:
; Line 1836
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN51@stbir__enc
$LN49@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN51@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN50@stbir__enc
; Line 1838
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$19[rsp], eax
; Line 1840
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN54@stbir__enc
$LN52@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN54@stbir__enc:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN53@stbir__enc
; Line 1842
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR pixel_index$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$13[rsp], eax
; Line 1843
	movsxd	rax, DWORD PTR index$13[rsp]
	movsxd	rcx, DWORD PTR index$13[rsp]
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	r8, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [r8+rax*4]
	movss	DWORD PTR [rdx+rcx*4], xmm0
; Line 1844
	jmp	SHORT $LN52@stbir__enc
$LN53@stbir__enc:
; Line 1845
	jmp	$LN49@stbir__enc
$LN50@stbir__enc:
; Line 1846
	jmp	$LN11@stbir__enc
$LN75@stbir__enc:
; Line 1849
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN57@stbir__enc
$LN55@stbir__enc:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN57@stbir__enc:
	mov	eax, DWORD PTR num_pixels$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN56@stbir__enc
; Line 1851
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR pixel_index$5[rsp], eax
; Line 1853
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN60@stbir__enc
$LN58@stbir__enc:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN60@stbir__enc:
	mov	eax, DWORD PTR num_nonalpha$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN59@stbir__enc
; Line 1855
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	eax, WORD PTR nonalpha$[rsp+rax*2]
	mov	ecx, DWORD PTR pixel_index$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index$14[rsp], eax
; Line 1856
	movsxd	rax, DWORD PTR index$14[rsp]
	mov	rcx, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__linear_to_srgb
	movsxd	rax, DWORD PTR index$14[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1857
	jmp	SHORT $LN58@stbir__enc
$LN59@stbir__enc:
; Line 1859
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN76@stbir__enc
; Line 1860
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR pixel_index$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	edx, DWORD PTR pixel_index$5[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output_buffer$[rsp]
	mov	r8, QWORD PTR encode_buffer$[rsp]
	movss	xmm0, DWORD PTR [r8+rax*4]
	movss	DWORD PTR [rdx+rcx*4], xmm0
$LN76@stbir__enc:
; Line 1861
	jmp	$LN55@stbir__enc
$LN56@stbir__enc:
; Line 1862
	jmp	SHORT $LN11@stbir__enc
$LN77@stbir__enc:
; Line 1865
	lea	rax, OFFSET FLAT:$SG79155
	test	rax, rax
	je	SHORT $LN81@stbir__enc
	mov	r8d, 1865				; 00000749H
	lea	rdx, OFFSET FLAT:$SG79156
	lea	rcx, OFFSET FLAT:$SG79157
	call	_wassert
	xor	eax, eax
$LN81@stbir__enc:
$LN11@stbir__enc:
; Line 1868
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
	npad	3
$LN82@stbir__enc:
	DD	$LN65@stbir__enc
	DD	$LN66@stbir__enc
	DD	$LN68@stbir__enc
	DD	$LN69@stbir__enc
	DD	$LN71@stbir__enc
	DD	$LN72@stbir__enc
	DD	$LN74@stbir__enc
	DD	$LN75@stbir__enc
stbir__encode_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ring_buffer_index$ = 32
get_scanline$ = 64
ring_buffer$ = 72
begin_index$ = 80
first_scanline$ = 88
ring_buffer_num_entries$ = 96
ring_buffer_length$ = 104
stbir__get_ring_buffer_scanline PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1690
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1691
	mov	eax, DWORD PTR first_scanline$[rsp]
	mov	ecx, DWORD PTR get_scanline$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR begin_index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdq
	idiv	DWORD PTR ring_buffer_num_entries$[rsp]
	mov	eax, edx
	mov	DWORD PTR ring_buffer_index$[rsp], eax
; Line 1692
	mov	r8d, DWORD PTR ring_buffer_length$[rsp]
	mov	edx, DWORD PTR ring_buffer_index$[rsp]
	mov	rcx, QWORD PTR ring_buffer$[rsp]
	call	stbir__get_ring_buffer_entry
; Line 1693
	add	rsp, 56					; 00000038H
	ret	0
stbir__get_ring_buffer_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbir_info$ = 48
n$ = 56
stbir__decode_and_resample_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1673
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1675
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__decode_scanline
; Line 1677
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR [rax+160]
	call	memset
; Line 1680
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_width_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__dec
; Line 1681
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rdx, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_horizontal_upsample
	jmp	SHORT $LN3@stbir__dec
$LN2@stbir__dec:
; Line 1683
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rdx, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_horizontal_downsample
$LN3@stbir__dec:
; Line 1686
	add	rsp, 40					; 00000028H
	ret	0
stbir__decode_and_resample_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbir_info$ = 48
n$ = 56
stbir__decode_and_resample_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1659
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1661
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__decode_scanline
; Line 1664
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_width_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__dec
; Line 1665
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__add_empty_ring_buffer_entry
	mov	rdx, rax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_horizontal_upsample
	jmp	SHORT $LN3@stbir__dec
$LN2@stbir__dec:
; Line 1667
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__add_empty_ring_buffer_entry
	mov	rdx, rax
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__resample_horizontal_downsample
$LN3@stbir__dec:
; Line 1670
	add	rsp, 40					; 00000028H
	ret	0
stbir__decode_and_resample_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
k$ = 36
out_pixel_index$1 = 40
out_pixel_index$2 = 44
filter_pixel_margin$ = 48
c$3 = 52
max_x$ = 56
coefficient_width$ = 60
decode_buffer$ = 64
horizontal_contributors$ = 72
tv81 = 80
out_pixel_index$4 = 84
in_pixel_index$5 = 88
coefficient$6 = 92
channels$ = 96
in_pixel_index$7 = 100
coefficient$8 = 104
n0$9 = 108
out_pixel_index$10 = 112
n0$11 = 116
in_pixel_index$12 = 120
coefficient$13 = 124
n0$14 = 128
n0$15 = 132
n0$16 = 136
out_pixel_index$17 = 140
horizontal_coefficients$ = 144
max_n$18 = 152
coefficient_group$19 = 156
in_pixel_index$20 = 160
coefficient$21 = 164
in_x$22 = 168
n1$23 = 172
max_n$24 = 176
coefficient_group$25 = 180
in_x$26 = 184
n1$27 = 188
max_n$28 = 192
coefficient_group$29 = 196
input_w$ = 200
n1$30 = 204
max_n$31 = 208
coefficient_group$32 = 212
in_x$33 = 216
n1$34 = 220
in_x$35 = 224
coefficient_group$36 = 228
in_pixel_index$37 = 232
coefficient$38 = 236
in_x$39 = 240
n1$40 = 244
max_n$41 = 248
stbir_info$ = 272
output_buffer$ = 280
stbir__resample_horizontal_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1534
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 1536
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR input_w$[rsp], eax
; Line 1537
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 1538
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__get_decode_buffer
	mov	QWORD PTR decode_buffer$[rsp], rax
; Line 1539
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR horizontal_contributors$[rsp], rax
; Line 1540
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR horizontal_coefficients$[rsp], rax
; Line 1541
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR coefficient_width$[rsp], eax
; Line 1542
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	mov	DWORD PTR filter_pixel_margin$[rsp], eax
; Line 1543
	mov	eax, DWORD PTR input_w$[rsp]
	mov	ecx, DWORD PTR filter_pixel_margin$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR max_x$[rsp], eax
; Line 1545
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__use_width_upsampling
	test	eax, eax
	je	SHORT $LN43@stbir__res
	mov	r8d, 1545				; 00000609H
	lea	rdx, OFFSET FLAT:$SG78951
	lea	rcx, OFFSET FLAT:$SG78952
	call	_wassert
	xor	eax, eax
$LN43@stbir__res:
; Line 1547
	mov	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	cmp	DWORD PTR tv81[rsp], 1
	je	SHORT $LN37@stbir__res
	cmp	DWORD PTR tv81[rsp], 2
	je	$LN38@stbir__res
	cmp	DWORD PTR tv81[rsp], 3
	je	$LN39@stbir__res
	cmp	DWORD PTR tv81[rsp], 4
	je	$LN40@stbir__res
	jmp	$LN41@stbir__res
$LN37@stbir__res:
; Line 1549
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN6@stbir__res
$LN4@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN6@stbir__res:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN5@stbir__res
; Line 1551
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$9[rsp], eax
; Line 1552
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$40[rsp], eax
; Line 1554
	mov	eax, DWORD PTR filter_pixel_margin$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR in_x$39[rsp], eax
; Line 1555
	mov	eax, DWORD PTR in_x$39[rsp]
	mov	DWORD PTR in_pixel_index$20[rsp], eax
; Line 1556
	mov	eax, DWORD PTR n1$40[rsp]
	mov	DWORD PTR max_n$18[rsp], eax
; Line 1557
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$19[rsp], eax
; Line 1559
	mov	eax, DWORD PTR n0$9[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN9@stbir__res
$LN7@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN9@stbir__res:
	mov	eax, DWORD PTR max_n$18[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN8@stbir__res
; Line 1561
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR out_pixel_index$10[rsp], eax
; Line 1562
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR coefficient_group$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR n0$9[rsp]
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$21[rsp], xmm0
; Line 1563
	mov	eax, DWORD PTR out_pixel_index$10[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$20[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$21[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$10[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1564
	jmp	$LN7@stbir__res
$LN8@stbir__res:
; Line 1565
	jmp	$LN4@stbir__res
$LN5@stbir__res:
; Line 1566
	jmp	$LN2@stbir__res
$LN38@stbir__res:
; Line 1569
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN12@stbir__res
$LN10@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN12@stbir__res:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN11@stbir__res
; Line 1571
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$11[rsp], eax
; Line 1572
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$23[rsp], eax
; Line 1574
	mov	eax, DWORD PTR filter_pixel_margin$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR in_x$22[rsp], eax
; Line 1575
	mov	eax, DWORD PTR in_x$22[rsp]
	shl	eax, 1
	mov	DWORD PTR in_pixel_index$12[rsp], eax
; Line 1576
	mov	eax, DWORD PTR n1$23[rsp]
	mov	DWORD PTR max_n$24[rsp], eax
; Line 1577
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$25[rsp], eax
; Line 1579
	mov	eax, DWORD PTR n0$11[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN15@stbir__res
$LN13@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbir__res:
	mov	eax, DWORD PTR max_n$24[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN14@stbir__res
; Line 1581
	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 1
	mov	DWORD PTR out_pixel_index$4[rsp], eax
; Line 1582
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR coefficient_group$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR n0$11[rsp]
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$13[rsp], xmm0
; Line 1583
	mov	eax, DWORD PTR out_pixel_index$4[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$12[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$13[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$4[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1584
	mov	eax, DWORD PTR out_pixel_index$4[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$12[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$13[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$4[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1585
	jmp	$LN13@stbir__res
$LN14@stbir__res:
; Line 1586
	jmp	$LN10@stbir__res
$LN11@stbir__res:
; Line 1587
	jmp	$LN2@stbir__res
$LN39@stbir__res:
; Line 1590
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN18@stbir__res
$LN16@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN18@stbir__res:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN17@stbir__res
; Line 1592
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$14[rsp], eax
; Line 1593
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$27[rsp], eax
; Line 1595
	mov	eax, DWORD PTR filter_pixel_margin$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR in_x$26[rsp], eax
; Line 1596
	imul	eax, DWORD PTR in_x$26[rsp], 3
	mov	DWORD PTR in_pixel_index$7[rsp], eax
; Line 1597
	mov	eax, DWORD PTR n1$27[rsp]
	mov	DWORD PTR max_n$28[rsp], eax
; Line 1598
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$29[rsp], eax
; Line 1600
	mov	eax, DWORD PTR n0$14[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN21@stbir__res
$LN19@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN21@stbir__res:
	mov	eax, DWORD PTR max_n$28[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN20@stbir__res
; Line 1602
	imul	eax, DWORD PTR k$[rsp], 3
	mov	DWORD PTR out_pixel_index$2[rsp], eax
; Line 1603
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR coefficient_group$29[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR n0$14[rsp]
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$8[rsp], xmm0
; Line 1604
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$7[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1605
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1606
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$7[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$2[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1607
	jmp	$LN19@stbir__res
$LN20@stbir__res:
; Line 1608
	jmp	$LN16@stbir__res
$LN17@stbir__res:
; Line 1609
	jmp	$LN2@stbir__res
$LN40@stbir__res:
; Line 1612
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN24@stbir__res
$LN22@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN24@stbir__res:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN23@stbir__res
; Line 1614
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$15[rsp], eax
; Line 1615
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$30[rsp], eax
; Line 1617
	mov	eax, DWORD PTR filter_pixel_margin$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR in_x$35[rsp], eax
; Line 1618
	mov	eax, DWORD PTR in_x$35[rsp]
	shl	eax, 2
	mov	DWORD PTR in_pixel_index$5[rsp], eax
; Line 1619
	mov	eax, DWORD PTR n1$30[rsp]
	mov	DWORD PTR max_n$31[rsp], eax
; Line 1620
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$32[rsp], eax
; Line 1622
	mov	eax, DWORD PTR n0$15[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN27@stbir__res
$LN25@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN27@stbir__res:
	mov	eax, DWORD PTR max_n$31[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN26@stbir__res
; Line 1624
	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 2
	mov	DWORD PTR out_pixel_index$1[rsp], eax
; Line 1625
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR coefficient_group$32[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR n0$15[rsp]
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$6[rsp], xmm0
; Line 1626
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1627
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1628
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1629
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$5[rsp]
	add	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1630
	jmp	$LN25@stbir__res
$LN26@stbir__res:
; Line 1631
	jmp	$LN22@stbir__res
$LN23@stbir__res:
; Line 1632
	jmp	$LN2@stbir__res
$LN41@stbir__res:
; Line 1635
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN30@stbir__res
$LN28@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN30@stbir__res:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN29@stbir__res
; Line 1637
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$16[rsp], eax
; Line 1638
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$34[rsp], eax
; Line 1640
	mov	eax, DWORD PTR filter_pixel_margin$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR in_x$33[rsp], eax
; Line 1641
	mov	eax, DWORD PTR in_x$33[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR in_pixel_index$37[rsp], eax
; Line 1642
	mov	eax, DWORD PTR n1$34[rsp]
	mov	DWORD PTR max_n$41[rsp], eax
; Line 1643
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$36[rsp], eax
; Line 1645
	mov	eax, DWORD PTR n0$16[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN33@stbir__res
$LN31@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN33@stbir__res:
	mov	eax, DWORD PTR max_n$41[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN32@stbir__res
; Line 1648
	mov	eax, DWORD PTR k$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR out_pixel_index$17[rsp], eax
; Line 1649
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR coefficient_group$36[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR n0$16[rsp]
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$38[rsp], xmm0
; Line 1650
	mov	DWORD PTR c$3[rsp], 0
	jmp	SHORT $LN36@stbir__res
$LN34@stbir__res:
	mov	eax, DWORD PTR c$3[rsp]
	inc	eax
	mov	DWORD PTR c$3[rsp], eax
$LN36@stbir__res:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$3[rsp], eax
	jge	SHORT $LN35@stbir__res
; Line 1651
	mov	eax, DWORD PTR c$3[rsp]
	mov	ecx, DWORD PTR out_pixel_index$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR c$3[rsp]
	mov	edx, DWORD PTR in_pixel_index$37[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$38[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR c$3[rsp]
	mov	ecx, DWORD PTR out_pixel_index$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN34@stbir__res
$LN35@stbir__res:
; Line 1652
	jmp	$LN31@stbir__res
$LN32@stbir__res:
; Line 1653
	jmp	$LN28@stbir__res
$LN29@stbir__res:
$LN2@stbir__res:
; Line 1656
	add	rsp, 264				; 00000108H
	ret	0
stbir__resample_horizontal_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
out_pixel_index$1 = 36
coefficient_counter$2 = 40
n0$3 = 44
n1$4 = 48
x$ = 52
c$5 = 56
coefficient$6 = 60
coefficient_group$7 = 64
decode_buffer$ = 72
tv150 = 80
coefficient$8 = 84
in_pixel_index$9 = 88
channels$ = 92
coefficient$10 = 96
in_pixel_index$11 = 100
coefficient$12 = 104
in_pixel_index$13 = 108
coefficient$14 = 112
horizontal_coefficients$ = 120
output_w$ = 128
coefficient_width$ = 132
in_pixel_index$15 = 136
in_pixel_index$16 = 140
horizontal_contributors$ = 144
stbir_info$ = 176
output_buffer$ = 184
stbir__resample_horizontal_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1451
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 1453
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR output_w$[rsp], eax
; Line 1454
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 1455
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__get_decode_buffer
	mov	QWORD PTR decode_buffer$[rsp], rax
; Line 1456
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR horizontal_contributors$[rsp], rax
; Line 1457
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR horizontal_coefficients$[rsp], rax
; Line 1458
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR coefficient_width$[rsp], eax
; Line 1460
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbir__res
$LN2@stbir__res:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbir__res:
	mov	eax, DWORD PTR output_w$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbir__res
; Line 1462
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	DWORD PTR n0$3[rsp], eax
; Line 1463
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR horizontal_contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	mov	DWORD PTR n1$4[rsp], eax
; Line 1465
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR out_pixel_index$1[rsp], eax
; Line 1466
	mov	eax, DWORD PTR coefficient_width$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR coefficient_group$7[rsp], eax
; Line 1467
	mov	DWORD PTR coefficient_counter$2[rsp], 0
; Line 1469
	mov	eax, DWORD PTR n0$3[rsp]
	cmp	DWORD PTR n1$4[rsp], eax
	jge	SHORT $LN31@stbir__res
	mov	r8d, 1469				; 000005bdH
	lea	rdx, OFFSET FLAT:$SG78832
	lea	rcx, OFFSET FLAT:$SG78833
	call	_wassert
	xor	eax, eax
$LN31@stbir__res:
; Line 1470
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	neg	eax
	cmp	DWORD PTR n0$3[rsp], eax
	jge	SHORT $LN32@stbir__res
	mov	r8d, 1470				; 000005beH
	lea	rdx, OFFSET FLAT:$SG78834
	lea	rcx, OFFSET FLAT:$SG78835
	call	_wassert
	xor	eax, eax
$LN32@stbir__res:
; Line 1471
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	neg	eax
	cmp	DWORD PTR n1$4[rsp], eax
	jge	SHORT $LN33@stbir__res
	mov	r8d, 1471				; 000005bfH
	lea	rdx, OFFSET FLAT:$SG78836
	lea	rcx, OFFSET FLAT:$SG78837
	call	_wassert
	xor	eax, eax
$LN33@stbir__res:
; Line 1472
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	add	eax, DWORD PTR [rcx+184]
	cmp	DWORD PTR n0$3[rsp], eax
	jl	SHORT $LN34@stbir__res
	mov	r8d, 1472				; 000005c0H
	lea	rdx, OFFSET FLAT:$SG78838
	lea	rcx, OFFSET FLAT:$SG78839
	call	_wassert
	xor	eax, eax
$LN34@stbir__res:
; Line 1473
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	add	eax, DWORD PTR [rcx+184]
	cmp	DWORD PTR n1$4[rsp], eax
	jl	SHORT $LN35@stbir__res
	mov	r8d, 1473				; 000005c1H
	lea	rdx, OFFSET FLAT:$SG78840
	lea	rcx, OFFSET FLAT:$SG78841
	call	_wassert
	xor	eax, eax
$LN35@stbir__res:
; Line 1475
	mov	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR tv150[rsp], eax
	cmp	DWORD PTR tv150[rsp], 1
	je	SHORT $LN25@stbir__res
	cmp	DWORD PTR tv150[rsp], 2
	je	$LN26@stbir__res
	cmp	DWORD PTR tv150[rsp], 3
	je	$LN27@stbir__res
	cmp	DWORD PTR tv150[rsp], 4
	je	$LN28@stbir__res
	jmp	$LN29@stbir__res
$LN25@stbir__res:
; Line 1477
	mov	eax, DWORD PTR n0$3[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN9@stbir__res
$LN7@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN9@stbir__res:
	mov	eax, DWORD PTR n1$4[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN8@stbir__res
; Line 1479
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR in_pixel_index$15[rsp], eax
; Line 1480
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	mov	ecx, DWORD PTR coefficient_group$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$12[rsp], xmm0
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$2[rsp], eax
; Line 1481
	movss	xmm0, DWORD PTR coefficient$12[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN36@stbir__res
	jne	SHORT $LN36@stbir__res
	mov	r8d, 1481				; 000005c9H
	lea	rdx, OFFSET FLAT:$SG78843
	lea	rcx, OFFSET FLAT:$SG78844
	call	_wassert
	xor	eax, eax
$LN36@stbir__res:
; Line 1482
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$15[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$12[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1483
	jmp	$LN7@stbir__res
$LN8@stbir__res:
; Line 1484
	jmp	$LN5@stbir__res
$LN26@stbir__res:
; Line 1486
	mov	eax, DWORD PTR n0$3[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN12@stbir__res
$LN10@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN12@stbir__res:
	mov	eax, DWORD PTR n1$4[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN11@stbir__res
; Line 1488
	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 1
	mov	DWORD PTR in_pixel_index$13[rsp], eax
; Line 1489
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	mov	ecx, DWORD PTR coefficient_group$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$10[rsp], xmm0
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$2[rsp], eax
; Line 1490
	movss	xmm0, DWORD PTR coefficient$10[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN37@stbir__res
	jne	SHORT $LN37@stbir__res
	mov	r8d, 1490				; 000005d2H
	lea	rdx, OFFSET FLAT:$SG78846
	lea	rcx, OFFSET FLAT:$SG78847
	call	_wassert
	xor	eax, eax
$LN37@stbir__res:
; Line 1491
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$13[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$10[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1492
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$13[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$10[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1493
	jmp	$LN10@stbir__res
$LN11@stbir__res:
; Line 1494
	jmp	$LN5@stbir__res
$LN27@stbir__res:
; Line 1496
	mov	eax, DWORD PTR n0$3[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN15@stbir__res
$LN13@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbir__res:
	mov	eax, DWORD PTR n1$4[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN14@stbir__res
; Line 1498
	imul	eax, DWORD PTR k$[rsp], 3
	mov	DWORD PTR in_pixel_index$11[rsp], eax
; Line 1499
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	mov	ecx, DWORD PTR coefficient_group$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$8[rsp], xmm0
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$2[rsp], eax
; Line 1500
	movss	xmm0, DWORD PTR coefficient$8[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN38@stbir__res
	jne	SHORT $LN38@stbir__res
	mov	r8d, 1500				; 000005dcH
	lea	rdx, OFFSET FLAT:$SG78849
	lea	rcx, OFFSET FLAT:$SG78850
	call	_wassert
	xor	eax, eax
$LN38@stbir__res:
; Line 1501
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$11[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1502
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$11[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1503
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$11[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$8[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1504
	jmp	$LN13@stbir__res
$LN14@stbir__res:
; Line 1505
	jmp	$LN5@stbir__res
$LN28@stbir__res:
; Line 1507
	mov	eax, DWORD PTR n0$3[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN18@stbir__res
$LN16@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbir__res:
	mov	eax, DWORD PTR n1$4[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN17@stbir__res
; Line 1509
	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 2
	mov	DWORD PTR in_pixel_index$9[rsp], eax
; Line 1510
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	mov	ecx, DWORD PTR coefficient_group$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$6[rsp], xmm0
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$2[rsp], eax
; Line 1511
	movss	xmm0, DWORD PTR coefficient$6[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN39@stbir__res
	jne	SHORT $LN39@stbir__res
	mov	r8d, 1511				; 000005e7H
	lea	rdx, OFFSET FLAT:$SG78852
	lea	rcx, OFFSET FLAT:$SG78853
	call	_wassert
	xor	eax, eax
$LN39@stbir__res:
; Line 1512
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$9[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1513
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$9[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1514
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$9[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1515
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR in_pixel_index$9[rsp]
	add	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$6[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR out_pixel_index$1[rsp]
	add	eax, 3
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1516
	jmp	$LN16@stbir__res
$LN17@stbir__res:
; Line 1517
	jmp	$LN5@stbir__res
$LN29@stbir__res:
; Line 1519
	mov	eax, DWORD PTR n0$3[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN21@stbir__res
$LN19@stbir__res:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN21@stbir__res:
	mov	eax, DWORD PTR n1$4[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN20@stbir__res
; Line 1521
	mov	eax, DWORD PTR k$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR in_pixel_index$16[rsp], eax
; Line 1522
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	mov	ecx, DWORD PTR coefficient_group$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR horizontal_coefficients$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR coefficient$14[rsp], xmm0
	mov	eax, DWORD PTR coefficient_counter$2[rsp]
	inc	eax
	mov	DWORD PTR coefficient_counter$2[rsp], eax
; Line 1524
	movss	xmm0, DWORD PTR coefficient$14[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN40@stbir__res
	jne	SHORT $LN40@stbir__res
	mov	r8d, 1524				; 000005f4H
	lea	rdx, OFFSET FLAT:$SG78855
	lea	rcx, OFFSET FLAT:$SG78856
	call	_wassert
	xor	eax, eax
$LN40@stbir__res:
; Line 1525
	mov	DWORD PTR c$5[rsp], 0
	jmp	SHORT $LN24@stbir__res
$LN22@stbir__res:
	mov	eax, DWORD PTR c$5[rsp]
	inc	eax
	mov	DWORD PTR c$5[rsp], eax
$LN24@stbir__res:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$5[rsp], eax
	jge	SHORT $LN23@stbir__res
; Line 1526
	mov	eax, DWORD PTR c$5[rsp]
	mov	ecx, DWORD PTR out_pixel_index$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR c$5[rsp]
	mov	edx, DWORD PTR in_pixel_index$16[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rdx+rcx*4]
	mulss	xmm0, DWORD PTR coefficient$14[rsp]
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR c$5[rsp]
	mov	ecx, DWORD PTR out_pixel_index$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR output_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN22@stbir__res
$LN23@stbir__res:
; Line 1527
	jmp	$LN19@stbir__res
$LN20@stbir__res:
$LN5@stbir__res:
; Line 1530
	jmp	$LN2@stbir__res
$LN3@stbir__res:
; Line 1531
	add	rsp, 168				; 000000a8H
	ret	0
stbir__resample_horizontal_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ring_buffer_index$ = 32
ring_buffer$ = 40
stbir_info$ = 64
n$ = 72
stbir__add_empty_ring_buffer_entry PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1426
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1430
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax+212], ecx
; Line 1432
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+216], 0
	jge	SHORT $LN2@stbir__add
; Line 1434
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	DWORD PTR [rax+216], 0
	mov	DWORD PTR ring_buffer_index$[rsp], 0
; Line 1435
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax+208], ecx
; Line 1436
	jmp	SHORT $LN3@stbir__add
$LN2@stbir__add:
; Line 1439
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR [rcx+208]
	mov	eax, DWORD PTR [rax+212]
	sub	eax, ecx
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	ecx, DWORD PTR [rcx+216]
	add	ecx, eax
	mov	eax, ecx
	cdq
	mov	rcx, QWORD PTR stbir_info$[rsp]
	idiv	DWORD PTR [rcx+204]
	mov	eax, edx
	mov	DWORD PTR ring_buffer_index$[rsp], eax
; Line 1440
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+216]
	cmp	DWORD PTR ring_buffer_index$[rsp], eax
	jne	SHORT $LN5@stbir__add
	mov	r8d, 1440				; 000005a0H
	lea	rdx, OFFSET FLAT:$SG78757
	lea	rcx, OFFSET FLAT:$SG78758
	call	_wassert
	xor	eax, eax
$LN5@stbir__add:
$LN3@stbir__add:
; Line 1443
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+200]
	xor	edx, edx
	mov	ecx, 4
	div	rcx
	mov	r8d, eax
	mov	edx, DWORD PTR ring_buffer_index$[rsp]
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR [rax+224]
	call	stbir__get_ring_buffer_entry
	mov	QWORD PTR ring_buffer$[rsp], rax
; Line 1444
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+200]
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR ring_buffer$[rsp]
	call	memset
; Line 1446
	mov	rax, QWORD PTR ring_buffer$[rsp]
; Line 1447
	add	rsp, 56					; 00000038H
	ret	0
stbir__add_empty_ring_buffer_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ring_buffer$ = 8
index$ = 16
ring_buffer_length$ = 24
stbir__get_ring_buffer_entry PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1421
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1422
	mov	eax, DWORD PTR index$[rsp]
	imul	eax, DWORD PTR ring_buffer_length$[rsp]
	cdqe
	mov	rcx, QWORD PTR ring_buffer$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
; Line 1423
	ret	0
stbir__get_ring_buffer_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
x$ = 36
channels$ = 40
alpha_channel$ = 44
max_x$ = 48
input_w$ = 52
edge_horizontal$ = 56
decode_buffer$ = 64
input_data$ = 72
alpha$1 = 80
decode_pixel_index$2 = 84
input_pixel_index$3 = 88
decode_pixel_index$4 = 92
input_pixel_index$5 = 96
decode_pixel_index$6 = 100
input_pixel_index$7 = 104
decode_pixel_index$8 = 108
input_pixel_index$9 = 112
decode_pixel_index$10 = 116
edge_vertical$ = 120
tv135 = 124
decode$ = 128
input_pixel_index$11 = 132
decode_pixel_index$12 = 136
input_pixel_index$13 = 140
decode_pixel_index$14 = 144
input_pixel_index$15 = 148
decode_pixel_index$16 = 152
input_pixel_index$17 = 156
decode_pixel_index$18 = 160
colorspace$ = 164
type$ = 168
input_stride_bytes$ = 176
in_buffer_row_offset$ = 184
stbir_info$ = 208
n$ = 216
stbir__decode_scanline PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1253
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 1255
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR channels$[rsp], eax
; Line 1256
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR alpha_channel$[rsp], eax
; Line 1257
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+88]
	mov	DWORD PTR type$[rsp], eax
; Line 1258
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+108]
	mov	DWORD PTR colorspace$[rsp], eax
; Line 1259
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR input_w$[rsp], eax
; Line 1260
	mov	rax, QWORD PTR stbir_info$[rsp]
	movsxd	rax, DWORD PTR [rax+16]
	mov	QWORD PTR input_stride_bytes$[rsp], rax
; Line 1261
	mov	rcx, QWORD PTR stbir_info$[rsp]
	call	stbir__get_decode_buffer
	mov	QWORD PTR decode_buffer$[rsp], rax
; Line 1262
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+100]
	mov	DWORD PTR edge_horizontal$[rsp], eax
; Line 1263
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+104]
	mov	DWORD PTR edge_vertical$[rsp], eax
; Line 1264
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	mov	edx, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR edge_vertical$[rsp]
	call	stbir__edge_wrap
	cdqe
	imul	rax, QWORD PTR input_stride_bytes$[rsp]
	mov	QWORD PTR in_buffer_row_offset$[rsp], rax
; Line 1265
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR in_buffer_row_offset$[rsp]
	mov	QWORD PTR input_data$[rsp], rax
; Line 1266
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	mov	ecx, DWORD PTR input_w$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR max_x$[rsp], eax
; Line 1267
	mov	eax, DWORD PTR colorspace$[rsp]
	mov	ecx, DWORD PTR type$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR decode$[rsp], eax
; Line 1269
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	neg	eax
	mov	DWORD PTR x$[rsp], eax
; Line 1273
	cmp	DWORD PTR edge_vertical$[rsp], 4
	jne	SHORT $LN76@stbir__dec
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN77@stbir__dec
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN76@stbir__dec
$LN77@stbir__dec:
; Line 1275
	jmp	SHORT $LN4@stbir__dec
$LN2@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN3@stbir__dec
; Line 1276
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN7@stbir__dec
$LN5@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN7@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN6@stbir__dec
; Line 1277
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	add	eax, DWORD PTR c$[rsp]
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN5@stbir__dec
$LN6@stbir__dec:
	jmp	SHORT $LN2@stbir__dec
$LN3@stbir__dec:
; Line 1278
	jmp	$LN1@stbir__dec
$LN76@stbir__dec:
; Line 1281
	mov	eax, DWORD PTR decode$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	cmp	DWORD PTR tv135[rsp], 7
	ja	$LN90@stbir__dec
	movsxd	rax, DWORD PTR tv135[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN97@stbir__dec[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN78@stbir__dec:
; Line 1284
	jmp	SHORT $LN12@stbir__dec
$LN10@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN12@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN11@stbir__dec
; Line 1286
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$12[rsp], eax
; Line 1287
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$11[rsp], eax
; Line 1288
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN15@stbir__dec
$LN13@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN15@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN14@stbir__dec
; Line 1289
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR stbir__max_uint8_as_float
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN13@stbir__dec
$LN14@stbir__dec:
; Line 1290
	jmp	$LN10@stbir__dec
$LN11@stbir__dec:
; Line 1291
	jmp	$LN8@stbir__dec
$LN79@stbir__dec:
; Line 1294
	jmp	SHORT $LN18@stbir__dec
$LN16@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN18@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN17@stbir__dec
; Line 1296
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$4[rsp], eax
; Line 1297
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$3[rsp], eax
; Line 1298
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN21@stbir__dec
$LN19@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN21@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN20@stbir__dec
; Line 1299
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:stbir__srgb_uchar_to_linear_float
	mov	edx, DWORD PTR c$[rsp]
	mov	r8d, DWORD PTR decode_pixel_index$4[rsp]
	add	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR [r8+rdx*4], xmm0
	jmp	SHORT $LN19@stbir__dec
$LN20@stbir__dec:
; Line 1301
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN80@stbir__dec
; Line 1302
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR stbir__max_uint8_as_float
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN80@stbir__dec:
; Line 1303
	jmp	$LN16@stbir__dec
$LN17@stbir__dec:
; Line 1304
	jmp	$LN8@stbir__dec
$LN81@stbir__dec:
; Line 1307
	jmp	SHORT $LN24@stbir__dec
$LN22@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN24@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN23@stbir__dec
; Line 1309
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$14[rsp], eax
; Line 1310
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$13[rsp], eax
; Line 1311
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN27@stbir__dec
$LN25@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN27@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN26@stbir__dec
; Line 1312
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR stbir__max_uint16_as_float
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN25@stbir__dec
$LN26@stbir__dec:
; Line 1313
	jmp	$LN22@stbir__dec
$LN23@stbir__dec:
; Line 1314
	jmp	$LN8@stbir__dec
$LN82@stbir__dec:
; Line 1317
	jmp	SHORT $LN30@stbir__dec
$LN28@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN30@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN29@stbir__dec
; Line 1319
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$6[rsp], eax
; Line 1320
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$5[rsp], eax
; Line 1321
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN33@stbir__dec
$LN31@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN33@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN32@stbir__dec
; Line 1322
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR stbir__max_uint16_as_float
	call	stbir__srgb_to_linear
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN31@stbir__dec
$LN32@stbir__dec:
; Line 1324
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN83@stbir__dec
; Line 1325
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR stbir__max_uint16_as_float
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN83@stbir__dec:
; Line 1326
	jmp	$LN28@stbir__dec
$LN29@stbir__dec:
; Line 1327
	jmp	$LN8@stbir__dec
$LN84@stbir__dec:
; Line 1330
	jmp	SHORT $LN36@stbir__dec
$LN34@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN36@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN35@stbir__dec
; Line 1332
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$16[rsp], eax
; Line 1333
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$15[rsp], eax
; Line 1334
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN39@stbir__dec
$LN37@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN39@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN38@stbir__dec
; Line 1335
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cvtsi2sd xmm0, rax
	divsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$16[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN37@stbir__dec
$LN38@stbir__dec:
; Line 1336
	jmp	$LN34@stbir__dec
$LN35@stbir__dec:
; Line 1337
	jmp	$LN8@stbir__dec
$LN85@stbir__dec:
; Line 1340
	jmp	SHORT $LN42@stbir__dec
$LN40@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN42@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN41@stbir__dec
; Line 1342
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$8[rsp], eax
; Line 1343
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$7[rsp], eax
; Line 1344
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN45@stbir__dec
$LN43@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN45@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN44@stbir__dec
; Line 1345
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cvtsi2sd xmm0, rax
	divsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	cvtsd2ss xmm0, xmm0
	call	stbir__srgb_to_linear
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN43@stbir__dec
$LN44@stbir__dec:
; Line 1347
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN86@stbir__dec
; Line 1348
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cvtsi2sd xmm0, rax
	divsd	xmm0, QWORD PTR stbir__max_uint32_as_float
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN86@stbir__dec:
; Line 1349
	jmp	$LN40@stbir__dec
$LN41@stbir__dec:
; Line 1350
	jmp	$LN8@stbir__dec
$LN87@stbir__dec:
; Line 1353
	jmp	SHORT $LN48@stbir__dec
$LN46@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN48@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN47@stbir__dec
; Line 1355
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$18[rsp], eax
; Line 1356
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$17[rsp], eax
; Line 1357
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN51@stbir__dec
$LN49@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN51@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN50@stbir__dec
; Line 1358
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR decode_pixel_index$18[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	mov	r8, QWORD PTR input_data$[rsp]
	movss	xmm0, DWORD PTR [r8+rax*4]
	movss	DWORD PTR [rdx+rcx*4], xmm0
	jmp	SHORT $LN49@stbir__dec
$LN50@stbir__dec:
; Line 1359
	jmp	$LN46@stbir__dec
$LN47@stbir__dec:
; Line 1360
	jmp	$LN8@stbir__dec
$LN88@stbir__dec:
; Line 1363
	jmp	SHORT $LN54@stbir__dec
$LN52@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN54@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN53@stbir__dec
; Line 1365
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$10[rsp], eax
; Line 1366
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR edge_horizontal$[rsp]
	call	stbir__edge_wrap
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR input_pixel_index$9[rsp], eax
; Line 1367
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN57@stbir__dec
$LN55@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN57@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN56@stbir__dec
; Line 1368
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR input_data$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	call	stbir__srgb_to_linear
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN55@stbir__dec
$LN56@stbir__dec:
; Line 1370
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN89@stbir__dec
; Line 1371
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR input_pixel_index$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	ecx, DWORD PTR alpha_channel$[rsp]
	mov	edx, DWORD PTR decode_pixel_index$10[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR decode_buffer$[rsp]
	mov	r8, QWORD PTR input_data$[rsp]
	movss	xmm0, DWORD PTR [r8+rax*4]
	movss	DWORD PTR [rdx+rcx*4], xmm0
$LN89@stbir__dec:
; Line 1372
	jmp	$LN52@stbir__dec
$LN53@stbir__dec:
; Line 1374
	jmp	SHORT $LN8@stbir__dec
$LN90@stbir__dec:
; Line 1377
	lea	rax, OFFSET FLAT:$SG78729
	test	rax, rax
	je	SHORT $LN96@stbir__dec
	mov	r8d, 1377				; 00000561H
	lea	rdx, OFFSET FLAT:$SG78730
	lea	rcx, OFFSET FLAT:$SG78731
	call	_wassert
	xor	eax, eax
$LN96@stbir__dec:
$LN8@stbir__dec:
; Line 1381
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+84]
	and	eax, 1
	test	eax, eax
	jne	$LN91@stbir__dec
; Line 1383
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	neg	eax
	mov	DWORD PTR x$[rsp], eax
	jmp	SHORT $LN60@stbir__dec
$LN58@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN60@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN59@stbir__dec
; Line 1385
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR decode_pixel_index$2[rsp], eax
; Line 1388
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR alpha$1[rsp], xmm0
; Line 1390
	mov	rax, QWORD PTR stbir_info$[rsp]
	cmp	DWORD PTR [rax+88], 3
	je	SHORT $LN92@stbir__dec
; Line 1391
	movss	xmm0, DWORD PTR alpha$1[rsp]
	addss	xmm0, DWORD PTR __real@17800000
	movss	DWORD PTR alpha$1[rsp], xmm0
; Line 1392
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR alpha$1[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN92@stbir__dec:
; Line 1395
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN63@stbir__dec
$LN61@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN63@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN62@stbir__dec
; Line 1397
	mov	eax, DWORD PTR alpha_channel$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jne	SHORT $LN93@stbir__dec
; Line 1398
	jmp	SHORT $LN61@stbir__dec
$LN93@stbir__dec:
; Line 1400
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR alpha$1[rsp]
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR decode_pixel_index$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1401
	jmp	SHORT $LN61@stbir__dec
$LN62@stbir__dec:
; Line 1402
	jmp	$LN58@stbir__dec
$LN59@stbir__dec:
$LN91@stbir__dec:
; Line 1405
	cmp	DWORD PTR edge_horizontal$[rsp], 4
	jne	$LN94@stbir__dec
; Line 1407
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	neg	eax
	mov	DWORD PTR x$[rsp], eax
	jmp	SHORT $LN66@stbir__dec
$LN64@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN66@stbir__dec:
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN65@stbir__dec
; Line 1409
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN69@stbir__dec
$LN67@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN69@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN68@stbir__dec
; Line 1410
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	add	eax, DWORD PTR c$[rsp]
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN67@stbir__dec
$LN68@stbir__dec:
; Line 1411
	jmp	SHORT $LN64@stbir__dec
$LN65@stbir__dec:
; Line 1412
	mov	eax, DWORD PTR input_w$[rsp]
	mov	DWORD PTR x$[rsp], eax
	jmp	SHORT $LN72@stbir__dec
$LN70@stbir__dec:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN72@stbir__dec:
	mov	eax, DWORD PTR max_x$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN71@stbir__dec
; Line 1414
	mov	DWORD PTR c$[rsp], 0
	jmp	SHORT $LN75@stbir__dec
$LN73@stbir__dec:
	mov	eax, DWORD PTR c$[rsp]
	inc	eax
	mov	DWORD PTR c$[rsp], eax
$LN75@stbir__dec:
	mov	eax, DWORD PTR channels$[rsp]
	cmp	DWORD PTR c$[rsp], eax
	jge	SHORT $LN74@stbir__dec
; Line 1415
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	add	eax, DWORD PTR c$[rsp]
	cdqe
	mov	rcx, QWORD PTR decode_buffer$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN73@stbir__dec
$LN74@stbir__dec:
; Line 1416
	jmp	SHORT $LN70@stbir__dec
$LN71@stbir__dec:
$LN94@stbir__dec:
$LN1@stbir__dec:
; Line 1418
	add	rsp, 200				; 000000c8H
	ret	0
	npad	1
$LN97@stbir__dec:
	DD	$LN78@stbir__dec
	DD	$LN79@stbir__dec
	DD	$LN81@stbir__dec
	DD	$LN82@stbir__dec
	DD	$LN84@stbir__dec
	DD	$LN85@stbir__dec
	DD	$LN87@stbir__dec
	DD	$LN88@stbir__dec
stbir__decode_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbir_info$ = 8
stbir__get_decode_buffer PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1244
	mov	QWORD PTR [rsp+8], rcx
; Line 1247
	mov	rax, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	eax, DWORD PTR [rax+184]
	imul	eax, DWORD PTR [rcx+76]
	cdqe
	mov	rcx, QWORD PTR stbir_info$[rsp]
	mov	rcx, QWORD PTR [rcx+152]
	lea	rax, QWORD PTR [rcx+rax*4]
; Line 1248
	ret	0
stbir__get_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
total_contributors$ = 68
out_pixels_radius$1 = 72
in_center_of_out$2 = 76
in_last_pixel$3 = 80
in_first_pixel$4 = 84
in_pixels_radius$5 = 88
n_adjusted$6 = 92
out_center_of_in$7 = 96
out_last_pixel$8 = 100
out_first_pixel$9 = 104
tv89 = 112
tv157 = 120
contributors$ = 144
coefficients$ = 152
filter$ = 160
scale_ratio$ = 168
shift$ = 176
input_size$ = 184
output_size$ = 192
stbir__calculate_filters PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1204
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 1206
	mov	r9d, DWORD PTR output_size$[rsp]
	mov	r8d, DWORD PTR input_size$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	stbir__get_contributors
	mov	DWORD PTR total_contributors$[rsp], eax
; Line 1208
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	stbir__use_upsampling
	test	eax, eax
	je	$LN8@stbir__cal
; Line 1210
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR out_pixels_radius$1[rsp], xmm0
; Line 1213
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN4@stbir__cal
$LN2@stbir__cal:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN4@stbir__cal:
	mov	eax, DWORD PTR total_contributors$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN3@stbir__cal
; Line 1218
	lea	rax, QWORD PTR in_center_of_out$2[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR in_last_pixel$3[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR in_first_pixel$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR shift$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	movss	xmm1, DWORD PTR out_pixels_radius$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	call	stbir__calculate_sample_range_upsample
; Line 1220
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR n$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	mov	QWORD PTR tv89[rsp], rax
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	call	stbir__get_contributor
	mov	rcx, QWORD PTR tv89[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR in_center_of_out$2[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR in_last_pixel$3[rsp]
	mov	r8d, DWORD PTR in_first_pixel$4[rsp]
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__calculate_coefficients_upsample
; Line 1221
	jmp	$LN2@stbir__cal
$LN3@stbir__cal:
; Line 1222
	jmp	$LN9@stbir__cal
$LN8@stbir__cal:
; Line 1225
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	QWORD PTR [rcx+rax+8]
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR in_pixels_radius$5[rsp], xmm0
; Line 1228
	mov	DWORD PTR n$[rsp], 0
	jmp	SHORT $LN7@stbir__cal
$LN5@stbir__cal:
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbir__cal:
	mov	eax, DWORD PTR total_contributors$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbir__cal
; Line 1232
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_filter_pixel_margin
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n_adjusted$6[rsp], eax
; Line 1234
	lea	rax, QWORD PTR out_center_of_in$7[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR out_last_pixel$8[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR out_first_pixel$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR shift$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	movss	xmm1, DWORD PTR in_pixels_radius$5[rsp]
	mov	ecx, DWORD PTR n_adjusted$6[rsp]
	call	stbir__calculate_sample_range_downsample
; Line 1236
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR n$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	mov	QWORD PTR tv157[rsp], rax
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	call	stbir__get_contributor
	mov	rcx, QWORD PTR tv157[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR out_center_of_in$7[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR out_last_pixel$8[rsp]
	mov	r8d, DWORD PTR out_first_pixel$9[rsp]
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__calculate_coefficients_downsample
; Line 1237
	jmp	$LN5@stbir__cal
$LN6@stbir__cal:
; Line 1239
	mov	eax, DWORD PTR output_size$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR input_size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR scale_ratio$[rsp]
	mov	r8d, DWORD PTR filter$[rsp]
	mov	rdx, QWORD PTR coefficients$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	call	stbir__normalize_downsample_coefficients
$LN9@stbir__cal:
; Line 1241
	add	rsp, 136				; 00000088H
	ret	0
stbir__calculate_filters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
skip$ = 56
total$1 = 60
num_contributors$ = 64
coefficient$2 = 68
scale$3 = 72
range$4 = 76
num_coefficients$ = 80
max$5 = 84
width$6 = 88
tv169 = 96
tv240 = 104
contributors$ = 128
coefficients$ = 136
filter$ = 144
scale_ratio$ = 152
input_size$ = 160
output_size$ = 168
stbir__normalize_downsample_coefficients PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1127
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1128
	mov	r9d, DWORD PTR output_size$[rsp]
	mov	r8d, DWORD PTR input_size$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	stbir__get_contributors
	mov	DWORD PTR num_contributors$[rsp], eax
; Line 1129
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_coefficient_width
	mov	DWORD PTR num_coefficients$[rsp], eax
; Line 1133
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbir__nor
$LN2@stbir__nor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbir__nor:
	mov	eax, DWORD PTR output_size$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbir__nor
; Line 1136
	xorps	xmm0, xmm0
	movss	DWORD PTR total$1[rsp], xmm0
; Line 1138
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbir__nor
$LN5@stbir__nor:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbir__nor:
	mov	eax, DWORD PTR num_contributors$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbir__nor
; Line 1140
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN24@stbir__nor
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN24@stbir__nor
; Line 1142
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR j$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR coefficient$2[rsp], xmm0
; Line 1143
	movss	xmm0, DWORD PTR total$1[rsp]
	addss	xmm0, DWORD PTR coefficient$2[rsp]
	movss	DWORD PTR total$1[rsp], xmm0
; Line 1144
	jmp	SHORT $LN25@stbir__nor
$LN24@stbir__nor:
; Line 1145
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN26@stbir__nor
; Line 1146
	jmp	SHORT $LN6@stbir__nor
$LN26@stbir__nor:
$LN25@stbir__nor:
; Line 1147
	jmp	$LN5@stbir__nor
$LN6@stbir__nor:
; Line 1149
	movss	xmm0, DWORD PTR total$1[rsp]
	comiss	xmm0, DWORD PTR __real@3f666666
	ja	SHORT $LN32@stbir__nor
	mov	r8d, 1149				; 0000047dH
	lea	rdx, OFFSET FLAT:$SG78509
	lea	rcx, OFFSET FLAT:$SG78510
	call	_wassert
	xor	eax, eax
$LN32@stbir__nor:
; Line 1150
	movss	xmm0, DWORD PTR __real@3f8ccccd
	comiss	xmm0, DWORD PTR total$1[rsp]
	ja	SHORT $LN33@stbir__nor
	mov	r8d, 1150				; 0000047eH
	lea	rdx, OFFSET FLAT:$SG78511
	lea	rcx, OFFSET FLAT:$SG78512
	call	_wassert
	xor	eax, eax
$LN33@stbir__nor:
; Line 1152
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR total$1[rsp]
	movss	DWORD PTR scale$3[rsp], xmm0
; Line 1154
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbir__nor
$LN8@stbir__nor:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbir__nor:
	mov	eax, DWORD PTR num_contributors$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN9@stbir__nor
; Line 1156
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN27@stbir__nor
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8+4]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN27@stbir__nor
; Line 1157
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR j$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	mov	QWORD PTR tv169[rsp], rax
	mov	rax, QWORD PTR tv169[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scale$3[rsp]
	mov	rax, QWORD PTR tv169[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN28@stbir__nor
$LN27@stbir__nor:
; Line 1158
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN29@stbir__nor
; Line 1159
	jmp	SHORT $LN9@stbir__nor
$LN29@stbir__nor:
$LN28@stbir__nor:
; Line 1160
	jmp	$LN8@stbir__nor
$LN9@stbir__nor:
; Line 1161
	jmp	$LN2@stbir__nor
$LN3@stbir__nor:
; Line 1165
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbir__nor
$LN11@stbir__nor:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbir__nor:
	mov	eax, DWORD PTR num_contributors$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbir__nor
; Line 1169
	mov	DWORD PTR skip$[rsp], 0
$LN14@stbir__nor:
; Line 1170
	mov	eax, DWORD PTR skip$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR j$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN15@stbir__nor
	jne	SHORT $LN15@stbir__nor
; Line 1171
	mov	eax, DWORD PTR skip$[rsp]
	inc	eax
	mov	DWORD PTR skip$[rsp], eax
	jmp	SHORT $LN14@stbir__nor
$LN15@stbir__nor:
; Line 1173
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	add	eax, DWORD PTR skip$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR contributors$[rsp]
	mov	DWORD PTR [rdx+rcx*8], eax
$LN16@stbir__nor:
; Line 1175
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	cmp	DWORD PTR [rcx+rax*8], 0
	jge	SHORT $LN17@stbir__nor
; Line 1177
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	mov	eax, DWORD PTR [rcx+rax*8]
	inc	eax
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR contributors$[rsp]
	mov	DWORD PTR [rdx+rcx*8], eax
; Line 1178
	mov	eax, DWORD PTR skip$[rsp]
	inc	eax
	mov	DWORD PTR skip$[rsp], eax
; Line 1179
	jmp	SHORT $LN16@stbir__nor
$LN17@stbir__nor:
; Line 1181
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR contributors$[rsp]
	mov	r8, QWORD PTR contributors$[rsp]
	mov	ecx, DWORD PTR [r8+rcx*8]
	mov	eax, DWORD PTR [rdx+rax*8+4]
	sub	eax, ecx
	inc	eax
	mov	DWORD PTR range$4[rsp], eax
; Line 1182
	mov	edx, DWORD PTR range$4[rsp]
	mov	ecx, DWORD PTR num_coefficients$[rsp]
	call	stbir__min
	mov	DWORD PTR max$5[rsp], eax
; Line 1184
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_coefficient_width
	mov	DWORD PTR width$6[rsp], eax
; Line 1185
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN20@stbir__nor
$LN18@stbir__nor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbir__nor:
	mov	eax, DWORD PTR max$5[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbir__nor
; Line 1187
	mov	eax, DWORD PTR skip$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR width$6[rsp]
	jl	SHORT $LN30@stbir__nor
; Line 1188
	jmp	SHORT $LN19@stbir__nor
$LN30@stbir__nor:
; Line 1190
	mov	eax, DWORD PTR skip$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR j$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	mov	QWORD PTR tv240[rsp], rax
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR j$[rsp]
	movss	xmm2, DWORD PTR scale_ratio$[rsp]
	mov	edx, DWORD PTR filter$[rsp]
	mov	rcx, QWORD PTR coefficients$[rsp]
	call	stbir__get_coefficient
	mov	rcx, QWORD PTR tv240[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
; Line 1191
	jmp	$LN18@stbir__nor
$LN19@stbir__nor:
; Line 1193
	jmp	$LN11@stbir__nor
; Line 1194
	jmp	$LN11@stbir__nor
$LN12@stbir__nor:
; Line 1197
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN23@stbir__nor
$LN21@stbir__nor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbir__nor:
	mov	eax, DWORD PTR num_contributors$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbir__nor
; Line 1198
	mov	eax, DWORD PTR output_size$[rsp]
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR contributors$[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8+4]
	call	stbir__min
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR contributors$[rsp]
	mov	DWORD PTR [rdx+rcx*8+4], eax
	jmp	SHORT $LN21@stbir__nor
$LN22@stbir__nor:
; Line 1199
	add	rsp, 120				; 00000078H
	ret	0
stbir__normalize_downsample_coefficients ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv64 = 36
out_pixel_center$1 = 40
x$2 = 44
filter$ = 64
scale_ratio$ = 72
out_first_pixel$ = 80
out_last_pixel$ = 88
out_center_of_in$ = 96
contributor$ = 104
coefficient_group$ = 112
stbir__calculate_coefficients_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1093
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1096
	mov	eax, DWORD PTR out_first_pixel$[rsp]
	mov	ecx, DWORD PTR out_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv64[rsp], eax
	movsxd	rcx, DWORD PTR filter$[rsp]
	imul	rcx, rcx, 16
	lea	rdx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm0, DWORD PTR scale_ratio$[rsp]
	call	QWORD PTR [rdx+rcx+8]
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	jle	SHORT $LN10@stbir__cal
	mov	r8d, 1096				; 00000448H
	lea	rdx, OFFSET FLAT:$SG78450
	lea	rcx, OFFSET FLAT:$SG78451
	call	_wassert
	xor	eax, eax
$LN10@stbir__cal:
; Line 1098
	mov	rax, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR out_first_pixel$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1099
	mov	rax, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR out_last_pixel$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 1101
	mov	rax, QWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+4], ecx
	jge	SHORT $LN11@stbir__cal
	mov	r8d, 1101				; 0000044dH
	lea	rdx, OFFSET FLAT:$SG78452
	lea	rcx, OFFSET FLAT:$SG78453
	call	_wassert
	xor	eax, eax
$LN11@stbir__cal:
; Line 1103
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbir__cal
$LN2@stbir__cal:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbir__cal:
	mov	eax, DWORD PTR out_first_pixel$[rsp]
	mov	ecx, DWORD PTR out_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN3@stbir__cal
; Line 1105
	mov	eax, DWORD PTR out_first_pixel$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR out_pixel_center$1[rsp], xmm0
; Line 1106
	movss	xmm0, DWORD PTR out_pixel_center$1[rsp]
	subss	xmm0, DWORD PTR out_center_of_in$[rsp]
	movss	DWORD PTR x$2[rsp], xmm0
; Line 1107
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm1, DWORD PTR scale_ratio$[rsp]
	movss	xmm0, DWORD PTR x$2[rsp]
	call	QWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1108
	jmp	$LN2@stbir__cal
$LN3@stbir__cal:
; Line 1116
	mov	eax, DWORD PTR out_first_pixel$[rsp]
	mov	ecx, DWORD PTR out_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbir__cal
$LN5@stbir__cal:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbir__cal:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN6@stbir__cal
; Line 1118
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN12@stbir__cal
	je	SHORT $LN8@stbir__cal
$LN12@stbir__cal:
; Line 1119
	jmp	SHORT $LN6@stbir__cal
$LN8@stbir__cal:
; Line 1122
	mov	rax, QWORD PTR contributor$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	rcx, QWORD PTR contributor$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 1123
	jmp	SHORT $LN5@stbir__cal
$LN6@stbir__cal:
; Line 1124
	add	rsp, 56					; 00000038H
	ret	0
stbir__calculate_coefficients_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
total_filter$ = 36
tv64 = 40
in_pixel_center$1 = 44
tv139 = 48
filter_scale$ = 52
filter$ = 80
scale$ = 88
in_first_pixel$ = 96
in_last_pixel$ = 104
in_center_of_out$ = 112
contributor$ = 120
coefficient_group$ = 128
stbir__calculate_coefficients_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1039
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 1041
	xorps	xmm0, xmm0
	movss	DWORD PTR total_filter$[rsp], xmm0
; Line 1044
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	mov	ecx, DWORD PTR in_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv64[rsp], eax
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movsxd	rcx, DWORD PTR filter$[rsp]
	imul	rcx, rcx, 16
	lea	rdx, OFFSET FLAT:stbir__filter_info_table
	call	QWORD PTR [rdx+rcx+8]
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	jle	SHORT $LN14@stbir__cal
	mov	r8d, 1044				; 00000414H
	lea	rdx, OFFSET FLAT:$SG78409
	lea	rcx, OFFSET FLAT:$SG78410
	call	_wassert
	xor	eax, eax
$LN14@stbir__cal:
; Line 1046
	mov	rax, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR in_first_pixel$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1047
	mov	rax, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR in_last_pixel$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 1049
	mov	rax, QWORD PTR contributor$[rsp]
	mov	rcx, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+4], ecx
	jge	SHORT $LN15@stbir__cal
	mov	r8d, 1049				; 00000419H
	lea	rdx, OFFSET FLAT:$SG78411
	lea	rcx, OFFSET FLAT:$SG78412
	call	_wassert
	xor	eax, eax
$LN15@stbir__cal:
; Line 1051
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbir__cal
$LN2@stbir__cal:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbir__cal:
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	mov	ecx, DWORD PTR in_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN3@stbir__cal
; Line 1053
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR in_pixel_center$1[rsp], xmm0
; Line 1054
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	xmm1, DWORD PTR in_center_of_out$[rsp]
	subss	xmm1, DWORD PTR in_pixel_center$1[rsp]
	movss	DWORD PTR tv139[rsp], xmm1
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv139[rsp]
	call	QWORD PTR [rcx+rax]
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1057
	cmp	DWORD PTR i$[rsp], 0
	jne	SHORT $LN11@stbir__cal
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN11@stbir__cal
	jne	SHORT $LN11@stbir__cal
; Line 1059
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	inc	eax
	mov	DWORD PTR in_first_pixel$[rsp], eax
	mov	rax, QWORD PTR contributor$[rsp]
	mov	ecx, DWORD PTR in_first_pixel$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1060
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
; Line 1061
	jmp	$LN2@stbir__cal
$LN11@stbir__cal:
; Line 1064
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	xmm0, DWORD PTR total_filter$[rsp]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR total_filter$[rsp], xmm0
; Line 1065
	jmp	$LN2@stbir__cal
$LN3@stbir__cal:
; Line 1073
	cvtss2sd xmm0, DWORD PTR total_filter$[rsp]
	comisd	xmm0, QWORD PTR __real@3feccccccccccccd
	ja	SHORT $LN16@stbir__cal
	mov	r8d, 1073				; 00000431H
	lea	rdx, OFFSET FLAT:$SG78414
	lea	rcx, OFFSET FLAT:$SG78415
	call	_wassert
	xor	eax, eax
$LN16@stbir__cal:
; Line 1074
	movss	xmm0, DWORD PTR __real@3f8ccccd
	comiss	xmm0, DWORD PTR total_filter$[rsp]
	ja	SHORT $LN17@stbir__cal
	mov	r8d, 1074				; 00000432H
	lea	rdx, OFFSET FLAT:$SG78416
	lea	rcx, OFFSET FLAT:$SG78417
	call	_wassert
	xor	eax, eax
$LN17@stbir__cal:
; Line 1077
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR total_filter$[rsp]
	movss	DWORD PTR filter_scale$[rsp], xmm0
; Line 1079
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbir__cal
$LN5@stbir__cal:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbir__cal:
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	mov	ecx, DWORD PTR in_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN6@stbir__cal
; Line 1080
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR filter_scale$[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN5@stbir__cal
$LN6@stbir__cal:
; Line 1082
	mov	eax, DWORD PTR in_first_pixel$[rsp]
	mov	ecx, DWORD PTR in_last_pixel$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN10@stbir__cal
$LN8@stbir__cal:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbir__cal:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN9@stbir__cal
; Line 1084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR coefficient_group$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN18@stbir__cal
	je	SHORT $LN12@stbir__cal
$LN18@stbir__cal:
; Line 1085
	jmp	SHORT $LN9@stbir__cal
$LN12@stbir__cal:
; Line 1088
	mov	rax, QWORD PTR contributor$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	rcx, QWORD PTR contributor$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 1089
	jmp	SHORT $LN8@stbir__cal
$LN9@stbir__cal:
; Line 1090
	add	rsp, 72					; 00000048H
	ret	0
stbir__calculate_coefficients_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
in_pixel_center$ = 32
in_pixel_influence_lowerbound$ = 36
in_pixel_influence_upperbound$ = 40
out_pixel_influence_lowerbound$ = 44
out_pixel_influence_upperbound$ = 48
n$ = 80
in_pixels_radius$ = 88
scale_ratio$ = 96
out_shift$ = 104
out_first_pixel$ = 112
out_last_pixel$ = 120
out_center_of_in$ = 128
stbir__calculate_sample_range_downsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1025
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 1026
	cvtsi2ss xmm0, DWORD PTR n$[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR in_pixel_center$[rsp], xmm0
; Line 1027
	movss	xmm0, DWORD PTR in_pixel_center$[rsp]
	subss	xmm0, DWORD PTR in_pixels_radius$[rsp]
	movss	DWORD PTR in_pixel_influence_lowerbound$[rsp], xmm0
; Line 1028
	movss	xmm0, DWORD PTR in_pixel_center$[rsp]
	addss	xmm0, DWORD PTR in_pixels_radius$[rsp]
	movss	DWORD PTR in_pixel_influence_upperbound$[rsp], xmm0
; Line 1030
	movss	xmm0, DWORD PTR in_pixel_influence_lowerbound$[rsp]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	subss	xmm0, DWORD PTR out_shift$[rsp]
	movss	DWORD PTR out_pixel_influence_lowerbound$[rsp], xmm0
; Line 1031
	movss	xmm0, DWORD PTR in_pixel_influence_upperbound$[rsp]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	subss	xmm0, DWORD PTR out_shift$[rsp]
	movss	DWORD PTR out_pixel_influence_upperbound$[rsp], xmm0
; Line 1033
	movss	xmm0, DWORD PTR in_pixel_center$[rsp]
	mulss	xmm0, DWORD PTR scale_ratio$[rsp]
	subss	xmm0, DWORD PTR out_shift$[rsp]
	mov	rax, QWORD PTR out_center_of_in$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1034
	cvtss2sd xmm0, DWORD PTR out_pixel_influence_lowerbound$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR out_first_pixel$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1035
	cvtss2sd xmm0, DWORD PTR out_pixel_influence_upperbound$[rsp]
	subsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR out_last_pixel$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1036
	add	rsp, 72					; 00000048H
	ret	0
stbir__calculate_sample_range_downsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out_pixel_center$ = 32
out_pixel_influence_lowerbound$ = 36
out_pixel_influence_upperbound$ = 40
in_pixel_influence_lowerbound$ = 44
in_pixel_influence_upperbound$ = 48
n$ = 80
out_filter_radius$ = 88
scale_ratio$ = 96
out_shift$ = 104
in_first_pixel$ = 112
in_last_pixel$ = 120
in_center_of_out$ = 128
stbir__calculate_sample_range_upsample PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1010
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 1011
	cvtsi2ss xmm0, DWORD PTR n$[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR out_pixel_center$[rsp], xmm0
; Line 1012
	movss	xmm0, DWORD PTR out_pixel_center$[rsp]
	subss	xmm0, DWORD PTR out_filter_radius$[rsp]
	movss	DWORD PTR out_pixel_influence_lowerbound$[rsp], xmm0
; Line 1013
	movss	xmm0, DWORD PTR out_pixel_center$[rsp]
	addss	xmm0, DWORD PTR out_filter_radius$[rsp]
	movss	DWORD PTR out_pixel_influence_upperbound$[rsp], xmm0
; Line 1015
	movss	xmm0, DWORD PTR out_pixel_influence_lowerbound$[rsp]
	addss	xmm0, DWORD PTR out_shift$[rsp]
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR in_pixel_influence_lowerbound$[rsp], xmm0
; Line 1016
	movss	xmm0, DWORD PTR out_pixel_influence_upperbound$[rsp]
	addss	xmm0, DWORD PTR out_shift$[rsp]
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	movss	DWORD PTR in_pixel_influence_upperbound$[rsp], xmm0
; Line 1018
	movss	xmm0, DWORD PTR out_pixel_center$[rsp]
	addss	xmm0, DWORD PTR out_shift$[rsp]
	divss	xmm0, DWORD PTR scale_ratio$[rsp]
	mov	rax, QWORD PTR in_center_of_out$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1019
	cvtss2sd xmm0, DWORD PTR in_pixel_influence_lowerbound$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR in_first_pixel$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1020
	cvtss2sd xmm0, DWORD PTR in_pixel_influence_upperbound$[rsp]
	subsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	floor
	cvttsd2si eax, xmm0
	mov	rcx, QWORD PTR in_last_pixel$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1021
	add	rsp, 72					; 00000048H
	ret	0
stbir__calculate_sample_range_upsample ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
edge$ = 48
n$ = 56
max$ = 64
stbir__edge_wrap PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 1001
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1003
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN2@stbir__edg
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN2@stbir__edg
; Line 1004
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stbir__edg
$LN2@stbir__edg:
; Line 1005
	mov	r8d, DWORD PTR max$[rsp]
	mov	edx, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR edge$[rsp]
	call	stbir__edge_wrap_slow
$LN1@stbir__edg:
; Line 1006
	add	rsp, 40					; 00000028H
	ret	0
stbir__edge_wrap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
m$1 = 36
max2$2 = 40
edge$ = 64
n$ = 72
max$ = 80
stbir__edge_wrap_slow PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 943
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 944
	mov	eax, DWORD PTR edge$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN5@stbir__edg
	cmp	DWORD PTR tv64[rsp], 2
	je	SHORT $LN8@stbir__edg
	cmp	DWORD PTR tv64[rsp], 3
	je	$LN15@stbir__edg
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN4@stbir__edg
	jmp	$LN19@stbir__edg
$LN4@stbir__edg:
; Line 947
	xor	eax, eax
	jmp	$LN1@stbir__edg
$LN5@stbir__edg:
; Line 950
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN6@stbir__edg
; Line 951
	xor	eax, eax
	jmp	$LN1@stbir__edg
$LN6@stbir__edg:
; Line 953
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN7@stbir__edg
; Line 954
	mov	eax, DWORD PTR max$[rsp]
	dec	eax
	jmp	$LN1@stbir__edg
$LN7@stbir__edg:
; Line 956
	mov	eax, DWORD PTR n$[rsp]
	jmp	$LN1@stbir__edg
$LN8@stbir__edg:
; Line 960
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN9@stbir__edg
; Line 962
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN10@stbir__edg
; Line 963
	mov	eax, DWORD PTR n$[rsp]
	neg	eax
	jmp	$LN1@stbir__edg
	jmp	SHORT $LN11@stbir__edg
$LN10@stbir__edg:
; Line 965
	mov	eax, DWORD PTR max$[rsp]
	dec	eax
	jmp	$LN1@stbir__edg
$LN11@stbir__edg:
$LN9@stbir__edg:
; Line 968
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN12@stbir__edg
; Line 970
	mov	eax, DWORD PTR max$[rsp]
	shl	eax, 1
	mov	DWORD PTR max2$2[rsp], eax
; Line 971
	mov	eax, DWORD PTR max2$2[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN13@stbir__edg
; Line 972
	xor	eax, eax
	jmp	$LN1@stbir__edg
	jmp	SHORT $LN14@stbir__edg
$LN13@stbir__edg:
; Line 974
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR max2$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	jmp	SHORT $LN1@stbir__edg
$LN14@stbir__edg:
$LN12@stbir__edg:
; Line 977
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@stbir__edg
$LN15@stbir__edg:
; Line 981
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN16@stbir__edg
; Line 982
	mov	eax, DWORD PTR n$[rsp]
	cdq
	idiv	DWORD PTR max$[rsp]
	mov	eax, edx
	jmp	SHORT $LN1@stbir__edg
	jmp	SHORT $LN17@stbir__edg
$LN16@stbir__edg:
; Line 985
	mov	eax, DWORD PTR n$[rsp]
	neg	eax
	cdq
	idiv	DWORD PTR max$[rsp]
	mov	eax, edx
	mov	DWORD PTR m$1[rsp], eax
; Line 987
	cmp	DWORD PTR m$1[rsp], 0
	je	SHORT $LN18@stbir__edg
; Line 988
	mov	eax, DWORD PTR m$1[rsp]
	mov	ecx, DWORD PTR max$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$1[rsp], eax
$LN18@stbir__edg:
; Line 990
	mov	eax, DWORD PTR m$1[rsp]
	jmp	SHORT $LN1@stbir__edg
$LN17@stbir__edg:
$LN19@stbir__edg:
; Line 995
	lea	rax, OFFSET FLAT:$SG78310
	test	rax, rax
	je	SHORT $LN21@stbir__edg
	mov	r8d, 995				; 000003e3H
	lea	rdx, OFFSET FLAT:$SG78311
	lea	rcx, OFFSET FLAT:$SG78312
	call	_wassert
	xor	eax, eax
$LN21@stbir__edg:
; Line 996
	xor	eax, eax
$LN1@stbir__edg:
; Line 998
	add	rsp, 56					; 00000038H
	ret	0
stbir__edge_wrap_slow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
width$ = 32
coefficients$ = 64
filter$ = 72
scale$ = 80
n$ = 88
c$ = 96
stbir__get_coefficient PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 937
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 938
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_coefficient_width
	mov	DWORD PTR width$[rsp], eax
; Line 939
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	add	eax, DWORD PTR c$[rsp]
	cdqe
	mov	rcx, QWORD PTR coefficients$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
; Line 940
	add	rsp, 56					; 00000038H
	ret	0
stbir__get_coefficient ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
contributors$ = 8
n$ = 16
stbir__get_contributor PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 930
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 931
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR contributors$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
; Line 932
	ret	0
stbir__get_contributor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
stbir__get_total_vertical_coefficients PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 924
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 925
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+96]
	call	stbir__get_coefficient_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+196]
	imul	ecx, eax
	mov	eax, ecx
; Line 927
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_total_vertical_coefficients ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
stbir__get_total_horizontal_coefficients PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 918
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 919
	mov	rax, QWORD PTR info$[rsp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rax+92]
	call	stbir__get_coefficient_width
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+192]
	imul	ecx, eax
	mov	eax, ecx
; Line 921
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_total_horizontal_coefficients ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 48
filter$ = 56
input_size$ = 64
output_size$ = 72
stbir__get_contributors PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 910
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 911
	movss	xmm0, DWORD PTR scale$[rsp]
	call	stbir__use_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__get
; Line 912
	mov	eax, DWORD PTR output_size$[rsp]
	jmp	SHORT $LN1@stbir__get
	jmp	SHORT $LN3@stbir__get
$LN2@stbir__get:
; Line 914
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_filter_pixel_margin
	mov	ecx, DWORD PTR input_size$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
$LN3@stbir__get:
$LN1@stbir__get:
; Line 915
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_contributors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filter$ = 48
scale$ = 56
stbir__get_coefficient_width PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 902
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 903
	movss	xmm0, DWORD PTR scale$[rsp]
	call	stbir__use_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__get
; Line 904
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	jmp	SHORT $LN1@stbir__get
	jmp	SHORT $LN3@stbir__get
$LN2@stbir__get:
; Line 906
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm0, DWORD PTR scale$[rsp]
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
$LN3@stbir__get:
$LN1@stbir__get:
; Line 907
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_coefficient_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filter$ = 48
scale$ = 56
stbir__get_filter_pixel_margin PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 897
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 898
	movss	xmm1, DWORD PTR scale$[rsp]
	mov	ecx, DWORD PTR filter$[rsp]
	call	stbir__get_filter_pixel_width
	cdq
	sub	eax, edx
	sar	eax, 1
; Line 899
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_filter_pixel_margin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
filter$ = 48
scale$ = 56
stbir__get_filter_pixel_width PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 884
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 885
	cmp	DWORD PTR filter$[rsp], 0
	jne	SHORT $LN5@stbir__get
	mov	r8d, 885				; 00000375H
	lea	rdx, OFFSET FLAT:$SG78219
	lea	rcx, OFFSET FLAT:$SG78220
	call	_wassert
	xor	eax, eax
$LN5@stbir__get:
; Line 886
	movsxd	rax, DWORD PTR filter$[rsp]
	cmp	rax, 6
	jb	SHORT $LN6@stbir__get
	mov	r8d, 886				; 00000376H
	lea	rdx, OFFSET FLAT:$SG78221
	lea	rcx, OFFSET FLAT:$SG78222
	call	_wassert
	xor	eax, eax
$LN6@stbir__get:
; Line 888
	movss	xmm0, DWORD PTR scale$[rsp]
	call	stbir__use_upsampling
	test	eax, eax
	je	SHORT $LN2@stbir__get
; Line 889
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR __real@40000000
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
	jmp	SHORT $LN1@stbir__get
	jmp	SHORT $LN3@stbir__get
$LN2@stbir__get:
; Line 891
	movsxd	rax, DWORD PTR filter$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:stbir__filter_info_table
	movss	xmm0, DWORD PTR scale$[rsp]
	call	QWORD PTR [rcx+rax+8]
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR scale$[rsp]
	cvtss2sd xmm0, xmm0
	call	ceil
	cvttsd2si eax, xmm0
$LN3@stbir__get:
$LN1@stbir__get:
; Line 892
	add	rsp, 40					; 00000028H
	ret	0
stbir__get_filter_pixel_width ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbir_info$ = 48
stbir__use_height_upsampling PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 877
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 878
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm0, DWORD PTR [rax+72]
	call	stbir__use_upsampling
; Line 879
	add	rsp, 40					; 00000028H
	ret	0
stbir__use_height_upsampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbir_info$ = 48
stbir__use_width_upsampling PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 872
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 873
	mov	rax, QWORD PTR stbir_info$[rsp]
	movss	xmm0, DWORD PTR [rax+68]
	call	stbir__use_upsampling
; Line 874
	add	rsp, 40					; 00000028H
	ret	0
stbir__use_width_upsampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
ratio$ = 32
stbir__use_upsampling PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 867
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 868
	movss	xmm0, DWORD PTR ratio$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@stbir__use
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@stbir__use
$LN3@stbir__use:
	mov	DWORD PTR tv65[rsp], 0
$LN4@stbir__use:
	mov	eax, DWORD PTR tv65[rsp]
; Line 869
	add	rsp, 24
	ret	0
stbir__use_upsampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stbir__support_two PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 852
	movss	DWORD PTR [rsp+8], xmm0
; Line 854
	movss	xmm0, DWORD PTR __real@40000000
; Line 855
	ret	0
stbir__support_two ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stbir__support_one PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 846
	movss	DWORD PTR [rsp+8], xmm0
; Line 848
	movss	xmm0, DWORD PTR __real@3f800000
; Line 849
	ret	0
stbir__support_one ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stbir__support_zero PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 840
	movss	DWORD PTR [rsp+8], xmm0
; Line 842
	xorps	xmm0, xmm0
; Line 843
	ret	0
stbir__support_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
s$ = 56
stbir__filter_mitchell PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 826
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 829
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
; Line 831
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbir__fil
; Line 832
	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@41a80000
	mulss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, DWORD PTR __real@42100000
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@41800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@41900000
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN3@stbir__fil
$LN2@stbir__fil:
; Line 833
	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN4@stbir__fil
; Line 834
	movss	xmm0, DWORD PTR __real@40e00000
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@42100000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@c2700000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@42000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@41900000
	jmp	SHORT $LN1@stbir__fil
$LN4@stbir__fil:
$LN3@stbir__fil:
; Line 836
	xorps	xmm0, xmm0
$LN1@stbir__fil:
; Line 837
	add	rsp, 40					; 00000028H
	ret	0
stbir__filter_mitchell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
s$ = 56
stbir__filter_catmullrom PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 812
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 815
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
; Line 817
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbir__fil
; Line 818
	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@3fc00000
	mulss	xmm1, DWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR __real@40200000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN3@stbir__fil
$LN2@stbir__fil:
; Line 819
	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN4@stbir__fil
; Line 820
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR x$[rsp]
	subss	xmm0, DWORD PTR __real@40200000
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	jmp	SHORT $LN1@stbir__fil
$LN4@stbir__fil:
$LN3@stbir__fil:
; Line 822
	xorps	xmm0, xmm0
$LN1@stbir__fil:
; Line 823
	add	rsp, 40					; 00000028H
	ret	0
stbir__filter_catmullrom ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
s$ = 56
stbir__filter_cubic PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 798
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 801
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
; Line 803
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbir__fil
; Line 804
	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR __real@40400000
	mulss	xmm1, DWORD PTR x$[rsp]
	subss	xmm1, DWORD PTR __real@40c00000
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@40800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40c00000
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN3@stbir__fil
$LN2@stbir__fil:
; Line 805
	movss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN4@stbir__fil
; Line 806
	movss	xmm0, DWORD PTR __real@40c00000
	subss	xmm0, DWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@c1400000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@41000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40c00000
	jmp	SHORT $LN1@stbir__fil
$LN4@stbir__fil:
$LN3@stbir__fil:
; Line 808
	xorps	xmm0, xmm0
$LN1@stbir__fil:
; Line 809
	add	rsp, 40					; 00000028H
	ret	0
stbir__filter_cubic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
s$ = 56
stbir__filter_triangle PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 786
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 789
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
; Line 791
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR x$[rsp]
	jb	SHORT $LN2@stbir__fil
; Line 792
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR x$[rsp]
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN3@stbir__fil
$LN2@stbir__fil:
; Line 794
	xorps	xmm0, xmm0
$LN3@stbir__fil:
$LN1@stbir__fil:
; Line 795
	add	rsp, 40					; 00000028H
	ret	0
stbir__filter_triangle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 48
stbir__support_trapezoid PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 780
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 781
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR scale$[rsp]
	jae	SHORT $LN3@stbir__sup
	mov	r8d, 781				; 0000030dH
	lea	rdx, OFFSET FLAT:$SG78133
	lea	rcx, OFFSET FLAT:$SG78134
	call	_wassert
	xor	eax, eax
$LN3@stbir__sup:
; Line 782
	movss	xmm0, DWORD PTR scale$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f000000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 783
	add	rsp, 40					; 00000028H
	ret	0
stbir__support_trapezoid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
halfscale$ = 32
t$ = 36
r$1 = 40
x$ = 64
scale$ = 72
stbir__filter_trapezoid PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 760
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H
; Line 761
	movss	xmm0, DWORD PTR scale$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR halfscale$[rsp], xmm0
; Line 762
	movss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR halfscale$[rsp]
	movss	DWORD PTR t$[rsp], xmm0
; Line 763
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR scale$[rsp]
	jae	SHORT $LN7@stbir__fil
	mov	r8d, 763				; 000002fbH
	lea	rdx, OFFSET FLAT:$SG78121
	lea	rcx, OFFSET FLAT:$SG78122
	call	_wassert
	xor	eax, eax
$LN7@stbir__fil:
; Line 765
	cvtss2sd xmm0, DWORD PTR x$[rsp]
	call	fabs
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR x$[rsp], xmm0
; Line 767
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR t$[rsp]
	jb	SHORT $LN2@stbir__fil
; Line 768
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN3@stbir__fil
$LN2@stbir__fil:
; Line 771
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR halfscale$[rsp]
	movss	DWORD PTR r$1[rsp], xmm0
; Line 772
	movss	xmm0, DWORD PTR r$1[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jb	SHORT $LN4@stbir__fil
; Line 773
	movss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN1@stbir__fil
	jmp	SHORT $LN5@stbir__fil
$LN4@stbir__fil:
; Line 775
	movss	xmm0, DWORD PTR t$[rsp]
	subss	xmm0, DWORD PTR x$[rsp]
	divss	xmm0, DWORD PTR scale$[rsp]
$LN5@stbir__fil:
$LN3@stbir__fil:
$LN1@stbir__fil:
; Line 777
	add	rsp, 56					; 00000038H
	ret	0
stbir__filter_trapezoid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tab$ = 0
f$ = 4
scale$ = 8
t$ = 12
bias$ = 16
in$ = 48
stbir__linear_to_srgb_uchar PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 676
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 685
	movss	xmm0, DWORD PTR in$[rsp]
	comiss	xmm0, DWORD PTR ?minval@?1??stbir__linear_to_srgb_uchar@@9@9
	ja	SHORT $LN2@stbir__lin
; Line 686
	movss	xmm0, DWORD PTR ?minval@?1??stbir__linear_to_srgb_uchar@@9@9
	movss	DWORD PTR in$[rsp], xmm0
$LN2@stbir__lin:
; Line 687
	movss	xmm0, DWORD PTR in$[rsp]
	comiss	xmm0, DWORD PTR ?almostone@?1??stbir__linear_to_srgb_uchar@@9@9
	jbe	SHORT $LN3@stbir__lin
; Line 688
	movss	xmm0, DWORD PTR ?almostone@?1??stbir__linear_to_srgb_uchar@@9@9
	movss	DWORD PTR in$[rsp], xmm0
$LN3@stbir__lin:
; Line 691
	movss	xmm0, DWORD PTR in$[rsp]
	movss	DWORD PTR f$[rsp], xmm0
; Line 692
	mov	eax, DWORD PTR ?minval@?1??stbir__linear_to_srgb_uchar@@9@9
	mov	ecx, DWORD PTR f$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 20
	mov	eax, eax
	lea	rcx, OFFSET FLAT:fp32_to_srgb8_tab4
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR tab$[rsp], eax
; Line 693
	mov	eax, DWORD PTR tab$[rsp]
	shr	eax, 16
	shl	eax, 9
	mov	DWORD PTR bias$[rsp], eax
; Line 694
	mov	eax, DWORD PTR tab$[rsp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR scale$[rsp], eax
; Line 697
	mov	eax, DWORD PTR f$[rsp]
	shr	eax, 12
	and	eax, 255				; 000000ffH
	mov	DWORD PTR t$[rsp], eax
; Line 698
	mov	eax, DWORD PTR scale$[rsp]
	imul	eax, DWORD PTR t$[rsp]
	mov	ecx, DWORD PTR bias$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 16
; Line 699
	add	rsp, 40					; 00000028H
	ret	0
stbir__linear_to_srgb_uchar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
stbir__linear_to_srgb PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 643
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 644
	movss	xmm0, DWORD PTR __real@3b4d2e1c
	comiss	xmm0, DWORD PTR f$[rsp]
	jb	SHORT $LN2@stbir__lin
; Line 645
	movss	xmm0, DWORD PTR f$[rsp]
	mulss	xmm0, DWORD PTR __real@414eb852
	jmp	SHORT $LN1@stbir__lin
	jmp	SHORT $LN3@stbir__lin
$LN2@stbir__lin:
; Line 647
	cvtss2sd xmm0, DWORD PTR f$[rsp]
	movsd	xmm1, QWORD PTR __real@3fdaaaaaa0000000
	call	pow
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f870a3d
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3d6147ae
$LN3@stbir__lin:
$LN1@stbir__lin:
; Line 648
	add	rsp, 40					; 00000028H
	ret	0
stbir__linear_to_srgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
stbir__srgb_to_linear PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 635
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 636
	movss	xmm0, DWORD PTR __real@3d25aee6
	comiss	xmm0, DWORD PTR f$[rsp]
	jb	SHORT $LN2@stbir__srg
; Line 637
	movss	xmm0, DWORD PTR f$[rsp]
	divss	xmm0, DWORD PTR __real@414eb852
	jmp	SHORT $LN1@stbir__srg
	jmp	SHORT $LN3@stbir__srg
$LN2@stbir__srg:
; Line 639
	movss	xmm0, DWORD PTR f$[rsp]
	addss	xmm0, DWORD PTR __real@3d6147ae
	divss	xmm0, DWORD PTR __real@3f870a3d
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@4003333340000000
	call	pow
	cvtsd2ss xmm0, xmm0
$LN3@stbir__srg:
$LN1@stbir__srg:
; Line 640
	add	rsp, 40					; 00000028H
	ret	0
stbir__srgb_to_linear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
stbir__saturate PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 573
	movss	DWORD PTR [rsp+8], xmm0
; Line 574
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbir__sat
; Line 575
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbir__sat
$LN2@stbir__sat:
; Line 577
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@stbir__sat
; Line 578
	movss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN1@stbir__sat
$LN3@stbir__sat:
; Line 580
	movss	xmm0, DWORD PTR x$[rsp]
$LN1@stbir__sat:
; Line 581
	ret	0
stbir__saturate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
a$ = 32
b$ = 40
stbir__min PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 568
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 569
	mov	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jge	SHORT $LN3@stbir__min
	mov	eax, DWORD PTR a$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@stbir__min
$LN3@stbir__min:
	mov	eax, DWORD PTR b$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@stbir__min:
	mov	eax, DWORD PTR tv65[rsp]
; Line 570
	add	rsp, 24
	ret	0
stbir__min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
datatype$ = 272
num_channels$ = 280
alpha_channel$ = 288
flags$ = 296
edge_mode_horizontal$ = 304
edge_mode_vertical$ = 312
filter_horizontal$ = 320
filter_vertical$ = 328
space$ = 336
alloc_context$ = 344
s0$ = 352
t0$ = 360
s1$ = 368
t1$ = 376
stbir_resize_region PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2585
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2586
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_mode_vertical$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_mode_horizontal$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter_vertical$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter_horizontal$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	eax, DWORD PTR datatype$[rsp]
	mov	DWORD PTR [rsp+136], eax
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR t1$[rsp]
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rsp+88], xmm0
	movss	xmm0, DWORD PTR t0$[rsp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR s0$[rsp]
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2590
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_region ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
transform$ = 192
__$ArrayPad$ = 208
input_pixels$ = 240
input_w$ = 248
input_h$ = 256
input_stride_in_bytes$ = 264
output_pixels$ = 272
output_w$ = 280
output_h$ = 288
output_stride_in_bytes$ = 296
datatype$ = 304
num_channels$ = 312
alpha_channel$ = 320
flags$ = 328
edge_mode_horizontal$ = 336
edge_mode_vertical$ = 344
filter_horizontal$ = 352
filter_vertical$ = 360
space$ = 368
alloc_context$ = 376
x_scale$ = 384
y_scale$ = 392
x_offset$ = 400
y_offset$ = 408
stbir_resize_subpixel PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2565
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2567
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR x_scale$[rsp]
	movss	DWORD PTR transform$[rsp+rax], xmm0
; Line 2568
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR y_scale$[rsp]
	movss	DWORD PTR transform$[rsp+rax], xmm0
; Line 2569
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR x_offset$[rsp]
	movss	DWORD PTR transform$[rsp+rax], xmm0
; Line 2570
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR y_offset$[rsp]
	movss	DWORD PTR transform$[rsp+rax], xmm0
; Line 2571
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_mode_vertical$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_mode_horizontal$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter_vertical$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter_horizontal$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	eax, DWORD PTR datatype$[rsp]
	mov	DWORD PTR [rsp+136], eax
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	lea	rax, QWORD PTR transform$[rsp]
	mov	QWORD PTR [rsp+104], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2575
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
stbir_resize_subpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
datatype$ = 272
num_channels$ = 280
alpha_channel$ = 288
flags$ = 296
edge_mode_horizontal$ = 304
edge_mode_vertical$ = 312
filter_horizontal$ = 320
filter_vertical$ = 328
space$ = 336
alloc_context$ = 344
stbir_resize PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2548
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2549
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_mode_vertical$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_mode_horizontal$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter_vertical$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter_horizontal$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	eax, DWORD PTR datatype$[rsp]
	mov	DWORD PTR [rsp+136], eax
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2553
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
alpha_channel$ = 280
flags$ = 288
edge_wrap_mode$ = 296
filter$ = 304
space$ = 312
alloc_context$ = 320
stbir_resize_float_generic PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2533
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2534
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	DWORD PTR [rsp+136], 3
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2538
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_float_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
alpha_channel$ = 280
flags$ = 288
edge_wrap_mode$ = 296
filter$ = 304
space$ = 312
alloc_context$ = 320
stbir_resize_uint16_generic PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2520
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2521
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	DWORD PTR [rsp+136], 1
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2525
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_uint16_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
alpha_channel$ = 280
flags$ = 288
edge_wrap_mode$ = 296
filter$ = 304
space$ = 312
alloc_context$ = 320
stbir_resize_uint8_generic PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2508
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2509
	mov	eax, DWORD PTR space$[rsp]
	mov	DWORD PTR [rsp+176], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	eax, DWORD PTR filter$[rsp]
	mov	DWORD PTR [rsp+144], eax
	mov	DWORD PTR [rsp+136], 0
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	call	stbir__resize_arbitrary
; Line 2513
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_uint8_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
alpha_channel$ = 280
flags$ = 288
edge_wrap_mode$ = 296
stbir_resize_uint8_srgb_edgemode PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2496
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2497
	mov	DWORD PTR [rsp+176], 1
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+168], eax
	mov	eax, DWORD PTR edge_wrap_mode$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	DWORD PTR [rsp+152], 0
	mov	DWORD PTR [rsp+144], 0
	mov	DWORD PTR [rsp+136], 0
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	xor	ecx, ecx
	call	stbir__resize_arbitrary
; Line 2501
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_uint8_srgb_edgemode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
alpha_channel$ = 280
flags$ = 288
stbir_resize_uint8_srgb PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2485
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2486
	mov	DWORD PTR [rsp+176], 1
	mov	DWORD PTR [rsp+168], 1
	mov	DWORD PTR [rsp+160], 1
	mov	DWORD PTR [rsp+152], 0
	mov	DWORD PTR [rsp+144], 0
	mov	DWORD PTR [rsp+136], 0
	mov	eax, DWORD PTR flags$[rsp]
	mov	DWORD PTR [rsp+128], eax
	mov	eax, DWORD PTR alpha_channel$[rsp]
	mov	DWORD PTR [rsp+120], eax
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	xor	ecx, ecx
	call	stbir__resize_arbitrary
; Line 2490
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_uint8_srgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
stbir_resize_float PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2475
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2476
	mov	DWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 1
	mov	DWORD PTR [rsp+160], 1
	mov	DWORD PTR [rsp+152], 0
	mov	DWORD PTR [rsp+144], 0
	mov	DWORD PTR [rsp+136], 3
	mov	DWORD PTR [rsp+128], 0
	mov	DWORD PTR [rsp+120], -1
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	xor	ecx, ecx
	call	stbir__resize_arbitrary
; Line 2480
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_float ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
input_pixels$ = 208
input_w$ = 216
input_h$ = 224
input_stride_in_bytes$ = 232
output_pixels$ = 240
output_w$ = 248
output_h$ = 256
output_stride_in_bytes$ = 264
num_channels$ = 272
stbir_resize_uint8 PROC
; File W:\cpp\void\rx\stb_image_resize.h
; Line 2465
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
; Line 2466
	mov	DWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 1
	mov	DWORD PTR [rsp+160], 1
	mov	DWORD PTR [rsp+152], 0
	mov	DWORD PTR [rsp+144], 0
	mov	DWORD PTR [rsp+136], 0
	mov	DWORD PTR [rsp+128], 0
	mov	DWORD PTR [rsp+120], -1
	mov	eax, DWORD PTR num_channels$[rsp]
	mov	DWORD PTR [rsp+112], eax
	mov	QWORD PTR [rsp+104], 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+96], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+88], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+80], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+72], xmm0
	mov	eax, DWORD PTR output_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR output_h$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR output_w$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR output_pixels$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR input_stride_in_bytes$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR input_h$[rsp]
	mov	r8d, DWORD PTR input_w$[rsp]
	mov	rdx, QWORD PTR input_pixels$[rsp]
	xor	ecx, ecx
	call	stbir__resize_arbitrary
; Line 2470
	add	rsp, 200				; 000000c8H
	ret	0
stbir_resize_uint8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__is_16_main PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7584
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7586
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_is16
	test	eax, eax
	je	SHORT $LN2@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN2@stbi__is_1:
; Line 7590
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_is16
	test	eax, eax
	je	SHORT $LN3@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN3@stbi__is_1:
; Line 7594
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_is16
	test	eax, eax
	je	SHORT $LN4@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN4@stbi__is_1:
; Line 7596
	xor	eax, eax
$LN1@stbi__is_1:
; Line 7597
	add	rsp, 40					; 00000028H
	ret	0
stbi__is_16_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__info_main PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7542
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7544
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_info
	test	eax, eax
	je	SHORT $LN2@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN2@stbi__info:
; Line 7548
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_info
	test	eax, eax
	je	SHORT $LN3@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN3@stbi__info:
; Line 7552
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_info
	test	eax, eax
	je	SHORT $LN4@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN4@stbi__info:
; Line 7556
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_info
	test	eax, eax
	je	SHORT $LN5@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN5@stbi__info:
; Line 7560
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_info
	test	eax, eax
	je	SHORT $LN6@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN6@stbi__info:
; Line 7564
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_info
	test	eax, eax
	je	SHORT $LN7@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN7@stbi__info:
; Line 7568
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	test	eax, eax
	je	SHORT $LN8@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN8@stbi__info:
; Line 7572
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_info
	test	eax, eax
	je	SHORT $LN9@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN9@stbi__info:
; Line 7577
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_info
	test	eax, eax
	je	SHORT $LN10@stbi__info
; Line 7578
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN10@stbi__info:
; Line 7580
	lea	rcx, OFFSET FLAT:$SG77554
	call	stbi__err
$LN1@stbi__info:
; Line 7581
	add	rsp, 40					; 00000028H
	ret	0
stbi__info_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
s$ = 64
c$ = 72
stbi__pnm_getinteger PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7484
	mov	DWORD PTR value$[rsp], 0
$LN2@stbi__pnm_:
; Line 7486
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	stbi__pnm_isdigit
	test	eax, eax
	je	SHORT $LN3@stbi__pnm_
; Line 7487
	imul	eax, DWORD PTR value$[rsp], 10
	mov	rcx, QWORD PTR c$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR value$[rsp], eax
; Line 7488
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
; Line 7489
	jmp	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7491
	mov	eax, DWORD PTR value$[rsp]
; Line 7492
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_getinteger ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
c$ = 32
stbi__pnm_isdigit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7478
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7479
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv68[rsp]
; Line 7480
	add	rsp, 24
	ret	0
stbi__pnm_isdigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
stbi__pnm_skip_whitespace PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7464
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stbi__pnm_:
$LN5@stbi__pnm_:
; Line 7466
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	stbi__pnm_isspace
	test	eax, eax
	je	SHORT $LN6@stbi__pnm_
; Line 7467
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7469
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN10@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@stbi__pnm_
$LN10@stbi__pnm_:
; Line 7470
	jmp	SHORT $LN3@stbi__pnm_
$LN9@stbi__pnm_:
$LN7@stbi__pnm_:
; Line 7472
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@stbi__pnm_
; Line 7473
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN7@stbi__pnm_
$LN8@stbi__pnm_:
; Line 7474
	jmp	$LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7475
	add	rsp, 40					; 00000028H
	ret	0
stbi__pnm_skip_whitespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
c$ = 32
stbi__pnm_isspace PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7459
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7460
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 11
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 12
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	je	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv76[rsp], 1
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv76[rsp]
; Line 7461
	add	rsp, 24
	ret	0
stbi__pnm_isspace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f1$1 = 32
tv152 = 36
output$ = 64
input$ = 72
req_comp$ = 80
stbi__hdr_convert PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7054
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7055
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN4@stbi__hdr_
; Line 7058
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 136				; 00000088H
	mov	edx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	ldexp
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR f1$1[rsp], xmm0
; Line 7059
	cmp	DWORD PTR req_comp$[rsp], 2
	jg	SHORT $LN6@stbi__hdr_
; Line 7060
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
	jmp	$LN7@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7062
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7063
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7064
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN7@stbi__hdr_:
; Line 7066
	cmp	DWORD PTR req_comp$[rsp], 2
	jne	SHORT $LN8@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN8@stbi__hdr_:
; Line 7067
	cmp	DWORD PTR req_comp$[rsp], 4
	jne	SHORT $LN9@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN9@stbi__hdr_:
; Line 7068
	jmp	$LN5@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7069
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	$LN13@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN12@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 3
	je	SHORT $LN11@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 4
	je	SHORT $LN10@stbi__hdr_
	jmp	$LN2@stbi__hdr_
$LN10@stbi__hdr_:
; Line 7070
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN11@stbi__hdr_:
; Line 7071
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7072
	jmp	SHORT $LN2@stbi__hdr_
$LN12@stbi__hdr_:
; Line 7073
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN13@stbi__hdr_:
; Line 7074
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
$LN2@stbi__hdr_:
$LN5@stbi__hdr_:
; Line 7078
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_convert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
len$ = 36
z$ = 64
buffer$ = 72
stbi__hdr_gettoken PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7032
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7033
	mov	DWORD PTR len$[rsp], 0
; Line 7034
	mov	BYTE PTR c$[rsp], 0
; Line 7036
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
$LN2@stbi__hdr_:
; Line 7038
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__hdr_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__hdr_
; Line 7039
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 7040
	cmp	DWORD PTR len$[rsp], 1023		; 000003ffH
	jne	SHORT $LN6@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7042
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN5@stbi__hdr_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 10
	je	SHORT $LN5@stbi__hdr_
; Line 7043
	jmp	SHORT $LN4@stbi__hdr_
$LN5@stbi__hdr_:
; Line 7044
	jmp	SHORT $LN3@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7046
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7047
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7049
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7050
	mov	rax, QWORD PTR buffer$[rsp]
; Line 7051
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_gettoken ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
signature$ = 72
stbi__hdr_test_core PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR signature$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@stbi__hdr_
; Line 7013
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR signature$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__hdr_
; Line 7014
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN5@stbi__hdr_:
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7015
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7016
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7017
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_test_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv150 = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
g$ = 416
out$ = 424
delays$ = 432
stbi__load_gif_main_outofmem PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6875
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 6876
	lea	rax, OFFSET FLAT:$SG76935
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6876				; 00001adcH
	lea	r8, OFFSET FLAT:$SG76936
	mov	edx, 102				; 00000066H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6877
	lea	rax, OFFSET FLAT:$SG76937
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6877				; 00001addH
	lea	r8, OFFSET FLAT:$SG76938
	mov	edx, 103				; 00000067H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6878
	lea	rax, OFFSET FLAT:$SG76939
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6878				; 00001adeH
	lea	r8, OFFSET FLAT:$SG76940
	mov	edx, 104				; 00000068H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 6880
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN2@stbi__load
	lea	rax, OFFSET FLAT:$SG76942
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6880				; 00001ae0H
	lea	r8, OFFSET FLAT:$SG76943
	mov	edx, 105				; 00000069H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
$LN2@stbi__load:
; Line 6881
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stbi__load
	lea	rax, OFFSET FLAT:$SG76945
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6881				; 00001ae1H
	lea	r8, OFFSET FLAT:$SG76946
	mov	edx, 106				; 0000006aH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR delays$[rsp]
	mov	r8, QWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
$LN3@stbi__load:
; Line 6882
	lea	rcx, OFFSET FLAT:$SG76947
	call	stbi__err
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	QWORD PTR tv150[rsp], 0
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
	mov	QWORD PTR tv150[rsp], 0
$LN6@stbi__load:
	mov	rax, QWORD PTR tv150[rsp]
; Line 6883
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
stbi__load_gif_main_outofmem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pi$ = 32
pcount$ = 36
len$1 = 40
dispose$ = 44
tv232 = 48
w$2 = 52
x$3 = 56
y$4 = 60
h$5 = 64
tv296 = 68
first_frame$ = 72
tag$6 = 76
tv577 = 80
ext$7 = 84
tv83 = 88
tv142 = 96
tv250 = 104
tv315 = 112
o$8 = 120
tv409 = 128
s$ = 160
g$ = 168
comp$ = 176
req_comp$ = 184
two_back$ = 192
stbi__gif_load_next PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6701
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 6709
	mov	DWORD PTR first_frame$[rsp], 0
; Line 6710
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	$LN18@stbi__gif_
; Line 6711
	xor	r9d, r9d
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_header
	test	eax, eax
	jne	SHORT $LN20@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN20@stbi__gif_:
; Line 6712
	xor	r9d, r9d
	mov	rax, QWORD PTR g$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR g$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 4
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN21@stbi__gif_
; Line 6713
	lea	rcx, OFFSET FLAT:$SG76886
	call	stbi__err
	test	eax, eax
	je	SHORT $LN55@stbi__gif_
	mov	QWORD PTR tv83[rsp], 0
	jmp	SHORT $LN56@stbi__gif_
$LN55@stbi__gif_:
	mov	QWORD PTR tv83[rsp], 0
$LN56@stbi__gif_:
	mov	rax, QWORD PTR tv83[rsp]
	jmp	$LN1@stbi__gif_
$LN21@stbi__gif_:
; Line 6714
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6715
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6716
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6717
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 6718
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN22@stbi__gif_
$LN23@stbi__gif_:
; Line 6719
	lea	rcx, OFFSET FLAT:$SG76889
	call	stbi__err
	test	eax, eax
	je	SHORT $LN57@stbi__gif_
	mov	QWORD PTR tv142[rsp], 0
	jmp	SHORT $LN58@stbi__gif_
$LN57@stbi__gif_:
	mov	QWORD PTR tv142[rsp], 0
$LN58@stbi__gif_:
	mov	rax, QWORD PTR tv142[rsp]
	jmp	$LN1@stbi__gif_
$LN22@stbi__gif_:
; Line 6724
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 6725
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 6726
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 6727
	mov	DWORD PTR first_frame$[rsp], 1
; Line 6728
	jmp	$LN19@stbi__gif_
$LN18@stbi__gif_:
; Line 6730
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 28
	sar	eax, 2
	mov	DWORD PTR dispose$[rsp], eax
; Line 6731
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6733
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN24@stbi__gif_
	cmp	QWORD PTR two_back$[rsp], 0
	jne	SHORT $LN24@stbi__gif_
; Line 6734
	mov	DWORD PTR dispose$[rsp], 2
$LN24@stbi__gif_:
; Line 6737
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN25@stbi__gif_
; Line 6738
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN3@stbi__gif_
; Line 6739
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN27@stbi__gif_
; Line 6740
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR two_back$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN27@stbi__gif_:
; Line 6742
	jmp	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6743
	jmp	$LN26@stbi__gif_
$LN25@stbi__gif_:
	cmp	DWORD PTR dispose$[rsp], 2
	jne	SHORT $LN28@stbi__gif_
; Line 6745
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN5@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN7@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN6@stbi__gif_
; Line 6746
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@stbi__gif_
; Line 6747
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN30@stbi__gif_:
; Line 6749
	jmp	SHORT $LN5@stbi__gif_
$LN6@stbi__gif_:
$LN28@stbi__gif_:
$LN26@stbi__gif_:
; Line 6758
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	mov	rax, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
$LN19@stbi__gif_:
; Line 6762
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
$LN8@stbi__gif_:
; Line 6765
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tag$6[rsp], eax
; Line 6766
	mov	eax, DWORD PTR tag$6[rsp]
	mov	DWORD PTR tv232[rsp], eax
	cmp	DWORD PTR tv232[rsp], 33		; 00000021H
	je	$LN44@stbi__gif_
	cmp	DWORD PTR tv232[rsp], 44		; 0000002cH
	je	SHORT $LN31@stbi__gif_
	cmp	DWORD PTR tv232[rsp], 59		; 0000003bH
	je	$LN52@stbi__gif_
	jmp	$LN53@stbi__gif_
$LN31@stbi__gif_:
; Line 6772
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR x$3[rsp], eax
; Line 6773
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR y$4[rsp], eax
; Line 6774
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR w$2[rsp], eax
; Line 6775
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR h$5[rsp], eax
; Line 6776
	mov	eax, DWORD PTR w$2[rsp]
	mov	ecx, DWORD PTR x$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jg	SHORT $LN33@stbi__gif_
	mov	eax, DWORD PTR h$5[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN32@stbi__gif_
$LN33@stbi__gif_:
; Line 6777
	lea	rcx, OFFSET FLAT:$SG76900
	call	stbi__err
	test	eax, eax
	je	SHORT $LN59@stbi__gif_
	mov	QWORD PTR tv250[rsp], 0
	jmp	SHORT $LN60@stbi__gif_
$LN59@stbi__gif_:
	mov	QWORD PTR tv250[rsp], 0
$LN60@stbi__gif_:
	mov	rax, QWORD PTR tv250[rsp]
	jmp	$LN1@stbi__gif_
$LN32@stbi__gif_:
; Line 6779
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34916], eax
; Line 6780
	mov	eax, DWORD PTR x$3[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34892], eax
; Line 6781
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34896], eax
; Line 6782
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34892]
	mov	ecx, DWORD PTR w$2[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34900], eax
; Line 6783
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR h$5[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34904], eax
; Line 6784
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6785
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34896]
	mov	DWORD PTR [rax+34912], ecx
; Line 6791
	cmp	DWORD PTR w$2[rsp], 0
	jne	SHORT $LN34@stbi__gif_
; Line 6792
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	mov	DWORD PTR [rax+34912], ecx
$LN34@stbi__gif_:
; Line 6794
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34888], eax
; Line 6796
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN35@stbi__gif_
; Line 6797
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34916]
	shl	eax, 3
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6798
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 3
; Line 6799
	jmp	SHORT $LN36@stbi__gif_
$LN35@stbi__gif_:
; Line 6800
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34916]
	mov	DWORD PTR [rax+34884], ecx
; Line 6801
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 0
$LN36@stbi__gif_:
; Line 6804
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@stbi__gif_
; Line 6805
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR tv296[rsp], eax
	jmp	SHORT $LN62@stbi__gif_
$LN61@stbi__gif_:
	mov	DWORD PTR tv296[rsp], -1
$LN62@stbi__gif_:
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv577[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv577[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 1076				; 00000434H
	mov	r9d, DWORD PTR tv296[rsp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_parse_colortable
; Line 6806
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 1076				; 00000434H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
	jmp	SHORT $LN38@stbi__gif_
$LN37@stbi__gif_:
; Line 6807
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@stbi__gif_
; Line 6808
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
; Line 6809
	jmp	SHORT $LN40@stbi__gif_
$LN39@stbi__gif_:
; Line 6810
	lea	rcx, OFFSET FLAT:$SG76908
	call	stbi__err
	test	eax, eax
	je	SHORT $LN63@stbi__gif_
	mov	QWORD PTR tv315[rsp], 0
	jmp	SHORT $LN64@stbi__gif_
$LN63@stbi__gif_:
	mov	QWORD PTR tv315[rsp], 0
$LN64@stbi__gif_:
	mov	rax, QWORD PTR tv315[rsp]
	jmp	$LN1@stbi__gif_
$LN40@stbi__gif_:
$LN38@stbi__gif_:
; Line 6812
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__process_gif_raster
	mov	QWORD PTR o$8[rsp], rax
; Line 6813
	cmp	QWORD PTR o$8[rsp], 0
	jne	SHORT $LN41@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN41@stbi__gif_:
; Line 6816
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6817
	cmp	DWORD PTR first_frame$[rsp], 0
	je	$LN42@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jle	$LN42@stbi__gif_
; Line 6819
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN15@stbi__gif_
$LN13@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN15@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	$LN14@stbi__gif_
; Line 6820
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN43@stbi__gif_
; Line 6821
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 6822
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN43@stbi__gif_:
; Line 6824
	jmp	$LN13@stbi__gif_
$LN14@stbi__gif_:
$LN42@stbi__gif_:
; Line 6827
	mov	rax, QWORD PTR o$8[rsp]
	jmp	$LN1@stbi__gif_
$LN44@stbi__gif_:
; Line 6833
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR ext$7[rsp], eax
; Line 6834
	cmp	DWORD PTR ext$7[rsp], 249		; 000000f9H
	jne	$LN45@stbi__gif_
; Line 6835
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
; Line 6836
	cmp	DWORD PTR len$1[rsp], 4
	jne	$LN46@stbi__gif_
; Line 6837
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 6838
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	imul	eax, eax, 10
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34920], eax
; Line 6841
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN48@stbi__gif_
; Line 6842
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
$LN48@stbi__gif_:
; Line 6844
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN49@stbi__gif_
; Line 6845
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 6846
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN51@stbi__gif_
; Line 6847
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 0
$LN51@stbi__gif_:
; Line 6849
	jmp	SHORT $LN50@stbi__gif_
$LN49@stbi__gif_:
; Line 6851
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6852
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
$LN50@stbi__gif_:
; Line 6854
	jmp	SHORT $LN47@stbi__gif_
$LN46@stbi__gif_:
; Line 6855
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6856
	jmp	SHORT $LN11@stbi__gif_
$LN47@stbi__gif_:
$LN45@stbi__gif_:
$LN16@stbi__gif_:
; Line 6859
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
	cmp	DWORD PTR len$1[rsp], 0
	je	SHORT $LN17@stbi__gif_
; Line 6860
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6861
	jmp	SHORT $LN16@stbi__gif_
$LN17@stbi__gif_:
; Line 6862
	jmp	SHORT $LN11@stbi__gif_
$LN52@stbi__gif_:
; Line 6866
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN53@stbi__gif_:
; Line 6869
	lea	rcx, OFFSET FLAT:$SG76922
	call	stbi__err
	test	eax, eax
	je	SHORT $LN65@stbi__gif_
	mov	QWORD PTR tv409[rsp], 0
	jmp	SHORT $LN66@stbi__gif_
$LN65@stbi__gif_:
	mov	QWORD PTR tv409[rsp], 0
$LN66@stbi__gif_:
	mov	rax, QWORD PTR tv409[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN11@stbi__gif_:
; Line 6871
	jmp	$LN8@stbi__gif_
$LN1@stbi__gif_:
; Line 6872
	add	rsp, 152				; 00000098H
	ret	0
stbi__gif_load_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lzw_cs$ = 32
avail$ = 36
len$ = 40
codesize$ = 44
init_code$ = 48
code$1 = 52
valid_bits$ = 56
bits$ = 60
clear$ = 64
oldcode$ = 68
codemask$ = 72
first$ = 76
tv192 = 80
p$ = 88
tv241 = 96
tv245 = 100
tv272 = 104
tv296 = 108
tv163 = 112
tv174 = 120
tv198 = 128
tv210 = 136
s$ = 160
g$ = 168
stbi__process_gif_raster PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6614
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 6621
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR lzw_cs$[rsp], al
; Line 6622
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	cmp	eax, 12
	jle	SHORT $LN10@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 6623
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv241[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv241[rsp]
	shl	eax, cl
	mov	DWORD PTR clear$[rsp], eax
; Line 6624
	mov	DWORD PTR first$[rsp], 1
; Line 6625
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6626
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv245[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv245[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6627
	mov	DWORD PTR bits$[rsp], 0
; Line 6628
	mov	DWORD PTR valid_bits$[rsp], 0
; Line 6629
	mov	DWORD PTR init_code$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR init_code$[rsp]
	inc	eax
	mov	DWORD PTR init_code$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR init_code$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 6630
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	ecx, -1
	mov	rdx, QWORD PTR g$[rsp]
	mov	WORD PTR [rdx+rax*4+2100], cx
; Line 6631
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2102], dl
; Line 6632
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2103], dl
; Line 6633
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 6636
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6637
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6639
	mov	DWORD PTR len$[rsp], 0
$LN5@stbi__proc:
; Line 6641
	mov	eax, DWORD PTR codesize$[rsp]
	cmp	DWORD PTR valid_bits$[rsp], eax
	jge	SHORT $LN11@stbi__proc
; Line 6642
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN13@stbi__proc
; Line 6643
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6644
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN14@stbi__proc
; Line 6645
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
$LN13@stbi__proc:
; Line 6647
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6648
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR valid_bits$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bits$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bits$[rsp], eax
; Line 6649
	mov	eax, DWORD PTR valid_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6650
	jmp	$LN12@stbi__proc
$LN11@stbi__proc:
; Line 6651
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR bits$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$1[rsp], eax
; Line 6652
	mov	eax, DWORD PTR codesize$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR bits$[rsp]
	sar	eax, cl
	mov	DWORD PTR bits$[rsp], eax
; Line 6653
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, DWORD PTR valid_bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6655
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN15@stbi__proc
; Line 6656
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6657
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv272[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv272[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6658
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6659
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6660
	mov	DWORD PTR first$[rsp], 0
	jmp	$LN16@stbi__proc
$LN15@stbi__proc:
; Line 6661
	mov	eax, DWORD PTR clear$[rsp]
	inc	eax
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN17@stbi__proc
; Line 6662
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN8@stbi__proc:
; Line 6663
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN9@stbi__proc
; Line 6664
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
	jmp	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
; Line 6665
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
	jmp	$LN18@stbi__proc
$LN17@stbi__proc:
; Line 6666
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jg	$LN19@stbi__proc
; Line 6667
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stbi__proc
; Line 6668
	lea	rcx, OFFSET FLAT:$SG76805
	call	stbi__err
	test	eax, eax
	je	SHORT $LN28@stbi__proc
	mov	QWORD PTR tv163[rsp], 0
	jmp	SHORT $LN29@stbi__proc
$LN28@stbi__proc:
	mov	QWORD PTR tv163[rsp], 0
$LN29@stbi__proc:
	mov	rax, QWORD PTR tv163[rsp]
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 6671
	cmp	DWORD PTR oldcode$[rsp], 0
	jl	$LN22@stbi__proc
; Line 6672
	movsxd	rax, DWORD PTR avail$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+2100]
	mov	QWORD PTR p$[rsp], rax
	mov	eax, DWORD PTR avail$[rsp]
	inc	eax
	mov	DWORD PTR avail$[rsp], eax
; Line 6673
	cmp	DWORD PTR avail$[rsp], 8192		; 00002000H
	jle	SHORT $LN24@stbi__proc
; Line 6674
	lea	rcx, OFFSET FLAT:$SG76809
	call	stbi__err
	test	eax, eax
	je	SHORT $LN30@stbi__proc
	mov	QWORD PTR tv174[rsp], 0
	jmp	SHORT $LN31@stbi__proc
$LN30@stbi__proc:
	mov	QWORD PTR tv174[rsp], 0
$LN31@stbi__proc:
	mov	rax, QWORD PTR tv174[rsp]
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 6677
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR oldcode$[rsp]
	mov	WORD PTR [rax], cx
; Line 6678
	movsxd	rax, DWORD PTR oldcode$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rdx+rax*4+2102]
	mov	BYTE PTR [rcx+2], al
; Line 6679
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN32@stbi__proc
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	DWORD PTR tv192[rsp], eax
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
	movsxd	rax, DWORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2102]
	mov	DWORD PTR tv192[rsp], eax
$LN33@stbi__proc:
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR tv192[rsp]
	mov	BYTE PTR [rax+3], cl
	jmp	SHORT $LN23@stbi__proc
$LN22@stbi__proc:
; Line 6680
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN25@stbi__proc
; Line 6681
	lea	rcx, OFFSET FLAT:$SG76811
	call	stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__proc
	mov	QWORD PTR tv198[rsp], 0
	jmp	SHORT $LN35@stbi__proc
$LN34@stbi__proc:
	mov	QWORD PTR tv198[rsp], 0
$LN35@stbi__proc:
	mov	rax, QWORD PTR tv198[rsp]
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
$LN23@stbi__proc:
; Line 6683
	movzx	edx, WORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	call	stbi__out_gif_code
; Line 6685
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR avail$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN26@stbi__proc
	cmp	DWORD PTR avail$[rsp], 4095		; 00000fffH
	jg	SHORT $LN26@stbi__proc
; Line 6686
	mov	eax, DWORD PTR codesize$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6687
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv296[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv296[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
$LN26@stbi__proc:
; Line 6690
	mov	eax, DWORD PTR code$1[rsp]
	mov	DWORD PTR oldcode$[rsp], eax
; Line 6691
	jmp	SHORT $LN20@stbi__proc
$LN19@stbi__proc:
; Line 6692
	lea	rcx, OFFSET FLAT:$SG76813
	call	stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	mov	QWORD PTR tv210[rsp], 0
	jmp	SHORT $LN37@stbi__proc
$LN36@stbi__proc:
	mov	QWORD PTR tv210[rsp], 0
$LN37@stbi__proc:
	mov	rax, QWORD PTR tv210[rsp]
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
$LN18@stbi__proc:
$LN16@stbi__proc:
$LN12@stbi__proc:
; Line 6695
	jmp	$LN5@stbi__proc
$LN1@stbi__proc:
; Line 6696
	add	rsp, 152				; 00000098H
	ret	0
stbi__process_gif_raster ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$ = 32
tv256 = 36
c$ = 40
p$ = 48
g$ = 80
code$ = 88
stbi__out_gif_code PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6577
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6583
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movsx	eax, WORD PTR [rcx+rax*4+2100]
	test	eax, eax
	jl	SHORT $LN4@stbi__out_
; Line 6584
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, WORD PTR [rcx+rax*4+2100]
	mov	rcx, QWORD PTR g$[rsp]
	call	stbi__out_gif_code
$LN4@stbi__out_:
; Line 6586
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	SHORT $LN5@stbi__out_
	jmp	$LN1@stbi__out_
$LN5@stbi__out_:
; Line 6588
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34912]
	mov	DWORD PTR idx$[rsp], eax
; Line 6589
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 6590
	mov	eax, DWORD PTR idx$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 1
; Line 6592
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2103]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+34872]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR c$[rsp], rax
; Line 6593
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 128				; 00000080H
	jle	$LN6@stbi__out_
; Line 6594
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6595
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6596
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6597
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN6@stbi__out_:
; Line 6599
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	add	eax, 4
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34908], eax
; Line 6601
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34900]
	cmp	DWORD PTR [rax+34908], ecx
	jl	$LN7@stbi__out_
; Line 6602
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6603
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34912]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34884]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
$LN2@stbi__out_:
; Line 6605
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	$LN3@stbi__out_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+34880], 0
	jle	SHORT $LN3@stbi__out_
; Line 6606
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	mov	ecx, 1
	mov	DWORD PTR tv256[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv256[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+34916]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6607
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34884]
	sar	eax, 1
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
; Line 6608
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	dec	eax
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34880], eax
; Line 6609
	jmp	$LN2@stbi__out_
$LN3@stbi__out_:
$LN7@stbi__out_:
$LN1@stbi__out_:
; Line 6611
	add	rsp, 72					; 00000048H
	ret	0
stbi__out_gif_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
s$ = 224
x$ = 232
y$ = 240
comp$ = 248
stbi__gif_info_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6562
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 6563
	mov	ecx, 34928				; 00008870H
	call	stbi__malloc
	mov	QWORD PTR g$[rsp], rax
; Line 6564
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG76721
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6565
	mov	r9d, 1
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_header
	test	eax, eax
	jne	SHORT $LN3@stbi__gif_
; Line 6566
	lea	rax, OFFSET FLAT:$SG76723
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6566				; 000019a6H
	lea	r8, OFFSET FLAT:$SG76724
	mov	edx, 100				; 00000064H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6567
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6568
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN3@stbi__gif_:
; Line 6570
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN4@stbi__gif_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__gif_:
; Line 6571
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__gif_:
; Line 6572
	lea	rax, OFFSET FLAT:$SG76727
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6572				; 000019acH
	lea	r8, OFFSET FLAT:$SG76728
	mov	edx, 101				; 00000065H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6573
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6574
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
stbi__gif_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
version$ = 32
tv224 = 36
s$ = 64
g$ = 72
comp$ = 80
is_info$ = 88
stbi__gif_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6531
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6533
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6534
	lea	rcx, OFFSET FLAT:$SG76694
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6536
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR version$[rsp], al
; Line 6537
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 55					; 00000037H
	je	SHORT $LN4@stbi__gif_
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN4@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG76696
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6538
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG76698
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6540
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG76699
	mov	QWORD PTR [rax+rcx], rdx
; Line 6541
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 6542
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 6543
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 6544
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 6545
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 6546
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
; Line 6548
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG76701
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN6@stbi__gif_:
; Line 6549
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG76703
	call	stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN7@stbi__gif_:
; Line 6551
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN8@stbi__gif_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN8@stbi__gif_:
; Line 6553
	cmp	DWORD PTR is_info$[rsp], 0
	je	SHORT $LN9@stbi__gif_
	mov	eax, 1
	jmp	SHORT $LN1@stbi__gif_
$LN9@stbi__gif_:
; Line 6555
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN10@stbi__gif_
; Line 6556
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv224[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 52					; 00000034H
	mov	r9d, -1
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_parse_colortable
$LN10@stbi__gif_:
; Line 6558
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6559
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv93 = 36
s$ = 64
pal$ = 72
num_entries$ = 80
transp$ = 88
stbi__gif_parse_colortable PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6520
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6522
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR num_entries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__gif_
; Line 6523
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 6524
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 6525
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 6526
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR transp$[rsp], eax
	jne	SHORT $LN6@stbi__gif_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN6@stbi__gif_:
	mov	DWORD PTR tv93[rsp], 255		; 000000ffH
$LN7@stbi__gif_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pal$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	edx, BYTE PTR tv93[rsp]
	mov	BYTE PTR [rax+rcx], dl
; Line 6527
	jmp	$LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6528
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_parse_colortable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
s$ = 64
stbi__gif_test_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6503
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6505
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6506
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 6507
	cmp	DWORD PTR sz$[rsp], 57			; 00000039H
	je	SHORT $LN4@stbi__gif_
	cmp	DWORD PTR sz$[rsp], 55			; 00000037H
	je	SHORT $LN4@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6508
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6509
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6510
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_test_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
count$2 = 36
i$3 = 40
dest$4 = 48
num_packets$ = 56
left$5 = 60
left$6 = 64
packet_idx$7 = 68
y$ = 72
act_comp$ = 76
tv152 = 80
x$8 = 84
i$9 = 88
packet$10 = 96
tv138 = 104
packet$11 = 112
chained$ = 120
value$12 = 124
value$13 = 128
tv69 = 136
tv95 = 144
tv134 = 152
tv156 = 160
tv176 = 168
tv207 = 176
tv217 = 184
tv238 = 192
packets$ = 200
__$ArrayPad$ = 232
s$ = 256
width$ = 264
height$ = 272
comp$ = 280
result$ = 288
stbi__pic_load_core PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6313
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6314
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
$LN4@stbi__pic_:
; Line 6322
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN29@stbi__pic_
; Line 6323
	lea	rcx, OFFSET FLAT:$SG76533
	call	stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__pic_
	mov	QWORD PTR tv69[rsp], 0
	jmp	SHORT $LN51@stbi__pic_
$LN50@stbi__pic_:
	mov	QWORD PTR tv69[rsp], 0
$LN51@stbi__pic_:
	mov	rax, QWORD PTR tv69[rsp]
	jmp	$LN1@stbi__pic_
$LN29@stbi__pic_:
; Line 6325
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$11[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
; Line 6327
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 6328
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx], al
; Line 6329
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 6330
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 6332
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 6334
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN30@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76535
	call	stbi__err
	test	eax, eax
	je	SHORT $LN52@stbi__pic_
	mov	QWORD PTR tv95[rsp], 0
	jmp	SHORT $LN53@stbi__pic_
$LN52@stbi__pic_:
	mov	QWORD PTR tv95[rsp], 0
$LN53@stbi__pic_:
	mov	rax, QWORD PTR tv95[rsp]
	jmp	$LN1@stbi__pic_
$LN30@stbi__pic_:
; Line 6335
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN31@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76537
	call	stbi__err
	test	eax, eax
	je	SHORT $LN54@stbi__pic_
	mov	QWORD PTR tv134[rsp], 0
	jmp	SHORT $LN55@stbi__pic_
$LN54@stbi__pic_:
	mov	QWORD PTR tv134[rsp], 0
$LN55@stbi__pic_:
	mov	rax, QWORD PTR tv134[rsp]
	jmp	$LN1@stbi__pic_
$LN31@stbi__pic_:
; Line 6336
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 6338
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@stbi__pic_
	mov	DWORD PTR tv138[rsp], 4
	jmp	SHORT $LN57@stbi__pic_
$LN56@stbi__pic_:
	mov	DWORD PTR tv138[rsp], 3
$LN57@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv138[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6340
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN7@stbi__pic_
$LN5@stbi__pic_:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN7@stbi__pic_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN6@stbi__pic_
; Line 6343
	mov	DWORD PTR packet_idx$7[rsp], 0
	jmp	SHORT $LN10@stbi__pic_
$LN8@stbi__pic_:
	mov	eax, DWORD PTR packet_idx$7[rsp]
	inc	eax
	mov	DWORD PTR packet_idx$7[rsp], eax
$LN10@stbi__pic_:
	mov	eax, DWORD PTR num_packets$[rsp]
	cmp	DWORD PTR packet_idx$7[rsp], eax
	jge	$LN9@stbi__pic_
; Line 6344
	movsxd	rax, DWORD PTR packet_idx$7[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$10[rsp], rax
; Line 6345
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$4[rsp], rax
; Line 6347
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	BYTE PTR tv152[rsp], al
	cmp	BYTE PTR tv152[rsp], 0
	je	SHORT $LN33@stbi__pic_
	cmp	BYTE PTR tv152[rsp], 1
	je	$LN35@stbi__pic_
	cmp	BYTE PTR tv152[rsp], 2
	je	$LN39@stbi__pic_
; Line 6349
	lea	rcx, OFFSET FLAT:$SG76539
	call	stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__pic_
	mov	QWORD PTR tv156[rsp], 0
	jmp	SHORT $LN59@stbi__pic_
$LN58@stbi__pic_:
	mov	QWORD PTR tv156[rsp], 0
$LN59@stbi__pic_:
	mov	rax, QWORD PTR tv156[rsp]
	jmp	$LN1@stbi__pic_
$LN33@stbi__pic_:
; Line 6354
	mov	DWORD PTR x$8[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN13@stbi__pic_:
	mov	eax, DWORD PTR x$8[rsp]
	inc	eax
	mov	DWORD PTR x$8[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN15@stbi__pic_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$8[rsp], eax
	jge	SHORT $LN14@stbi__pic_
; Line 6355
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN34@stbi__pic_
; Line 6356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN34@stbi__pic_:
	jmp	SHORT $LN13@stbi__pic_
$LN14@stbi__pic_:
; Line 6357
	jmp	$LN11@stbi__pic_
$LN35@stbi__pic_:
; Line 6362
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$5[rsp], eax
$LN16@stbi__pic_:
; Line 6364
	cmp	DWORD PTR left$5[rsp], 0
	jle	$LN17@stbi__pic_
; Line 6367
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR count$1[rsp], al
; Line 6368
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN36@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76544
	call	stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__pic_
	mov	QWORD PTR tv176[rsp], 0
	jmp	SHORT $LN61@stbi__pic_
$LN60@stbi__pic_:
	mov	QWORD PTR tv176[rsp], 0
$LN61@stbi__pic_:
	mov	rax, QWORD PTR tv176[rsp]
	jmp	$LN1@stbi__pic_
$LN36@stbi__pic_:
; Line 6370
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	eax, DWORD PTR left$5[rsp]
	jle	SHORT $LN37@stbi__pic_
; Line 6371
	movzx	eax, BYTE PTR left$5[rsp]
	mov	BYTE PTR count$1[rsp], al
$LN37@stbi__pic_:
; Line 6373
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN38@stbi__pic_
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN38@stbi__pic_:
; Line 6375
	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN20@stbi__pic_
$LN18@stbi__pic_:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN20@stbi__pic_:
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jge	SHORT $LN19@stbi__pic_
; Line 6376
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	stbi__copyval
	jmp	SHORT $LN18@stbi__pic_
$LN19@stbi__pic_:
; Line 6377
	movzx	eax, BYTE PTR count$1[rsp]
	mov	ecx, DWORD PTR left$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$5[rsp], eax
; Line 6378
	jmp	$LN16@stbi__pic_
$LN17@stbi__pic_:
; Line 6380
	jmp	$LN11@stbi__pic_
$LN39@stbi__pic_:
; Line 6383
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$6[rsp], eax
$LN21@stbi__pic_:
; Line 6384
	cmp	DWORD PTR left$6[rsp], 0
	jle	$LN22@stbi__pic_
; Line 6385
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR count$2[rsp], eax
; Line 6386
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN40@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76549
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__pic_
	mov	QWORD PTR tv207[rsp], 0
	jmp	SHORT $LN63@stbi__pic_
$LN62@stbi__pic_:
	mov	QWORD PTR tv207[rsp], 0
$LN63@stbi__pic_:
	mov	rax, QWORD PTR tv207[rsp]
	jmp	$LN1@stbi__pic_
$LN40@stbi__pic_:
; Line 6388
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jl	$LN41@stbi__pic_
; Line 6391
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jne	SHORT $LN43@stbi__pic_
; Line 6392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR count$2[rsp], eax
	jmp	SHORT $LN44@stbi__pic_
$LN43@stbi__pic_:
; Line 6394
	mov	eax, DWORD PTR count$2[rsp]
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR count$2[rsp], eax
$LN44@stbi__pic_:
; Line 6395
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN45@stbi__pic_
; Line 6396
	lea	rcx, OFFSET FLAT:$SG76555
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__pic_
	mov	QWORD PTR tv217[rsp], 0
	jmp	SHORT $LN65@stbi__pic_
$LN64@stbi__pic_:
	mov	QWORD PTR tv217[rsp], 0
$LN65@stbi__pic_:
	mov	rax, QWORD PTR tv217[rsp]
	jmp	$LN1@stbi__pic_
$LN45@stbi__pic_:
; Line 6398
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN46@stbi__pic_
; Line 6399
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN46@stbi__pic_:
; Line 6401
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN25@stbi__pic_
$LN23@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN25@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN24@stbi__pic_
; Line 6402
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	stbi__copyval
	jmp	SHORT $LN23@stbi__pic_
$LN24@stbi__pic_:
; Line 6403
	jmp	$LN42@stbi__pic_
$LN41@stbi__pic_:
; Line 6404
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
; Line 6405
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN47@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76558
	call	stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__pic_
	mov	QWORD PTR tv238[rsp], 0
	jmp	SHORT $LN67@stbi__pic_
$LN66@stbi__pic_:
	mov	QWORD PTR tv238[rsp], 0
$LN67@stbi__pic_:
	mov	rax, QWORD PTR tv238[rsp]
	jmp	SHORT $LN1@stbi__pic_
$LN47@stbi__pic_:
; Line 6407
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN28@stbi__pic_
$LN26@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN28@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN27@stbi__pic_
; Line 6408
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN48@stbi__pic_
; Line 6409
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN48@stbi__pic_:
	jmp	SHORT $LN26@stbi__pic_
$LN27@stbi__pic_:
$LN42@stbi__pic_:
; Line 6411
	mov	eax, DWORD PTR count$2[rsp]
	mov	ecx, DWORD PTR left$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$6[rsp], eax
; Line 6412
	jmp	$LN21@stbi__pic_
$LN22@stbi__pic_:
$LN11@stbi__pic_:
; Line 6416
	jmp	$LN8@stbi__pic_
$LN9@stbi__pic_:
; Line 6417
	jmp	$LN5@stbi__pic_
$LN6@stbi__pic_:
; Line 6419
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6420
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
stbi__pic_load_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
mask$ = 4
channel$ = 32
dest$ = 40
src$ = 48
stbi__copyval PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6304
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6305
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__copy
$LN2@stbi__copy:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__copy:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__copy
; Line 6308
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__copy
; Line 6309
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__copy:
	jmp	SHORT $LN2@stbi__copy
$LN3@stbi__copy:
; Line 6310
	add	rsp, 24
	ret	0
stbi__copyval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
mask$ = 36
tv75 = 40
s$ = 64
channel$ = 72
dest$ = 80
stbi__readval PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6291
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6293
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__read
$LN2@stbi__read:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__read:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__read
; Line 6294
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__read
; Line 6295
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN6@stbi__read
	lea	rcx, OFFSET FLAT:$SG76427
	call	stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__read
	mov	QWORD PTR tv75[rsp], 0
	jmp	SHORT $LN9@stbi__read
$LN8@stbi__read:
	mov	QWORD PTR tv75[rsp], 0
$LN9@stbi__read:
	mov	rax, QWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbi__read
$LN6@stbi__read:
; Line 6296
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__read:
; Line 6298
	jmp	SHORT $LN2@stbi__read
$LN3@stbi__read:
; Line 6300
	mov	rax, QWORD PTR dest$[rsp]
$LN1@stbi__read:
; Line 6301
	add	rsp, 56					; 00000038H
	ret	0
stbi__readval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
stbi__pic_test_core PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6272
	lea	rdx, OFFSET FLAT:$SG76400
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN5@stbi__pic_
; Line 6273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
; Line 6275
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 84			; 00000054H
	jge	SHORT $LN3@stbi__pic_
; Line 6276
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6278
	lea	rdx, OFFSET FLAT:$SG76402
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN6@stbi__pic_
; Line 6279
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6281
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6282
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_test_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
str$ = 72
stbi__pic_is4 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6261
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__pic_
; Line 6262
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__pic_
; Line 6263
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6265
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6266
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_is4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$1 = 32
len$ = 36
count$ = 40
nleft$ = 44
s$ = 64
p$ = 72
pixelCount$ = 80
stbi__psd_decode_rle PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6011
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6014
	mov	DWORD PTR count$[rsp], 0
$LN2@stbi__psd_:
; Line 6015
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR pixelCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$[rsp], eax
	cmp	DWORD PTR nleft$[rsp], 0
	jle	$LN3@stbi__psd_
; Line 6016
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6017
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jne	SHORT $LN8@stbi__psd_
	jmp	$LN9@stbi__psd_
$LN8@stbi__psd_:
; Line 6019
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jge	SHORT $LN10@stbi__psd_
; Line 6021
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6022
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN12@stbi__psd_
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN12@stbi__psd_:
; Line 6023
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN4@stbi__psd_:
; Line 6024
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN5@stbi__psd_
; Line 6025
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 6026
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6027
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6028
	jmp	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 6029
	jmp	SHORT $LN11@stbi__psd_
$LN10@stbi__psd_:
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jle	SHORT $LN13@stbi__psd_
; Line 6033
	mov	eax, 257				; 00000101H
	sub	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 6034
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN14@stbi__psd_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN14@stbi__psd_:
; Line 6035
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR val$1[rsp], al
; Line 6036
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN6@stbi__psd_:
; Line 6037
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN7@stbi__psd_
; Line 6038
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
; Line 6039
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6040
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6041
	jmp	SHORT $LN6@stbi__psd_
$LN7@stbi__psd_:
$LN13@stbi__psd_:
$LN11@stbi__psd_:
$LN9@stbi__psd_:
; Line 6043
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6045
	mov	eax, 1
$LN1@stbi__psd_:
; Line 6046
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_decode_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
px$ = 32
fiveBitMask$ = 36
r$ = 40
g$ = 44
b$ = 48
s$ = 80
out$ = 88
stbi__tga_read_rgb16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5775
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5776
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	WORD PTR px$[rsp], ax
; Line 5777
	mov	eax, 31
	mov	WORD PTR fiveBitMask$[rsp], ax
; Line 5779
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 10
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 5780
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 5
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR g$[rsp], eax
; Line 5781
	movzx	eax, WORD PTR px$[rsp]
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 5783
	imul	eax, DWORD PTR r$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5784
	imul	eax, DWORD PTR g$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5785
	imul	eax, DWORD PTR b$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5791
	add	rsp, 72					; 00000048H
	ret	0
stbi__tga_read_rgb16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
bits_per_pixel$ = 32
is_grey$ = 40
is_rgb16$ = 48
stbi__tga_get_comp PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5662
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5664
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN4@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbi__tga_:
; Line 5665
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 8
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 24
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $LN12@stbi__tga_
$LN5@stbi__tga_:
; Line 5666
	mov	eax, 1
	jmp	SHORT $LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5667
	cmp	DWORD PTR is_grey$[rsp], 0
	je	SHORT $LN7@stbi__tga_
	mov	eax, 2
	jmp	SHORT $LN1@stbi__tga_
$LN7@stbi__tga_:
$LN8@stbi__tga_:
; Line 5669
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN9@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 1
$LN9@stbi__tga_:
; Line 5670
	mov	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN10@stbi__tga_:
$LN11@stbi__tga_:
; Line 5672
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5673
	xor	eax, eax
$LN1@stbi__tga_:
; Line 5675
	add	rsp, 24
	ret	0
stbi__tga_get_comp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsz$ = 32
compress$1 = 36
i$2 = 40
tv75 = 48
tv95 = 56
tv136 = 64
tv156 = 72
tv168 = 80
tv173 = 88
tv182 = 96
tv224 = 104
tv228 = 112
tv234 = 120
s$ = 144
info$ = 152
stbi__bmp_parse_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5385
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 5387
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN6@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN5@stbi__bmp_
$LN6@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG75664
	call	stbi__err
	test	eax, eax
	je	SHORT $LN32@stbi__bmp_
	mov	QWORD PTR tv75[rsp], 0
	jmp	SHORT $LN33@stbi__bmp_
$LN32@stbi__bmp_:
	mov	QWORD PTR tv75[rsp], 0
$LN33@stbi__bmp_:
	mov	rax, QWORD PTR tv75[rsp]
	jmp	$LN1@stbi__bmp_
$LN5@stbi__bmp_:
; Line 5388
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5389
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5390
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5391
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR hsz$[rsp], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR hsz$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 5393
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 5394
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+32], 14
; Line 5396
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN7@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75666
	call	stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__bmp_
	mov	QWORD PTR tv95[rsp], 0
	jmp	SHORT $LN35@stbi__bmp_
$LN34@stbi__bmp_:
	mov	QWORD PTR tv95[rsp], 0
$LN35@stbi__bmp_:
	mov	rax, QWORD PTR tv95[rsp]
	jmp	$LN1@stbi__bmp_
$LN7@stbi__bmp_:
; Line 5398
	cmp	DWORD PTR hsz$[rsp], 12
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN8@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75668
	call	stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__bmp_
	mov	QWORD PTR tv136[rsp], 0
	jmp	SHORT $LN37@stbi__bmp_
$LN36@stbi__bmp_:
	mov	QWORD PTR tv136[rsp], 0
$LN37@stbi__bmp_:
	mov	rax, QWORD PTR tv136[rsp]
	jmp	$LN1@stbi__bmp_
$LN8@stbi__bmp_:
; Line 5399
	cmp	DWORD PTR hsz$[rsp], 12
	jne	SHORT $LN9@stbi__bmp_
; Line 5400
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5401
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5402
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5403
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5404
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN10@stbi__bmp_:
; Line 5406
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	je	SHORT $LN11@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75672
	call	stbi__err
	test	eax, eax
	je	SHORT $LN38@stbi__bmp_
	mov	QWORD PTR tv156[rsp], 0
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
	mov	QWORD PTR tv156[rsp], 0
$LN39@stbi__bmp_:
	mov	rax, QWORD PTR tv156[rsp]
	jmp	$LN1@stbi__bmp_
$LN11@stbi__bmp_:
; Line 5407
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5408
	cmp	DWORD PTR hsz$[rsp], 12
	je	$LN12@stbi__bmp_
; Line 5409
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR compress$1[rsp], eax
; Line 5410
	cmp	DWORD PTR compress$1[rsp], 1
	je	SHORT $LN14@stbi__bmp_
	cmp	DWORD PTR compress$1[rsp], 2
	jne	SHORT $LN13@stbi__bmp_
$LN14@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG75676
	call	stbi__err
	test	eax, eax
	je	SHORT $LN40@stbi__bmp_
	mov	QWORD PTR tv168[rsp], 0
	jmp	SHORT $LN41@stbi__bmp_
$LN40@stbi__bmp_:
	mov	QWORD PTR tv168[rsp], 0
$LN41@stbi__bmp_:
	mov	rax, QWORD PTR tv168[rsp]
	jmp	$LN1@stbi__bmp_
$LN13@stbi__bmp_:
; Line 5411
	cmp	DWORD PTR compress$1[rsp], 4
	jl	SHORT $LN15@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75678
	call	stbi__err
	test	eax, eax
	je	SHORT $LN42@stbi__bmp_
	mov	QWORD PTR tv173[rsp], 0
	jmp	SHORT $LN43@stbi__bmp_
$LN42@stbi__bmp_:
	mov	QWORD PTR tv173[rsp], 0
$LN43@stbi__bmp_:
	mov	rax, QWORD PTR tv173[rsp]
	jmp	$LN1@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5412
	cmp	DWORD PTR compress$1[rsp], 3
	jne	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	je	SHORT $LN16@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75680
	call	stbi__err
	test	eax, eax
	je	SHORT $LN44@stbi__bmp_
	mov	QWORD PTR tv182[rsp], 0
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
	mov	QWORD PTR tv182[rsp], 0
$LN45@stbi__bmp_:
	mov	rax, QWORD PTR tv182[rsp]
	jmp	$LN1@stbi__bmp_
$LN16@stbi__bmp_:
; Line 5413
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5414
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5415
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5416
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5417
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5418
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN19@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	$LN17@stbi__bmp_
$LN19@stbi__bmp_:
; Line 5419
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	SHORT $LN20@stbi__bmp_
; Line 5420
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5421
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5422
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5423
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
$LN20@stbi__bmp_:
; Line 5425
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN22@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	$LN21@stbi__bmp_
$LN22@stbi__bmp_:
; Line 5426
	cmp	DWORD PTR compress$1[rsp], 0
	jne	SHORT $LN23@stbi__bmp_
; Line 5427
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbi__bmp_set_mask_defaults
	jmp	$LN24@stbi__bmp_
$LN23@stbi__bmp_:
; Line 5428
	cmp	DWORD PTR compress$1[rsp], 3
	jne	$LN25@stbi__bmp_
; Line 5429
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5430
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5431
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5432
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, 12
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 5434
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN27@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN27@stbi__bmp_
; Line 5436
	lea	rcx, OFFSET FLAT:$SG75692
	call	stbi__err
	test	eax, eax
	je	SHORT $LN46@stbi__bmp_
	mov	QWORD PTR tv224[rsp], 0
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
	mov	QWORD PTR tv224[rsp], 0
$LN47@stbi__bmp_:
	mov	rax, QWORD PTR tv224[rsp]
	jmp	$LN1@stbi__bmp_
$LN27@stbi__bmp_:
; Line 5438
	jmp	SHORT $LN26@stbi__bmp_
$LN25@stbi__bmp_:
; Line 5439
	lea	rcx, OFFSET FLAT:$SG75693
	call	stbi__err
	test	eax, eax
	je	SHORT $LN48@stbi__bmp_
	mov	QWORD PTR tv228[rsp], 0
	jmp	SHORT $LN49@stbi__bmp_
$LN48@stbi__bmp_:
	mov	QWORD PTR tv228[rsp], 0
$LN49@stbi__bmp_:
	mov	rax, QWORD PTR tv228[rsp]
	jmp	$LN1@stbi__bmp_
$LN26@stbi__bmp_:
$LN24@stbi__bmp_:
$LN21@stbi__bmp_:
; Line 5441
	jmp	$LN18@stbi__bmp_
$LN17@stbi__bmp_:
; Line 5444
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN28@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN28@stbi__bmp_
; Line 5445
	lea	rcx, OFFSET FLAT:$SG75695
	call	stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__bmp_
	mov	QWORD PTR tv234[rsp], 0
	jmp	SHORT $LN51@stbi__bmp_
$LN50@stbi__bmp_:
	mov	QWORD PTR tv234[rsp], 0
$LN51@stbi__bmp_:
	mov	rax, QWORD PTR tv234[rsp]
	jmp	$LN1@stbi__bmp_
$LN28@stbi__bmp_:
; Line 5446
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5447
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5449
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 5450
	cmp	DWORD PTR compress$1[rsp], 3
	je	SHORT $LN29@stbi__bmp_
; Line 5451
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbi__bmp_set_mask_defaults
$LN29@stbi__bmp_:
; Line 5452
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5453
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbi__bmp_:
	cmp	DWORD PTR i$2[rsp], 12
	jge	SHORT $LN3@stbi__bmp_
; Line 5454
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	jmp	SHORT $LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5455
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	jne	SHORT $LN30@stbi__bmp_
; Line 5456
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5457
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5458
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5459
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
$LN30@stbi__bmp_:
$LN18@stbi__bmp_:
$LN12@stbi__bmp_:
; Line 5463
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 5464
	add	rsp, 136				; 00000088H
	ret	0
stbi__bmp_parse_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
compress$ = 16
stbi__bmp_set_mask_defaults PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5359
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 5361
	cmp	DWORD PTR compress$[rsp], 3
	jne	SHORT $LN2@stbi__bmp_
; Line 5362
	mov	eax, 1
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5364
	cmp	DWORD PTR compress$[rsp], 0
	jne	$LN3@stbi__bmp_
; Line 5365
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN4@stbi__bmp_
; Line 5366
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 31744		; 00007c00H
; Line 5367
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 992			; 000003e0H
; Line 5368
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 31
	jmp	SHORT $LN5@stbi__bmp_
$LN4@stbi__bmp_:
; Line 5369
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	SHORT $LN6@stbi__bmp_
; Line 5370
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 16711680		; 00ff0000H
; Line 5371
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 65280		; 0000ff00H
; Line 5372
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 255			; 000000ffH
; Line 5373
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], -16777216		; ff000000H
; Line 5374
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 5375
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 5379
	mov	eax, 1
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5381
	xor	eax, eax
$LN1@stbi__bmp_:
; Line 5382
	ret	0
stbi__bmp_set_mask_defaults ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
shift$ = 56
bits$ = 64
stbi__shiftsigned PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5332
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 5341
	cmp	DWORD PTR shift$[rsp], 0
	jge	SHORT $LN2@stbi__shif
; Line 5342
	mov	eax, DWORD PTR shift$[rsp]
	neg	eax
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, cl
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN3@stbi__shif
$LN2@stbi__shif:
; Line 5344
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
$LN3@stbi__shif:
; Line 5345
	cmp	DWORD PTR v$[rsp], 256			; 00000100H
	jb	SHORT $LN5@stbi__shif
	mov	r8d, 5345				; 000014e1H
	lea	rdx, OFFSET FLAT:$SG75582
	lea	rcx, OFFSET FLAT:$SG75583
	call	_wassert
	xor	eax, eax
$LN5@stbi__shif:
; Line 5346
	mov	eax, 8
	sub	eax, DWORD PTR bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
; Line 5347
	cmp	DWORD PTR bits$[rsp], 0
	jl	SHORT $LN6@stbi__shif
	cmp	DWORD PTR bits$[rsp], 8
	jle	SHORT $LN7@stbi__shif
$LN6@stbi__shif:
	mov	r8d, 5347				; 000014e3H
	lea	rdx, OFFSET FLAT:$SG75584
	lea	rcx, OFFSET FLAT:$SG75585
	call	_wassert
	xor	eax, eax
$LN7@stbi__shif:
; Line 5348
	movsxd	rax, DWORD PTR bits$[rsp]
	lea	rcx, OFFSET FLAT:?mul_table@?1??stbi__shiftsigned@@9@9
	mov	edx, DWORD PTR v$[rsp]
	imul	edx, DWORD PTR [rcx+rax*4]
	mov	eax, edx
	movsxd	rcx, DWORD PTR bits$[rsp]
	lea	rdx, OFFSET FLAT:?shift_table@?1??stbi__shiftsigned@@9@9
	mov	ecx, DWORD PTR [rdx+rcx*4]
	sar	eax, cl
; Line 5349
	add	rsp, 40					; 00000028H
	ret	0
stbi__shiftsigned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stbi__bitcount PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5319
	mov	DWORD PTR [rsp+8], ecx
; Line 5320
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5321
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5322
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 5323
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5324
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5325
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 5326
	ret	0
stbi__bitcount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
z$ = 32
stbi__high_bit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5307
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5308
	mov	DWORD PTR n$[rsp], 0
; Line 5309
	cmp	DWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbi__high
	mov	eax, -1
	jmp	$LN1@stbi__high
$LN2@stbi__high:
; Line 5310
	cmp	DWORD PTR z$[rsp], 65536		; 00010000H
	jb	SHORT $LN3@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN3@stbi__high:
; Line 5311
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jb	SHORT $LN4@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN4@stbi__high:
; Line 5312
	cmp	DWORD PTR z$[rsp], 16
	jb	SHORT $LN5@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 4
	mov	DWORD PTR z$[rsp], eax
$LN5@stbi__high:
; Line 5313
	cmp	DWORD PTR z$[rsp], 4
	jb	SHORT $LN6@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR z$[rsp], eax
$LN6@stbi__high:
; Line 5314
	cmp	DWORD PTR z$[rsp], 2
	jb	SHORT $LN7@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbi__high:
; Line 5315
	mov	eax, DWORD PTR n$[rsp]
$LN1@stbi__high:
; Line 5316
	add	rsp, 24
	ret	0
stbi__high_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tv83 = 36
r$ = 40
s$ = 64
stbi__bmp_test_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5286
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	je	SHORT $LN2@stbi__bmp_
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5287
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN3@stbi__bmp_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5288
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5289
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5290
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5291
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5292
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR sz$[rsp], eax
; Line 5293
	cmp	DWORD PTR sz$[rsp], 12
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 40			; 00000028H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 56			; 00000038H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 108			; 0000006cH
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 124			; 0000007cH
	je	SHORT $LN5@stbi__bmp_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@stbi__bmp_
$LN5@stbi__bmp_:
	mov	DWORD PTR tv83[rsp], 1
$LN6@stbi__bmp_:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 5294
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__bmp_:
; Line 5295
	add	rsp, 56					; 00000038H
	ret	0
stbi__bmp_test_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__png_info_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5247
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5248
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__parse_png_file
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5249
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__rewind
; Line 5250
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5252
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__png_:
; Line 5253
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__png_:
; Line 5254
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__png_:
; Line 5255
	mov	eax, 1
$LN1@stbi__png_:
; Line 5256
	add	rsp, 40					; 00000028H
	ret	0
stbi__png_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv69 = 56
tv84 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
p$ = 304
x$ = 312
y$ = 320
n$ = 328
req_comp$ = 336
ri$ = 344
stbi__do_png PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5200
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
; Line 5201
	mov	QWORD PTR result$[rsp], 0
; Line 5202
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN3@stbi__do_p
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN2@stbi__do_p
$LN3@stbi__do_p:
	lea	rcx, OFFSET FLAT:$SG75466
	call	stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__do_p
	mov	QWORD PTR tv69[rsp], 0
	jmp	SHORT $LN16@stbi__do_p
$LN15@stbi__do_p:
	mov	QWORD PTR tv69[rsp], 0
$LN16@stbi__do_p:
	mov	rax, QWORD PTR tv69[rsp]
	jmp	$LN1@stbi__do_p
$LN2@stbi__do_p:
; Line 5203
	mov	r8d, DWORD PTR req_comp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__parse_png_file
	test	eax, eax
	je	$LN4@stbi__do_p
; Line 5204
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 8
	jg	SHORT $LN5@stbi__do_p
; Line 5205
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
	jmp	SHORT $LN6@stbi__do_p
$LN5@stbi__do_p:
; Line 5206
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN7@stbi__do_p
; Line 5207
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
	jmp	SHORT $LN8@stbi__do_p
$LN7@stbi__do_p:
; Line 5209
	lea	rcx, OFFSET FLAT:$SG75472
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__do_p
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN18@stbi__do_p
$LN17@stbi__do_p:
	mov	QWORD PTR tv84[rsp], 0
$LN18@stbi__do_p:
	mov	rax, QWORD PTR tv84[rsp]
	jmp	$LN1@stbi__do_p
$LN8@stbi__do_p:
$LN6@stbi__do_p:
; Line 5210
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR result$[rsp], rax
; Line 5211
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5212
	cmp	DWORD PTR req_comp$[rsp], 0
	je	$LN9@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	$LN9@stbi__do_p
; Line 5213
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@stbi__do_p
; Line 5214
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN11@stbi__do_p
$LN10@stbi__do_p:
; Line 5216
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format16
	mov	QWORD PTR result$[rsp], rax
$LN11@stbi__do_p:
; Line 5217
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 5218
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN12@stbi__do_p
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stbi__do_p
$LN12@stbi__do_p:
$LN9@stbi__do_p:
; Line 5220
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 5221
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 5222
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN13@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN13@stbi__do_p:
$LN4@stbi__do_p:
; Line 5224
	lea	rax, OFFSET FLAT:$SG75478
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5224				; 00001468H
	lea	r8, OFFSET FLAT:$SG75479
	mov	edx, 86					; 00000056H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5225
	lea	rax, OFFSET FLAT:$SG75480
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5225				; 00001469H
	lea	r8, OFFSET FLAT:$SG75481
	mov	edx, 87					; 00000057H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5226
	lea	rax, OFFSET FLAT:$SG75482
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5226				; 0000146aH
	lea	r8, OFFSET FLAT:$SG75483
	mov	edx, 88					; 00000058H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5228
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__do_p:
; Line 5229
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
stbi__do_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pal_img_n$ = 64
s$ = 72
has_trans$ = 80
i$ = 84
c$1 = 88
k$ = 96
idata_limit$ = 100
ioff$ = 104
color$ = 108
tv78 = 112
pal_len$ = 116
first$ = 120
tc$ = 124
interlace$ = 128
raw_len$2 = 132
is_iphone$ = 136
tv337 = 140
tv390 = 144
tv497 = 148
tv197 = 152
tv194 = 156
bpl$3 = 160
comp$4 = 164
filter$5 = 168
p$6 = 176
idata_limit_old$7 = 184
tv344 = 192
$T8 = 208
$T9 = 240
$T10 = 272
$T11 = 304
$T12 = 336
$T13 = 368
tc16$ = 400
palette$ = 416
__$ArrayPad$ = 1440
z$ = 1488
scan$ = 1496
req_comp$ = 1504
stbi__parse_png_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5024
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1464				; 000005b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5025
	mov	BYTE PTR pal_img_n$[rsp], 0
; Line 5026
	mov	BYTE PTR has_trans$[rsp], 0
	lea	rax, QWORD PTR tc$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 5028
	mov	DWORD PTR ioff$[rsp], 0
	mov	DWORD PTR idata_limit$[rsp], 0
	mov	DWORD PTR pal_len$[rsp], 0
; Line 5029
	mov	DWORD PTR first$[rsp], 1
	mov	DWORD PTR interlace$[rsp], 0
	mov	DWORD PTR color$[rsp], 0
	mov	DWORD PTR is_iphone$[rsp], 0
; Line 5030
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 5032
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5033
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5034
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5036
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__check_png_header
	test	eax, eax
	jne	SHORT $LN21@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN21@stbi__pars:
; Line 5038
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN22@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
$LN2@stbi__pars:
; Line 5041
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get_chunk_header
	mov	QWORD PTR c$1[rsp], rax
; Line 5042
	mov	eax, DWORD PTR c$1[rsp+4]
	mov	DWORD PTR tv78[rsp], eax
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	ja	SHORT $LN105@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	je	SHORT $LN24@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1130840649		; 43674249H
	je	SHORT $LN23@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229209940		; 49444154H
	je	$LN61@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229278788		; 49454e44H
	je	$LN70@stbi__pars
	jmp	$LN91@stbi__pars
$LN105@stbi__pars:
	cmp	DWORD PTR tv78[rsp], 1347179589		; 504c5445H
	je	$LN45@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1951551059		; 74524e53H
	je	$LN49@stbi__pars
	jmp	$LN91@stbi__pars
$LN23@stbi__pars:
; Line 5044
	mov	DWORD PTR is_iphone$[rsp], 1
; Line 5045
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5046
	jmp	$LN5@stbi__pars
$LN24@stbi__pars:
; Line 5049
	cmp	DWORD PTR first$[rsp], 0
	jne	SHORT $LN25@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75329
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN25@stbi__pars:
; Line 5050
	mov	DWORD PTR first$[rsp], 0
; Line 5051
	cmp	DWORD PTR c$1[rsp], 13
	je	SHORT $LN26@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75331
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN26@stbi__pars:
; Line 5052
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5053
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5054
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN27@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75333
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN27@stbi__pars:
; Line 5055
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN28@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75335
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN28@stbi__pars:
; Line 5056
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+32], eax
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 4
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 8
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	je	SHORT $LN29@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75337
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN29@stbi__pars:
; Line 5057
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR color$[rsp], eax
	cmp	DWORD PTR color$[rsp], 6
	jle	SHORT $LN30@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75339
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN30@stbi__pars:
; Line 5058
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN31@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN31@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75341
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN31@stbi__pars:
; Line 5059
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN32@stbi__pars
	mov	BYTE PTR pal_img_n$[rsp], 3
	jmp	SHORT $LN33@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75345
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN34@stbi__pars:
$LN33@stbi__pars:
; Line 5060
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR comp$4[rsp], eax
	cmp	DWORD PTR comp$4[rsp], 0
	je	SHORT $LN35@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75347
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN35@stbi__pars:
; Line 5061
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR filter$5[rsp], eax
	cmp	DWORD PTR filter$5[rsp], 0
	je	SHORT $LN36@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75349
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN36@stbi__pars:
; Line 5062
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR interlace$[rsp], eax
	cmp	DWORD PTR interlace$[rsp], 1
	jle	SHORT $LN37@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75351
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN37@stbi__pars:
; Line 5063
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN39@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN38@stbi__pars
$LN39@stbi__pars:
	lea	rcx, OFFSET FLAT:$SG75354
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN38@stbi__pars:
; Line 5064
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	jne	$LN40@stbi__pars
; Line 5065
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN95@stbi__pars
	mov	DWORD PTR tv194[rsp], 3
	jmp	SHORT $LN96@stbi__pars
$LN95@stbi__pars:
	mov	DWORD PTR tv194[rsp], 1
$LN96@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN97@stbi__pars
	mov	DWORD PTR tv197[rsp], 1
	jmp	SHORT $LN98@stbi__pars
$LN97@stbi__pars:
	mov	DWORD PTR tv197[rsp], 0
$LN98@stbi__pars:
	mov	eax, DWORD PTR tv197[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5066
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN42@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75358
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN42@stbi__pars:
; Line 5067
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN43@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN43@stbi__pars:
; Line 5068
	jmp	SHORT $LN41@stbi__pars
$LN40@stbi__pars:
; Line 5071
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 5072
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN44@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75361
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN44@stbi__pars:
$LN41@stbi__pars:
; Line 5075
	jmp	$LN5@stbi__pars
$LN45@stbi__pars:
; Line 5079
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN46@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75364
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN46@stbi__pars:
; Line 5080
	cmp	DWORD PTR c$1[rsp], 768			; 00000300H
	jbe	SHORT $LN47@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75366
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 5081
	xor	edx, edx
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR pal_len$[rsp], eax
; Line 5082
	imul	eax, DWORD PTR pal_len$[rsp], 3
	cmp	eax, DWORD PTR c$1[rsp]
	je	SHORT $LN48@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75368
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 5083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stbi__pars
$LN7@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stbi__pars:
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stbi__pars
; Line 5084
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5085
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5086
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5087
	mov	eax, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	eax, eax
	mov	BYTE PTR palette$[rsp+rax], 255		; 000000ffH
; Line 5088
	jmp	$LN7@stbi__pars
$LN8@stbi__pars:
; Line 5089
	jmp	$LN5@stbi__pars
$LN49@stbi__pars:
; Line 5093
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN50@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75371
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN50@stbi__pars:
; Line 5094
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN51@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75373
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 5095
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	$LN52@stbi__pars
; Line 5096
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN54@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN54@stbi__pars:
; Line 5097
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN55@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75378
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN55@stbi__pars:
; Line 5098
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR c$1[rsp], eax
	jbe	SHORT $LN56@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75380
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 5099
	mov	BYTE PTR pal_img_n$[rsp], 4
; Line 5100
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__pars
$LN10@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__pars:
	mov	eax, DWORD PTR c$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@stbi__pars
; Line 5101
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
	jmp	SHORT $LN10@stbi__pars
$LN11@stbi__pars:
; Line 5102
	jmp	$LN53@stbi__pars
$LN52@stbi__pars:
; Line 5103
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN57@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75382
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN57@stbi__pars:
; Line 5104
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 1
	cmp	DWORD PTR c$1[rsp], eax
	je	SHORT $LN58@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75384
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN58@stbi__pars:
; Line 5105
	mov	BYTE PTR has_trans$[rsp], 1
; Line 5106
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN59@stbi__pars
; Line 5107
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN15@stbi__pars
$LN13@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	WORD PTR tc16$[rsp+rcx*2], ax
	jmp	SHORT $LN13@stbi__pars
$LN14@stbi__pars:
; Line 5108
	jmp	SHORT $LN60@stbi__pars
$LN59@stbi__pars:
; Line 5109
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__pars
$LN16@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN17@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	and	eax, 255				; 000000ffH
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rcx, DWORD PTR [rcx+32]
	lea	rdx, OFFSET FLAT:stbi__depth_scale_table
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR tc$[rsp+rcx], al
	jmp	SHORT $LN16@stbi__pars
$LN17@stbi__pars:
$LN60@stbi__pars:
$LN53@stbi__pars:
; Line 5112
	jmp	$LN5@stbi__pars
$LN61@stbi__pars:
; Line 5116
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN62@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75389
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 5117
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN63@stbi__pars
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN63@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75391
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
; Line 5118
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN64@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN64@stbi__pars:
; Line 5119
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ioff$[rsp]
	jge	SHORT $LN65@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN65@stbi__pars:
; Line 5120
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	$LN66@stbi__pars
; Line 5121
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	DWORD PTR idata_limit_old$7[rsp], eax
; Line 5123
	cmp	DWORD PTR idata_limit$[rsp], 0
	jne	SHORT $LN67@stbi__pars
	cmp	DWORD PTR c$1[rsp], 4096		; 00001000H
	jbe	SHORT $LN99@stbi__pars
	mov	eax, DWORD PTR c$1[rsp]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN100@stbi__pars
$LN99@stbi__pars:
	mov	DWORD PTR tv337[rsp], 4096		; 00001000H
$LN100@stbi__pars:
	mov	eax, DWORD PTR tv337[rsp]
	mov	DWORD PTR idata_limit$[rsp], eax
$LN67@stbi__pars:
$LN19@stbi__pars:
; Line 5124
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	SHORT $LN20@stbi__pars
; Line 5125
	mov	eax, DWORD PTR idata_limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR idata_limit$[rsp], eax
	jmp	SHORT $LN19@stbi__pars
$LN20@stbi__pars:
; Line 5127
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	QWORD PTR tv344[rsp], rax
	lea	rcx, OFFSET FLAT:$SG75396
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 5127				; 00001407H
	lea	r8, OFFSET FLAT:$SG75397
	mov	edx, 83					; 00000053H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR tv344[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	mov	QWORD PTR p$6[rsp], rax
	cmp	QWORD PTR p$6[rsp], 0
	jne	SHORT $LN68@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75399
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 5128
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN66@stbi__pars:
; Line 5130
	mov	eax, DWORD PTR ioff$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR c$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
	test	eax, eax
	jne	SHORT $LN69@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75401
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN69@stbi__pars:
; Line 5131
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ioff$[rsp], eax
; Line 5132
	jmp	$LN5@stbi__pars
$LN70@stbi__pars:
; Line 5137
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN71@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75404
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN71@stbi__pars:
; Line 5138
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN72@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN72@stbi__pars:
; Line 5139
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN73@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75407
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN73@stbi__pars:
; Line 5141
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+32]
	add	eax, 7
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR bpl$3[rsp], eax
; Line 5142
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR bpl$3[rsp]
	imul	ecx, DWORD PTR [rax+4]
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR raw_len$2[rsp], eax
; Line 5143
	cmp	DWORD PTR is_iphone$[rsp], 0
	jne	SHORT $LN101@stbi__pars
	mov	DWORD PTR tv390[rsp], 1
	jmp	SHORT $LN102@stbi__pars
$LN101@stbi__pars:
	mov	DWORD PTR tv390[rsp], 0
$LN102@stbi__pars:
	mov	eax, DWORD PTR tv390[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR raw_len$2[rsp]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	edx, DWORD PTR ioff$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbi_zlib_decode_malloc_guesssize_headerflag
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 5144
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN74@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN74@stbi__pars:
; Line 5145
	lea	rax, OFFSET FLAT:$SG75409
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5145				; 00001419H
	lea	r8, OFFSET FLAT:$SG75410
	mov	edx, 84					; 00000054H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5146
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN78@stbi__pars
	cmp	DWORD PTR req_comp$[rsp], 3
	je	SHORT $LN78@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN77@stbi__pars
$LN78@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN75@stbi__pars
$LN77@stbi__pars:
; Line 5147
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
	jmp	SHORT $LN76@stbi__pars
$LN75@stbi__pars:
; Line 5149
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
$LN76@stbi__pars:
; Line 5150
	mov	eax, DWORD PTR interlace$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__create_png_image
	test	eax, eax
	jne	SHORT $LN79@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN79@stbi__pars:
; Line 5151
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN80@stbi__pars
; Line 5152
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN81@stbi__pars
; Line 5153
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc16$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__compute_transparency16
	test	eax, eax
	jne	SHORT $LN83@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN83@stbi__pars:
; Line 5154
	jmp	SHORT $LN82@stbi__pars
$LN81@stbi__pars:
; Line 5155
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__compute_transparency
	test	eax, eax
	jne	SHORT $LN84@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN84@stbi__pars:
$LN82@stbi__pars:
$LN80@stbi__pars:
; Line 5158
	cmp	DWORD PTR is_iphone$[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@stbi__pars
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv497[rsp], eax
	jmp	SHORT $LN104@stbi__pars
$LN103@stbi__pars:
	mov	eax, DWORD PTR stbi__de_iphone_flag_global
	mov	DWORD PTR tv497[rsp], eax
$LN104@stbi__pars:
	cmp	DWORD PTR tv497[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jle	SHORT $LN85@stbi__pars
; Line 5159
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__de_iphone
$LN85@stbi__pars:
; Line 5160
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN86@stbi__pars
; Line 5162
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5163
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5164
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN88@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
$LN88@stbi__pars:
; Line 5165
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR pal_len$[rsp]
	lea	rdx, QWORD PTR palette$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__expand_png_palette
	test	eax, eax
	jne	SHORT $LN89@stbi__pars
; Line 5166
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN89@stbi__pars:
; Line 5167
	jmp	SHORT $LN87@stbi__pars
$LN86@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN90@stbi__pars
; Line 5169
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN90@stbi__pars:
$LN87@stbi__pars:
; Line 5171
	lea	rax, OFFSET FLAT:$SG75427
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5171				; 00001433H
	lea	r8, OFFSET FLAT:$SG75428
	mov	edx, 85					; 00000055H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5173
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 5174
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN91@stbi__pars:
; Line 5179
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN92@stbi__pars
	lea	rcx, OFFSET FLAT:$SG75431
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN92@stbi__pars:
; Line 5180
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 536870912				; 20000000H
	test	eax, eax
	jne	$LN93@stbi__pars
; Line 5184
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5185
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5186
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5187
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5189
	lea	rcx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN93@stbi__pars:
; Line 5191
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN5@stbi__pars:
; Line 5195
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 5196
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 5197
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1464				; 000005b8H
	pop	rdi
	pop	rsi
	ret	0
stbi__parse_png_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$1 = 32
half$2 = 33
p$ = 40
t$3 = 48
i$ = 52
t$4 = 56
t$5 = 57
pixel_count$ = 60
tv133 = 64
s$ = 72
z$ = 96
stbi__de_iphone PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4979
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4980
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4981
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4982
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4984
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 3
	jne	$LN11@stbi__de_i
; Line 4985
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__de_i
$LN2@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__de_i
; Line 4986
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$4[rsp], al
; Line 4987
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4988
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$4[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4989
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4990
	jmp	SHORT $LN2@stbi__de_i
$LN3@stbi__de_i:
; Line 4991
	jmp	$LN12@stbi__de_i
$LN11@stbi__de_i:
; Line 4992
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 4
	je	SHORT $LN18@stbi__de_i
	mov	r8d, 4992				; 00001380H
	lea	rdx, OFFSET FLAT:$SG75221
	lea	rcx, OFFSET FLAT:$SG75222
	call	_wassert
	xor	eax, eax
$LN18@stbi__de_i:
; Line 4993
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@stbi__de_i
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN20@stbi__de_i
$LN19@stbi__de_i:
	mov	eax, DWORD PTR stbi__unpremultiply_on_load_global
	mov	DWORD PTR tv133[rsp], eax
$LN20@stbi__de_i:
	cmp	DWORD PTR tv133[rsp], 0
	je	$LN13@stbi__de_i
; Line 4995
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__de_i
$LN5@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__de_i
; Line 4996
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR a$1[rsp], al
; Line 4997
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$3[rsp], al
; Line 4998
	movzx	eax, BYTE PTR a$1[rsp]
	test	eax, eax
	je	$LN15@stbi__de_i
; Line 4999
	movzx	eax, BYTE PTR a$1[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR half$2[rsp], al
; Line 5000
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5001
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5002
	movzx	eax, BYTE PTR t$3[rsp]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5003
	jmp	SHORT $LN16@stbi__de_i
$LN15@stbi__de_i:
; Line 5004
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5005
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN16@stbi__de_i:
; Line 5007
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5008
	jmp	$LN5@stbi__de_i
$LN6@stbi__de_i:
; Line 5009
	jmp	SHORT $LN14@stbi__de_i
$LN13@stbi__de_i:
; Line 5011
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__de_i
$LN8@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stbi__de_i
; Line 5012
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
; Line 5013
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5014
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5015
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5016
	jmp	SHORT $LN8@stbi__de_i
$LN9@stbi__de_i:
$LN14@stbi__de_i:
$LN12@stbi__de_i:
; Line 5019
	add	rsp, 88					; 00000058H
	ret	0
stbi__de_iphone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi__unpremultiply_on_load_thread PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4959
	mov	DWORD PTR [rsp+8], ecx
; Line 4960
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4961
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4962
	ret	0
stbi__unpremultiply_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
p$ = 56
n$1 = 64
n$2 = 68
pixel_count$ = 72
orig$ = 80
temp_out$ = 88
$T3 = 96
$T4 = 128
a$ = 192
palette$ = 200
len$ = 208
pal_img_n$ = 216
stbi__expand_png_palette PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4902
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 4903
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4904
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR orig$[rsp], rax
; Line 4906
	xor	r8d, r8d
	mov	edx, DWORD PTR pal_img_n$[rsp]
	mov	ecx, DWORD PTR pixel_count$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR p$[rsp], rax
; Line 4907
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stbi__expa
	lea	rcx, OFFSET FLAT:$SG75171
	call	stbi__err
	jmp	$LN1@stbi__expa
$LN8@stbi__expa:
; Line 4910
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR temp_out$[rsp], rax
; Line 4912
	cmp	DWORD PTR pal_img_n$[rsp], 3
	jne	$LN9@stbi__expa
; Line 4913
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__expa
$LN2@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@stbi__expa
; Line 4914
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$2[rsp], eax
; Line 4915
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4916
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4917
	mov	eax, DWORD PTR n$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4918
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4919
	jmp	$LN2@stbi__expa
$LN3@stbi__expa:
; Line 4920
	jmp	$LN10@stbi__expa
$LN9@stbi__expa:
; Line 4921
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__expa
$LN5@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__expa
; Line 4922
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 4923
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4924
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4925
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4926
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4927
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4928
	jmp	$LN5@stbi__expa
$LN6@stbi__expa:
$LN10@stbi__expa:
; Line 4930
	lea	rax, OFFSET FLAT:$SG75174
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4930				; 00001342H
	lea	r8, OFFSET FLAT:$SG75175
	mov	edx, 82					; 00000052H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 4931
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR temp_out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4935
	mov	eax, 1
$LN1@stbi__expa:
; Line 4936
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
stbi__expand_png_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
stbi__compute_transparency16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4877
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4878
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4879
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4880
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4884
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4884				; 00001314H
	lea	rdx, OFFSET FLAT:$SG75139
	lea	rcx, OFFSET FLAT:$SG75140
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4886
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4887
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4888
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 65535		; 0000ffffH
$LN14@stbi__comp:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, WORD PTR tv87[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 4889
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4890
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4891
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4893
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4894
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN10@stbi__comp:
; Line 4895
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 4896
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4898
	mov	eax, 1
; Line 4899
	add	rsp, 72					; 00000048H
	ret	0
stbi__compute_transparency16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
stbi__compute_transparency PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4852
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4853
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4854
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4855
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4859
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4859				; 000012fbH
	lea	rdx, OFFSET FLAT:$SG75113
	lea	rcx, OFFSET FLAT:$SG75114
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4861
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4863
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 255		; 000000ffH
$LN14@stbi__comp:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4864
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
; Line 4865
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4866
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4867
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4868
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4869
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@stbi__comp:
; Line 4870
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4871
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4873
	mov	eax, 1
; Line 4874
	add	rsp, 72					; 00000048H
	ret	0
stbi__compute_transparency ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
j$1 = 68
x$2 = 72
i$3 = 76
out_bytes$ = 80
y$4 = 84
tv65 = 88
img_len$5 = 92
final$ = 96
bytes$ = 104
out_y$6 = 108
out_x$7 = 112
tv288 = 120
$T8 = 128
$T9 = 160
$T10 = 192
$T11 = 224
yspc$12 = 256
xspc$13 = 288
yorig$14 = 320
xorig$15 = 352
__$ArrayPad$ = 384
a$ = 432
image_data$ = 440
image_data_len$ = 448
out_n$ = 456
depth$ = 464
color$ = 472
interlaced$ = 480
stbi__create_png_image PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4807
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4808
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN16@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN17@stbi__crea
$LN16@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN17@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4809
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR out_bytes$[rsp], eax
; Line 4812
	cmp	DWORD PTR interlaced$[rsp], 0
	jne	SHORT $LN11@stbi__crea
; Line 4813
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], edx
	mov	edx, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__create_png_image_raw
	jmp	$LN1@stbi__crea
$LN11@stbi__crea:
; Line 4816
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	xor	r9d, r9d
	mov	r8d, DWORD PTR out_bytes$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR [rcx]
	call	stbi__malloc_mad3
	mov	QWORD PTR final$[rsp], rax
; Line 4817
	cmp	QWORD PTR final$[rsp], 0
	jne	SHORT $LN12@stbi__crea
	lea	rcx, OFFSET FLAT:$SG75086
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN12@stbi__crea:
; Line 4818
	mov	DWORD PTR p$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR p$[rsp]
	inc	eax
	mov	DWORD PTR p$[rsp], eax
$LN4@stbi__crea:
	cmp	DWORD PTR p$[rsp], 7
	jge	$LN3@stbi__crea
; Line 4819
	mov	DWORD PTR xorig$15[rsp], 0
	mov	DWORD PTR xorig$15[rsp+4], 4
	mov	DWORD PTR xorig$15[rsp+8], 0
	mov	DWORD PTR xorig$15[rsp+12], 2
	mov	DWORD PTR xorig$15[rsp+16], 0
	mov	DWORD PTR xorig$15[rsp+20], 1
	mov	DWORD PTR xorig$15[rsp+24], 0
; Line 4820
	mov	DWORD PTR yorig$14[rsp], 0
	mov	DWORD PTR yorig$14[rsp+4], 0
	mov	DWORD PTR yorig$14[rsp+8], 4
	mov	DWORD PTR yorig$14[rsp+12], 0
	mov	DWORD PTR yorig$14[rsp+16], 2
	mov	DWORD PTR yorig$14[rsp+20], 0
	mov	DWORD PTR yorig$14[rsp+24], 1
; Line 4821
	mov	DWORD PTR xspc$13[rsp], 8
	mov	DWORD PTR xspc$13[rsp+4], 8
	mov	DWORD PTR xspc$13[rsp+8], 4
	mov	DWORD PTR xspc$13[rsp+12], 4
	mov	DWORD PTR xspc$13[rsp+16], 2
	mov	DWORD PTR xspc$13[rsp+20], 2
	mov	DWORD PTR xspc$13[rsp+24], 1
; Line 4822
	mov	DWORD PTR yspc$12[rsp], 8
	mov	DWORD PTR yspc$12[rsp+4], 8
	mov	DWORD PTR yspc$12[rsp+8], 8
	mov	DWORD PTR yspc$12[rsp+12], 4
	mov	DWORD PTR yspc$12[rsp+16], 4
	mov	DWORD PTR yspc$12[rsp+20], 2
	mov	DWORD PTR yspc$12[rsp+24], 2
; Line 4825
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xorig$15[rsp+rcx*4]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xspc$13[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR xspc$13[rsp+rcx*4]
	mov	DWORD PTR x$2[rsp], eax
; Line 4826
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yorig$14[rsp+rcx*4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yspc$12[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR yspc$12[rsp+rcx*4]
	mov	DWORD PTR y$4[rsp], eax
; Line 4827
	cmp	DWORD PTR x$2[rsp], 0
	je	$LN13@stbi__crea
	cmp	DWORD PTR y$4[rsp], 0
	je	$LN13@stbi__crea
; Line 4828
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR x$2[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	sar	eax, 3
	inc	eax
	imul	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR img_len$5[rsp], eax
; Line 4829
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR x$2[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__create_png_image_raw
	test	eax, eax
	jne	SHORT $LN14@stbi__crea
; Line 4830
	lea	rax, OFFSET FLAT:$SG75089
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4830				; 000012deH
	lea	r8, OFFSET FLAT:$SG75090
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR final$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
; Line 4831
	xor	eax, eax
	jmp	$LN1@stbi__crea
$LN14@stbi__crea:
; Line 4833
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR y$4[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN6@stbi__crea
; Line 4834
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__crea
$LN8@stbi__crea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__crea:
	mov	eax, DWORD PTR x$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__crea
; Line 4835
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR yspc$12[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR yorig$14[rsp+rcx*4]
	mov	DWORD PTR out_y$6[rsp], eax
; Line 4836
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR xspc$13[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR xorig$15[rsp+rcx*4]
	mov	DWORD PTR out_x$7[rsp], eax
; Line 4837
	movsxd	rax, DWORD PTR out_bytes$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR x$2[rsp]
	add	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR out_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR a$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	edi, DWORD PTR out_y$6[rsp]
	imul	edi, DWORD PTR [rdx]
	mov	edx, edi
	imul	edx, DWORD PTR out_bytes$[rsp]
	mov	edx, edx
	mov	rdi, QWORD PTR final$[rsp]
	add	rdi, rdx
	mov	rdx, rdi
	mov	edi, DWORD PTR out_x$7[rsp]
	imul	edi, DWORD PTR out_bytes$[rsp]
	movsxd	rdi, edi
	add	rdx, rdi
	mov	QWORD PTR tv288[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv288[rsp]
	mov	rcx, rax
	call	memcpy
; Line 4839
	jmp	$LN8@stbi__crea
$LN9@stbi__crea:
; Line 4840
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4841
	lea	rax, OFFSET FLAT:$SG75091
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4841				; 000012e9H
	lea	r8, OFFSET FLAT:$SG75092
	mov	edx, 81					; 00000051H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
; Line 4842
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	rcx, QWORD PTR image_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR image_data$[rsp], rax
; Line 4843
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	ecx, DWORD PTR image_data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR image_data_len$[rsp], eax
$LN13@stbi__crea:
; Line 4845
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4846
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR final$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4848
	mov	eax, 1
$LN1@stbi__crea:
; Line 4849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
stbi__create_png_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
scale$1 = 36
cur$2 = 40
i$ = 48
filter_bytes$ = 52
cur$3 = 56
output_bytes$ = 64
q$4 = 68
img_n$ = 72
prior$5 = 80
in$6 = 88
j$ = 96
nk$7 = 100
filter$8 = 104
stride$ = 108
img_width_bytes$ = 112
bytes$ = 116
tv413 = 120
tv666 = 124
tv65 = 128
tv168 = 132
width$ = 136
tv274 = 140
cur$9 = 144
tv563 = 152
tv546 = 156
tv618 = 160
img_len$ = 164
tv216 = 168
tv360 = 172
tv343 = 176
tv391 = 180
s$ = 184
cur16$10 = 192
a$ = 224
raw$ = 232
raw_len$ = 240
out_n$ = 248
x$ = 256
y$ = 264
depth$ = 272
color$ = 280
stbi__create_png_image_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 4596
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN159@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN160@stbi__crea
$LN159@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN160@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4597
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4598
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR stride$[rsp], eax
; Line 4601
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR img_n$[rsp], eax
; Line 4603
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR output_bytes$[rsp], eax
; Line 4604
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR filter_bytes$[rsp], eax
; Line 4605
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR width$[rsp], eax
; Line 4607
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	r8d, 4607				; 000011ffH
	lea	rdx, OFFSET FLAT:$SG74972
	lea	rcx, OFFSET FLAT:$SG74973
	call	_wassert
	xor	eax, eax
$LN161@stbi__crea:
; Line 4608
	xor	r9d, r9d
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4609
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN98@stbi__crea
	lea	rcx, OFFSET FLAT:$SG74975
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN98@stbi__crea:
; Line 4611
	mov	r9d, 7
	mov	r8d, DWORD PTR depth$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN99@stbi__crea
	lea	rcx, OFFSET FLAT:$SG74977
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN99@stbi__crea:
; Line 4612
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR img_width_bytes$[rsp], eax
; Line 4613
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 4618
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR raw_len$[rsp], eax
	jae	SHORT $LN100@stbi__crea
	lea	rcx, OFFSET FLAT:$SG74979
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN100@stbi__crea:
; Line 4620
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN3@stbi__crea
; Line 4621
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4623
	mov	rax, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR filter$8[rsp], eax
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4625
	cmp	DWORD PTR filter$8[rsp], 4
	jle	SHORT $LN101@stbi__crea
; Line 4626
	lea	rcx, OFFSET FLAT:$SG74981
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN101@stbi__crea:
; Line 4628
	cmp	DWORD PTR depth$[rsp], 8
	jge	SHORT $LN102@stbi__crea
; Line 4629
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR img_width_bytes$[rsp], eax
	jbe	SHORT $LN103@stbi__crea
	lea	rcx, OFFSET FLAT:$SG74984
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN103@stbi__crea:
; Line 4630
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	sub	eax, DWORD PTR img_width_bytes$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4631
	mov	DWORD PTR filter_bytes$[rsp], 1
; Line 4632
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	mov	DWORD PTR width$[rsp], eax
$LN102@stbi__crea:
; Line 4634
	mov	eax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4637
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN104@stbi__crea
	movsxd	rax, DWORD PTR filter$8[rsp]
	lea	rcx, OFFSET FLAT:first_row_filter
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR filter$8[rsp], eax
$LN104@stbi__crea:
; Line 4640
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__crea
; Line 4641
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv168[rsp], eax
	cmp	DWORD PTR tv168[rsp], 6
	ja	$LN8@stbi__crea
	movsxd	rax, DWORD PTR tv168[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN168@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN105@stbi__crea:
; Line 4642
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN106@stbi__crea:
; Line 4643
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN107@stbi__crea:
; Line 4644
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN108@stbi__crea:
; Line 4645
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN109@stbi__crea:
; Line 4646
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv216[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv216[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN110@stbi__crea:
; Line 4647
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN111@stbi__crea:
; Line 4648
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@stbi__crea:
; Line 4650
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4652
	cmp	DWORD PTR depth$[rsp], 8
	jne	SHORT $LN112@stbi__crea
; Line 4653
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN114@stbi__crea
; Line 4654
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN114@stbi__crea:
; Line 4655
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4656
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4657
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
	jmp	$LN113@stbi__crea
$LN112@stbi__crea:
; Line 4658
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN115@stbi__crea
; Line 4659
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN117@stbi__crea
; Line 4660
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4661
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN117@stbi__crea:
; Line 4663
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4664
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4665
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4666
	jmp	SHORT $LN116@stbi__crea
$LN115@stbi__crea:
; Line 4667
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4668
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
; Line 4669
	mov	rax, QWORD PTR prior$5[rsp]
	inc	rax
	mov	QWORD PTR prior$5[rsp], rax
$LN116@stbi__crea:
$LN113@stbi__crea:
; Line 4673
	cmp	DWORD PTR depth$[rsp], 8
	jl	SHORT $LN120@stbi__crea
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	jne	$LN118@stbi__crea
$LN120@stbi__crea:
; Line 4674
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	imul	eax, DWORD PTR filter_bytes$[rsp]
	mov	DWORD PTR nk$7[rsp], eax
; Line 4678
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv274[rsp], eax
	cmp	DWORD PTR tv274[rsp], 6
	ja	$LN10@stbi__crea
	movsxd	rax, DWORD PTR tv274[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN167@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN121@stbi__crea:
; Line 4680
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR raw$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	call	memcpy
	jmp	$LN10@stbi__crea
$LN122@stbi__crea:
; Line 4681
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN14@stbi__crea
$LN12@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN14@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN13@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbi__crea
$LN13@stbi__crea:
	jmp	$LN10@stbi__crea
$LN123@stbi__crea:
; Line 4682
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN17@stbi__crea
$LN15@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN17@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN16@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbi__crea
$LN16@stbi__crea:
	jmp	$LN10@stbi__crea
$LN124@stbi__crea:
; Line 4683
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN20@stbi__crea
$LN18@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN20@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN19@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR filter_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN18@stbi__crea
$LN19@stbi__crea:
	jmp	$LN10@stbi__crea
$LN125@stbi__crea:
; Line 4684
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN23@stbi__crea
$LN21@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN23@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN22@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv343[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR filter_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv360[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv360[rsp]
	call	stbi__paeth
	mov	ecx, DWORD PTR tv343[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN21@stbi__crea
$LN22@stbi__crea:
	jmp	$LN10@stbi__crea
$LN126@stbi__crea:
; Line 4685
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN26@stbi__crea
$LN24@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN26@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN25@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbi__crea
$LN25@stbi__crea:
	jmp	SHORT $LN10@stbi__crea
$LN127@stbi__crea:
; Line 4686
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN29@stbi__crea
$LN27@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN29@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN28@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv391[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv391[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN27@stbi__crea
$LN28@stbi__crea:
$LN10@stbi__crea:
; Line 4689
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4690
	jmp	$LN119@stbi__crea
$LN118@stbi__crea:
; Line 4691
	mov	eax, DWORD PTR img_n$[rsp]
	inc	eax
	cmp	eax, DWORD PTR out_n$[rsp]
	je	SHORT $LN162@stbi__crea
	mov	r8d, 4691				; 00001253H
	lea	rdx, OFFSET FLAT:$SG75009
	lea	rcx, OFFSET FLAT:$SG75010
	call	_wassert
	xor	eax, eax
$LN162@stbi__crea:
; Line 4696
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv413[rsp], eax
	cmp	DWORD PTR tv413[rsp], 6
	ja	$LN30@stbi__crea
	movsxd	rax, DWORD PTR tv413[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN166@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN128@stbi__crea:
; Line 4697
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN34@stbi__crea
$LN32@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN34@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN33@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN37@stbi__crea
$LN35@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN37@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN36@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@stbi__crea
$LN36@stbi__crea:
	jmp	$LN32@stbi__crea
$LN33@stbi__crea:
	jmp	$LN30@stbi__crea
$LN129@stbi__crea:
; Line 4698
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN40@stbi__crea
$LN38@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN40@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN39@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN43@stbi__crea
$LN41@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN43@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN42@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN41@stbi__crea
$LN42@stbi__crea:
	jmp	$LN38@stbi__crea
$LN39@stbi__crea:
	jmp	$LN30@stbi__crea
$LN130@stbi__crea:
; Line 4699
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN46@stbi__crea
$LN44@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN46@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN45@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN49@stbi__crea
$LN47@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN49@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN48@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN47@stbi__crea
$LN48@stbi__crea:
	jmp	$LN44@stbi__crea
$LN45@stbi__crea:
	jmp	$LN30@stbi__crea
$LN131@stbi__crea:
; Line 4700
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN52@stbi__crea
$LN50@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN52@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN51@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN55@stbi__crea
$LN53@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN55@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN54@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR output_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN53@stbi__crea
$LN54@stbi__crea:
	jmp	$LN50@stbi__crea
$LN51@stbi__crea:
	jmp	$LN30@stbi__crea
$LN132@stbi__crea:
; Line 4701
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN58@stbi__crea
$LN56@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN58@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	$LN57@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN61@stbi__crea
$LN59@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN61@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN60@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv546[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv563[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv563[rsp]
	call	stbi__paeth
	mov	ecx, DWORD PTR tv546[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN59@stbi__crea
$LN60@stbi__crea:
	jmp	$LN56@stbi__crea
$LN57@stbi__crea:
	jmp	$LN30@stbi__crea
$LN133@stbi__crea:
; Line 4702
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN64@stbi__crea
$LN62@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN64@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN63@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN67@stbi__crea
$LN65@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN67@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN66@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN65@stbi__crea
$LN66@stbi__crea:
	jmp	$LN62@stbi__crea
$LN63@stbi__crea:
	jmp	$LN30@stbi__crea
$LN134@stbi__crea:
; Line 4703
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN70@stbi__crea
$LN68@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN70@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN69@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN73@stbi__crea
$LN71@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN73@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN72@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv618[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv618[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN71@stbi__crea
$LN72@stbi__crea:
	jmp	$LN68@stbi__crea
$LN69@stbi__crea:
$LN30@stbi__crea:
; Line 4709
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN135@stbi__crea
; Line 4710
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4711
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN76@stbi__crea
$LN74@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
$LN76@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN75@stbi__crea
; Line 4712
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4713
	jmp	SHORT $LN74@stbi__crea
$LN75@stbi__crea:
$LN135@stbi__crea:
$LN119@stbi__crea:
; Line 4716
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4721
	cmp	DWORD PTR depth$[rsp], 8
	jge	$LN136@stbi__crea
; Line 4722
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN79@stbi__crea
$LN77@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN79@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN78@stbi__crea
; Line 4723
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4724
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR out_n$[rsp]
	mov	ecx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR img_width_bytes$[rsp]
	sub	rax, rcx
	mov	QWORD PTR in$6[rsp], rax
; Line 4727
	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN163@stbi__crea
	movsxd	rax, DWORD PTR depth$[rsp]
	lea	rcx, OFFSET FLAT:stbi__depth_scale_table
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv666[rsp], eax
	jmp	SHORT $LN164@stbi__crea
$LN163@stbi__crea:
	mov	DWORD PTR tv666[rsp], 1
$LN164@stbi__crea:
	movzx	eax, BYTE PTR tv666[rsp]
	mov	BYTE PTR scale$1[rsp], al
; Line 4735
	cmp	DWORD PTR depth$[rsp], 4
	jne	$LN138@stbi__crea
; Line 4736
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN82@stbi__crea
$LN80@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 2
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN82@stbi__crea:
	cmp	DWORD PTR k$[rsp], 2
	jl	SHORT $LN81@stbi__crea
; Line 4737
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4738
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 15
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4739
	jmp	SHORT $LN80@stbi__crea
$LN81@stbi__crea:
; Line 4740
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN140@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN140@stbi__crea:
; Line 4741
	jmp	$LN139@stbi__crea
$LN138@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 2
	jne	$LN141@stbi__crea
; Line 4742
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN85@stbi__crea
$LN83@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 4
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN85@stbi__crea:
	cmp	DWORD PTR k$[rsp], 4
	jl	$LN84@stbi__crea
; Line 4743
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4744
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4745
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4746
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4747
	jmp	$LN83@stbi__crea
$LN84@stbi__crea:
; Line 4748
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN143@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN143@stbi__crea:
; Line 4749
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN144@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN144@stbi__crea:
; Line 4750
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN145@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN145@stbi__crea:
; Line 4751
	jmp	$LN142@stbi__crea
$LN141@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 1
	jne	$LN146@stbi__crea
; Line 4752
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN88@stbi__crea
$LN86@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 8
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN88@stbi__crea:
	cmp	DWORD PTR k$[rsp], 8
	jl	$LN87@stbi__crea
; Line 4753
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4754
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4755
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4756
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4757
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4758
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4759
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4760
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4761
	jmp	$LN86@stbi__crea
$LN87@stbi__crea:
; Line 4762
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN147@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN147@stbi__crea:
; Line 4763
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN148@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN148@stbi__crea:
; Line 4764
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN149@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN149@stbi__crea:
; Line 4765
	cmp	DWORD PTR k$[rsp], 3
	jle	SHORT $LN150@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN150@stbi__crea:
; Line 4766
	cmp	DWORD PTR k$[rsp], 4
	jle	SHORT $LN151@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN151@stbi__crea:
; Line 4767
	cmp	DWORD PTR k$[rsp], 5
	jle	SHORT $LN152@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN152@stbi__crea:
; Line 4768
	cmp	DWORD PTR k$[rsp], 6
	jle	SHORT $LN153@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN153@stbi__crea:
$LN146@stbi__crea:
$LN142@stbi__crea:
$LN139@stbi__crea:
; Line 4770
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	$LN154@stbi__crea
; Line 4773
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4774
	cmp	DWORD PTR img_n$[rsp], 1
	jne	SHORT $LN155@stbi__crea
; Line 4775
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN91@stbi__crea
$LN89@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN91@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	SHORT $LN90@stbi__crea
; Line 4776
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4777
	movsxd	rax, DWORD PTR q$4[rsp]
	mov	ecx, DWORD PTR q$4[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4778
	jmp	SHORT $LN89@stbi__crea
$LN90@stbi__crea:
; Line 4779
	jmp	$LN156@stbi__crea
$LN155@stbi__crea:
; Line 4780
	cmp	DWORD PTR img_n$[rsp], 3
	je	SHORT $LN165@stbi__crea
	mov	r8d, 4780				; 000012acH
	lea	rdx, OFFSET FLAT:$SG75040
	lea	rcx, OFFSET FLAT:$SG75041
	call	_wassert
	xor	eax, eax
$LN165@stbi__crea:
; Line 4781
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN94@stbi__crea
$LN92@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN94@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	$LN93@stbi__crea
; Line 4782
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4783
	imul	eax, DWORD PTR q$4[rsp], 3
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4784
	imul	eax, DWORD PTR q$4[rsp], 3
	inc	eax
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4785
	imul	eax, DWORD PTR q$4[rsp], 3
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4786
	jmp	$LN92@stbi__crea
$LN93@stbi__crea:
$LN156@stbi__crea:
$LN154@stbi__crea:
; Line 4789
	jmp	$LN77@stbi__crea
$LN78@stbi__crea:
; Line 4790
	jmp	$LN137@stbi__crea
$LN136@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 16
	jne	$LN157@stbi__crea
; Line 4795
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$9[rsp], rax
; Line 4796
	mov	rax, QWORD PTR cur$9[rsp]
	mov	QWORD PTR cur16$10[rsp], rax
; Line 4798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN97@stbi__crea
$LN95@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR cur16$10[rsp]
	add	rax, 2
	mov	QWORD PTR cur16$10[rsp], rax
	mov	rax, QWORD PTR cur$9[rsp]
	add	rax, 2
	mov	QWORD PTR cur$9[rsp], rax
$LN97@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN96@stbi__crea
; Line 4799
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cur$9[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR cur$9[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	or	eax, ecx
	mov	rcx, QWORD PTR cur16$10[rsp]
	mov	WORD PTR [rcx], ax
; Line 4800
	jmp	$LN95@stbi__crea
$LN96@stbi__crea:
$LN157@stbi__crea:
$LN137@stbi__crea:
; Line 4803
	mov	eax, 1
$LN1@stbi__crea:
; Line 4804
	add	rsp, 216				; 000000d8H
	ret	0
	npad	2
$LN168@stbi__crea:
	DD	$LN105@stbi__crea
	DD	$LN106@stbi__crea
	DD	$LN107@stbi__crea
	DD	$LN108@stbi__crea
	DD	$LN109@stbi__crea
	DD	$LN110@stbi__crea
	DD	$LN111@stbi__crea
$LN167@stbi__crea:
	DD	$LN121@stbi__crea
	DD	$LN122@stbi__crea
	DD	$LN123@stbi__crea
	DD	$LN124@stbi__crea
	DD	$LN125@stbi__crea
	DD	$LN126@stbi__crea
	DD	$LN127@stbi__crea
$LN166@stbi__crea:
	DD	$LN128@stbi__crea
	DD	$LN129@stbi__crea
	DD	$LN130@stbi__crea
	DD	$LN131@stbi__crea
	DD	$LN132@stbi__crea
	DD	$LN133@stbi__crea
	DD	$LN134@stbi__crea
stbi__create_png_image_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
stbi__paeth PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4581
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4582
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
; Line 4583
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
; Line 4584
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
; Line 4585
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 4586
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR a$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN2@stbi__paet:
; Line 4587
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbi__paet
	mov	eax, DWORD PTR b$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN3@stbi__paet:
; Line 4588
	mov	eax, DWORD PTR c$[rsp]
$LN1@stbi__paet:
; Line 4589
	add	rsp, 56					; 00000038H
	ret	0
stbi__paeth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
stbi__check_png_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4544
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4547
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__chec
$LN2@stbi__chec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__chec:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stbi__chec
; Line 4548
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?png_sig@?1??stbi__check_png_header@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__chec
	lea	rcx, OFFSET FLAT:$SG74781
	call	stbi__err
	jmp	SHORT $LN1@stbi__chec
$LN5@stbi__chec:
	jmp	SHORT $LN2@stbi__chec
$LN3@stbi__chec:
; Line 4549
	mov	eax, 1
$LN1@stbi__chec:
; Line 4550
	add	rsp, 56					; 00000038H
	ret	0
stbi__check_png_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
s$ = 64
stbi__get_chunk_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4536
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4538
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR c$[rsp], eax
; Line 4539
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR c$[rsp+4], eax
; Line 4540
	mov	rax, QWORD PTR c$[rsp]
; Line 4541
	add	rsp, 56					; 00000038H
	ret	0
stbi__get_chunk_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
obuf$ = 56
olen$ = 64
exp$ = 72
parse_header$ = 80
stbi__do_zlib PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4433
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4435
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4436
	movsxd	rax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4437
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR exp$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 4439
	mov	edx, DWORD PTR parse_header$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_zlib
; Line 4440
	add	rsp, 40					; 00000028H
	ret	0
stbi__do_zlib ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
final$ = 36
a$ = 64
parse_header$ = 72
stbi__parse_zlib PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4405
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4407
	cmp	DWORD PTR parse_header$[rsp], 0
	je	SHORT $LN5@stbi__pars
; Line 4408
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_zlib_header
	test	eax, eax
	jne	SHORT $LN6@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN6@stbi__pars:
$LN5@stbi__pars:
; Line 4409
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 4410
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN4@stbi__pars:
; Line 4412
	mov	edx, 1
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR final$[rsp], eax
; Line 4413
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR type$[rsp], eax
; Line 4414
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN7@stbi__pars
; Line 4415
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_uncompressed_block
	test	eax, eax
	jne	SHORT $LN9@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4416
	jmp	$LN8@stbi__pars
$LN7@stbi__pars:
	cmp	DWORD PTR type$[rsp], 3
	jne	SHORT $LN10@stbi__pars
; Line 4417
	xor	eax, eax
	jmp	$LN1@stbi__pars
; Line 4418
	jmp	SHORT $LN11@stbi__pars
$LN10@stbi__pars:
; Line 4419
	cmp	DWORD PTR type$[rsp], 1
	jne	SHORT $LN12@stbi__pars
; Line 4421
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, 288				; 00000120H
	lea	rdx, OFFSET FLAT:stbi__zdefault_length
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN14@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN14@stbi__pars:
; Line 4422
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:stbi__zdefault_distance
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN15@stbi__pars:
; Line 4423
	jmp	SHORT $LN13@stbi__pars
$LN12@stbi__pars:
; Line 4424
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__compute_huffman_codes
	test	eax, eax
	jne	SHORT $LN16@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN16@stbi__pars:
$LN13@stbi__pars:
; Line 4426
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_huffman_block
	test	eax, eax
	jne	SHORT $LN17@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN17@stbi__pars:
$LN11@stbi__pars:
$LN8@stbi__pars:
; Line 4428
	cmp	DWORD PTR final$[rsp], 0
	je	$LN4@stbi__pars
; Line 4429
	mov	eax, 1
$LN1@stbi__pars:
; Line 4430
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_zlib ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmf$ = 32
flg$ = 36
cm$ = 40
a$ = 64
stbi__parse_zlib_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4363
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	DWORD PTR cmf$[rsp], eax
; Line 4364
	mov	eax, DWORD PTR cmf$[rsp]
	and	eax, 15
	mov	DWORD PTR cm$[rsp], eax
; Line 4366
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	DWORD PTR flg$[rsp], eax
; Line 4367
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN2@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74607
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN2@stbi__pars:
; Line 4368
	imul	eax, DWORD PTR cmf$[rsp], 256		; 00000100H
	add	eax, DWORD PTR flg$[rsp]
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74609
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN3@stbi__pars:
; Line 4369
	mov	eax, DWORD PTR flg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74611
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN4@stbi__pars:
; Line 4370
	cmp	DWORD PTR cm$[rsp], 8
	je	SHORT $LN5@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74613
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN5@stbi__pars:
; Line 4372
	mov	eax, 1
$LN1@stbi__pars:
; Line 4373
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_zlib_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
len$ = 36
header$ = 40
nlen$ = 44
a$ = 64
stbi__parse_uncompressed_block PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4333
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4336
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN6@stbi__pars
; Line 4337
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
$LN6@stbi__pars:
; Line 4339
	mov	DWORD PTR k$[rsp], 0
$LN2@stbi__pars:
; Line 4340
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN3@stbi__pars
; Line 4341
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4342
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4343
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4344
	jmp	SHORT $LN2@stbi__pars
$LN3@stbi__pars:
; Line 4345
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jge	SHORT $LN7@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74592
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN7@stbi__pars:
$LN4@stbi__pars:
; Line 4347
	cmp	DWORD PTR k$[rsp], 4
	jge	SHORT $LN5@stbi__pars
; Line 4348
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbi__pars
$LN5@stbi__pars:
; Line 4349
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 4350
	mov	eax, 1
	imul	rax, rax, 3
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR nlen$[rsp], eax
; Line 4351
	mov	eax, DWORD PTR len$[rsp]
	xor	eax, 65535				; 0000ffffH
	cmp	DWORD PTR nlen$[rsp], eax
	je	SHORT $LN8@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74594
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN8@stbi__pars:
; Line 4352
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jbe	SHORT $LN9@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74596
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4353
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN10@stbi__pars
; Line 4354
	mov	r8d, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN11@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN11@stbi__pars:
$LN10@stbi__pars:
; Line 4355
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memcpy
; Line 4356
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 4357
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4358
	mov	eax, 1
$LN1@stbi__pars:
; Line 4359
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_uncompressed_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
fill$2 = 36
n$ = 40
i$ = 44
ntot$ = 48
hlit$ = 52
hdist$ = 56
hclen$ = 60
s$3 = 64
tv175 = 72
z_codelength$ = 80
codelength_sizes$ = 2112
lencodes$ = 2144
__$ArrayPad$ = 2608
a$ = 2640
stbi__compute_huffman_codes PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4290
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 257				; 00000101H
	mov	DWORD PTR hlit$[rsp], eax
; Line 4291
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	inc	eax
	mov	DWORD PTR hdist$[rsp], eax
; Line 4292
	mov	edx, 4
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 4
	mov	DWORD PTR hclen$[rsp], eax
; Line 4293
	mov	eax, DWORD PTR hdist$[rsp]
	mov	ecx, DWORD PTR hlit$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ntot$[rsp], eax
; Line 4295
	mov	r8d, 19
	xor	edx, edx
	lea	rcx, QWORD PTR codelength_sizes$[rsp]
	call	memset
; Line 4296
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR hclen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__comp
; Line 4297
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR s$3[rsp], eax
; Line 4298
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?length_dezigzag@?1??stbi__compute_huffman_codes@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR s$3[rsp]
	mov	BYTE PTR codelength_sizes$[rsp+rax], cl
; Line 4299
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4300
	mov	r8d, 19
	lea	rdx, QWORD PTR codelength_sizes$[rsp]
	lea	rcx, QWORD PTR z_codelength$[rsp]
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN7@stbi__comp
	xor	eax, eax
	jmp	$LN1@stbi__comp
$LN7@stbi__comp:
; Line 4302
	mov	DWORD PTR n$[rsp], 0
$LN5@stbi__comp:
; Line 4303
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbi__comp
; Line 4304
	lea	rdx, QWORD PTR z_codelength$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR c$1[rsp], eax
; Line 4305
	cmp	DWORD PTR c$1[rsp], 0
	jl	SHORT $LN9@stbi__comp
	cmp	DWORD PTR c$1[rsp], 19
	jl	SHORT $LN8@stbi__comp
$LN9@stbi__comp:
	lea	rcx, OFFSET FLAT:$SG74559
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN8@stbi__comp:
; Line 4306
	cmp	DWORD PTR c$1[rsp], 16
	jge	SHORT $LN10@stbi__comp
; Line 4307
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR lencodes$[rsp+rax], cl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
	jmp	$LN11@stbi__comp
$LN10@stbi__comp:
; Line 4309
	mov	BYTE PTR fill$2[rsp], 0
; Line 4310
	cmp	DWORD PTR c$1[rsp], 16
	jne	SHORT $LN12@stbi__comp
; Line 4311
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
; Line 4312
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbi__comp
	lea	rcx, OFFSET FLAT:$SG74565
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN14@stbi__comp:
; Line 4313
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	cdqe
	movzx	eax, BYTE PTR lencodes$[rsp+rax]
	mov	BYTE PTR fill$2[rsp], al
	jmp	SHORT $LN13@stbi__comp
$LN12@stbi__comp:
; Line 4314
	cmp	DWORD PTR c$1[rsp], 17
	jne	SHORT $LN15@stbi__comp
; Line 4315
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN16@stbi__comp
$LN15@stbi__comp:
; Line 4316
	cmp	DWORD PTR c$1[rsp], 18
	jne	SHORT $LN17@stbi__comp
; Line 4317
	mov	edx, 7
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 11
	mov	DWORD PTR c$1[rsp], eax
; Line 4318
	jmp	SHORT $LN18@stbi__comp
$LN17@stbi__comp:
; Line 4319
	lea	rcx, OFFSET FLAT:$SG74570
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN18@stbi__comp:
$LN16@stbi__comp:
$LN13@stbi__comp:
; Line 4321
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR ntot$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR c$1[rsp]
	jge	SHORT $LN19@stbi__comp
	lea	rcx, OFFSET FLAT:$SG74572
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN19@stbi__comp:
; Line 4322
	movsxd	rax, DWORD PTR c$1[rsp]
	movzx	ecx, BYTE PTR fill$2[rsp]
	movsxd	rdx, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp+rdx]
	mov	QWORD PTR tv175[rsp], rdx
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	memset
; Line 4323
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__comp:
; Line 4325
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
; Line 4326
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN20@stbi__comp
	lea	rcx, OFFSET FLAT:$SG74574
	call	stbi__err
	jmp	SHORT $LN1@stbi__comp
$LN20@stbi__comp:
; Line 4327
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, DWORD PTR hlit$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp]
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN21@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN21@stbi__comp:
; Line 4328
	movsxd	rax, DWORD PTR hlit$[rsp]
	lea	rax, QWORD PTR lencodes$[rsp+rax]
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, 2072				; 00000818H
	mov	r8d, DWORD PTR hdist$[rsp]
	mov	rdx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN22@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN22@stbi__comp:
; Line 4329
	mov	eax, 1
$LN1@stbi__comp:
; Line 4330
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
stbi__compute_huffman_codes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 32
z$2 = 36
len$3 = 40
dist$4 = 44
zout$ = 48
p$5 = 56
a$ = 80
stbi__parse_huffman_block PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4241
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4242
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN2@stbi__pars:
; Line 4244
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4245
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jge	SHORT $LN11@stbi__pars
; Line 4246
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN13@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74515
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN13@stbi__pars:
; Line 4247
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR zout$[rsp], rax
	jb	SHORT $LN14@stbi__pars
; Line 4248
	mov	r8d, 1
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN15@stbi__pars:
; Line 4249
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN14@stbi__pars:
; Line 4251
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
; Line 4252
	jmp	$LN12@stbi__pars
$LN11@stbi__pars:
; Line 4255
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jne	SHORT $LN16@stbi__pars
; Line 4256
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4257
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN16@stbi__pars:
; Line 4259
	mov	eax, DWORD PTR z$2[rsp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR z$2[rsp], eax
; Line 4260
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_base
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR len$3[rsp], eax
; Line 4261
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_extra
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN17@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_extra
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	ecx, DWORD PTR len$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
$LN17@stbi__pars:
; Line 4262
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4263
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN18@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74521
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN18@stbi__pars:
; Line 4264
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_base
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR dist$4[rsp], eax
; Line 4265
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_extra
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN19@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_extra
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	ecx, DWORD PTR dist$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dist$4[rsp], eax
$LN19@stbi__pars:
; Line 4266
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR dist$4[rsp]
	cmp	rax, rcx
	jge	SHORT $LN20@stbi__pars
	lea	rcx, OFFSET FLAT:$SG74524
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN20@stbi__pars:
; Line 4267
	movsxd	rax, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN21@stbi__pars
; Line 4268
	mov	r8d, DWORD PTR len$3[rsp]
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN22@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
; Line 4269
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN21@stbi__pars:
; Line 4271
	movsxd	rax, DWORD PTR dist$4[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rsp], rax
; Line 4272
	cmp	DWORD PTR dist$4[rsp], 1
	jne	SHORT $LN23@stbi__pars
; Line 4273
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR v$1[rsp], al
; Line 4274
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN25@stbi__pars
$LN7@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR v$1[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN7@stbi__pars
$LN25@stbi__pars:
; Line 4275
	jmp	SHORT $LN24@stbi__pars
$LN23@stbi__pars:
; Line 4276
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN26@stbi__pars
$LN10@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR p$5[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	rax, QWORD PTR p$5[rsp]
	inc	rax
	mov	QWORD PTR p$5[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN10@stbi__pars
$LN26@stbi__pars:
$LN24@stbi__pars:
$LN12@stbi__pars:
; Line 4279
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 4280
	add	rsp, 72					; 00000048H
	ret	0
stbi__parse_huffman_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
limit$ = 48
cur$ = 52
q$ = 56
old_limit$ = 64
tv90 = 72
$T1 = 80
$T2 = 112
z$ = 176
zout$ = 184
n$ = 192
stbi__zexpand PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4205
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 4208
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4209
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG74478
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN4@stbi__zexp:
; Line 4210
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	DWORD PTR cur$[rsp], eax
; Line 4211
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	mov	DWORD PTR old_limit$[rsp], eax
	mov	eax, DWORD PTR old_limit$[rsp]
	mov	DWORD PTR limit$[rsp], eax
; Line 4212
	mov	eax, -1					; ffffffffH
	sub	eax, DWORD PTR cur$[rsp]
	cmp	eax, DWORD PTR n$[rsp]
	jae	SHORT $LN5@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG74480
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN5@stbi__zexp:
$LN2@stbi__zexp:
; Line 4213
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR cur$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR limit$[rsp]
	jbe	SHORT $LN3@stbi__zexp
; Line 4214
	cmp	DWORD PTR limit$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG74482
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN6@stbi__zexp:
; Line 4215
	mov	eax, DWORD PTR limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
; Line 4216
	jmp	SHORT $LN2@stbi__zexp
$LN3@stbi__zexp:
; Line 4217
	mov	eax, DWORD PTR limit$[rsp]
	mov	QWORD PTR tv90[rsp], rax
	lea	rcx, OFFSET FLAT:$SG74483
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 4217				; 00001079H
	lea	r8, OFFSET FLAT:$SG74484
	mov	edx, 76					; 0000004cH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+32]
	mov	rax, QWORD PTR tv90[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR q$[rsp], rax
; Line 4219
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG74486
	call	stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN7@stbi__zexp:
; Line 4220
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4221
	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4222
	mov	eax, DWORD PTR limit$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4223
	mov	eax, 1
$LN1@stbi__zexp:
; Line 4224
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__zexpand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
s$ = 36
tv132 = 40
a$ = 64
z$ = 72
stbi__zhuffman_decode PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4186
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4188
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 16
	jge	SHORT $LN2@stbi__zhuf
; Line 4189
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zhuf
; Line 4190
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4192
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__fill_bits
$LN2@stbi__zhuf:
; Line 4194
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 511				; 000001ffH
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR b$[rsp], eax
; Line 4195
	cmp	DWORD PTR b$[rsp], 0
	je	SHORT $LN4@stbi__zhuf
; Line 4196
	mov	eax, DWORD PTR b$[rsp]
	sar	eax, 9
	mov	DWORD PTR s$[rsp], eax
; Line 4197
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv132[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv132[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4198
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4199
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 511				; 000001ffH
	jmp	SHORT $LN1@stbi__zhuf
$LN4@stbi__zhuf:
; Line 4201
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode_slowpath
$LN1@stbi__zhuf:
; Line 4202
	add	rsp, 56					; 00000038H
	ret	0
stbi__zhuffman_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
b$ = 36
k$ = 40
tv158 = 48
a$ = 80
z$ = 88
stbi__zhuffman_decode_slowpath PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4171
	mov	edx, 16
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	stbi__bit_reverse
	mov	DWORD PTR k$[rsp], eax
; Line 4172
	mov	DWORD PTR s$[rsp], 10
	jmp	SHORT $LN4@stbi__zhuf
$LN2@stbi__zhuf:
	mov	eax, DWORD PTR s$[rsp]
	inc	eax
	mov	DWORD PTR s$[rsp], eax
$LN4@stbi__zhuf:
; Line 4173
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1056]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN5@stbi__zhuf
; Line 4174
	jmp	SHORT $LN3@stbi__zhuf
$LN5@stbi__zhuf:
	jmp	SHORT $LN2@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4175
	cmp	DWORD PTR s$[rsp], 16
	jl	SHORT $LN6@stbi__zhuf
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN6@stbi__zhuf:
; Line 4177
	mov	eax, 16
	sub	eax, DWORD PTR s$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR k$[rsp]
	sar	eax, cl
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 4178
	cmp	DWORD PTR b$[rsp], 288			; 00000120H
	jl	SHORT $LN7@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN7@stbi__zhuf:
; Line 4179
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1156]
	cmp	eax, DWORD PTR s$[rsp]
	je	SHORT $LN8@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN8@stbi__zhuf:
; Line 4180
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv158[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv158[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4181
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4182
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+1444]
$LN1@stbi__zhuf:
; Line 4183
	add	rsp, 72					; 00000048H
	ret	0
stbi__zhuffman_decode_slowpath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
k$ = 36
tv89 = 40
z$ = 64
n$ = 72
stbi__zreceive PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4157
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4159
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jge	SHORT $LN2@stbi__zrec
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__fill_bits
$LN2@stbi__zrec:
; Line 4160
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4161
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR tv89[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv89[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4162
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4163
	mov	eax, DWORD PTR k$[rsp]
; Line 4164
	add	rsp, 56					; 00000038H
	ret	0
stbi__zreceive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 32
z$ = 64
stbi__fill_bits PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__fill:
; Line 4147
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, 1
	mov	DWORD PTR tv91[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv91[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+20], eax
	jb	SHORT $LN5@stbi__fill
; Line 4148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 4149
	jmp	SHORT $LN1@stbi__fill
$LN5@stbi__fill:
; Line 4151
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4152
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, 8
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4153
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+16], 24
	jle	SHORT $LN4@stbi__fill
$LN1@stbi__fill:
; Line 4154
	add	rsp, 56					; 00000038H
	ret	0
stbi__fill_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
z$ = 64
stbi__zget8 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4140
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4141
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zget
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@stbi__zget
$LN3@stbi__zget:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx], rax
$LN4@stbi__zget:
	movzx	eax, BYTE PTR tv73[rsp]
; Line 4142
	add	rsp, 56					; 00000038H
	ret	0
stbi__zget8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
z$ = 32
stbi__zeof PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4135
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4136
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN3@stbi__zeof
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__zeof
$LN3@stbi__zeof:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__zeof:
	mov	eax, DWORD PTR tv67[rsp]
; Line 4137
	add	rsp, 24
	ret	0
stbi__zeof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$1 = 36
code$ = 40
j$2 = 44
fastv$3 = 48
k$ = 52
c$4 = 56
tv288 = 60
sizes$ = 64
next_code$ = 144
__$ArrayPad$ = 208
z$ = 240
sizelist$ = 248
num$ = 256
stbi__zbuild_huffman PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4068
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4069
	mov	DWORD PTR k$[rsp], 0
; Line 4073
	mov	r8d, 68					; 00000044H
	xor	edx, edx
	lea	rcx, QWORD PTR sizes$[rsp]
	call	memset
; Line 4074
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 4075
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__zbui
$LN2@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__zbui
; Line 4076
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR sizelist$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR sizes$[rsp+rcx*4], eax
	jmp	SHORT $LN2@stbi__zbui
$LN3@stbi__zbui:
; Line 4077
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR sizes$[rsp+rax], 0
; Line 4078
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN7@stbi__zbui
$LN5@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@stbi__zbui
; Line 4079
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	DWORD PTR sizes$[rsp+rax*4], ecx
	jle	SHORT $LN16@stbi__zbui
; Line 4080
	lea	rcx, OFFSET FLAT:$SG74387
	call	stbi__err
	jmp	$LN1@stbi__zbui
$LN16@stbi__zbui:
	jmp	SHORT $LN5@stbi__zbui
$LN6@stbi__zbui:
; Line 4081
	mov	DWORD PTR code$[rsp], 0
; Line 4082
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN10@stbi__zbui
$LN8@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN9@stbi__zbui
; Line 4083
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR code$[rsp]
	mov	DWORD PTR next_code$[rsp+rax*4], ecx
; Line 4084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+1024], dx
; Line 4085
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR k$[rsp]
	mov	WORD PTR [rcx+rax*2+1124], dx
; Line 4086
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR code$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$[rsp], eax
; Line 4087
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR sizes$[rsp+rax*4], 0
	je	SHORT $LN17@stbi__zbui
; Line 4088
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN18@stbi__zbui
	lea	rcx, OFFSET FLAT:$SG74390
	call	stbi__err
	jmp	$LN1@stbi__zbui
$LN18@stbi__zbui:
$LN17@stbi__zbui:
; Line 4089
	mov	eax, 16
	sub	eax, DWORD PTR i$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1056], eax
; Line 4090
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 4091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4092
	jmp	$LN8@stbi__zbui
$LN9@stbi__zbui:
; Line 4093
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+rax+1056], 65536		; 00010000H
; Line 4094
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__zbui
$LN11@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stbi__zbui
; Line 4095
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR s$1[rsp], eax
; Line 4096
	cmp	DWORD PTR s$1[rsp], 0
	je	$LN19@stbi__zbui
; Line 4097
	movsxd	rax, DWORD PTR s$1[rsp]
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR c$4[rsp], eax
; Line 4098
	mov	eax, DWORD PTR s$1[rsp]
	shl	eax, 9
	or	eax, DWORD PTR i$[rsp]
	mov	WORD PTR fastv$3[rsp], ax
; Line 4099
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR s$1[rsp]
	mov	BYTE PTR [rcx+rax+1156], dl
; Line 4100
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR i$[rsp]
	mov	WORD PTR [rcx+rax*2+1444], dx
; Line 4101
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN20@stbi__zbui
; Line 4102
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	edx, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR next_code$[rsp+rax*4]
	call	stbi__bit_reverse
	mov	DWORD PTR j$2[rsp], eax
$LN14@stbi__zbui:
; Line 4103
	cmp	DWORD PTR j$2[rsp], 512			; 00000200H
	jge	SHORT $LN15@stbi__zbui
; Line 4104
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR fastv$3[rsp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 4105
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv288[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv288[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR j$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rsp], eax
; Line 4106
	jmp	SHORT $LN14@stbi__zbui
$LN15@stbi__zbui:
$LN20@stbi__zbui:
; Line 4108
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	DWORD PTR next_code$[rsp+rcx*4], eax
$LN19@stbi__zbui:
; Line 4110
	jmp	$LN11@stbi__zbui
$LN12@stbi__zbui:
; Line 4111
	mov	eax, 1
$LN1@stbi__zbui:
; Line 4112
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
stbi__zbuild_huffman ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
bits$ = 56
stbi__bit_reverse PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4060
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4061
	cmp	DWORD PTR bits$[rsp], 16
	jle	SHORT $LN3@stbi__bit_
	mov	r8d, 4061				; 00000fddH
	lea	rdx, OFFSET FLAT:$SG74348
	lea	rcx, OFFSET FLAT:$SG74349
	call	_wassert
	xor	eax, eax
$LN3@stbi__bit_:
; Line 4064
	mov	ecx, DWORD PTR v$[rsp]
	call	stbi__bitreverse16
	mov	ecx, 16
	sub	ecx, DWORD PTR bits$[rsp]
	sar	eax, cl
; Line 4065
	add	rsp, 40					; 00000028H
	ret	0
stbi__bit_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
stbi__bitreverse16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4051
	mov	DWORD PTR [rsp+8], ecx
; Line 4052
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 43690				; 0000aaaaH
	sar	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 21845				; 00005555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4053
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 52428				; 0000ccccH
	sar	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 13107				; 00003333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4054
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 61680				; 0000f0f0H
	sar	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 3855				; 00000f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4055
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4056
	mov	eax, DWORD PTR n$[rsp]
; Line 4057
	ret	0
stbi__bitreverse16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
j$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__jpeg_info_raw PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4002
	mov	edx, 2
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN2@stbi__jpeg
; Line 4003
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__rewind
; Line 4004
	xor	eax, eax
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4006
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__jpeg:
; Line 4007
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__jpeg:
; Line 4008
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN7@stbi__jpeg
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN8@stbi__jpeg
$LN7@stbi__jpeg:
	mov	DWORD PTR tv80[rsp], 1
$LN8@stbi__jpeg:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__jpeg:
; Line 4009
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 4010
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$2 = 56
k$3 = 64
m$4 = 68
m$5 = 69
m$6 = 70
n$ = 72
r$7 = 80
r$8 = 88
b$9 = 96
g$10 = 97
r$11 = 98
j$12 = 100
decode_n$ = 104
is_rgb$ = 108
tv252 = 112
y_bot$13 = 116
tv280 = 120
tv288 = 124
tv694 = 128
tv79 = 132
tv81 = 136
tv91 = 140
y$14 = 144
tv516 = 152
tv545 = 156
tv626 = 160
tv656 = 164
output$15 = 168
tv71 = 176
tv159 = 184
tv232 = 192
tv265 = 200
tv270 = 208
y$16 = 216
tv164 = 224
tv172 = 232
coutput$17 = 240
res_comp$18 = 272
__$ArrayPad$ = 464
z$ = 496
out_x$ = 504
out_y$ = 512
comp$ = 520
req_comp$ = 528
load_jpeg_image PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3812
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3814
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rax+8], 0
; Line 3817
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN42@load_jpeg_
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN41@load_jpeg_
$LN42@load_jpeg_:
	lea	rcx, OFFSET FLAT:$SG74218
	call	stbi__err
	test	eax, eax
	je	SHORT $LN83@load_jpeg_
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN84@load_jpeg_
$LN83@load_jpeg_:
	mov	QWORD PTR tv71[rsp], 0
$LN84@load_jpeg_:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	$LN1@load_jpeg_
$LN41@load_jpeg_:
; Line 3820
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__decode_jpeg_image
	test	eax, eax
	jne	SHORT $LN43@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN43@load_jpeg_:
; Line 3823
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN87@load_jpeg_
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN88@load_jpeg_
$LN87@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN85@load_jpeg_
	mov	DWORD PTR tv79[rsp], 3
	jmp	SHORT $LN86@load_jpeg_
$LN85@load_jpeg_:
	mov	DWORD PTR tv79[rsp], 1
$LN86@load_jpeg_:
	mov	eax, DWORD PTR tv79[rsp]
	mov	DWORD PTR tv81[rsp], eax
$LN88@load_jpeg_:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 3825
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN91@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18512], 3
	je	SHORT $LN90@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	SHORT $LN89@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18504], 0
	jne	SHORT $LN91@load_jpeg_
$LN90@load_jpeg_:
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN92@load_jpeg_
$LN91@load_jpeg_:
$LN89@load_jpeg_:
	mov	DWORD PTR tv91[rsp], 0
$LN92@load_jpeg_:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR is_rgb$[rsp], eax
; Line 3827
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR n$[rsp], 3
	jge	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR is_rgb$[rsp], 0
	jne	SHORT $LN44@load_jpeg_
; Line 3828
	mov	DWORD PTR decode_n$[rsp], 1
	jmp	SHORT $LN45@load_jpeg_
$LN44@load_jpeg_:
; Line 3830
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR decode_n$[rsp], eax
$LN45@load_jpeg_:
; Line 3834
	cmp	DWORD PTR decode_n$[rsp], 0
	jg	SHORT $LN46@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN46@load_jpeg_:
; Line 3841
	mov	QWORD PTR coutput$17[rsp], 0
	mov	QWORD PTR coutput$17[rsp+8], 0
	mov	QWORD PTR coutput$17[rsp+16], 0
	mov	QWORD PTR coutput$17[rsp+24], 0
; Line 3845
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN4@load_jpeg_
$LN2@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN4@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN3@load_jpeg_
; Line 3846
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$7[rsp], rax
; Line 3850
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	add	eax, 3
	mov	eax, eax
	mov	ecx, eax
	call	stbi__malloc
	movsxd	rcx, DWORD PTR k$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18152], rax
; Line 3851
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	jne	SHORT $LN47@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG74224
	call	stbi__err
	test	eax, eax
	je	SHORT $LN93@load_jpeg_
	mov	QWORD PTR tv159[rsp], 0
	jmp	SHORT $LN94@load_jpeg_
$LN93@load_jpeg_:
	mov	QWORD PTR tv159[rsp], 0
$LN94@load_jpeg_:
	mov	rax, QWORD PTR tv159[rsp]
	jmp	$LN1@load_jpeg_
$LN47@load_jpeg_:
; Line 3853
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv164[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18056]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv164[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 3854
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv172[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18060]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv172[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 3855
	mov	rax, QWORD PTR r$7[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 3856
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR r$7[rsp]
	div	DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 3857
	mov	rax, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 3858
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18128]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3860
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:resample_row_1
	mov	QWORD PTR [rax], rcx
	jmp	$LN49@load_jpeg_
$LN48@load_jpeg_:
; Line 3861
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_v_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN51@load_jpeg_
$LN50@load_jpeg_:
; Line 3862
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_h_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN53@load_jpeg_
$LN52@load_jpeg_:
; Line 3863
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+18560]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN55@load_jpeg_
$LN54@load_jpeg_:
; Line 3864
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_generic
	mov	QWORD PTR [rax], rcx
$LN55@load_jpeg_:
$LN53@load_jpeg_:
$LN51@load_jpeg_:
$LN49@load_jpeg_:
; Line 3865
	jmp	$LN2@load_jpeg_
$LN3@load_jpeg_:
; Line 3868
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	r9d, 1
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, DWORD PTR n$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR output$15[rsp], rax
; Line 3869
	cmp	QWORD PTR output$15[rsp], 0
	jne	SHORT $LN56@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG74234
	call	stbi__err
	test	eax, eax
	je	SHORT $LN95@load_jpeg_
	mov	QWORD PTR tv232[rsp], 0
	jmp	SHORT $LN96@load_jpeg_
$LN95@load_jpeg_:
	mov	QWORD PTR tv232[rsp], 0
$LN96@load_jpeg_:
	mov	rax, QWORD PTR tv232[rsp]
	jmp	$LN1@load_jpeg_
$LN56@load_jpeg_:
; Line 3872
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN7@load_jpeg_
$LN5@load_jpeg_:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN7@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$12[rsp], eax
	jae	$LN6@load_jpeg_
; Line 3873
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR j$12[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR output$15[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3874
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN10@load_jpeg_
$LN8@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN10@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN9@load_jpeg_
; Line 3875
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$8[rsp], rax
; Line 3876
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$8[rsp]
	cmp	DWORD PTR [rcx+36], eax
	jl	SHORT $LN97@load_jpeg_
	mov	DWORD PTR tv252[rsp], 1
	jmp	SHORT $LN98@load_jpeg_
$LN97@load_jpeg_:
	mov	DWORD PTR tv252[rsp], 0
$LN98@load_jpeg_:
	mov	eax, DWORD PTR tv252[rsp]
	mov	DWORD PTR y_bot$13[rsp], eax
; Line 3877
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN99@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv265[rsp], rax
	jmp	SHORT $LN100@load_jpeg_
$LN99@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv265[rsp], rax
$LN100@load_jpeg_:
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN101@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv270[rsp], rax
	jmp	SHORT $LN102@load_jpeg_
$LN101@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv270[rsp], rax
$LN102@load_jpeg_:
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR r$8[rsp]
	mov	r9d, DWORD PTR [rcx+32]
	mov	r8, QWORD PTR tv265[rsp]
	mov	rdx, QWORD PTR tv270[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	mov	rax, QWORD PTR r$8[rsp]
	call	QWORD PTR [rax]
	movsxd	rcx, DWORD PTR k$3[rsp]
	mov	QWORD PTR coutput$17[rsp+rcx*8], rax
; Line 3881
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	DWORD PTR tv280[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv280[rsp]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR tv280[rsp], eax
	jl	$LN57@load_jpeg_
; Line 3882
	mov	rax, QWORD PTR r$8[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 3883
	mov	rax, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3884
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	DWORD PTR tv288[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv288[rsp]
	mov	DWORD PTR [rax+40], ecx
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	cmp	DWORD PTR tv288[rsp], eax
	jge	SHORT $LN58@load_jpeg_
; Line 3885
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18116]
	mov	rcx, QWORD PTR r$8[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN58@load_jpeg_:
$LN57@load_jpeg_:
; Line 3887
	jmp	$LN8@load_jpeg_
$LN9@load_jpeg_:
; Line 3888
	cmp	DWORD PTR n$[rsp], 3
	jl	$LN59@load_jpeg_
; Line 3889
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$14[rsp], rax
; Line 3890
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	$LN61@load_jpeg_
; Line 3891
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN63@load_jpeg_
; Line 3892
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@load_jpeg_
$LN11@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN12@load_jpeg_
; Line 3893
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3894
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3895
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3896
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3897
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3898
	jmp	$LN11@load_jpeg_
$LN12@load_jpeg_:
; Line 3899
	jmp	SHORT $LN64@load_jpeg_
$LN63@load_jpeg_:
; Line 3900
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
$LN64@load_jpeg_:
; Line 3901
	jmp	$LN62@load_jpeg_
$LN61@load_jpeg_:
; Line 3902
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN65@load_jpeg_
; Line 3903
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN67@load_jpeg_
; Line 3904
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@load_jpeg_
$LN14@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN15@load_jpeg_
; Line 3905
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$4[rsp], al
; Line 3906
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3907
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3909
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3910
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3911
	jmp	$LN14@load_jpeg_
$LN15@load_jpeg_:
; Line 3912
	jmp	$LN68@load_jpeg_
$LN67@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN69@load_jpeg_
; Line 3913
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
; Line 3914
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN19@load_jpeg_
$LN17@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN18@load_jpeg_
; Line 3915
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$5[rsp], al
; Line 3916
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3917
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3918
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3919
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3920
	jmp	$LN17@load_jpeg_
$LN18@load_jpeg_:
; Line 3921
	jmp	SHORT $LN70@load_jpeg_
$LN69@load_jpeg_:
; Line 3922
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
$LN70@load_jpeg_:
$LN68@load_jpeg_:
; Line 3924
	jmp	$LN66@load_jpeg_
$LN65@load_jpeg_:
; Line 3925
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN22@load_jpeg_
$LN20@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN22@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN21@load_jpeg_
; Line 3926
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3927
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3928
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3929
	jmp	$LN20@load_jpeg_
$LN21@load_jpeg_:
$LN66@load_jpeg_:
$LN62@load_jpeg_:
; Line 3930
	jmp	$LN60@load_jpeg_
$LN59@load_jpeg_:
; Line 3931
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN71@load_jpeg_
; Line 3932
	cmp	DWORD PTR n$[rsp], 1
	jne	$LN73@load_jpeg_
; Line 3933
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN25@load_jpeg_
$LN23@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN25@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN24@load_jpeg_
; Line 3934
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv516[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv516[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	$LN23@load_jpeg_
$LN24@load_jpeg_:
	jmp	$LN74@load_jpeg_
$LN73@load_jpeg_:
; Line 3936
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN28@load_jpeg_
$LN26@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR out$2[rsp]
	add	rax, 2
	mov	QWORD PTR out$2[rsp], rax
$LN28@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN27@load_jpeg_
; Line 3937
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv545[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv545[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3938
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3939
	jmp	$LN26@load_jpeg_
$LN27@load_jpeg_:
$LN74@load_jpeg_:
; Line 3940
	jmp	$LN72@load_jpeg_
$LN71@load_jpeg_:
; Line 3941
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN75@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN75@load_jpeg_
; Line 3942
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN31@load_jpeg_
$LN29@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN31@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN30@load_jpeg_
; Line 3943
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$6[rsp], al
; Line 3944
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR r$11[rsp], al
; Line 3945
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR g$10[rsp], al
; Line 3946
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR b$9[rsp], al
; Line 3947
	movzx	eax, BYTE PTR b$9[rsp]
	movzx	ecx, BYTE PTR g$10[rsp]
	movzx	edx, BYTE PTR r$11[rsp]
	mov	DWORD PTR tv626[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv626[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3949
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3950
	jmp	$LN29@load_jpeg_
$LN30@load_jpeg_:
; Line 3951
	jmp	$LN76@load_jpeg_
$LN75@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN77@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN77@load_jpeg_
; Line 3952
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN34@load_jpeg_
$LN32@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN34@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN33@load_jpeg_
; Line 3953
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	r8d, 255				; 000000ffH
	sub	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR tv656[rsp], edx
	movzx	edx, BYTE PTR [rax+rcx]
	mov	eax, DWORD PTR tv656[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3954
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3955
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3956
	jmp	$LN32@load_jpeg_
$LN33@load_jpeg_:
; Line 3957
	jmp	$LN78@load_jpeg_
$LN77@load_jpeg_:
; Line 3958
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$16[rsp], rax
; Line 3959
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN79@load_jpeg_
; Line 3960
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN37@load_jpeg_
$LN35@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN37@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN36@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@load_jpeg_
$LN36@load_jpeg_:
	jmp	SHORT $LN80@load_jpeg_
$LN79@load_jpeg_:
; Line 3962
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN40@load_jpeg_
$LN38@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN40@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN39@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rdx, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	mov	rax, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rax], 255			; 000000ffH
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	SHORT $LN38@load_jpeg_
$LN39@load_jpeg_:
$LN80@load_jpeg_:
$LN78@load_jpeg_:
$LN76@load_jpeg_:
$LN72@load_jpeg_:
$LN60@load_jpeg_:
; Line 3965
	jmp	$LN5@load_jpeg_
$LN6@load_jpeg_:
; Line 3966
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
; Line 3967
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 3968
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 3969
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN81@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN103@load_jpeg_
	mov	DWORD PTR tv694[rsp], 3
	jmp	SHORT $LN104@load_jpeg_
$LN103@load_jpeg_:
	mov	DWORD PTR tv694[rsp], 1
$LN104@load_jpeg_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv694[rsp]
	mov	DWORD PTR [rax], ecx
$LN81@load_jpeg_:
; Line 3970
	mov	rax, QWORD PTR output$15[rsp]
$LN1@load_jpeg_:
; Line 3972
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	ret	0
load_jpeg_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
x$ = 32
y$ = 40
stbi__blinn_8x8 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3806
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 3807
	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	imul	eax, ecx
	add	eax, 128				; 00000080H
	mov	DWORD PTR t$[rsp], eax
; Line 3808
	mov	eax, DWORD PTR t$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 8
; Line 3809
	add	rsp, 24
	ret	0
stbi__blinn_8x8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
stbi__cleanup_jpeg PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3790
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3791
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__free_jpeg_components
; Line 3792
	add	rsp, 40					; 00000028H
	ret	0
stbi__cleanup_jpeg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
stbi__setup_jpeg PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3768
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3769
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__idct_block
	mov	QWORD PTR [rax+18544], rcx
; Line 3770
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__YCbCr_to_RGB_row
	mov	QWORD PTR [rax+18552], rcx
; Line 3771
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_hv_2
	mov	QWORD PTR [rax+18560], rcx
; Line 3774
	call	stbi__sse2_available
	test	eax, eax
	je	SHORT $LN2@stbi__setu
; Line 3775
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__idct_simd
	mov	QWORD PTR [rax+18544], rcx
; Line 3776
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__YCbCr_to_RGB_simd
	mov	QWORD PTR [rax+18552], rcx
; Line 3777
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_hv_2_simd
	mov	QWORD PTR [rax+18560], rcx
$LN2@stbi__setu:
; Line 3786
	add	rsp, 40					; 00000028H
	ret	0
stbi__setup_jpeg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
r$1 = 4
g$2 = 8
b$3 = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
yws$7 = 32
signflip$8 = 48
cbw$9 = 64
crw$10 = 80
brb$11 = 96
gxb$12 = 112
t0$13 = 128
t1$14 = 144
cr_bytes$15 = 160
cb_bytes$16 = 176
y_bias$17 = 192
y_bytes$18 = 208
cr_biased$19 = 224
cb_biased$20 = 240
yw$21 = 256
cr_const0$22 = 272
cb_const0$23 = 288
cb_const1$24 = 304
cr_const1$25 = 320
cr0$26 = 336
cb0$27 = 352
cb1$28 = 368
gwt$29 = 384
cr1$30 = 400
rws$31 = 416
bws$32 = 432
gws$33 = 448
rw$34 = 464
bw$35 = 480
gw$36 = 496
xw$37 = 512
o0$38 = 528
o1$39 = 544
out$ = 576
y$ = 584
pcb$ = 592
pcr$ = 600
count$ = 608
step$ = 616
stbi__YCbCr_to_RGB_simd PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3633
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 568				; 00000238H
; Line 3634
	mov	DWORD PTR i$[rsp], 0
; Line 3640
	cmp	DWORD PTR step$[rsp], 4
	jne	$LN8@stbi__YCbC
; Line 3642
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR signflip$8[rsp], xmm0
; Line 3643
	movdqa	xmm0, XMMWORD PTR __xmm@166f166f166f166f166f166f166f166f
	movdqa	XMMWORD PTR cr_const0$22[rsp], xmm0
; Line 3644
	movdqa	xmm0, XMMWORD PTR __xmm@f493f493f493f493f493f493f493f493
	movdqa	XMMWORD PTR cr_const1$25[rsp], xmm0
; Line 3645
	movdqa	xmm0, XMMWORD PTR __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
	movdqa	XMMWORD PTR cb_const0$23[rsp], xmm0
; Line 3646
	movdqa	xmm0, XMMWORD PTR __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
	movdqa	XMMWORD PTR cb_const1$24[rsp], xmm0
; Line 3647
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR y_bias$17[rsp], xmm0
; Line 3648
	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR xw$37[rsp], xmm0
; Line 3650
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN3@stbi__YCbC
; Line 3652
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR y_bytes$18[rsp], xmm0
; Line 3653
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR cr_bytes$15[rsp], xmm0
; Line 3654
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR cb_bytes$16[rsp], xmm0
; Line 3655
	movdqa	xmm0, XMMWORD PTR cr_bytes$15[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR cr_biased$19[rsp], xmm0
; Line 3656
	movdqa	xmm0, XMMWORD PTR cb_bytes$16[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR cb_biased$20[rsp], xmm0
; Line 3659
	movdqa	xmm0, XMMWORD PTR y_bias$17[rsp]
	punpcklbw xmm0, XMMWORD PTR y_bytes$18[rsp]
	movdqa	XMMWORD PTR yw$21[rsp], xmm0
; Line 3660
	pxor	xmm0, xmm0
	punpcklbw xmm0, XMMWORD PTR cr_biased$19[rsp]
	movdqa	XMMWORD PTR crw$10[rsp], xmm0
; Line 3661
	pxor	xmm0, xmm0
	punpcklbw xmm0, XMMWORD PTR cb_biased$20[rsp]
	movdqa	XMMWORD PTR cbw$9[rsp], xmm0
; Line 3664
	movdqa	xmm0, XMMWORD PTR yw$21[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR yws$7[rsp], xmm0
; Line 3665
	movdqa	xmm0, XMMWORD PTR cr_const0$22[rsp]
	pmulhw	xmm0, XMMWORD PTR crw$10[rsp]
	movdqa	XMMWORD PTR cr0$26[rsp], xmm0
; Line 3666
	movdqa	xmm0, XMMWORD PTR cb_const0$23[rsp]
	pmulhw	xmm0, XMMWORD PTR cbw$9[rsp]
	movdqa	XMMWORD PTR cb0$27[rsp], xmm0
; Line 3667
	movdqa	xmm0, XMMWORD PTR cbw$9[rsp]
	pmulhw	xmm0, XMMWORD PTR cb_const1$24[rsp]
	movdqa	XMMWORD PTR cb1$28[rsp], xmm0
; Line 3668
	movdqa	xmm0, XMMWORD PTR crw$10[rsp]
	pmulhw	xmm0, XMMWORD PTR cr_const1$25[rsp]
	movdqa	XMMWORD PTR cr1$30[rsp], xmm0
; Line 3669
	movdqa	xmm0, XMMWORD PTR cr0$26[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR rws$31[rsp], xmm0
; Line 3670
	movdqa	xmm0, XMMWORD PTR cb0$27[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR gwt$29[rsp], xmm0
; Line 3671
	movdqa	xmm0, XMMWORD PTR yws$7[rsp]
	paddw	xmm0, XMMWORD PTR cb1$28[rsp]
	movdqa	XMMWORD PTR bws$32[rsp], xmm0
; Line 3672
	movdqa	xmm0, XMMWORD PTR gwt$29[rsp]
	paddw	xmm0, XMMWORD PTR cr1$30[rsp]
	movdqa	XMMWORD PTR gws$33[rsp], xmm0
; Line 3675
	movdqa	xmm0, XMMWORD PTR rws$31[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR rw$34[rsp], xmm0
; Line 3676
	movdqa	xmm0, XMMWORD PTR bws$32[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR bw$35[rsp], xmm0
; Line 3677
	movdqa	xmm0, XMMWORD PTR gws$33[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR gw$36[rsp], xmm0
; Line 3680
	movdqa	xmm0, XMMWORD PTR rw$34[rsp]
	packuswb xmm0, XMMWORD PTR bw$35[rsp]
	movdqa	XMMWORD PTR brb$11[rsp], xmm0
; Line 3681
	movdqa	xmm0, XMMWORD PTR gw$36[rsp]
	packuswb xmm0, XMMWORD PTR xw$37[rsp]
	movdqa	XMMWORD PTR gxb$12[rsp], xmm0
; Line 3684
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpcklbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR t0$13[rsp], xmm0
; Line 3685
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpckhbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR t1$14[rsp], xmm0
; Line 3686
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpcklwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR o0$38[rsp], xmm0
; Line 3687
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpckhwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR o1$39[rsp], xmm0
; Line 3690
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR o0$38[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3691
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 16
	movdqa	xmm0, XMMWORD PTR o1$39[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3692
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR out$[rsp], rax
; Line 3693
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3743
	jmp	SHORT $LN7@stbi__YCbC
$LN5@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__YCbC
; Line 3744
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3746
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3747
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3748
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3749
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3750
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3751
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3752
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3753
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3754
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN9@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN10@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN11@stbi__YCbC
$LN10@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN11@stbi__YCbC:
$LN9@stbi__YCbC:
; Line 3755
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN12@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN13@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN14@stbi__YCbC
$LN13@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN14@stbi__YCbC:
$LN12@stbi__YCbC:
; Line 3756
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN15@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN16@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN17@stbi__YCbC
$LN16@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN17@stbi__YCbC:
$LN15@stbi__YCbC:
; Line 3757
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3758
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3759
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3760
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3761
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3762
	jmp	$LN5@stbi__YCbC
$LN6@stbi__YCbC:
; Line 3763
	add	rsp, 568				; 00000238H
	ret	0
stbi__YCbCr_to_RGB_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
g$2 = 4
b$3 = 8
i$ = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
out$ = 48
y$ = 56
pcb$ = 64
pcr$ = 72
count$ = 80
step$ = 88
stbi__YCbCr_to_RGB_row PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3609
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__YCbC
; Line 3610
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3612
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3613
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3614
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3615
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3616
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3617
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3618
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3619
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3620
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN5@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN6@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN7@stbi__YCbC
$LN6@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN7@stbi__YCbC:
$LN5@stbi__YCbC:
; Line 3621
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN8@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN9@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN10@stbi__YCbC
$LN9@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN10@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3622
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN11@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN12@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN13@stbi__YCbC
$LN12@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN13@stbi__YCbC:
$LN11@stbi__YCbC:
; Line 3623
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3624
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3625
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3626
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3627
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3628
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
; Line 3629
	add	rsp, 40					; 00000028H
	ret	0
stbi__YCbCr_to_RGB_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
j$ = 4
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_generic PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3593
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3597
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3598
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR hs$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3599
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR hs$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbi__resa
$LN6@stbi__resa:
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3600
	mov	rax, QWORD PTR out$[rsp]
; Line 3601
	add	rsp, 24
	ret	0
stbi__resample_row_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
t0$ = 8
tv78 = 12
curr$1 = 16
zero$2 = 32
nearw$3 = 48
curb$4 = 64
even$5 = 80
odd$6 = 96
farb$7 = 112
nearb$8 = 128
farw$9 = 144
nears$10 = 160
diff$11 = 176
prv0$12 = 192
nxt0$13 = 208
prev$14 = 224
next$15 = 240
curs$16 = 256
bias$17 = 272
prvd$18 = 288
nxtd$19 = 304
int0$20 = 320
int1$21 = 336
de0$22 = 352
de1$23 = 368
outv$24 = 384
out$ = 416
in_near$ = 424
in_far$ = 432
w$ = 440
hs$ = 448
stbi__resample_row_hv_2_simd PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3477
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 408				; 00000198H
; Line 3479
	mov	DWORD PTR i$[rsp], 0
; Line 3481
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN8@stbi__resa
; Line 3482
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3483
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN8@stbi__resa:
; Line 3486
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3490
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	and	eax, -8
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__resa
; Line 3494
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR zero$2[rsp], xmm0
; Line 3495
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_far$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR farb$7[rsp], xmm0
; Line 3496
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR nearb$8[rsp], xmm0
; Line 3497
	movdqa	xmm0, XMMWORD PTR farb$7[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR farw$9[rsp], xmm0
; Line 3498
	movdqa	xmm0, XMMWORD PTR nearb$8[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR nearw$3[rsp], xmm0
; Line 3499
	movdqa	xmm0, XMMWORD PTR farw$9[rsp]
	psubw	xmm0, XMMWORD PTR nearw$3[rsp]
	movdqa	XMMWORD PTR diff$11[rsp], xmm0
; Line 3500
	movdqa	xmm0, XMMWORD PTR nearw$3[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR nears$10[rsp], xmm0
; Line 3501
	movdqa	xmm0, XMMWORD PTR nears$10[rsp]
	paddw	xmm0, XMMWORD PTR diff$11[rsp]
	movdqa	XMMWORD PTR curr$1[rsp], xmm0
; Line 3508
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR prv0$12[rsp], xmm0
; Line 3509
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psrldq	xmm0, 2
	movdqa	XMMWORD PTR nxt0$13[rsp], xmm0
; Line 3510
	movdqa	xmm0, XMMWORD PTR prv0$12[rsp]
	pinsrw	xmm0, DWORD PTR t1$[rsp], 0
	movdqa	XMMWORD PTR prev$14[rsp], xmm0
; Line 3511
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movdqa	xmm0, XMMWORD PTR nxt0$13[rsp]
	pinsrw	xmm0, eax, 7
	movdqa	XMMWORD PTR next$15[rsp], xmm0
; Line 3517
	movdqa	xmm0, XMMWORD PTR __xmm@00080008000800080008000800080008
	movdqa	XMMWORD PTR bias$17[rsp], xmm0
; Line 3518
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR curs$16[rsp], xmm0
; Line 3519
	movdqa	xmm0, XMMWORD PTR prev$14[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR prvd$18[rsp], xmm0
; Line 3520
	movdqa	xmm0, XMMWORD PTR next$15[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR nxtd$19[rsp], xmm0
; Line 3521
	movdqa	xmm0, XMMWORD PTR curs$16[rsp]
	paddw	xmm0, XMMWORD PTR bias$17[rsp]
	movdqa	XMMWORD PTR curb$4[rsp], xmm0
; Line 3522
	movdqa	xmm0, XMMWORD PTR prvd$18[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR even$5[rsp], xmm0
; Line 3523
	movdqa	xmm0, XMMWORD PTR nxtd$19[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR odd$6[rsp], xmm0
; Line 3526
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpcklwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR int0$20[rsp], xmm0
; Line 3527
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpckhwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR int1$21[rsp], xmm0
; Line 3528
	movdqa	xmm0, XMMWORD PTR int0$20[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR de0$22[rsp], xmm0
; Line 3529
	movdqa	xmm0, XMMWORD PTR int1$21[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR de1$23[rsp], xmm0
; Line 3532
	movdqa	xmm0, XMMWORD PTR de0$22[rsp]
	packuswb xmm0, XMMWORD PTR de1$23[rsp]
	movdqa	XMMWORD PTR outv$24[rsp], xmm0
; Line 3533
	mov	eax, DWORD PTR i$[rsp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movdqa	xmm0, XMMWORD PTR outv$24[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3571
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 7
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3572
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3574
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3575
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3576
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3578
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3579
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3580
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3581
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3582
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3583
	jmp	$LN5@stbi__resa
$LN6@stbi__resa:
; Line 3584
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3588
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3589
	add	rsp, 408				; 00000198H
	ret	0
stbi__resample_row_hv_2_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
tv78 = 8
t0$ = 12
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_hv_2 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3452
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3455
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3456
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3457
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3460
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3461
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3462
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3463
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3464
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3465
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3466
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3467
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3468
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3472
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3473
	add	rsp, 24
	ret	0
stbi__resample_row_hv_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
n$1 = 4
input$ = 8
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_h_2 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3422
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3425
	mov	rax, QWORD PTR in_near$[rsp]
	mov	QWORD PTR input$[rsp], rax
; Line 3427
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3429
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3430
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3433
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3434
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3435
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3436
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	add	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 3437
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3438
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3439
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3440
	mov	eax, DWORD PTR w$[rsp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR w$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3441
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3446
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3447
	add	rsp, 24
	ret	0
stbi__resample_row_h_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_v_2 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3412
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3416
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3417
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3418
	mov	rax, QWORD PTR out$[rsp]
; Line 3419
	add	rsp, 24
	ret	0
stbi__resample_row_v_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 8
in_near$ = 16
in_far$ = 24
w$ = 32
hs$ = 40
resample_row_1 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3403
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3408
	mov	rax, QWORD PTR in_near$[rsp]
; Line 3409
	ret	0
resample_row_1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
x$1 = 36
Ld$2 = 40
NL$3 = 44
j$ = 64
stbi__decode_jpeg_image PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3356
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3358
	mov	DWORD PTR m$[rsp], 0
	jmp	SHORT $LN4@stbi__deco
$LN2@stbi__deco:
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
	cmp	DWORD PTR m$[rsp], 4
	jge	SHORT $LN3@stbi__deco
; Line 3359
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3360
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3361
	jmp	SHORT $LN2@stbi__deco
$LN3@stbi__deco:
; Line 3362
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18536], 0
; Line 3363
	xor	edx, edx
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN9@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN9@stbi__deco:
; Line 3364
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN5@stbi__deco:
; Line 3365
	cmp	DWORD PTR m$[rsp], 217			; 000000d9H
	je	$LN6@stbi__deco
; Line 3366
	cmp	DWORD PTR m$[rsp], 218			; 000000daH
	jne	$LN10@stbi__deco
; Line 3367
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__process_scan_header
	test	eax, eax
	jne	SHORT $LN12@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN12@stbi__deco:
; Line 3368
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__parse_entropy_coded_data
	test	eax, eax
	jne	SHORT $LN13@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN13@stbi__deco:
; Line 3369
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN14@stbi__deco
$LN7@stbi__deco:
; Line 3371
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
; Line 3372
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR x$1[rsp], eax
; Line 3373
	cmp	DWORD PTR x$1[rsp], 255			; 000000ffH
	jne	SHORT $LN15@stbi__deco
; Line 3374
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	rcx, QWORD PTR j$[rsp]
	mov	BYTE PTR [rcx+18472], al
; Line 3375
	jmp	SHORT $LN8@stbi__deco
$LN15@stbi__deco:
; Line 3377
	jmp	SHORT $LN7@stbi__deco
$LN8@stbi__deco:
$LN14@stbi__deco:
; Line 3379
	jmp	SHORT $LN11@stbi__deco
$LN10@stbi__deco:
; Line 3380
	cmp	DWORD PTR m$[rsp], 220			; 000000dcH
	jne	SHORT $LN16@stbi__deco
; Line 3381
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR Ld$2[rsp], eax
; Line 3382
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR NL$3[rsp], eax
; Line 3383
	cmp	DWORD PTR Ld$2[rsp], 4
	je	SHORT $LN18@stbi__deco
	lea	rcx, OFFSET FLAT:$SG73787
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN18@stbi__deco:
; Line 3384
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR NL$3[rsp], eax
	je	SHORT $LN19@stbi__deco
	lea	rcx, OFFSET FLAT:$SG73789
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN19@stbi__deco:
; Line 3385
	jmp	SHORT $LN17@stbi__deco
$LN16@stbi__deco:
; Line 3386
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__process_marker
	test	eax, eax
	jne	SHORT $LN20@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN20@stbi__deco:
$LN17@stbi__deco:
$LN11@stbi__deco:
; Line 3388
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3389
	jmp	$LN5@stbi__deco
$LN6@stbi__deco:
; Line 3390
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN21@stbi__deco
; Line 3391
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_finish
$LN21@stbi__deco:
; Line 3392
	mov	eax, 1
$LN1@stbi__deco:
; Line 3393
	add	rsp, 56					; 00000038H
	ret	0
stbi__decode_jpeg_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
tv131 = 36
z$ = 64
scan$ = 72
stbi__decode_jpeg_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3331
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3333
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 0
; Line 3334
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18508], -1
; Line 3335
	mov	rax, QWORD PTR z$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 3336
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3337
	cmp	DWORD PTR m$[rsp], 216			; 000000d8H
	je	SHORT $LN6@stbi__deco
	lea	rcx, OFFSET FLAT:$SG73754
	call	stbi__err
	jmp	$LN1@stbi__deco
$LN6@stbi__deco:
; Line 3338
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN7@stbi__deco
	mov	eax, 1
	jmp	$LN1@stbi__deco
$LN7@stbi__deco:
; Line 3339
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN2@stbi__deco:
; Line 3340
	cmp	DWORD PTR m$[rsp], 192			; 000000c0H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 193			; 000000c1H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	je	SHORT $LN3@stbi__deco
; Line 3341
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__process_marker
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN8@stbi__deco:
; Line 3342
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
; Line 3343
	cmp	DWORD PTR m$[rsp], 255			; 000000ffH
	jne	SHORT $LN5@stbi__deco
; Line 3345
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__deco
	lea	rcx, OFFSET FLAT:$SG73758
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN9@stbi__deco:
; Line 3346
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3347
	jmp	SHORT $LN4@stbi__deco
$LN5@stbi__deco:
; Line 3348
	jmp	$LN2@stbi__deco
$LN3@stbi__deco:
; Line 3349
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	jne	SHORT $LN12@stbi__deco
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN13@stbi__deco
$LN12@stbi__deco:
	mov	DWORD PTR tv131[rsp], 0
$LN13@stbi__deco:
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv131[rsp]
	mov	DWORD PTR [rax+18480], ecx
; Line 3350
	mov	edx, DWORD PTR scan$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__process_frame_header
	test	eax, eax
	jne	SHORT $LN10@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN10@stbi__deco:
; Line 3351
	mov	eax, 1
$LN1@stbi__deco:
; Line 3352
	add	rsp, 56					; 00000038H
	ret	0
stbi__decode_jpeg_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 40
h_max$ = 48
v_max$ = 52
c$ = 56
Lf$ = 60
q$ = 64
p$ = 68
tv285 = 72
tv294 = 80
z$ = 112
scan$ = 120
stbi__process_frame_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3230
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3231
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 3232
	mov	DWORD PTR h_max$[rsp], 1
	mov	DWORD PTR v_max$[rsp], 1
; Line 3233
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR Lf$[rsp], eax
	cmp	DWORD PTR Lf$[rsp], 11
	jge	SHORT $LN17@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73704
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN17@stbi__proc:
; Line 3234
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR p$[rsp], eax
	cmp	DWORD PTR p$[rsp], 8
	je	SHORT $LN18@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73706
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN18@stbi__proc:
; Line 3235
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73708
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN19@stbi__proc:
; Line 3236
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN20@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73710
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN20@stbi__proc:
; Line 3237
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN21@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73712
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 3238
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN22@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73714
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN22@stbi__proc:
; Line 3239
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$[rsp], eax
; Line 3240
	cmp	DWORD PTR c$[rsp], 3
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 1
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 4
	je	SHORT $LN23@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73716
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN23@stbi__proc:
; Line 3241
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3242
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR c$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 3243
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
; Line 3244
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3245
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 3247
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax+8], 3
	add	eax, 8
	cmp	DWORD PTR Lf$[rsp], eax
	je	SHORT $LN24@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73718
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3249
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18512], 0
; Line 3250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__proc
; Line 3252
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movzx	eax, al
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18080], eax
; Line 3253
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN25@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?rgb@?5??stbi__process_frame_header@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rdx+rax+18080], ecx
	jne	SHORT $LN25@stbi__proc
; Line 3254
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18512]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18512], eax
$LN25@stbi__proc:
; Line 3255
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$[rsp], eax
; Line 3256
	mov	eax, DWORD PTR q$[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18084], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 0
	je	SHORT $LN27@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 4
	jle	SHORT $LN26@stbi__proc
$LN27@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG73722
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3257
	mov	eax, DWORD PTR q$[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18088], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 0
	je	SHORT $LN29@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 4
	jle	SHORT $LN28@stbi__proc
$LN29@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG73725
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3258
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movzx	eax, al
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18092], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18092], 3
	jle	SHORT $LN30@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73727
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3259
	jmp	$LN5@stbi__proc
$LN6@stbi__proc:
; Line 3261
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN31@stbi__proc
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN31@stbi__proc:
; Line 3263
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN32@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73730
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN32@stbi__proc:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__proc
$LN8@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__proc
; Line 3266
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR h_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], edx
	jle	SHORT $LN33@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	mov	DWORD PTR h_max$[rsp], eax
$LN33@stbi__proc:
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR v_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], edx
	jle	SHORT $LN34@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	mov	DWORD PTR v_max$[rsp], eax
$LN34@stbi__proc:
; Line 3268
	jmp	$LN8@stbi__proc
$LN9@stbi__proc:
; Line 3272
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__proc
; Line 3273
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv285[rsp], rax
	mov	eax, DWORD PTR h_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv285[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN35@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73734
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3274
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv294[rsp], rax
	mov	eax, DWORD PTR v_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv294[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73736
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN36@stbi__proc:
; Line 3275
	jmp	$LN11@stbi__proc
$LN12@stbi__proc:
; Line 3278
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR h_max$[rsp]
	mov	DWORD PTR [rax+18056], ecx
; Line 3279
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR v_max$[rsp]
	mov	DWORD PTR [rax+18060], ecx
; Line 3280
	mov	eax, DWORD PTR h_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18072], eax
; Line 3281
	mov	eax, DWORD PTR v_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18076], eax
; Line 3283
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18072]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18072]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18064], eax
; Line 3284
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18076]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18076]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18068], eax
; Line 3286
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__proc
; Line 3288
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	mov	ecx, DWORD PTR h_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR h_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18108], eax
; Line 3289
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	mov	ecx, DWORD PTR v_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR v_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18112], eax
; Line 3297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18064]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18116], eax
; Line 3298
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18068]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18120], eax
; Line 3299
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
; Line 3300
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3301
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3302
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r8d, 15
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	stbi__malloc_mad2
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18136], rax
; Line 3303
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	jne	SHORT $LN37@stbi__proc
; Line 3304
	lea	rcx, OFFSET FLAT:$SG73738
	call	stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__free_jpeg_components
	jmp	$LN1@stbi__proc
$LN37@stbi__proc:
; Line 3306
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18136]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18128], rax
; Line 3307
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN38@stbi__proc
; Line 3309
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18116]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18168], eax
; Line 3310
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18120]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18172], eax
; Line 3311
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r9d, 15
	mov	r8d, 2
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	stbi__malloc_mad3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18144], rax
; Line 3312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	jne	SHORT $LN39@stbi__proc
; Line 3313
	lea	rcx, OFFSET FLAT:$SG73741
	call	stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__free_jpeg_components
	jmp	SHORT $LN1@stbi__proc
$LN39@stbi__proc:
; Line 3314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18144]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18160], rax
$LN38@stbi__proc:
; Line 3316
	jmp	$LN14@stbi__proc
$LN15@stbi__proc:
; Line 3318
	mov	eax, 1
$LN1@stbi__proc:
; Line 3319
	add	rsp, 104				; 00000068H
	ret	0
stbi__process_frame_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv75 = 56
tv137 = 64
tv167 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
z$ = 304
ncomp$ = 312
why$ = 320
stbi__free_jpeg_components PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3208
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
; Line 3210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__free
$LN2@stbi__free:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__free:
	mov	eax, DWORD PTR ncomp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__free
; Line 3211
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	je	$LN5@stbi__free
; Line 3212
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv75[rsp], rax
	lea	rcx, OFFSET FLAT:$SG73654
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3212				; 00000c8cH
	lea	r8, OFFSET FLAT:$SG73655
	mov	edx, 70					; 00000046H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, QWORD PTR [rax+rcx+18136]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3213
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3214
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
$LN5@stbi__free:
; Line 3216
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	je	$LN6@stbi__free
; Line 3217
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv137[rsp], rax
	lea	rcx, OFFSET FLAT:$SG73657
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3217				; 00000c91H
	lea	r8, OFFSET FLAT:$SG73658
	mov	edx, 71					; 00000047H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv137[rsp]
	mov	r8, QWORD PTR [rax+rcx+18144]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 3218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3219
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
$LN6@stbi__free:
; Line 3221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	je	$LN7@stbi__free
; Line 3222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv167[rsp], rax
	lea	rcx, OFFSET FLAT:$SG73660
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3222				; 00000c96H
	lea	r8, OFFSET FLAT:$SG73661
	mov	edx, 72					; 00000048H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv167[rsp]
	mov	r8, QWORD PTR [rax+rcx+18152]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 3223
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
$LN7@stbi__free:
; Line 3225
	jmp	$LN2@stbi__free
$LN3@stbi__free:
; Line 3226
	mov	eax, DWORD PTR why$[rsp]
; Line 3227
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
stbi__free_jpeg_components ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
which$1 = 32
i$ = 36
q$2 = 40
aa$3 = 44
Ls$ = 48
id$4 = 52
z$ = 80
stbi__process_scan_header PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR Ls$[rsp], eax
; Line 3172
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18516], eax
; Line 3173
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jl	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 4
	jg	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR [rcx+18516], eax
	jle	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG73619
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN8@stbi__proc:
; Line 3174
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	lea	eax, DWORD PTR [rax+rax+6]
	cmp	DWORD PTR Ls$[rsp], eax
	je	SHORT $LN10@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73621
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 3175
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__proc
; Line 3176
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR id$4[rsp], eax
; Line 3177
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$2[rsp], eax
; Line 3178
	mov	DWORD PTR which$1[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR which$1[rsp]
	inc	eax
	mov	DWORD PTR which$1[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jge	SHORT $LN6@stbi__proc
; Line 3179
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR id$4[rsp]
	cmp	DWORD PTR [rcx+rax+18080], edx
	jne	SHORT $LN11@stbi__proc
; Line 3180
	jmp	SHORT $LN6@stbi__proc
$LN11@stbi__proc:
	jmp	SHORT $LN5@stbi__proc
$LN6@stbi__proc:
; Line 3181
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jne	SHORT $LN12@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN12@stbi__proc:
; Line 3182
	mov	eax, DWORD PTR q$2[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18096], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18096], 3
	jle	SHORT $LN13@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73625
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN13@stbi__proc:
; Line 3183
	mov	eax, DWORD PTR q$2[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18100], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18100], 3
	jle	SHORT $LN14@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73627
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
; Line 3184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR which$1[rsp]
	mov	DWORD PTR [rcx+rax*4+18520], edx
; Line 3185
	jmp	$LN2@stbi__proc
$LN3@stbi__proc:
; Line 3189
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18484], eax
; Line 3190
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18488], eax
; Line 3191
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR aa$3[rsp], eax
; Line 3192
	mov	eax, DWORD PTR aa$3[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18492], eax
; Line 3193
	mov	eax, DWORD PTR aa$3[rsp]
	and	eax, 15
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18496], eax
; Line 3194
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN15@stbi__proc
; Line 3195
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18488], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18488]
	cmp	DWORD PTR [rax+18484], ecx
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 13
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 13
	jle	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3196
	lea	rcx, OFFSET FLAT:$SG73632
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN17@stbi__proc:
; Line 3197
	jmp	SHORT $LN16@stbi__proc
$LN15@stbi__proc:
; Line 3198
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	je	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73634
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN19@stbi__proc:
; Line 3199
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	SHORT $LN21@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 0
	je	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG73637
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
; Line 3200
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18488], 63		; 0000003fH
$LN16@stbi__proc:
; Line 3204
	mov	eax, 1
$LN1@stbi__proc:
; Line 3205
	add	rsp, 72					; 00000048H
	ret	0
stbi__process_scan_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
i$1 = 36
th$2 = 40
tv64 = 44
i$3 = 48
n$4 = 52
i$5 = 56
i$6 = 60
p$7 = 64
tc$8 = 68
tv88 = 72
q$9 = 76
t$10 = 80
tv149 = 84
sixteen$11 = 88
tv152 = 92
tv155 = 96
q$12 = 100
tv233 = 104
ok$13 = 108
ok$14 = 112
v$15 = 120
sizes$16 = 128
__$ArrayPad$ = 192
z$ = 224
m$ = 232
stbi__process_marker PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3066
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3068
	mov	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 196		; 000000c4H
	je	$LN29@stbi__proc
	cmp	DWORD PTR tv64[rsp], 219		; 000000dbH
	je	SHORT $LN26@stbi__proc
	cmp	DWORD PTR tv64[rsp], 221		; 000000ddH
	je	SHORT $LN24@stbi__proc
	cmp	DWORD PTR tv64[rsp], 255		; 000000ffH
	je	SHORT $LN23@stbi__proc
	jmp	$LN2@stbi__proc
$LN23@stbi__proc:
; Line 3070
	lea	rcx, OFFSET FLAT:$SG73566
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3073
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	cmp	eax, 4
	je	SHORT $LN25@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73569
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
; Line 3074
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18536], eax
; Line 3075
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3078
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN4@stbi__proc:
; Line 3079
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN5@stbi__proc
; Line 3080
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$9[rsp], eax
; Line 3081
	mov	eax, DWORD PTR q$9[rsp]
	sar	eax, 4
	mov	DWORD PTR p$7[rsp], eax
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN51@stbi__proc
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN52@stbi__proc
$LN51@stbi__proc:
	mov	DWORD PTR tv88[rsp], 0
$LN52@stbi__proc:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR sixteen$11[rsp], eax
; Line 3082
	mov	eax, DWORD PTR q$9[rsp]
	and	eax, 15
	mov	DWORD PTR t$10[rsp], eax
; Line 3083
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN27@stbi__proc
	cmp	DWORD PTR p$7[rsp], 1
	je	SHORT $LN27@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73572
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN27@stbi__proc:
; Line 3084
	cmp	DWORD PTR t$10[rsp], 3
	jle	SHORT $LN28@stbi__proc
	lea	rcx, OFFSET FLAT:$SG73574
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3086
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN8@stbi__proc
$LN6@stbi__proc:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN8@stbi__proc:
	cmp	DWORD PTR i$3[rsp], 64			; 00000040H
	jge	SHORT $LN7@stbi__proc
; Line 3087
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN53@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN54@stbi__proc
$LN53@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv149[rsp], eax
$LN54@stbi__proc:
	movsxd	rax, DWORD PTR t$10[rsp]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR i$3[rsp]
	lea	rdx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR tv149[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	jmp	SHORT $LN6@stbi__proc
$LN7@stbi__proc:
; Line 3088
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN55@stbi__proc
	mov	DWORD PTR tv152[rsp], 129		; 00000081H
	jmp	SHORT $LN56@stbi__proc
$LN55@stbi__proc:
	mov	DWORD PTR tv152[rsp], 65		; 00000041H
$LN56@stbi__proc:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3089
	jmp	$LN4@stbi__proc
$LN5@stbi__proc:
; Line 3090
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN57@stbi__proc
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN58@stbi__proc
$LN57@stbi__proc:
	mov	DWORD PTR tv155[rsp], 0
$LN58@stbi__proc:
	mov	eax, DWORD PTR tv155[rsp]
	jmp	$LN1@stbi__proc
$LN29@stbi__proc:
; Line 3093
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN9@stbi__proc:
; Line 3094
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN10@stbi__proc
; Line 3096
	mov	DWORD PTR n$4[rsp], 0
; Line 3097
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$12[rsp], eax
; Line 3098
	mov	eax, DWORD PTR q$12[rsp]
	sar	eax, 4
	mov	DWORD PTR tc$8[rsp], eax
; Line 3099
	mov	eax, DWORD PTR q$12[rsp]
	and	eax, 15
	mov	DWORD PTR th$2[rsp], eax
; Line 3100
	cmp	DWORD PTR tc$8[rsp], 1
	jg	SHORT $LN31@stbi__proc
	cmp	DWORD PTR th$2[rsp], 3
	jle	SHORT $LN30@stbi__proc
$LN31@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG73578
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3101
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbi__proc:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN12@stbi__proc
; Line 3102
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	movzx	eax, al
	mov	DWORD PTR sizes$16[rsp+rcx*4], eax
; Line 3103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	eax, DWORD PTR sizes$16[rsp+rax*4]
	mov	ecx, DWORD PTR n$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$4[rsp], eax
; Line 3104
	jmp	SHORT $LN11@stbi__proc
$LN12@stbi__proc:
; Line 3105
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 17
	mov	DWORD PTR L$[rsp], eax
; Line 3106
	cmp	DWORD PTR tc$8[rsp], 0
	jne	SHORT $LN32@stbi__proc
; Line 3107
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN34@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN34@stbi__proc:
; Line 3108
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1032]
	mov	QWORD PTR v$15[rsp], rax
; Line 3109
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
; Line 3110
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN35@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3111
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+7752]
	mov	QWORD PTR v$15[rsp], rax
$LN33@stbi__proc:
; Line 3113
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@stbi__proc:
	mov	eax, DWORD PTR n$4[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN15@stbi__proc
; Line 3114
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR v$15[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN14@stbi__proc
$LN15@stbi__proc:
; Line 3115
	cmp	DWORD PTR tc$8[rsp], 0
	je	SHORT $LN36@stbi__proc
; Line 3116
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	movsxd	rcx, DWORD PTR th$2[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	mov	rdx, rax
	call	stbi__build_fast_ac
$LN36@stbi__proc:
; Line 3117
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3118
	jmp	$LN9@stbi__proc
$LN10@stbi__proc:
; Line 3119
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN59@stbi__proc
	mov	DWORD PTR tv233[rsp], 1
	jmp	SHORT $LN60@stbi__proc
$LN59@stbi__proc:
	mov	DWORD PTR tv233[rsp], 0
$LN60@stbi__proc:
	mov	eax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__proc
$LN2@stbi__proc:
; Line 3123
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jl	SHORT $LN39@stbi__proc
	cmp	DWORD PTR m$[rsp], 239			; 000000efH
	jle	SHORT $LN38@stbi__proc
$LN39@stbi__proc:
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	$LN37@stbi__proc
$LN38@stbi__proc:
; Line 3124
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR L$[rsp], eax
; Line 3125
	cmp	DWORD PTR L$[rsp], 2
	jge	SHORT $LN40@stbi__proc
; Line 3126
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	SHORT $LN41@stbi__proc
; Line 3127
	lea	rcx, OFFSET FLAT:$SG73590
	call	stbi__err
	jmp	$LN1@stbi__proc
	jmp	SHORT $LN42@stbi__proc
$LN41@stbi__proc:
; Line 3129
	lea	rcx, OFFSET FLAT:$SG73591
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN42@stbi__proc:
$LN40@stbi__proc:
; Line 3131
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
; Line 3133
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jne	$LN43@stbi__proc
	cmp	DWORD PTR L$[rsp], 5
	jl	SHORT $LN43@stbi__proc
; Line 3135
	mov	DWORD PTR ok$13[rsp], 1
; Line 3137
	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@stbi__proc
$LN17@stbi__proc:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN19@stbi__proc:
	cmp	DWORD PTR i$5[rsp], 5
	jge	SHORT $LN18@stbi__proc
; Line 3138
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$5[rsp]
	lea	rdx, OFFSET FLAT:?tag@?O@??stbi__process_marker@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN45@stbi__proc
; Line 3139
	mov	DWORD PTR ok$13[rsp], 0
$LN45@stbi__proc:
	jmp	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3140
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 5
	mov	DWORD PTR L$[rsp], eax
; Line 3141
	cmp	DWORD PTR ok$13[rsp], 0
	je	SHORT $LN46@stbi__proc
; Line 3142
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 1
$LN46@stbi__proc:
; Line 3143
	jmp	$LN44@stbi__proc
$LN43@stbi__proc:
	cmp	DWORD PTR m$[rsp], 238			; 000000eeH
	jne	$LN47@stbi__proc
	cmp	DWORD PTR L$[rsp], 12
	jl	$LN47@stbi__proc
; Line 3145
	mov	DWORD PTR ok$14[rsp], 1
; Line 3147
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN22@stbi__proc
$LN20@stbi__proc:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN22@stbi__proc:
	cmp	DWORD PTR i$6[rsp], 6
	jge	SHORT $LN21@stbi__proc
; Line 3148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$6[rsp]
	lea	rdx, OFFSET FLAT:?tag@?BA@??stbi__process_marker@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN48@stbi__proc
; Line 3149
	mov	DWORD PTR ok$14[rsp], 0
$LN48@stbi__proc:
	jmp	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
; Line 3150
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
; Line 3151
	cmp	DWORD PTR ok$14[rsp], 0
	je	SHORT $LN49@stbi__proc
; Line 3152
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
; Line 3153
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
; Line 3154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
; Line 3155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18508], eax
; Line 3156
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
$LN49@stbi__proc:
$LN47@stbi__proc:
$LN44@stbi__proc:
; Line 3160
	mov	edx, DWORD PTR L$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__skip
; Line 3161
	mov	eax, 1
	jmp	SHORT $LN1@stbi__proc
$LN37@stbi__proc:
; Line 3164
	lea	rcx, OFFSET FLAT:$SG73599
	call	stbi__err
$LN1@stbi__proc:
; Line 3165
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
stbi__process_marker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
j$2 = 36
i$3 = 40
h$4 = 44
w$5 = 48
data$6 = 56
z$ = 80
stbi__jpeg_finish PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3048
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN11@stbi__jpeg
; Line 3051
	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR n$1[rsp], eax
	jge	$LN3@stbi__jpeg
; Line 3052
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$5[rsp], eax
; Line 3053
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$4[rsp], eax
; Line 3054
	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN7@stbi__jpeg:
	mov	eax, DWORD PTR h$4[rsp]
	cmp	DWORD PTR j$2[rsp], eax
	jge	$LN6@stbi__jpeg
; Line 3055
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__jpeg
$LN8@stbi__jpeg:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__jpeg:
	mov	eax, DWORD PTR w$5[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__jpeg
; Line 3056
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$2[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$6[rsp], rax
; Line 3057
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$6[rsp]
	call	stbi__jpeg_dequantize
; Line 3058
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$2[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$3[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	mov	r8, QWORD PTR data$6[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 3059
	jmp	$LN8@stbi__jpeg
$LN9@stbi__jpeg:
; Line 3060
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 3061
	jmp	$LN2@stbi__jpeg
$LN3@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 3063
	add	rsp, 72					; 00000048H
	ret	0
stbi__jpeg_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
data$ = 32
dequant$ = 40
stbi__jpeg_dequantize PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3040
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3042
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__jpeg:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@stbi__jpeg
; Line 3043
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	mov	rdx, QWORD PTR data$[rsp]
	movsx	eax, WORD PTR [rdx+rax*2]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 3044
	add	rsp, 24
	ret	0
stbi__jpeg_dequantize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 64
n$2 = 68
n$3 = 72
n$4 = 76
j$5 = 80
i$6 = 84
k$7 = 88
i$8 = 92
x$9 = 96
j$10 = 100
y$11 = 104
j$12 = 108
i$13 = 112
k$14 = 116
i$15 = 120
x$16 = 124
j$17 = 128
y$18 = 132
ha$19 = 136
tv190 = 140
ha$20 = 144
tv311 = 148
ha$21 = 152
tv400 = 156
tv518 = 160
h$22 = 164
w$23 = 168
y2$24 = 172
x2$25 = 176
h$26 = 180
w$27 = 184
y2$28 = 188
x2$29 = 192
data$30 = 200
data$31 = 208
data$32 = 224
data$33 = 352
__$ArrayPad$ = 480
z$ = 512
stbi__parse_entropy_coded_data PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2916
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 504				; 000001f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2917
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
; Line 2918
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	jne	$LN44@stbi__pars
; Line 2919
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN46@stbi__pars
; Line 2922
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$2[rsp], eax
; Line 2927
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$23[rsp], eax
; Line 2928
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$22[rsp], eax
; Line 2929
	mov	DWORD PTR j$5[rsp], 0
	jmp	SHORT $LN4@stbi__pars
$LN2@stbi__pars:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN4@stbi__pars:
	mov	eax, DWORD PTR h$22[rsp]
	cmp	DWORD PTR j$5[rsp], eax
	jge	$LN3@stbi__pars
; Line 2930
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@stbi__pars
$LN5@stbi__pars:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@stbi__pars:
	mov	eax, DWORD PTR w$23[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN6@stbi__pars
; Line 2931
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$19[rsp], eax
; Line 2932
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$19[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$19[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$2[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$32[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN48@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 2933
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$2[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$2[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$5[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$6[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	lea	r8, QWORD PTR data$32[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 2935
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv190[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv190[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv190[rsp], 0
	jg	SHORT $LN49@stbi__pars
; Line 2936
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN50@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN50@stbi__pars:
; Line 2939
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN52@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN51@stbi__pars
$LN52@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 2940
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN49@stbi__pars:
; Line 2942
	jmp	$LN5@stbi__pars
$LN6@stbi__pars:
; Line 2943
	jmp	$LN2@stbi__pars
$LN3@stbi__pars:
; Line 2944
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 2945
	jmp	$LN47@stbi__pars
$LN46@stbi__pars:
; Line 2948
	mov	DWORD PTR j$10[rsp], 0
	jmp	SHORT $LN10@stbi__pars
$LN8@stbi__pars:
	mov	eax, DWORD PTR j$10[rsp]
	inc	eax
	mov	DWORD PTR j$10[rsp], eax
$LN10@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$10[rsp], eax
	jge	$LN9@stbi__pars
; Line 2949
	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@stbi__pars
$LN11@stbi__pars:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN13@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN12@stbi__pars
; Line 2951
	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@stbi__pars
$LN14@stbi__pars:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN16@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$7[rsp], eax
	jge	$LN15@stbi__pars
; Line 2952
	movsxd	rax, DWORD PTR k$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$1[rsp], eax
; Line 2955
	mov	DWORD PTR y$11[rsp], 0
	jmp	SHORT $LN19@stbi__pars
$LN17@stbi__pars:
	mov	eax, DWORD PTR y$11[rsp]
	inc	eax
	mov	DWORD PTR y$11[rsp], eax
$LN19@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$11[rsp], eax
	jge	$LN18@stbi__pars
; Line 2956
	mov	DWORD PTR x$9[rsp], 0
	jmp	SHORT $LN22@stbi__pars
$LN20@stbi__pars:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN22@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN21@stbi__pars
; Line 2957
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$8[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$9[rsp]
	shl	eax, 3
	mov	DWORD PTR x2$25[rsp], eax
; Line 2958
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$10[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$11[rsp]
	shl	eax, 3
	mov	DWORD PTR y2$24[rsp], eax
; Line 2959
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$20[rsp], eax
; Line 2960
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$20[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$20[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$1[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$33[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN53@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN53@stbi__pars:
; Line 2961
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR y2$24[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	movsxd	rdx, DWORD PTR x2$25[rsp]
	add	rcx, rdx
	lea	r8, QWORD PTR data$33[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 2962
	jmp	$LN20@stbi__pars
$LN21@stbi__pars:
; Line 2963
	jmp	$LN17@stbi__pars
$LN18@stbi__pars:
; Line 2964
	jmp	$LN14@stbi__pars
$LN15@stbi__pars:
; Line 2967
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv311[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv311[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv311[rsp], 0
	jg	SHORT $LN54@stbi__pars
; Line 2968
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN55@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN55@stbi__pars:
; Line 2969
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN57@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN56@stbi__pars
$LN57@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 2970
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN54@stbi__pars:
; Line 2972
	jmp	$LN11@stbi__pars
$LN12@stbi__pars:
; Line 2973
	jmp	$LN8@stbi__pars
$LN9@stbi__pars:
; Line 2974
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 2976
	jmp	$LN45@stbi__pars
$LN44@stbi__pars:
; Line 2977
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN58@stbi__pars
; Line 2979
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$4[rsp], eax
; Line 2984
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$27[rsp], eax
; Line 2985
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$26[rsp], eax
; Line 2986
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN25@stbi__pars
$LN23@stbi__pars:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN25@stbi__pars:
	mov	eax, DWORD PTR h$26[rsp]
	cmp	DWORD PTR j$12[rsp], eax
	jge	$LN24@stbi__pars
; Line 2987
	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN28@stbi__pars
$LN26@stbi__pars:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN28@stbi__pars:
	mov	eax, DWORD PTR w$27[rsp]
	cmp	DWORD PTR i$13[rsp], eax
	jge	$LN27@stbi__pars
; Line 2988
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$4[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$12[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$30[rsp], rax
; Line 2989
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN60@stbi__pars
; Line 2990
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$4[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN62@stbi__pars
; Line 2991
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 2992
	jmp	$LN61@stbi__pars
$LN60@stbi__pars:
; Line 2993
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$21[rsp], eax
; Line 2994
	movsxd	rax, DWORD PTR ha$21[rsp]
	imul	rax, rax, 1024				; 00000400H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13960]
	movsxd	rcx, DWORD PTR ha$21[rsp]
	imul	rcx, rcx, 1680				; 00000690H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+6728]
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_ac
	test	eax, eax
	jne	SHORT $LN63@stbi__pars
; Line 2995
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
$LN61@stbi__pars:
; Line 2998
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv400[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv400[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv400[rsp], 0
	jg	SHORT $LN64@stbi__pars
; Line 2999
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN65@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN65@stbi__pars:
; Line 3000
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN67@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN66@stbi__pars
$LN67@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN66@stbi__pars:
; Line 3001
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN64@stbi__pars:
; Line 3003
	jmp	$LN26@stbi__pars
$LN27@stbi__pars:
; Line 3004
	jmp	$LN23@stbi__pars
$LN24@stbi__pars:
; Line 3005
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 3006
	jmp	$LN59@stbi__pars
$LN58@stbi__pars:
; Line 3008
	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN31@stbi__pars
$LN29@stbi__pars:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN31@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$17[rsp], eax
	jge	$LN30@stbi__pars
; Line 3009
	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN34@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN34@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$15[rsp], eax
	jge	$LN33@stbi__pars
; Line 3011
	mov	DWORD PTR k$14[rsp], 0
	jmp	SHORT $LN37@stbi__pars
$LN35@stbi__pars:
	mov	eax, DWORD PTR k$14[rsp]
	inc	eax
	mov	DWORD PTR k$14[rsp], eax
$LN37@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$14[rsp], eax
	jge	$LN36@stbi__pars
; Line 3012
	movsxd	rax, DWORD PTR k$14[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$3[rsp], eax
; Line 3015
	mov	DWORD PTR y$18[rsp], 0
	jmp	SHORT $LN40@stbi__pars
$LN38@stbi__pars:
	mov	eax, DWORD PTR y$18[rsp]
	inc	eax
	mov	DWORD PTR y$18[rsp], eax
$LN40@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$18[rsp], eax
	jge	$LN39@stbi__pars
; Line 3016
	mov	DWORD PTR x$16[rsp], 0
	jmp	SHORT $LN43@stbi__pars
$LN41@stbi__pars:
	mov	eax, DWORD PTR x$16[rsp]
	inc	eax
	mov	DWORD PTR x$16[rsp], eax
$LN43@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$16[rsp], eax
	jge	$LN42@stbi__pars
; Line 3017
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$15[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$16[rsp]
	mov	DWORD PTR x2$29[rsp], eax
; Line 3018
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$17[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$18[rsp]
	mov	DWORD PTR y2$28[rsp], eax
; Line 3019
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR y2$28[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR x2$29[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$31[rsp], rax
; Line 3020
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$3[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$31[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN68@stbi__pars
; Line 3021
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 3022
	jmp	$LN41@stbi__pars
$LN42@stbi__pars:
; Line 3023
	jmp	$LN38@stbi__pars
$LN39@stbi__pars:
; Line 3024
	jmp	$LN35@stbi__pars
$LN36@stbi__pars:
; Line 3027
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv518[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv518[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv518[rsp], 0
	jg	SHORT $LN69@stbi__pars
; Line 3028
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN70@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN70@stbi__pars:
; Line 3029
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN72@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN71@stbi__pars
$LN72@stbi__pars:
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pars
$LN71@stbi__pars:
; Line 3030
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN69@stbi__pars:
; Line 3032
	jmp	$LN32@stbi__pars
$LN33@stbi__pars:
; Line 3033
	jmp	$LN29@stbi__pars
$LN30@stbi__pars:
; Line 3034
	mov	eax, 1
$LN59@stbi__pars:
$LN45@stbi__pars:
$LN1@stbi__pars:
; Line 3037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	ret	0
stbi__parse_entropy_coded_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 0
j$ = 32
stbi__jpeg_reset PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2903
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2904
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18468], 0
; Line 2905
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18464], 0
; Line 2906
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 0
; Line 2907
	mov	eax, 96					; 00000060H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
; Line 2908
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 2909
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18536], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18536]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN4@stbi__jpeg
$LN3@stbi__jpeg:
	mov	DWORD PTR tv88[rsp], 2147483647		; 7fffffffH
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR tv88[rsp]
	mov	DWORD PTR [rax+18540], ecx
; Line 2910
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18500], 0
; Line 2913
	add	rsp, 24
	ret	0
stbi__jpeg_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
j$ = 64
stbi__get_marker PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2886
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2888
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@stbi__get_
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	mov	BYTE PTR x$[rsp], al
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
	movzx	eax, BYTE PTR x$[rsp]
	jmp	SHORT $LN1@stbi__get_
$LN4@stbi__get_:
; Line 2889
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	BYTE PTR x$[rsp], al
; Line 2890
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@stbi__get_
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__get_
$LN5@stbi__get_:
$LN2@stbi__get_:
; Line 2891
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@stbi__get_
; Line 2892
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	BYTE PTR x$[rsp], al
	jmp	SHORT $LN2@stbi__get_
$LN3@stbi__get_:
; Line 2893
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__get_:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
stbi__get_marker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp$ = 0
row1$ = 16
row3$ = 32
row5$ = 48
row7$ = 64
row0$ = 80
row2$ = 96
row4$ = 112
row6$ = 128
p0$1 = 144
p2$2 = 160
p1$3 = 176
p3$4 = 192
bias_0$ = 208
bias_1$ = 224
rot0_0$ = 240
rot0_1$ = 256
rot2_0$ = 272
rot2_1$ = 288
rot3_0$ = 304
rot3_1$ = 320
rot1_0$ = 336
rot1_1$ = 352
rot0_0lo$5 = 368
rot0_0hi$6 = 384
sum04$7 = 400
dif04$8 = 416
t0e_l$9 = 432
t3e_l$10 = 448
t0e_h$11 = 464
t3e_h$12 = 480
t1e_l$13 = 496
t2e_l$14 = 512
t1e_h$15 = 528
t2e_h$16 = 544
rot2_0lo$17 = 560
rot2_0hi$18 = 576
rot3_0lo$19 = 592
rot3_0hi$20 = 608
sum17$21 = 624
sum35$22 = 640
rot1_0lo$23 = 656
rot1_0hi$24 = 672
y5o_l$25 = 688
y5o_h$26 = 704
y4o_l$27 = 720
y4o_h$28 = 736
abiased_l$29 = 752
x7_l$30 = 768
abiased_h$31 = 784
x7_h$32 = 800
abiased_l$33 = 816
x6_l$34 = 832
abiased_h$35 = 848
x6_h$36 = 864
abiased_l$37 = 880
x5_l$38 = 896
abiased_h$39 = 912
x5_h$40 = 928
abiased_l$41 = 944
x4_l$42 = 960
abiased_h$43 = 976
x4_h$44 = 992
rot0_0lo$45 = 1008
rot0_0hi$46 = 1024
sum04$47 = 1040
dif04$48 = 1056
t0e_l$49 = 1072
t3e_l$50 = 1088
t0e_h$51 = 1104
t3e_h$52 = 1120
t1e_l$53 = 1136
t2e_l$54 = 1152
t1e_h$55 = 1168
t2e_h$56 = 1184
rot2_0lo$57 = 1200
rot2_0hi$58 = 1216
rot3_0lo$59 = 1232
rot3_0hi$60 = 1248
sum17$61 = 1264
sum35$62 = 1280
rot1_0lo$63 = 1296
rot1_0hi$64 = 1312
y5o_l$65 = 1328
y5o_h$66 = 1344
y4o_l$67 = 1360
y4o_h$68 = 1376
abiased_l$69 = 1392
x7_l$70 = 1408
abiased_h$71 = 1424
x7_h$72 = 1440
abiased_l$73 = 1456
x6_l$74 = 1472
abiased_h$75 = 1488
x6_h$76 = 1504
abiased_l$77 = 1520
x5_l$78 = 1536
abiased_h$79 = 1552
x5_h$80 = 1568
abiased_l$81 = 1584
x4_l$82 = 1600
abiased_h$83 = 1616
x4_h$84 = 1632
y0o_l$85 = 1648
y0o_h$86 = 1664
y1o_l$87 = 1680
y1o_h$88 = 1696
y2o_l$89 = 1712
y2o_h$90 = 1728
y3o_l$91 = 1744
y3o_h$92 = 1760
x0_l$93 = 1776
x0_h$94 = 1792
sum_h$95 = 1808
sum_l$96 = 1824
dif_h$97 = 1840
dif_l$98 = 1856
x1_l$99 = 1872
x1_h$100 = 1888
sum_h$101 = 1904
sum_l$102 = 1920
dif_h$103 = 1936
dif_l$104 = 1952
x2_l$105 = 1968
x2_h$106 = 1984
sum_h$107 = 2000
sum_l$108 = 2016
dif_h$109 = 2032
dif_l$110 = 2048
x3_l$111 = 2064
x3_h$112 = 2080
sum_h$113 = 2096
sum_l$114 = 2112
dif_h$115 = 2128
dif_l$116 = 2144
y0o_l$117 = 2160
y0o_h$118 = 2176
y1o_l$119 = 2192
y1o_h$120 = 2208
y2o_l$121 = 2224
y2o_h$122 = 2240
y3o_l$123 = 2256
y3o_h$124 = 2272
x0_l$125 = 2288
x0_h$126 = 2304
sum_h$127 = 2320
sum_l$128 = 2336
dif_h$129 = 2352
dif_l$130 = 2368
x1_l$131 = 2384
x1_h$132 = 2400
sum_h$133 = 2416
sum_l$134 = 2432
dif_h$135 = 2448
dif_l$136 = 2464
x2_l$137 = 2480
x2_h$138 = 2496
sum_h$139 = 2512
sum_l$140 = 2528
dif_h$141 = 2544
dif_l$142 = 2560
x3_l$143 = 2576
x3_h$144 = 2592
sum_h$145 = 2608
sum_l$146 = 2624
dif_h$147 = 2640
dif_l$148 = 2656
out$ = 2688
out_stride$ = 2696
data$ = 2704
stbi__idct_simd PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2497
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2680				; 00000a78H
; Line 2581
	movdqa	xmm0, XMMWORD PTR __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
	movdqa	XMMWORD PTR rot0_0$[rsp], xmm0
; Line 2582
	movdqa	xmm0, XMMWORD PTR __xmm@08a914e808a914e808a914e808a914e8
	movdqa	XMMWORD PTR rot0_1$[rsp], xmm0
; Line 2583
	movdqa	xmm0, XMMWORD PTR __xmm@12d0046b12d0046b12d0046b12d0046b
	movdqa	XMMWORD PTR rot1_0$[rsp], xmm0
; Line 2584
	movdqa	xmm0, XMMWORD PTR __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
	movdqa	XMMWORD PTR rot1_1$[rsp], xmm0
; Line 2585
	movdqa	xmm0, XMMWORD PTR __xmm@e09ee565e09ee565e09ee565e09ee565
	movdqa	XMMWORD PTR rot2_0$[rsp], xmm0
; Line 2586
	movdqa	xmm0, XMMWORD PTR __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
	movdqa	XMMWORD PTR rot2_1$[rsp], xmm0
; Line 2587
	movdqa	xmm0, XMMWORD PTR __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
	movdqa	XMMWORD PTR rot3_0$[rsp], xmm0
; Line 2588
	movdqa	xmm0, XMMWORD PTR __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
	movdqa	XMMWORD PTR rot3_1$[rsp], xmm0
; Line 2591
	movdqa	xmm0, XMMWORD PTR __xmm@00000200000002000000020000000200
	movdqa	XMMWORD PTR bias_0$[rsp], xmm0
; Line 2592
	movdqa	xmm0, XMMWORD PTR __xmm@01010000010100000101000001010000
	movdqa	XMMWORD PTR bias_1$[rsp], xmm0
; Line 2595
	mov	rax, QWORD PTR data$[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
; Line 2596
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 16
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2597
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 32					; 00000020H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2598
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 48					; 00000030H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2599
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 64					; 00000040H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2600
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 80					; 00000050H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2601
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 96					; 00000060H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2602
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 112				; 00000070H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2605
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0lo$5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0hi$6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_l$14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_h$16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_l$10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_h$12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR sum04$7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR dif04$8[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR sum04$7[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_l$9[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR sum04$7[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_h$11[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR dif04$8[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_l$13[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR dif04$8[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_h$15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR x0_l$93[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR x0_h$94[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR x3_l$111[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR x3_h$112[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR x1_l$99[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR x1_h$100[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR x2_l$105[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR x2_h$106[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0lo$17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0hi$18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_l$85[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_h$86[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_l$89[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_h$90[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0lo$19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0hi$20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_l$87[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_h$88[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_l$91[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_h$92[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR sum17$21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR sum35$22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR rot1_0lo$23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR rot1_0hi$24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_l$27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_h$28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_l$25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_h$26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$85[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR x4_l$42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$86[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR x4_h$44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$87[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR x5_l$38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$88[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR x5_h$40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$89[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR x6_l$34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$90[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR x6_h$36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$91[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR x7_l$30[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$92[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR x7_h$32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$93[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$94[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR sum_l$96[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR sum_h$95[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR dif_l$98[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR dif_h$97[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$95[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$96[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$97[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$98[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$99[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$33[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$100[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR sum_l$102[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR sum_h$101[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR dif_l$104[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR dif_h$103[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$101[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$102[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$103[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$104[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$105[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$106[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR sum_l$108[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR sum_h$107[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR dif_l$110[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR dif_h$109[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$107[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$108[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$109[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$110[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$111[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$112[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR sum_l$114[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR sum_h$113[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR dif_l$116[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR dif_h$115[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$113[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$114[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$115[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$116[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2609
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2610
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2611
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2612
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2615
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2616
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2617
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2618
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2621
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2622
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2623
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2624
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2628
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0lo$45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0hi$46[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_l$54[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_h$56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_l$50[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_h$52[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR sum04$47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR dif04$48[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR sum04$47[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_l$49[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR sum04$47[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_h$51[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR dif04$48[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_l$53[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR dif04$48[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_h$55[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR x0_l$125[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR x0_h$126[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR x3_l$143[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR x3_h$144[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR x1_l$131[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR x1_h$132[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR x2_l$137[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR x2_h$138[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0lo$57[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0hi$58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_l$117[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_h$118[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_l$121[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_h$122[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0lo$59[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0hi$60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_l$119[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_h$120[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_l$123[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_h$124[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR sum17$61[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR sum35$62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR rot1_0lo$63[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR rot1_0hi$64[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_l$67[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_h$68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_l$65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_h$66[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$117[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR x4_l$82[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$118[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR x4_h$84[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$119[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR x5_l$78[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$120[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR x5_h$80[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$121[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR x6_l$74[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$122[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR x6_h$76[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$123[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR x7_l$70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$124[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR x7_h$72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$125[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$126[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR sum_l$128[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR sum_h$127[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR dif_l$130[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR dif_h$129[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$127[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$128[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$129[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$130[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$131[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$73[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$132[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$75[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR sum_l$134[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR sum_h$133[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR dif_l$136[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR dif_h$135[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$133[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$134[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$135[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$136[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$137[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$77[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$138[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$79[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR sum_l$140[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR sum_h$139[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR dif_l$142[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR dif_h$141[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$139[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$140[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$141[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$142[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$143[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$81[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$144[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$83[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR sum_l$146[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR sum_h$145[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR dif_l$148[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR dif_h$147[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$145[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$146[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$147[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$148[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2632
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	packuswb xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
; Line 2633
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	packuswb xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2634
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	packuswb xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2635
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	packuswb xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2638
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2639
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2642
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2643
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2646
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2647
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2650
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2651
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2652
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2653
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2654
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2655
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2656
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2657
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
; Line 2669
	add	rsp, 2680				; 00000a78H
	ret	0
stbi__idct_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
p3$1 = 40
t3$2 = 44
t2$3 = 48
t1$4 = 52
t0$5 = 56
p3$6 = 60
t3$7 = 64
t2$8 = 68
t1$9 = 72
t0$10 = 76
p2$11 = 80
p2$12 = 84
d$ = 88
dcterm$13 = 96
p1$14 = 100
i$ = 104
p1$15 = 108
p4$16 = 112
p4$17 = 116
o$ = 120
x0$18 = 128
x1$19 = 132
x2$20 = 136
x3$21 = 140
x0$22 = 144
x1$23 = 148
x2$24 = 152
x3$25 = 156
p5$26 = 160
p5$27 = 164
val$ = 176
__$ArrayPad$ = 432
out$ = 464
out_stride$ = 472
data$ = 480
stbi__idct_block PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2434
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2435
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
; Line 2437
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR d$[rsp], rax
; Line 2440
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__idct
$LN2@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	QWORD PTR d$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	QWORD PTR v$[rsp], rax
$LN4@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN3@stbi__idct
; Line 2443
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
; Line 2448
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR dcterm$13[rsp], eax
; Line 2449
	mov	eax, 4
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 2450
	jmp	$LN9@stbi__idct
$LN8@stbi__idct:
; Line 2451
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$21[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p3$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$26[rsp], eax
	imul	eax, DWORD PTR t0$5[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$5[rsp], eax
	imul	eax, DWORD PTR t1$4[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$4[rsp], eax
	imul	eax, DWORD PTR t2$3[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR t3$2[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$2[rsp], eax
	imul	eax, DWORD PTR p1$14[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$1[rsp], eax
	imul	eax, DWORD PTR p4$16[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$5[rsp], eax
; Line 2454
	mov	eax, DWORD PTR x0$18[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR x1$19[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR x2$20[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, DWORD PTR x3$21[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x3$21[rsp], eax
; Line 2455
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2456
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 56				; 00000038H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2457
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2458
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2459
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2460
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2461
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2462
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN9@stbi__idct:
; Line 2464
	jmp	$LN2@stbi__idct
$LN3@stbi__idct:
; Line 2466
	mov	DWORD PTR i$[rsp], 0
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
	jmp	SHORT $LN7@stbi__idct
$LN5@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rsp], rax
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
$LN7@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN6@stbi__idct
; Line 2468
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$22[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$25[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$23[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$24[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p3$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$27[rsp], eax
	imul	eax, DWORD PTR t0$10[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$10[rsp], eax
	imul	eax, DWORD PTR t1$9[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$9[rsp], eax
	imul	eax, DWORD PTR t2$8[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR t3$7[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$7[rsp], eax
	imul	eax, DWORD PTR p1$15[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$6[rsp], eax
	imul	eax, DWORD PTR p4$17[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$10[rsp], eax
; Line 2475
	mov	eax, DWORD PTR x0$22[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x0$22[rsp], eax
; Line 2476
	mov	eax, DWORD PTR x1$23[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x1$23[rsp], eax
; Line 2477
	mov	eax, DWORD PTR x2$24[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x2$24[rsp], eax
; Line 2478
	mov	eax, DWORD PTR x3$25[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x3$25[rsp], eax
; Line 2481
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2482
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2483
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2484
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2485
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2486
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2487
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2488
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2489
	jmp	$LN5@stbi__idct
$LN6@stbi__idct:
; Line 2490
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	ret	0
stbi__idct_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
stbi__clamp PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2383
	mov	DWORD PTR [rsp+8], ecx
; Line 2385
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jbe	SHORT $LN2@stbi__clam
; Line 2386
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN3@stbi__clam
	xor	al, al
	jmp	SHORT $LN1@stbi__clam
$LN3@stbi__clam:
; Line 2387
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jle	SHORT $LN4@stbi__clam
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__clam
$LN4@stbi__clam:
$LN2@stbi__clam:
; Line 2389
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__clam:
; Line 2390
	ret	0
stbi__clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
bit$1 = 36
r$2 = 40
r$3 = 44
s$4 = 48
s$5 = 52
p$6 = 56
rs$7 = 64
zig$8 = 68
rs$9 = 72
p$10 = 80
shift$11 = 88
c$12 = 92
tv362 = 96
tv384 = 100
tv411 = 104
tv345 = 112
j$ = 144
data$ = 152
hac$ = 160
fac$ = 168
stbi__jpeg_decode_block_prog_ac PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2263
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2265
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN13@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72959
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN13@stbi__jpeg:
; Line 2267
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN14@stbi__jpeg
; Line 2268
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	DWORD PTR shift$11[rsp], eax
; Line 2270
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	SHORT $LN16@stbi__jpeg
; Line 2271
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2272
	mov	eax, 1
	jmp	$LN1@stbi__jpeg
$LN16@stbi__jpeg:
; Line 2275
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2279
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN17@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN17@stbi__jpeg:
; Line 2280
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$12[rsp], eax
; Line 2281
	movsxd	rax, DWORD PTR c$12[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$2[rsp], eax
; Line 2282
	cmp	DWORD PTR r$2[rsp], 0
	je	$LN18@stbi__jpeg
; Line 2283
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2284
	mov	eax, DWORD PTR r$2[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2285
	mov	eax, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv345[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv345[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2286
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$4[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2287
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$8[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2288
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2289
	jmp	$LN19@stbi__jpeg
$LN18@stbi__jpeg:
; Line 2290
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$7[rsp], eax
; Line 2291
	cmp	DWORD PTR rs$7[rsp], 0
	jge	SHORT $LN20@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72967
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN20@stbi__jpeg:
; Line 2292
	mov	eax, DWORD PTR rs$7[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2293
	mov	eax, DWORD PTR rs$7[rsp]
	sar	eax, 4
	mov	DWORD PTR r$2[rsp], eax
; Line 2294
	cmp	DWORD PTR s$4[rsp], 0
	jne	$LN21@stbi__jpeg
; Line 2295
	cmp	DWORD PTR r$2[rsp], 15
	jge	SHORT $LN23@stbi__jpeg
; Line 2296
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv362[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv362[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2297
	cmp	DWORD PTR r$2[rsp], 0
	je	SHORT $LN24@stbi__jpeg
; Line 2298
	mov	edx, DWORD PTR r$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bits
	mov	rcx, QWORD PTR j$[rsp]
	add	eax, DWORD PTR [rcx+18500]
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN24@stbi__jpeg:
; Line 2299
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2300
	jmp	$LN3@stbi__jpeg
$LN23@stbi__jpeg:
; Line 2302
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2303
	jmp	SHORT $LN22@stbi__jpeg
$LN21@stbi__jpeg:
; Line 2304
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2305
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$8[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2306
	mov	edx, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN22@stbi__jpeg:
$LN19@stbi__jpeg:
; Line 2309
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2310
	jmp	$LN15@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2313
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv384[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv384[rsp]
	shl	eax, cl
	mov	WORD PTR bit$1[rsp], ax
; Line 2315
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	$LN25@stbi__jpeg
; Line 2316
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2317
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN6@stbi__jpeg
; Line 2318
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$10[rsp], rax
; Line 2319
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN27@stbi__jpeg
; Line 2320
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN28@stbi__jpeg
; Line 2321
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN29@stbi__jpeg
; Line 2322
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN30@stbi__jpeg
; Line 2323
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN31@stbi__jpeg
$LN30@stbi__jpeg:
; Line 2325
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
$LN31@stbi__jpeg:
$LN29@stbi__jpeg:
$LN28@stbi__jpeg:
$LN27@stbi__jpeg:
; Line 2327
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2328
	jmp	$LN26@stbi__jpeg
$LN25@stbi__jpeg:
; Line 2329
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi__jpeg:
; Line 2332
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$9[rsp], eax
; Line 2333
	cmp	DWORD PTR rs$9[rsp], 0
	jge	SHORT $LN32@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72980
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN32@stbi__jpeg:
; Line 2334
	mov	eax, DWORD PTR rs$9[rsp]
	and	eax, 15
	mov	DWORD PTR s$5[rsp], eax
; Line 2335
	mov	eax, DWORD PTR rs$9[rsp]
	sar	eax, 4
	mov	DWORD PTR r$3[rsp], eax
; Line 2336
	cmp	DWORD PTR s$5[rsp], 0
	jne	SHORT $LN33@stbi__jpeg
; Line 2337
	cmp	DWORD PTR r$3[rsp], 15
	jge	SHORT $LN35@stbi__jpeg
; Line 2338
	mov	eax, DWORD PTR r$3[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv411[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv411[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2339
	cmp	DWORD PTR r$3[rsp], 0
	je	SHORT $LN37@stbi__jpeg
; Line 2340
	mov	edx, DWORD PTR r$3[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bits
	mov	rcx, QWORD PTR j$[rsp]
	add	eax, DWORD PTR [rcx+18500]
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN37@stbi__jpeg:
; Line 2341
	mov	DWORD PTR r$3[rsp], 64			; 00000040H
$LN35@stbi__jpeg:
; Line 2347
	jmp	SHORT $LN34@stbi__jpeg
$LN33@stbi__jpeg:
; Line 2348
	cmp	DWORD PTR s$5[rsp], 1
	je	SHORT $LN38@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72987
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN38@stbi__jpeg:
; Line 2350
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN39@stbi__jpeg
; Line 2351
	movsx	eax, WORD PTR bit$1[rsp]
	mov	DWORD PTR s$5[rsp], eax
	jmp	SHORT $LN40@stbi__jpeg
$LN39@stbi__jpeg:
; Line 2353
	movsx	eax, WORD PTR bit$1[rsp]
	neg	eax
	mov	DWORD PTR s$5[rsp], eax
$LN40@stbi__jpeg:
$LN34@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 2357
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN12@stbi__jpeg
; Line 2358
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$6[rsp], rax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2359
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stbi__jpeg
; Line 2360
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN43@stbi__jpeg
; Line 2361
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN44@stbi__jpeg
; Line 2362
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN45@stbi__jpeg
; Line 2363
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN46@stbi__jpeg
$LN45@stbi__jpeg:
; Line 2365
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
$LN46@stbi__jpeg:
$LN44@stbi__jpeg:
$LN43@stbi__jpeg:
; Line 2367
	jmp	SHORT $LN42@stbi__jpeg
$LN41@stbi__jpeg:
; Line 2368
	cmp	DWORD PTR r$3[rsp], 0
	jne	SHORT $LN47@stbi__jpeg
; Line 2369
	mov	rax, QWORD PTR p$6[rsp]
	movzx	ecx, WORD PTR s$5[rsp]
	mov	WORD PTR [rax], cx
; Line 2370
	jmp	SHORT $LN12@stbi__jpeg
$LN47@stbi__jpeg:
; Line 2372
	mov	eax, DWORD PTR r$3[rsp]
	dec	eax
	mov	DWORD PTR r$3[rsp], eax
$LN42@stbi__jpeg:
; Line 2374
	jmp	$LN11@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2375
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN10@stbi__jpeg
$LN26@stbi__jpeg:
$LN15@stbi__jpeg:
; Line 2378
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2379
	add	rsp, 136				; 00000088H
	ret	0
stbi__jpeg_decode_block_prog_ac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
tv87 = 36
dc$ = 40
diff$ = 44
tv175 = 48
j$ = 80
data$ = 88
hdc$ = 96
b$ = 104
stbi__jpeg_decode_block_prog_dc PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2235
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2238
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18488], 0
	je	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72912
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 2240
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN3@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN3@stbi__jpeg:
; Line 2242
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN4@stbi__jpeg
; Line 2244
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2245
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2246
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG72918
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2247
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN10@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN11@stbi__jpeg
$LN10@stbi__jpeg:
	mov	DWORD PTR tv87[rsp], 0
$LN11@stbi__jpeg:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2249
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2250
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2251
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv175[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv175[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2252
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
; Line 2254
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN8@stbi__jpeg
; Line 2255
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18496]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	movsx	ecx, cx
	mov	rdx, QWORD PTR data$[rsp]
	movsx	eax, WORD PTR [rdx+rax]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN8@stbi__jpeg:
$LN5@stbi__jpeg:
; Line 2257
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2258
	add	rsp, 72					; 00000048H
	ret	0
stbi__jpeg_decode_block_prog_dc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
r$1 = 36
s$2 = 40
zig$3 = 44
t$ = 48
rs$4 = 52
tv81 = 56
dc$ = 60
diff$ = 64
c$5 = 68
tv236 = 72
j$ = 96
data$ = 104
hdc$ = 112
hac$ = 120
fac$ = 128
b$ = 136
dequant$ = 144
stbi__jpeg_decode_block PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2183
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2187
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2188
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2189
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG72887
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2192
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2194
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN16@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN17@stbi__jpeg
$LN16@stbi__jpeg:
	mov	DWORD PTR tv81[rsp], 0
$LN17@stbi__jpeg:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2195
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2196
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2197
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2200
	mov	DWORD PTR k$[rsp], 1
$LN4@stbi__jpeg:
; Line 2204
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN8@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN8@stbi__jpeg:
; Line 2205
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$5[rsp], eax
; Line 2206
	movsxd	rax, DWORD PTR c$5[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$1[rsp], eax
; Line 2207
	cmp	DWORD PTR r$1[rsp], 0
	je	$LN9@stbi__jpeg
; Line 2208
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2209
	mov	eax, DWORD PTR r$1[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2210
	mov	eax, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv236[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv236[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2211
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$2[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2213
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$3[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2214
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2215
	jmp	$LN10@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2216
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$4[rsp], eax
; Line 2217
	cmp	DWORD PTR rs$4[rsp], 0
	jge	SHORT $LN11@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG72892
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN11@stbi__jpeg:
; Line 2218
	mov	eax, DWORD PTR rs$4[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2219
	mov	eax, DWORD PTR rs$4[rsp]
	sar	eax, 4
	mov	DWORD PTR r$1[rsp], eax
; Line 2220
	cmp	DWORD PTR s$2[rsp], 0
	jne	SHORT $LN12@stbi__jpeg
; Line 2221
	cmp	DWORD PTR rs$4[rsp], 240		; 000000f0H
	je	SHORT $LN14@stbi__jpeg
	jmp	SHORT $LN3@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2222
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2223
	jmp	SHORT $LN13@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2224
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2226
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$3[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2227
	mov	edx, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN13@stbi__jpeg:
$LN10@stbi__jpeg:
; Line 2230
	cmp	DWORD PTR k$[rsp], 64			; 00000040H
	jl	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2231
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2232
	add	rsp, 88					; 00000058H
	ret	0
stbi__jpeg_decode_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
stbi__jpeg_get_bit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2155
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2157
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 1
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2158
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	mov	DWORD PTR k$[rsp], eax
; Line 2159
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2160
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2161
	mov	eax, DWORD PTR k$[rsp]
	and	eax, -2147483648			; 80000000H
; Line 2162
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_get_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
n$ = 72
stbi__jpeg_get_bits PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2146
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2147
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2148
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2149
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2150
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2151
	mov	eax, DWORD PTR k$[rsp]
; Line 2152
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_get_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
sgn$ = 36
j$ = 64
n$ = 72
stbi__extend_receive PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2129
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2132
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__exte
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__exte:
; Line 2134
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 31
	mov	DWORD PTR sgn$[rsp], eax
; Line 2135
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2136
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2137
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2138
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2139
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jbias
	mov	edx, DWORD PTR sgn$[rsp]
	dec	edx
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 2140
	add	rsp, 56					; 00000038H
	ret	0
stbi__extend_receive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
c$ = 36
s$1 = 40
temp$ = 44
tv209 = 48
tv230 = 56
tv239 = 64
tv250 = 72
j$ = 96
h$ = 104
stbi__jpeg_huff_decode PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2075
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2079
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2083
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$[rsp], eax
; Line 2084
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 2085
	cmp	DWORD PTR k$[rsp], 255			; 000000ffH
	jge	$LN6@stbi__jpeg
; Line 2086
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2087
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR s$1[rsp], eax
	jle	SHORT $LN7@stbi__jpeg
; Line 2088
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN7@stbi__jpeg:
; Line 2089
	mov	eax, DWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv209[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv209[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2090
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2091
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2100
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 16
	mov	DWORD PTR temp$[rsp], eax
; Line 2101
	mov	DWORD PTR k$[rsp], 10
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2102
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1540]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN8@stbi__jpeg
; Line 2103
	jmp	SHORT $LN3@stbi__jpeg
$LN8@stbi__jpeg:
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2104
	cmp	DWORD PTR k$[rsp], 17
	jne	SHORT $LN9@stbi__jpeg
; Line 2106
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, 16
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2107
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2110
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR k$[rsp], eax
	jle	SHORT $LN10@stbi__jpeg
; Line 2111
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN10@stbi__jpeg:
; Line 2114
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv230[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv230[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:stbi__bmask
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4+1612]
	mov	DWORD PTR c$[rsp], eax
; Line 2115
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv239[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv239[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+1280]
	lea	rdx, OFFSET FLAT:stbi__bmask
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+512]
	cmp	eax, ecx
	je	SHORT $LN12@stbi__jpeg
	mov	r8d, 2115				; 00000843H
	lea	rdx, OFFSET FLAT:$SG72826
	lea	rcx, OFFSET FLAT:$SG72827
	call	_wassert
	xor	eax, eax
$LN12@stbi__jpeg:
; Line 2118
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2119
	mov	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv250[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv250[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2120
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
$LN1@stbi__jpeg:
; Line 2121
	add	rsp, 88					; 00000058H
	ret	0
stbi__jpeg_huff_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
tv70 = 36
b$2 = 40
j$ = 64
stbi__grow_buffer_unsafe PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2053
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__grow:
; Line 2055
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18476], 0
	je	SHORT $LN10@stbi__grow
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN11@stbi__grow
$LN10@stbi__grow:
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv70[rsp], eax
$LN11@stbi__grow:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b$2[rsp], eax
; Line 2056
	cmp	DWORD PTR b$2[rsp], 255			; 000000ffH
	jne	SHORT $LN7@stbi__grow
; Line 2057
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
$LN5@stbi__grow:
; Line 2058
	cmp	DWORD PTR c$1[rsp], 255			; 000000ffH
	jne	SHORT $LN6@stbi__grow
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN5@stbi__grow
$LN6@stbi__grow:
; Line 2059
	cmp	DWORD PTR c$1[rsp], 0
	je	SHORT $LN8@stbi__grow
; Line 2060
	mov	rax, QWORD PTR j$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rax+18472], cl
; Line 2061
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 1
; Line 2062
	jmp	SHORT $LN1@stbi__grow
$LN8@stbi__grow:
$LN7@stbi__grow:
; Line 2065
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 24
	sub	ecx, DWORD PTR [rax+18468]
	mov	eax, ecx
	movzx	ecx, al
	mov	eax, DWORD PTR b$2[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18464]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2066
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	add	eax, 8
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2067
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jle	$LN4@stbi__grow
$LN1@stbi__grow:
; Line 2068
	add	rsp, 56					; 00000038H
	ret	0
stbi__grow_buffer_unsafe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fast$1 = 0
i$ = 4
k$2 = 8
magbits$3 = 12
len$4 = 16
rs$5 = 20
tv173 = 24
m$6 = 28
tv177 = 32
run$7 = 36
fast_ac$ = 64
h$ = 72
stbi__build_fast_ac PROC
; File W:\cpp\void\rx\stb_image.h
; Line 2028
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2030
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 512			; 00000200H
	jge	$LN3@stbi__buil
; Line 2031
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR fast$1[rsp], al
; Line 2032
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 2033
	movzx	eax, BYTE PTR fast$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	$LN5@stbi__buil
; Line 2034
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	mov	DWORD PTR rs$5[rsp], eax
; Line 2035
	mov	eax, DWORD PTR rs$5[rsp]
	sar	eax, 4
	and	eax, 15
	mov	DWORD PTR run$7[rsp], eax
; Line 2036
	mov	eax, DWORD PTR rs$5[rsp]
	and	eax, 15
	mov	DWORD PTR magbits$3[rsp], eax
; Line 2037
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR len$4[rsp], eax
; Line 2039
	cmp	DWORD PTR magbits$3[rsp], 0
	je	$LN6@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, DWORD PTR len$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 9
	jg	$LN6@stbi__buil
; Line 2041
	mov	eax, DWORD PTR len$4[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, cl
	and	eax, 511				; 000001ffH
	mov	ecx, 9
	sub	ecx, DWORD PTR magbits$3[rsp]
	sar	eax, cl
	mov	DWORD PTR k$2[rsp], eax
; Line 2042
	mov	eax, DWORD PTR magbits$3[rsp]
	dec	eax
	mov	ecx, 1
	mov	DWORD PTR tv173[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv173[rsp]
	shl	eax, cl
	mov	DWORD PTR m$6[rsp], eax
; Line 2043
	mov	eax, DWORD PTR m$6[rsp]
	cmp	DWORD PTR k$2[rsp], eax
	jge	SHORT $LN7@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR k$2[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR k$2[rsp], eax
$LN7@stbi__buil:
; Line 2045
	cmp	DWORD PTR k$2[rsp], -128		; ffffffffffffff80H
	jl	SHORT $LN8@stbi__buil
	cmp	DWORD PTR k$2[rsp], 127			; 0000007fH
	jg	SHORT $LN8@stbi__buil
; Line 2046
	imul	eax, DWORD PTR k$2[rsp], 256		; 00000100H
	imul	ecx, DWORD PTR run$7[rsp], 16
	add	eax, ecx
	mov	ecx, DWORD PTR magbits$3[rsp]
	mov	edx, DWORD PTR len$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN8@stbi__buil:
$LN6@stbi__buil:
$LN5@stbi__buil:
; Line 2049
	jmp	$LN2@stbi__buil
$LN3@stbi__buil:
; Line 2050
	add	rsp, 56					; 00000038H
	ret	0
stbi__build_fast_ac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
i$ = 40
code$ = 44
s$1 = 48
tv232 = 52
m$2 = 56
c$3 = 60
h$ = 80
count$ = 88
stbi__build_huffman PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1984
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1985
	mov	DWORD PTR k$[rsp], 0
; Line 1988
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN3@stbi__buil
; Line 1989
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__buil
$LN5@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__buil:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__buil
; Line 1990
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rdx+rcx+1280], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN5@stbi__buil
$LN6@stbi__buil:
	jmp	SHORT $LN2@stbi__buil
$LN3@stbi__buil:
; Line 1991
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rcx+rax+1280], 0
; Line 1994
	mov	DWORD PTR code$[rsp], 0
; Line 1995
	mov	DWORD PTR k$[rsp], 0
; Line 1996
	mov	DWORD PTR j$[rsp], 1
	jmp	SHORT $LN10@stbi__buil
$LN8@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbi__buil:
	cmp	DWORD PTR j$[rsp], 16
	jg	$LN9@stbi__buil
; Line 1998
	mov	eax, DWORD PTR code$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1612], eax
; Line 1999
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN19@stbi__buil
$LN11@stbi__buil:
; Line 2000
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN12@stbi__buil
; Line 2001
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+512], dx
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR code$[rsp]
	inc	eax
	mov	DWORD PTR code$[rsp], eax
	jmp	SHORT $LN11@stbi__buil
$LN12@stbi__buil:
; Line 2002
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jb	SHORT $LN20@stbi__buil
	lea	rcx, OFFSET FLAT:$SG72766
	call	stbi__err
	jmp	$LN1@stbi__buil
$LN20@stbi__buil:
$LN19@stbi__buil:
; Line 2005
	mov	eax, 16
	sub	eax, DWORD PTR j$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1540], eax
; Line 2006
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 2007
	jmp	$LN8@stbi__buil
$LN9@stbi__buil:
; Line 2008
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+rax*4+1540], -1		; ffffffffH
; Line 2011
	mov	rax, QWORD PTR h$[rsp]
	mov	r8d, 512				; 00000200H
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	memset
; Line 2012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stbi__buil
$LN13@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stbi__buil:
	mov	eax, DWORD PTR k$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stbi__buil
; Line 2013
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2014
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN21@stbi__buil
; Line 2015
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+512]
	mov	ecx, 9
	sub	ecx, DWORD PTR s$1[rsp]
	shl	eax, cl
	mov	DWORD PTR c$3[rsp], eax
; Line 2016
	mov	eax, 9
	sub	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv232[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv232[rsp]
	shl	eax, cl
	mov	DWORD PTR m$2[rsp], eax
; Line 2017
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi__buil
$LN16@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi__buil:
	mov	eax, DWORD PTR m$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stbi__buil
; Line 2018
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR c$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, BYTE PTR i$[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2019
	jmp	SHORT $LN16@stbi__buil
$LN17@stbi__buil:
$LN21@stbi__buil:
; Line 2021
	jmp	$LN13@stbi__buil
$LN14@stbi__buil:
; Line 2022
	mov	eax, 1
$LN1@stbi__buil:
; Line 2023
	add	rsp, 72					; 00000048H
	ret	0
stbi__build_huffman ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
dest$1 = 56
src$2 = 64
j$ = 72
tv137 = 76
good$ = 80
tv269 = 88
tv289 = 92
tv311 = 96
tv331 = 100
tv90 = 104
tv380 = 112
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
data$ = 416
img_n$ = 424
req_comp$ = 432
x$ = 440
y$ = 448
stbi__convert_format16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1793
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 1797
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1798
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1798				; 00000706H
	lea	rdx, OFFSET FLAT:$SG72526
	lea	rcx, OFFSET FLAT:$SG72527
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1800
	mov	eax, DWORD PTR req_comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	ecx, eax
	call	stbi__malloc
	mov	QWORD PTR good$[rsp], rax
; Line 1801
	cmp	QWORD PTR good$[rsp], 0
	jne	$LN44@stbi__conv
; Line 1802
	lea	rax, OFFSET FLAT:$SG72529
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1802				; 0000070aH
	lea	r8, OFFSET FLAT:$SG72530
	mov	edx, 62					; 0000003eH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 1803
	lea	rcx, OFFSET FLAT:$SG72531
	call	stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	QWORD PTR tv90[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	QWORD PTR tv90[rsp], 0
$LN62@stbi__conv:
	mov	rax, QWORD PTR tv90[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1806
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1807
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR src$2[rsp], rax
; Line 1808
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dest$1[rsp], rax
; Line 1814
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv137[rsp], eax
	mov	eax, DWORD PTR tv137[rsp]
	sub	eax, 10
	mov	DWORD PTR tv137[rsp], eax
	cmp	DWORD PTR tv137[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv137[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1815
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1816
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1817
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1818
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1819
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1820
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1821
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv269[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv269[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1823
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv289[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv289[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1824
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv311[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv311[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1825
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv331[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv331[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1826
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	$LN5@stbi__conv
$LN57@stbi__conv:
; Line 1827
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1827				; 00000723H
	lea	rdx, OFFSET FLAT:$SG72545
	lea	rcx, OFFSET FLAT:$SG72546
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	lea	rax, OFFSET FLAT:$SG72547
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1827				; 00000723H
	lea	r8, OFFSET FLAT:$SG72548
	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG72549
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1827				; 00000723H
	lea	r8, OFFSET FLAT:$SG72550
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR good$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG72551
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	QWORD PTR tv380[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	QWORD PTR tv380[rsp], 0
$LN65@stbi__conv:
	mov	rax, QWORD PTR tv380[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1830
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1832
	lea	rax, OFFSET FLAT:$SG72552
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1832				; 00000728H
	lea	r8, OFFSET FLAT:$SG72553
	mov	edx, 65					; 00000041H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 1833
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1834
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
stbi__convert_format16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
stbi__compute_y_16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1784
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1785
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1786
	ret	0
stbi__compute_y_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
dest$1 = 56
src$2 = 64
j$ = 72
tv134 = 76
good$ = 80
tv266 = 88
tv286 = 92
tv308 = 96
tv328 = 100
tv89 = 104
tv377 = 112
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
data$ = 416
img_n$ = 424
req_comp$ = 432
x$ = 440
y$ = 448
stbi__convert_format PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1736
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 1740
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1741
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1741				; 000006cdH
	lea	rdx, OFFSET FLAT:$SG72413
	lea	rcx, OFFSET FLAT:$SG72414
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1743
	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR good$[rsp], rax
; Line 1744
	cmp	QWORD PTR good$[rsp], 0
	jne	$LN44@stbi__conv
; Line 1745
	lea	rax, OFFSET FLAT:$SG72416
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1745				; 000006d1H
	lea	r8, OFFSET FLAT:$SG72417
	mov	edx, 58					; 0000003aH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 1746
	lea	rcx, OFFSET FLAT:$SG72418
	call	stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	QWORD PTR tv89[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	QWORD PTR tv89[rsp], 0
$LN62@stbi__conv:
	mov	rax, QWORD PTR tv89[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1749
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1750
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR src$2[rsp], rax
; Line 1751
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$1[rsp], rax
; Line 1757
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv134[rsp], eax
	mov	eax, DWORD PTR tv134[rsp]
	sub	eax, 10
	mov	DWORD PTR tv134[rsp], eax
	cmp	DWORD PTR tv134[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv134[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1758
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1759
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1760
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1761
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1762
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1764
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1765
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv266[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv266[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1766
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv286[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv286[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1767
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv308[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv308[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1768
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv328[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv328[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1769
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	$LN5@stbi__conv
$LN57@stbi__conv:
; Line 1770
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1770				; 000006eaH
	lea	rdx, OFFSET FLAT:$SG72432
	lea	rcx, OFFSET FLAT:$SG72433
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	lea	rax, OFFSET FLAT:$SG72434
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1770				; 000006eaH
	lea	r8, OFFSET FLAT:$SG72435
	mov	edx, 59					; 0000003bH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG72436
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1770				; 000006eaH
	lea	r8, OFFSET FLAT:$SG72437
	mov	edx, 60					; 0000003cH
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR good$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG72438
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	QWORD PTR tv377[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	QWORD PTR tv377[rsp], 0
$LN65@stbi__conv:
	mov	rax, QWORD PTR tv377[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1773
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1775
	lea	rax, OFFSET FLAT:$SG72439
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1775				; 000006efH
	lea	r8, OFFSET FLAT:$SG72440
	mov	edx, 61					; 0000003dH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 1776
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1777
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
stbi__convert_format ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
stbi__compute_y PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1727
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1728
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1729
	ret	0
stbi__compute_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
stbi__get32le PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1703
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1704
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR z$[rsp], eax
; Line 1705
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 1706
	mov	eax, DWORD PTR z$[rsp]
; Line 1707
	add	rsp, 56					; 00000038H
	ret	0
stbi__get32le ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
stbi__get16le PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1695
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1696
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1697
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1698
	add	rsp, 56					; 00000038H
	ret	0
stbi__get16le ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv66 = 36
s$ = 64
stbi__get32be PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1685
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1686
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR z$[rsp], eax
; Line 1687
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 16
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	ecx, DWORD PTR tv66[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1688
	add	rsp, 56					; 00000038H
	ret	0
stbi__get32be ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv67 = 36
s$ = 64
stbi__get16be PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1675
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1676
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1677
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
stbi__get16be ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv87 = 36
count$2 = 40
res$3 = 44
s$ = 64
buffer$ = 72
n$ = 80
stbi__getn PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1647
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1648
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@stbi__getn
; Line 1649
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1650
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	$LN3@stbi__getn
; Line 1653
	movsxd	rax, DWORD PTR blen$1[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1655
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR blen$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR count$2[rsp], eax
; Line 1656
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR count$2[rsp], eax
	jne	SHORT $LN7@stbi__getn
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN8@stbi__getn
$LN7@stbi__getn:
	mov	DWORD PTR tv87[rsp], 0
$LN8@stbi__getn:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR res$3[rsp], eax
; Line 1657
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1658
	mov	eax, DWORD PTR res$3[rsp]
	jmp	SHORT $LN1@stbi__getn
$LN3@stbi__getn:
$LN2@stbi__getn:
; Line 1662
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+200]
	ja	SHORT $LN4@stbi__getn
; Line 1663
	movsxd	rax, DWORD PTR n$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1664
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1665
	mov	eax, 1
	jmp	SHORT $LN1@stbi__getn
; Line 1666
	jmp	SHORT $LN5@stbi__getn
$LN4@stbi__getn:
; Line 1667
	xor	eax, eax
$LN5@stbi__getn:
$LN1@stbi__getn:
; Line 1668
	add	rsp, 56					; 00000038H
	ret	0
stbi__getn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
s$ = 64
n$ = 72
stbi__skip PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1625
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1626
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__skip
	jmp	$LN1@stbi__skip
$LN2@stbi__skip:
; Line 1627
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN3@stbi__skip
; Line 1628
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1629
	jmp	$LN1@stbi__skip
$LN3@stbi__skip:
; Line 1631
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stbi__skip
; Line 1632
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1633
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	SHORT $LN5@stbi__skip
; Line 1634
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1635
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+24]
; Line 1636
	jmp	SHORT $LN1@stbi__skip
$LN5@stbi__skip:
$LN4@stbi__skip:
; Line 1639
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN1@stbi__skip:
; Line 1640
	add	rsp, 56					; 00000038H
	ret	0
stbi__skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
s$ = 64
stbi__at_eof PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1609
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1610
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stbi__at_e
; Line 1611
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+32]
	test	eax, eax
	jne	SHORT $LN3@stbi__at_e
	xor	eax, eax
	jmp	SHORT $LN1@stbi__at_e
$LN3@stbi__at_e:
; Line 1614
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__at_e
	mov	eax, 1
	jmp	SHORT $LN1@stbi__at_e
$LN4@stbi__at_e:
$LN2@stbi__at_e:
; Line 1617
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jb	SHORT $LN6@stbi__at_e
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN7@stbi__at_e
$LN6@stbi__at_e:
	mov	DWORD PTR tv76[rsp], 0
$LN7@stbi__at_e:
	mov	eax, DWORD PTR tv76[rsp]
$LN1@stbi__at_e:
; Line 1618
	add	rsp, 56					; 00000038H
	ret	0
stbi__at_eof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv81 = 33
s$ = 64
stbi__get8 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1596
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jae	SHORT $LN2@stbi__get8
; Line 1597
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv72[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv72[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN2@stbi__get8:
; Line 1598
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN3@stbi__get8
; Line 1599
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__refill_buffer
; Line 1600
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv81[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv81[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN3@stbi__get8:
; Line 1602
	xor	al, al
$LN1@stbi__get8:
; Line 1603
	add	rsp, 56					; 00000038H
	ret	0
stbi__get8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
hdr_data$1 = 56
data$ = 64
tv129 = 72
ri$2 = 80
__$ArrayPad$ = 96
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
req_comp$ = 160
stbi__loadf_main PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1441
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1444
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
; Line 1446
	lea	rax, QWORD PTR ri$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_load
	mov	QWORD PTR hdr_data$1[rsp], rax
; Line 1447
	cmp	QWORD PTR hdr_data$1[rsp], 0
	je	SHORT $LN3@stbi__load
; Line 1448
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR hdr_data$1[rsp]
	call	stbi__float_postprocess
$LN3@stbi__load:
; Line 1449
	mov	rax, QWORD PTR hdr_data$1[rsp]
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1452
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
	mov	QWORD PTR data$[rsp], rax
; Line 1453
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1454
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN7@stbi__load
$LN6@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv89[rsp], eax
$LN7@stbi__load:
	mov	r9d, DWORD PTR tv89[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi__ldr_to_hdr
	jmp	SHORT $LN1@stbi__load
$LN4@stbi__load:
; Line 1455
	lea	rcx, OFFSET FLAT:$SG72151
	call	stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	QWORD PTR tv129[rsp], 0
	jmp	SHORT $LN9@stbi__load
$LN8@stbi__load:
	mov	QWORD PTR tv129[rsp], 0
$LN9@stbi__load:
	mov	rax, QWORD PTR tv129[rsp]
$LN1@stbi__load:
; Line 1456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbi__loadf_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
stbi__fopen PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1337
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbi__fope
; Line 1338
	mov	QWORD PTR f$[rsp], 0
$LN2@stbi__fope:
; Line 1342
	mov	rax, QWORD PTR f$[rsp]
; Line 1343
	add	rsp, 56					; 00000038H
	ret	0
stbi__fopen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv81 = 36
channels$1 = 40
result$ = 64
x$ = 72
y$ = 80
comp$ = 88
req_comp$ = 96
stbi__float_postprocess PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1295
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1296
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi__floa
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN5@stbi__floa
$LN4@stbi__floa:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv77[rsp], eax
$LN5@stbi__floa:
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN2@stbi__floa
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi__floa
; Line 1297
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__floa
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN7@stbi__floa
$LN6@stbi__floa:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN7@stbi__floa:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1298
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 2
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN2@stbi__floa:
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
stbi__float_postprocess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
stbi__load_and_postprocess_16bit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1269
	mov	DWORD PTR [rsp+48], 16
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1271
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1272
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1275
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1275				; 000004fbH
	lea	rdx, OFFSET FLAT:$SG71951
	lea	rcx, OFFSET FLAT:$SG71952
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1277
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN3@stbi__load
; Line 1278
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_8_to_16
	mov	QWORD PTR result$[rsp], rax
; Line 1279
	mov	DWORD PTR ri$[rsp], 16
$LN3@stbi__load:
; Line 1285
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1286
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1287
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 1
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN4@stbi__load:
; Line 1290
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1291
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
stbi__load_and_postprocess_16bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
stbi__load_and_postprocess_8bit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1241
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1243
	mov	DWORD PTR [rsp+48], 8
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1245
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1246
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1249
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1249				; 000004e1H
	lea	rdx, OFFSET FLAT:$SG71924
	lea	rcx, OFFSET FLAT:$SG71925
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1251
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN3@stbi__load
; Line 1252
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_16_to_8
	mov	QWORD PTR result$[rsp], rax
; Line 1253
	mov	DWORD PTR ri$[rsp], 8
$LN3@stbi__load:
; Line 1258
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1259
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1260
	mov	r9d, DWORD PTR channels$1[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN4@stbi__load:
; Line 1263
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1264
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
stbi__load_and_postprocess_8bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slice$ = 32
slice_size$ = 36
bytes$ = 40
image$ = 64
w$ = 72
h$ = 80
z$ = 88
bytes_per_pixel$ = 96
stbi__vertical_flip_slices PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1228
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1230
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR bytes_per_pixel$[rsp]
	mov	DWORD PTR slice_size$[rsp], eax
; Line 1232
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1233
	mov	DWORD PTR slice$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR slice$[rsp]
	inc	eax
	mov	DWORD PTR slice$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR slice$[rsp], eax
	jge	SHORT $LN3@stbi__vert
; Line 1234
	mov	r9d, DWORD PTR bytes_per_pixel$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	call	stbi__vertical_flip
; Line 1235
	movsxd	rax, DWORD PTR slice_size$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes$[rsp], rax
; Line 1236
	jmp	SHORT $LN2@stbi__vert
$LN3@stbi__vert:
; Line 1237
	add	rsp, 56					; 00000038H
	ret	0
stbi__vertical_flip_slices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 32
bytes_copy$1 = 40
bytes_left$2 = 48
row0$3 = 56
row1$4 = 64
bytes_per_row$ = 72
bytes$ = 80
tv80 = 88
temp$ = 96
__$ArrayPad$ = 2144
image$ = 2176
w$ = 2184
h$ = 2192
bytes_per_pixel$ = 2200
stbi__vertical_flip PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1203
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1205
	movsxd	rax, DWORD PTR w$[rsp]
	movsxd	rcx, DWORD PTR bytes_per_pixel$[rsp]
	imul	rax, rcx
	mov	QWORD PTR bytes_per_row$[rsp], rax
; Line 1207
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1209
	mov	DWORD PTR row$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR h$[rsp]
	sar	eax, 1
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN3@stbi__vert
; Line 1210
	movsxd	rax, DWORD PTR row$[rsp]
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1211
	mov	eax, DWORD PTR row$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1213
	mov	rax, QWORD PTR bytes_per_row$[rsp]
	mov	QWORD PTR bytes_left$2[rsp], rax
$LN5@stbi__vert:
; Line 1214
	cmp	QWORD PTR bytes_left$2[rsp], 0
	je	$LN6@stbi__vert
; Line 1215
	cmp	QWORD PTR bytes_left$2[rsp], 2048	; 00000800H
	jae	SHORT $LN8@stbi__vert
	mov	rax, QWORD PTR bytes_left$2[rsp]
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN9@stbi__vert
$LN8@stbi__vert:
	mov	QWORD PTR tv80[rsp], 2048		; 00000800H
$LN9@stbi__vert:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR bytes_copy$1[rsp], rax
; Line 1216
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row0$3[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	memcpy
; Line 1217
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row1$4[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	call	memcpy
; Line 1218
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	lea	rdx, QWORD PTR temp$[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	call	memcpy
; Line 1219
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1220
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1221
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR bytes_left$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes_left$2[rsp], rax
; Line 1222
	jmp	$LN5@stbi__vert
$LN6@stbi__vert:
; Line 1223
	jmp	$LN2@stbi__vert
$LN3@stbi__vert:
; Line 1224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
stbi__vertical_flip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
img_len$ = 52
enlarged$ = 56
tv74 = 64
$T1 = 80
$T2 = 112
orig$ = 176
w$ = 184
h$ = 192
channels$ = 200
stbi__convert_8_to_16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1187
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1189
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1192
	mov	eax, DWORD PTR img_len$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR enlarged$[rsp], rax
; Line 1193
	cmp	QWORD PTR enlarged$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG71854
	call	stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	QWORD PTR tv74[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	QWORD PTR tv74[rsp], 0
$LN8@stbi__conv:
	mov	rax, QWORD PTR tv74[rsp]
	jmp	$LN1@stbi__conv
$LN5@stbi__conv:
; Line 1195
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1196
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR enlarged$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1198
	lea	rax, OFFSET FLAT:$SG71855
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1198				; 000004aeH
	lea	r8, OFFSET FLAT:$SG71856
	mov	edx, 57					; 00000039H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR orig$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1199
	mov	rax, QWORD PTR enlarged$[rsp]
$LN1@stbi__conv:
; Line 1200
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__convert_8_to_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
img_len$ = 52
reduced$ = 56
tv73 = 64
$T1 = 80
$T2 = 112
orig$ = 176
w$ = 184
h$ = 192
channels$ = 200
stbi__convert_16_to_8 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1171
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1173
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1176
	movsxd	rax, DWORD PTR img_len$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR reduced$[rsp], rax
; Line 1177
	cmp	QWORD PTR reduced$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG71826
	call	stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	QWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	QWORD PTR tv73[rsp], 0
$LN8@stbi__conv:
	mov	rax, QWORD PTR tv73[rsp]
	jmp	$LN1@stbi__conv
$LN5@stbi__conv:
; Line 1179
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1180
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR reduced$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1182
	lea	rax, OFFSET FLAT:$SG71827
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1182				; 0000049eH
	lea	r8, OFFSET FLAT:$SG71828
	mov	edx, 56					; 00000038H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR orig$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1183
	mov	rax, QWORD PTR reduced$[rsp]
$LN1@stbi__conv:
; Line 1184
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__convert_16_to_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv185 = 64
tv203 = 72
hdr$1 = 80
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
bpc$ = 160
stbi__load_main PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1118
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1119
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR ri$[rsp]
	call	memset
; Line 1120
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
; Line 1121
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1122
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 1127
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_load
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1130
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_test
	test	eax, eax
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_load
	jmp	$LN1@stbi__load
$LN3@stbi__load:
; Line 1133
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test
	test	eax, eax
	je	SHORT $LN4@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load
	jmp	$LN1@stbi__load
$LN4@stbi__load:
; Line 1136
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_test
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	eax, DWORD PTR bpc$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_load
	jmp	$LN1@stbi__load
$LN5@stbi__load:
; Line 1141
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_test
	test	eax, eax
	je	SHORT $LN6@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_load
	jmp	$LN1@stbi__load
$LN6@stbi__load:
; Line 1148
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_test
	test	eax, eax
	je	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_load
	jmp	$LN1@stbi__load
$LN7@stbi__load:
; Line 1151
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_test
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_load
	jmp	$LN1@stbi__load
$LN8@stbi__load:
; Line 1155
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	je	$LN9@stbi__load
; Line 1156
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_load
	mov	QWORD PTR hdr$1[rsp], rax
; Line 1157
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN12@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv185[rsp], eax
$LN13@stbi__load:
	mov	r9d, DWORD PTR tv185[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR hdr$1[rsp]
	call	stbi__hdr_to_ldr
	jmp	SHORT $LN1@stbi__load
$LN9@stbi__load:
; Line 1163
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_test
	test	eax, eax
	je	SHORT $LN10@stbi__load
; Line 1164
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_load
	jmp	SHORT $LN1@stbi__load
$LN10@stbi__load:
; Line 1167
	lea	rcx, OFFSET FLAT:$SG71801
	call	stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__load
	mov	QWORD PTR tv203[rsp], 0
	jmp	SHORT $LN15@stbi__load
$LN14@stbi__load:
	mov	QWORD PTR tv203[rsp], 0
$LN15@stbi__load:
	mov	rax, QWORD PTR tv203[rsp]
$LN1@stbi__load:
; Line 1168
	add	rsp, 104				; 00000068H
	ret	0
stbi__load_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
i$ = 52
z$1 = 56
z$2 = 60
n$ = 64
output$ = 72
tv83 = 80
tv133 = 88
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
data$ = 256
x$ = 264
y$ = 272
comp$ = 280
stbi__hdr_to_ldr PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1865
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1868
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN8@stbi__hdr_:
; Line 1869
	xor	r9d, r9d
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR output$[rsp], rax
; Line 1870
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG72630
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1870				; 0000074eH
	lea	r8, OFFSET FLAT:$SG72631
	mov	edx, 68					; 00000044H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG72632
	call	stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__hdr_
	mov	QWORD PTR tv83[rsp], 0
	jmp	SHORT $LN19@stbi__hdr_
$LN18@stbi__hdr_:
	mov	QWORD PTR tv83[rsp], 0
$LN19@stbi__hdr_:
	mov	rax, QWORD PTR tv83[rsp]
	jmp	$LN1@stbi__hdr_
$LN9@stbi__hdr_:
; Line 1872
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@stbi__hdr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN11@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__hdr_:
; Line 1873
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__hdr_
; Line 1874
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__hdr_
$LN5@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__hdr_
; Line 1875
	cvtss2sd xmm0, DWORD PTR stbi__h2l_gamma_i
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, DWORD PTR stbi__h2l_scale_i
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv133[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv133[rsp]
	call	pow
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$1[rsp], xmm0
; Line 1876
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$1[rsp]
	jbe	SHORT $LN12@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$1[rsp], xmm0
$LN12@stbi__hdr_:
; Line 1877
	movss	xmm0, DWORD PTR z$1[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN13@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$1[rsp], xmm0
$LN13@stbi__hdr_:
; Line 1878
	cvttss2si eax, DWORD PTR z$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1879
	jmp	$LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 1880
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 1881
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$2[rsp], xmm0
; Line 1882
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$2[rsp]
	jbe	SHORT $LN15@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$2[rsp], xmm0
$LN15@stbi__hdr_:
; Line 1883
	movss	xmm0, DWORD PTR z$2[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN16@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$2[rsp], xmm0
$LN16@stbi__hdr_:
; Line 1884
	cvttss2si eax, DWORD PTR z$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN14@stbi__hdr_:
; Line 1886
	jmp	$LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 1887
	lea	rax, OFFSET FLAT:$SG72640
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1887				; 0000075fH
	lea	r8, OFFSET FLAT:$SG72641
	mov	edx, 69					; 00000045H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
; Line 1888
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__hdr_:
; Line 1889
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
stbi__hdr_to_ldr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
k$ = 52
n$ = 56
output$ = 64
tv84 = 72
tv141 = 80
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
data$ = 256
x$ = 264
y$ = 272
comp$ = 280
stbi__ldr_to_hdr PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1839
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1842
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN11@stbi__ldr_
	xor	eax, eax
	jmp	$LN1@stbi__ldr_
$LN11@stbi__ldr_:
; Line 1843
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad4
	mov	QWORD PTR output$[rsp], rax
; Line 1844
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN12@stbi__ldr_
	lea	rax, OFFSET FLAT:$SG72587
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1844				; 00000734H
	lea	r8, OFFSET FLAT:$SG72588
	mov	edx, 66					; 00000042H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG72589
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__ldr_
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN18@stbi__ldr_
$LN17@stbi__ldr_:
	mov	QWORD PTR tv84[rsp], 0
$LN18@stbi__ldr_:
	mov	rax, QWORD PTR tv84[rsp]
	jmp	$LN1@stbi__ldr_
$LN12@stbi__ldr_:
; Line 1846
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stbi__ldr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN14@stbi__ldr_
$LN13@stbi__ldr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stbi__ldr_:
; Line 1847
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__ldr_
$LN2@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__ldr_
; Line 1848
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__ldr_
$LN5@stbi__ldr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__ldr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN6@stbi__ldr_
; Line 1849
	cvtss2sd xmm0, DWORD PTR stbi__l2h_gamma
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@437f0000
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv141[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv141[rsp]
	call	pow
	cvtss2sd xmm1, DWORD PTR stbi__l2h_scale
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1850
	jmp	$LN5@stbi__ldr_
$LN6@stbi__ldr_:
; Line 1851
	jmp	$LN2@stbi__ldr_
$LN3@stbi__ldr_:
; Line 1852
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN15@stbi__ldr_
; Line 1853
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__ldr_
$LN8@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__ldr_
; Line 1854
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1855
	jmp	SHORT $LN8@stbi__ldr_
$LN9@stbi__ldr_:
$LN15@stbi__ldr_:
; Line 1857
	lea	rax, OFFSET FLAT:$SG72593
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1857				; 00000741H
	lea	r8, OFFSET FLAT:$SG72594
	mov	edx, 67					; 00000043H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 1858
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__ldr_:
; Line 1859
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
stbi__ldr_to_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
stbi__malloc_mad4 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1060
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1061
	mov	eax, DWORD PTR add$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1062
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1063
	add	rsp, 56					; 00000038H
	ret	0
stbi__malloc_mad4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
c$ = 64
add$ = 72
stbi__malloc_mad3 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1053
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1054
	mov	r9d, DWORD PTR add$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1055
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1056
	add	rsp, 40					; 00000028H
	ret	0
stbi__malloc_mad3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
add$ = 64
stbi__malloc_mad2 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1046
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1047
	mov	r8d, DWORD PTR add$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad2sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1048
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1049
	add	rsp, 40					; 00000028H
	ret	0
stbi__malloc_mad2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 32
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
stbi__mad4sizes_valid PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1037
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1038
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@stbi__mad4
$LN3@stbi__mad4:
	mov	DWORD PTR tv86[rsp], 0
$LN4@stbi__mad4:
	mov	eax, DWORD PTR tv86[rsp]
; Line 1040
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad4sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
a$ = 64
b$ = 72
c$ = 80
add$ = 88
stbi__mad3sizes_valid PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1029
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1030
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@stbi__mad3
$LN3@stbi__mad3:
	mov	DWORD PTR tv79[rsp], 0
$LN4@stbi__mad3:
	mov	eax, DWORD PTR tv79[rsp]
; Line 1032
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad3sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
a$ = 64
b$ = 72
add$ = 80
stbi__mad2sizes_valid PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1022
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1023
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stbi__mad2
$LN3@stbi__mad2:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stbi__mad2:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad2sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
a$ = 32
b$ = 40
stbi__mul2sizes_valid PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1012
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1013
	cmp	DWORD PTR a$[rsp], 0
	jl	SHORT $LN3@stbi__mul2
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__mul2
$LN3@stbi__mul2:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mul2
$LN2@stbi__mul2:
; Line 1014
	cmp	DWORD PTR b$[rsp], 0
	jne	SHORT $LN4@stbi__mul2
	mov	eax, 1
	jmp	SHORT $LN1@stbi__mul2
$LN4@stbi__mul2:
; Line 1016
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN6@stbi__mul2
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@stbi__mul2
$LN6@stbi__mul2:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stbi__mul2:
	mov	eax, DWORD PTR tv69[rsp]
$LN1@stbi__mul2:
; Line 1017
	add	rsp, 24
	ret	0
stbi__mul2sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
a$ = 32
b$ = 40
stbi__addsizes_valid PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1000
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1001
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__adds
	xor	eax, eax
	jmp	SHORT $LN1@stbi__adds
$LN2@stbi__adds:
; Line 1006
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN4@stbi__adds
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@stbi__adds
$LN4@stbi__adds:
	mov	DWORD PTR tv67[rsp], 0
$LN5@stbi__adds:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@stbi__adds:
; Line 1007
	add	rsp, 24
	ret	0
stbi__addsizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
size$ = 144
stbi__malloc PROC
; File W:\cpp\void\rx\stb_image.h
; Line 983
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 984
	lea	rax, OFFSET FLAT:$SG71655
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 984				; 000003d8H
	lea	r8, OFFSET FLAT:$SG71656
	mov	edx, 54					; 00000036H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 985
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbi__malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
stbi__err PROC
; File W:\cpp\void\rx\stb_image.h
; Line 976
	mov	QWORD PTR [rsp+8], rcx
; Line 977
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 978
	xor	eax, eax
; Line 979
	ret	0
stbi__err ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__pnm_is16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7534
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7535
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	cmp	eax, 16
	jne	SHORT $LN2@stbi__pnm_
; Line 7536
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7537
	xor	eax, eax
$LN1@stbi__pnm_:
; Line 7538
	add	rsp, 40					; 00000028H
	ret	0
stbi__pnm_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
t$ = 33
p$ = 34
dummy$ = 36
tv81 = 40
maxv$ = 44
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__pnm_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7495
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__pnm_:
; Line 7500
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__pnm_:
; Line 7501
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__pnm_:
; Line 7503
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7506
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7507
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7508
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN6@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN5@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7509
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7510
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN5@stbi__pnm_:
; Line 7513
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN12@stbi__pnm_
	mov	DWORD PTR tv81[rsp], 3
	jmp	SHORT $LN13@stbi__pnm_
$LN12@stbi__pnm_:
	mov	DWORD PTR tv81[rsp], 1
$LN13@stbi__pnm_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7515
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7516
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7518
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7519
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7521
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7522
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7524
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	DWORD PTR maxv$[rsp], eax
; Line 7525
	cmp	DWORD PTR maxv$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN7@stbi__pnm_
; Line 7526
	lea	rcx, OFFSET FLAT:$SG77525
	call	stbi__err
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN8@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7527
	cmp	DWORD PTR maxv$[rsp], 255		; 000000ffH
	jle	SHORT $LN9@stbi__pnm_
; Line 7528
	mov	eax, 16
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN10@stbi__pnm_
$LN9@stbi__pnm_:
; Line 7530
	mov	eax, 8
$LN10@stbi__pnm_:
$LN8@stbi__pnm_:
$LN1@stbi__pnm_:
; Line 7531
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv160 = 48
out$ = 56
tv80 = 64
tv86 = 72
tv138 = 80
tv154 = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
stbi__pnm_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7429
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7433
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, 4
	mov	rdx, QWORD PTR s$[rsp]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7434
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@stbi__pnm_
; Line 7435
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7437
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN3@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG77456
	call	stbi__err
	test	eax, eax
	je	SHORT $LN11@stbi__pnm_
	mov	QWORD PTR tv80[rsp], 0
	jmp	SHORT $LN12@stbi__pnm_
$LN11@stbi__pnm_:
	mov	QWORD PTR tv80[rsp], 0
$LN12@stbi__pnm_:
	mov	rax, QWORD PTR tv80[rsp]
	jmp	$LN1@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7438
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN4@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG77458
	call	stbi__err
	test	eax, eax
	je	SHORT $LN13@stbi__pnm_
	mov	QWORD PTR tv86[rsp], 0
	jmp	SHORT $LN14@stbi__pnm_
$LN13@stbi__pnm_:
	mov	QWORD PTR tv86[rsp], 0
$LN14@stbi__pnm_:
	mov	rax, QWORD PTR tv86[rsp]
	jmp	$LN1@stbi__pnm_
$LN4@stbi__pnm_:
; Line 7440
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7441
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 7442
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__pnm_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__pnm_:
; Line 7444
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
; Line 7445
	lea	rcx, OFFSET FLAT:$SG77461
	call	stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__pnm_
	mov	QWORD PTR tv138[rsp], 0
	jmp	SHORT $LN16@stbi__pnm_
$LN15@stbi__pnm_:
	mov	QWORD PTR tv138[rsp], 0
$LN16@stbi__pnm_:
	mov	rax, QWORD PTR tv138[rsp]
	jmp	$LN1@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7447
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	stbi__malloc_mad4
	mov	QWORD PTR out$[rsp], rax
; Line 7448
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN7@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG77463
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__pnm_
	mov	QWORD PTR tv154[rsp], 0
	jmp	SHORT $LN18@stbi__pnm_
$LN17@stbi__pnm_:
	mov	QWORD PTR tv154[rsp], 0
$LN18@stbi__pnm_:
	mov	rax, QWORD PTR tv154[rsp]
	jmp	$LN1@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7449
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv160[rsp], eax
	mov	rcx, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR tv160[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 7451
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN8@stbi__pnm_
; Line 7452
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 7453
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN9@stbi__pnm_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__pnm_
$LN9@stbi__pnm_:
$LN8@stbi__pnm_:
; Line 7455
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__pnm_:
; Line 7456
	add	rsp, 104				; 00000068H
	ret	0
stbi__pnm_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
p$ = 33
s$ = 64
stbi__pnm_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7417
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7419
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7420
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7421
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN2@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7422
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7423
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7425
	mov	eax, 1
$LN1@stbi__pnm_:
; Line 7426
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__gif_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7001
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_info_raw
; Line 7002
	add	rsp, 40					; 00000028H
	ret	0
stbi__gif_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
layers$1 = 48
stride$2 = 52
out$3 = 56
u$4 = 64
out_size$5 = 72
delays_size$6 = 76
tmp$7 = 80
new_delays$8 = 88
two_back$9 = 96
tv266 = 104
tv86 = 112
tv137 = 120
$T10 = 128
$T11 = 160
$T12 = 192
$T13 = 224
$T14 = 256
$T15 = 288
$T16 = 320
$T17 = 352
$T18 = 384
$T19 = 416
g$20 = 448
__$ArrayPad$ = 35376
s$ = 35424
delays$ = 35432
x$ = 35440
y$ = 35448
z$ = 35456
comp$ = 35464
req_comp$ = 35472
stbi__load_gif_main PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6886
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 35400				; 00008a48H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6887
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test
	test	eax, eax
	je	$LN5@stbi__load
; Line 6888
	mov	DWORD PTR layers$1[rsp], 0
; Line 6889
	mov	QWORD PTR u$4[rsp], 0
; Line 6890
	mov	QWORD PTR out$3[rsp], 0
; Line 6891
	mov	QWORD PTR two_back$9[rsp], 0
; Line 6894
	mov	DWORD PTR out_size$5[rsp], 0
; Line 6895
	mov	DWORD PTR delays_size$6[rsp], 0
; Line 6900
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$20[rsp]
	call	memset
; Line 6901
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN7@stbi__load
; Line 6902
	mov	rax, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@stbi__load:
$LN4@stbi__load:
; Line 6906
	mov	rax, QWORD PTR two_back$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$20[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load_next
	mov	QWORD PTR u$4[rsp], rax
; Line 6907
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$4[rsp], rax
	jne	SHORT $LN8@stbi__load
	mov	QWORD PTR u$4[rsp], 0
$LN8@stbi__load:
; Line 6909
	cmp	QWORD PTR u$4[rsp], 0
	je	$LN9@stbi__load
; Line 6910
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$20[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6911
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$20[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6912
	mov	eax, DWORD PTR layers$1[rsp]
	inc	eax
	mov	DWORD PTR layers$1[rsp], eax
; Line 6913
	mov	eax, DWORD PTR g$20[rsp]
	imul	eax, DWORD PTR g$20[rsp+4]
	shl	eax, 2
	mov	DWORD PTR stride$2[rsp], eax
; Line 6915
	cmp	QWORD PTR out$3[rsp], 0
	je	$LN10@stbi__load
; Line 6916
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	QWORD PTR tv86[rsp], rax
	lea	rcx, OFFSET FLAT:$SG76999
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 6916				; 00001b04H
	lea	r8, OFFSET FLAT:$SG77000
	mov	edx, 107				; 0000006bH
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$3[rsp]
	mov	rax, QWORD PTR tv86[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	mov	QWORD PTR tmp$7[rsp], rax
; Line 6917
	cmp	QWORD PTR tmp$7[rsp], 0
	jne	SHORT $LN12@stbi__load
; Line 6918
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
; Line 6920
	mov	rax, QWORD PTR tmp$7[rsp]
	mov	QWORD PTR out$3[rsp], rax
; Line 6921
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
$LN13@stbi__load:
; Line 6924
	cmp	QWORD PTR delays$[rsp], 0
	je	$LN14@stbi__load
; Line 6925
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	QWORD PTR tv137[rsp], rax
	lea	rcx, OFFSET FLAT:$SG77004
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 6925				; 00001b0dH
	lea	r8, OFFSET FLAT:$SG77005
	mov	edx, 108				; 0000006cH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR delays$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR tv137[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	mov	QWORD PTR new_delays$8[rsp], rax
; Line 6926
	cmp	QWORD PTR new_delays$8[rsp], 0
	jne	SHORT $LN15@stbi__load
; Line 6927
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN15@stbi__load:
; Line 6928
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR new_delays$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 6929
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN14@stbi__load:
; Line 6931
	jmp	$LN11@stbi__load
$LN10@stbi__load:
; Line 6932
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR out$3[rsp], rax
; Line 6933
	cmp	QWORD PTR out$3[rsp], 0
	jne	SHORT $LN16@stbi__load
; Line 6934
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN16@stbi__load:
; Line 6935
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
; Line 6936
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN17@stbi__load
; Line 6937
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6938
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN18@stbi__load
; Line 6939
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN18@stbi__load:
; Line 6940
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN17@stbi__load:
$LN11@stbi__load:
; Line 6943
	movsxd	rax, DWORD PTR stride$2[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	dec	ecx
	imul	ecx, DWORD PTR stride$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR u$4[rsp]
	call	memcpy
; Line 6944
	cmp	DWORD PTR layers$1[rsp], 2
	jl	SHORT $LN19@stbi__load
; Line 6945
	mov	eax, DWORD PTR stride$2[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR out$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR two_back$9[rsp], rax
$LN19@stbi__load:
; Line 6948
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN20@stbi__load
; Line 6949
	mov	eax, DWORD PTR layers$1[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR g$20[rsp+34920]
	mov	DWORD PTR [rcx+rax*4], edx
$LN20@stbi__load:
$LN9@stbi__load:
; Line 6952
	cmp	QWORD PTR u$4[rsp], 0
	jne	$LN4@stbi__load
; Line 6955
	lea	rax, OFFSET FLAT:$SG77012
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6955				; 00001b2bH
	lea	r8, OFFSET FLAT:$SG77013
	mov	edx, 109				; 0000006dH
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 6956
	lea	rax, OFFSET FLAT:$SG77014
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6956				; 00001b2cH
	lea	r8, OFFSET FLAT:$SG77015
	mov	edx, 110				; 0000006eH
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
; Line 6957
	lea	rax, OFFSET FLAT:$SG77016
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6957				; 00001b2dH
	lea	r8, OFFSET FLAT:$SG77017
	mov	edx, 111				; 0000006fH
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
; Line 6960
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN21@stbi__load
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN21@stbi__load
; Line 6961
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR g$20[rsp]
	mov	ecx, DWORD PTR g$20[rsp+4]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$3[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$3[rsp], rax
$LN21@stbi__load:
; Line 6963
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6964
	mov	rax, QWORD PTR out$3[rsp]
	jmp	SHORT $LN1@stbi__load
; Line 6965
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
; Line 6966
	lea	rcx, OFFSET FLAT:$SG77019
	call	stbi__err
	test	eax, eax
	je	SHORT $LN23@stbi__load
	mov	QWORD PTR tv266[rsp], 0
	jmp	SHORT $LN24@stbi__load
$LN23@stbi__load:
	mov	QWORD PTR tv266[rsp], 0
$LN24@stbi__load:
	mov	rax, QWORD PTR tv266[rsp]
$LN6@stbi__load:
$LN1@stbi__load:
; Line 6968
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35400				; 00008a48H
	pop	rdi
	pop	rsi
	ret	0
stbi__load_gif_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
g$ = 256
__$ArrayPad$ = 35184
s$ = 35232
x$ = 35240
y$ = 35248
comp$ = 35256
req_comp$ = 35264
ri$ = 35272
stbi__gif_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6971
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 35208				; 00008988H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6972
	mov	QWORD PTR u$[rsp], 0
; Line 6974
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$[rsp]
	call	memset
; Line 6977
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load_next
	mov	QWORD PTR u$[rsp], rax
; Line 6978
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$[rsp], rax
	jne	SHORT $LN2@stbi__gif_
	mov	QWORD PTR u$[rsp], 0
$LN2@stbi__gif_:
; Line 6979
	cmp	QWORD PTR u$[rsp], 0
	je	SHORT $LN3@stbi__gif_
; Line 6980
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6981
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6985
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN5@stbi__gif_
; Line 6986
	mov	eax, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR g$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR u$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR u$[rsp], rax
$LN5@stbi__gif_:
; Line 6987
	jmp	SHORT $LN4@stbi__gif_
$LN3@stbi__gif_:
	cmp	QWORD PTR g$[rsp+8], 0
	je	SHORT $LN6@stbi__gif_
; Line 6989
	lea	rax, OFFSET FLAT:$SG77042
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6989				; 00001b4dH
	lea	r8, OFFSET FLAT:$SG77043
	mov	edx, 112				; 00000070H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
$LN6@stbi__gif_:
$LN4@stbi__gif_:
; Line 6993
	lea	rax, OFFSET FLAT:$SG77044
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6993				; 00001b51H
	lea	r8, OFFSET FLAT:$SG77045
	mov	edx, 113				; 00000071H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6994
	lea	rax, OFFSET FLAT:$SG77046
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6994				; 00001b52H
	lea	r8, OFFSET FLAT:$SG77047
	mov	edx, 114				; 00000072H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 6996
	mov	rax, QWORD PTR u$[rsp]
; Line 6997
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35208				; 00008988H
	pop	rdi
	pop	rsi
	ret	0
stbi__gif_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__gif_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6513
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6514
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 6515
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6516
	mov	eax, DWORD PTR r$[rsp]
; Line 6517
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_packets$ = 32
act_comp$ = 36
dummy$ = 40
tv152 = 44
packet$1 = 48
chained$ = 56
packets$ = 64
__$ArrayPad$ = 96
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
stbi__pic_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7346
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7347
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
; Line 7350
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN5@stbi__pic_:
; Line 7351
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN6@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN6@stbi__pic_:
; Line 7352
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN7@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN7@stbi__pic_:
; Line 7354
	lea	rdx, OFFSET FLAT:$SG77403
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN8@stbi__pic_
; Line 7355
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 7359
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7361
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7362
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7363
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__pic_
; Line 7364
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7365
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 7367
	mov	rax, QWORD PTR x$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@stbi__pic_
	mov	eax, 268435456				; 10000000H
	cdq
	mov	rcx, QWORD PTR x$[rsp]
	idiv	DWORD PTR [rcx]
	mov	rcx, QWORD PTR y$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN10@stbi__pic_
; Line 7368
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7369
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 7372
	mov	edx, 8
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN4@stbi__pic_:
; Line 7377
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN11@stbi__pic_
; Line 7378
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN11@stbi__pic_:
; Line 7380
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$1[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
; Line 7381
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 7382
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx], al
; Line 7383
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 7384
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 7385
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN12@stbi__pic_
; Line 7388
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7389
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN12@stbi__pic_:
; Line 7391
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN13@stbi__pic_
; Line 7392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7393
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN13@stbi__pic_:
; Line 7395
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 7397
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN15@stbi__pic_
	mov	DWORD PTR tv152[rsp], 4
	jmp	SHORT $LN16@stbi__pic_
$LN15@stbi__pic_:
	mov	DWORD PTR tv152[rsp], 3
$LN16@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv152[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7399
	mov	eax, 1
$LN1@stbi__pic_:
; Line 7400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbi__pic_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 48
x$ = 52
result$ = 56
i$ = 64
tv76 = 72
tv81 = 80
tv88 = 88
tv130 = 96
tv143 = 104
internal_comp$ = 112
$T1 = 128
$T2 = 160
s$ = 224
px$ = 232
py$ = 240
comp$ = 248
req_comp$ = 256
ri$ = 264
stbi__pic_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6423
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 6428
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR internal_comp$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN5@stbi__pic_:
; Line 6430
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 92			; 0000005cH
	jge	SHORT $LN3@stbi__pic_
; Line 6431
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6433
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR x$[rsp], eax
; Line 6434
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR y$[rsp], eax
; Line 6436
	cmp	DWORD PTR y$[rsp], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76605
	call	stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__pic_
	mov	QWORD PTR tv76[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN14@stbi__pic_:
	mov	QWORD PTR tv76[rsp], 0
$LN15@stbi__pic_:
	mov	rax, QWORD PTR tv76[rsp]
	jmp	$LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6437
	cmp	DWORD PTR x$[rsp], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76607
	call	stbi__err
	test	eax, eax
	je	SHORT $LN16@stbi__pic_
	mov	QWORD PTR tv81[rsp], 0
	jmp	SHORT $LN17@stbi__pic_
$LN16@stbi__pic_:
	mov	QWORD PTR tv81[rsp], 0
$LN17@stbi__pic_:
	mov	rax, QWORD PTR tv81[rsp]
	jmp	$LN1@stbi__pic_
$LN7@stbi__pic_:
; Line 6439
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN8@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76609
	call	stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__pic_
	mov	QWORD PTR tv88[rsp], 0
	jmp	SHORT $LN19@stbi__pic_
$LN18@stbi__pic_:
	mov	QWORD PTR tv88[rsp], 0
$LN19@stbi__pic_:
	mov	rax, QWORD PTR tv88[rsp]
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 6440
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN9@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76611
	call	stbi__err
	test	eax, eax
	je	SHORT $LN20@stbi__pic_
	mov	QWORD PTR tv130[rsp], 0
	jmp	SHORT $LN21@stbi__pic_
$LN20@stbi__pic_:
	mov	QWORD PTR tv130[rsp], 0
$LN21@stbi__pic_:
	mov	rax, QWORD PTR tv130[rsp]
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 6442
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 6443
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
; Line 6444
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
; Line 6447
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR result$[rsp], rax
; Line 6448
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN10@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG76613
	call	stbi__err
	test	eax, eax
	je	SHORT $LN22@stbi__pic_
	mov	QWORD PTR tv143[rsp], 0
	jmp	SHORT $LN23@stbi__pic_
$LN22@stbi__pic_:
	mov	QWORD PTR tv143[rsp], 0
$LN23@stbi__pic_:
	mov	rax, QWORD PTR tv143[rsp]
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 6449
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 6451
	mov	rax, QWORD PTR result$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_load_core
	test	rax, rax
	jne	SHORT $LN11@stbi__pic_
; Line 6452
	lea	rax, OFFSET FLAT:$SG76615
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6452				; 00001934H
	lea	r8, OFFSET FLAT:$SG76616
	mov	edx, 99					; 00000063H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR result$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6453
	mov	QWORD PTR result$[rsp], 0
$LN11@stbi__pic_:
; Line 6455
	mov	rax, QWORD PTR px$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6456
	mov	rax, QWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6457
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN12@stbi__pic_
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR req_comp$[rsp], eax
$LN12@stbi__pic_:
; Line 6458
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
; Line 6460
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6461
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
stbi__pic_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__pic_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6464
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6465
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 6466
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6467
	mov	eax, DWORD PTR r$[rsp]
; Line 6468
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
dummy$ = 40
valid$ = 44
buffer$ = 48
__$ArrayPad$ = 1072
s$ = 1104
x$ = 1112
y$ = 1120
comp$ = 1128
stbi__hdr_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7215
	mov	DWORD PTR valid$[rsp], 0
; Line 7218
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN7@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN7@stbi__hdr_:
; Line 7219
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN8@stbi__hdr_:
; Line 7220
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN9@stbi__hdr_:
; Line 7222
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	jne	SHORT $LN10@stbi__hdr_
; Line 7223
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7224
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN10@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7228
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7230
	lea	rdx, OFFSET FLAT:$SG77324
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN12@stbi__hdr_:
; Line 7231
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7233
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN13@stbi__hdr_
; Line 7234
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7235
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN13@stbi__hdr_:
; Line 7237
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7238
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG77327
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN14@stbi__hdr_
; Line 7239
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7240
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7242
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7243
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__hdr_:
; Line 7244
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7245
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG77329
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN15@stbi__hdr_
; Line 7246
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7247
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN15@stbi__hdr_:
; Line 7249
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7250
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7251
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
; Line 7252
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	ret	0
stbi__hdr_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 48
i$ = 52
width$ = 56
j$ = 60
value$ = 64
len$ = 68
z$ = 72
token$ = 80
height$ = 88
scanline$ = 96
k$ = 104
rgbe$1 = 108
hdr_data$ = 112
nleft$2 = 120
valid$ = 124
c1$ = 128
c2$ = 132
rgbe$3 = 136
headerToken$ = 144
tv78 = 152
tv94 = 160
tv138 = 168
tv155 = 176
tv165 = 184
tv170 = 192
tv183 = 200
tv194 = 208
tv280 = 216
tv299 = 224
tv368 = 232
tv401 = 240
$T4 = 256
$T5 = 288
$T6 = 320
$T7 = 352
$T8 = 384
$T9 = 416
$T10 = 448
$T11 = 480
$T12 = 512
$T13 = 544
$T14 = 576
$T15 = 608
$T16 = 640
$T17 = 672
$T18 = 704
$T19 = 736
$T20 = 768
$T21 = 800
buffer$ = 832
__$ArrayPad$ = 1856
s$ = 1904
x$ = 1912
y$ = 1920
comp$ = 1928
req_comp$ = 1936
ri$ = 1944
stbi__hdr_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7081
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1880				; 00000758H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7084
	mov	DWORD PTR valid$[rsp], 0
; Line 7095
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR headerToken$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG77238
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
	lea	rdx, OFFSET FLAT:$SG77239
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
; Line 7097
	lea	rcx, OFFSET FLAT:$SG77240
	call	stbi__err
	test	eax, eax
	je	SHORT $LN56@stbi__hdr_
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN57@stbi__hdr_
$LN56@stbi__hdr_:
	mov	QWORD PTR tv78[rsp], 0
$LN57@stbi__hdr_:
	mov	rax, QWORD PTR tv78[rsp]
	jmp	$LN1@stbi__hdr_
$LN30@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7101
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7102
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN31@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN31@stbi__hdr_:
; Line 7103
	lea	rdx, OFFSET FLAT:$SG77243
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN32@stbi__hdr_:
; Line 7104
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7106
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN33@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG77245
	call	stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__hdr_
	mov	QWORD PTR tv94[rsp], 0
	jmp	SHORT $LN59@stbi__hdr_
$LN58@stbi__hdr_:
	mov	QWORD PTR tv94[rsp], 0
$LN59@stbi__hdr_:
	mov	rax, QWORD PTR tv94[rsp]
	jmp	$LN1@stbi__hdr_
$LN33@stbi__hdr_:
; Line 7110
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7111
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG77247
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN34@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG77248
	call	stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__hdr_
	mov	QWORD PTR tv138[rsp], 0
	jmp	SHORT $LN61@stbi__hdr_
$LN60@stbi__hdr_:
	mov	QWORD PTR tv138[rsp], 0
$LN61@stbi__hdr_:
	mov	rax, QWORD PTR tv138[rsp]
	jmp	$LN1@stbi__hdr_
$LN34@stbi__hdr_:
; Line 7112
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7113
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR height$[rsp], eax
$LN5@stbi__hdr_:
; Line 7114
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7115
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG77250
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN35@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG77251
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__hdr_
	mov	QWORD PTR tv155[rsp], 0
	jmp	SHORT $LN63@stbi__hdr_
$LN62@stbi__hdr_:
	mov	QWORD PTR tv155[rsp], 0
$LN63@stbi__hdr_:
	mov	rax, QWORD PTR tv155[rsp]
	jmp	$LN1@stbi__hdr_
$LN35@stbi__hdr_:
; Line 7116
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7117
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR width$[rsp], eax
; Line 7119
	cmp	DWORD PTR height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN36@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG77253
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__hdr_
	mov	QWORD PTR tv165[rsp], 0
	jmp	SHORT $LN65@stbi__hdr_
$LN64@stbi__hdr_:
	mov	QWORD PTR tv165[rsp], 0
$LN65@stbi__hdr_:
	mov	rax, QWORD PTR tv165[rsp]
	jmp	$LN1@stbi__hdr_
$LN36@stbi__hdr_:
; Line 7120
	cmp	DWORD PTR width$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG77255
	call	stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__hdr_
	mov	QWORD PTR tv170[rsp], 0
	jmp	SHORT $LN67@stbi__hdr_
$LN66@stbi__hdr_:
	mov	QWORD PTR tv170[rsp], 0
$LN67@stbi__hdr_:
	mov	rax, QWORD PTR tv170[rsp]
	jmp	$LN1@stbi__hdr_
$LN37@stbi__hdr_:
; Line 7122
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7123
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7125
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN38@stbi__hdr_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
$LN38@stbi__hdr_:
; Line 7126
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN39@stbi__hdr_
	mov	DWORD PTR req_comp$[rsp], 3
$LN39@stbi__hdr_:
; Line 7128
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN40@stbi__hdr_
; Line 7129
	lea	rcx, OFFSET FLAT:$SG77259
	call	stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__hdr_
	mov	QWORD PTR tv183[rsp], 0
	jmp	SHORT $LN69@stbi__hdr_
$LN68@stbi__hdr_:
	mov	QWORD PTR tv183[rsp], 0
$LN69@stbi__hdr_:
	mov	rax, QWORD PTR tv183[rsp]
	jmp	$LN1@stbi__hdr_
$LN40@stbi__hdr_:
; Line 7132
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__malloc_mad4
	mov	QWORD PTR hdr_data$[rsp], rax
; Line 7133
	cmp	QWORD PTR hdr_data$[rsp], 0
	jne	SHORT $LN41@stbi__hdr_
; Line 7134
	lea	rcx, OFFSET FLAT:$SG77261
	call	stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__hdr_
	mov	QWORD PTR tv194[rsp], 0
	jmp	SHORT $LN71@stbi__hdr_
$LN70@stbi__hdr_:
	mov	QWORD PTR tv194[rsp], 0
$LN71@stbi__hdr_:
	mov	rax, QWORD PTR tv194[rsp]
	jmp	$LN1@stbi__hdr_
$LN41@stbi__hdr_:
; Line 7138
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN44@stbi__hdr_
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN42@stbi__hdr_
$LN44@stbi__hdr_:
; Line 7140
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi__hdr_
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi__hdr_
; Line 7141
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stbi__hdr_
$main_decode_loop$80:
; Line 7144
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 7145
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR hdr_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, rax
	call	stbi__hdr_convert
; Line 7146
	jmp	SHORT $LN10@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7147
	jmp	$LN7@stbi__hdr_
$LN8@stbi__hdr_:
; Line 7148
	jmp	$LN43@stbi__hdr_
$LN42@stbi__hdr_:
; Line 7150
	mov	QWORD PTR scanline$[rsp], 0
; Line 7152
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi__hdr_
$LN13@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 7153
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c1$[rsp], eax
; Line 7154
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c2$[rsp], eax
; Line 7155
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 7156
	cmp	DWORD PTR c1$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	cmp	DWORD PTR c2$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	mov	eax, DWORD PTR len$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN45@stbi__hdr_
$LN46@stbi__hdr_:
; Line 7160
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR c1$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7161
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR c2$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7162
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR len$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7163
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR rgbe$1[rsp+rcx], al
; Line 7164
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$1[rsp]
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	stbi__hdr_convert
; Line 7165
	mov	DWORD PTR i$[rsp], 1
; Line 7166
	mov	DWORD PTR j$[rsp], 0
; Line 7167
	lea	rax, OFFSET FLAT:$SG77267
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7167				; 00001bffH
	lea	r8, OFFSET FLAT:$SG77268
	mov	edx, 115				; 00000073H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
; Line 7168
	jmp	$main_decode_loop$80
$LN45@stbi__hdr_:
; Line 7170
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 8
	mov	DWORD PTR len$[rsp], eax
; Line 7171
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR len$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 7172
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	$LN47@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG77270
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7172				; 00001c04H
	lea	r8, OFFSET FLAT:$SG77271
	mov	edx, 116				; 00000074H
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG77272
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7172				; 00001c04H
	lea	r8, OFFSET FLAT:$SG77273
	mov	edx, 117				; 00000075H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG77274
	call	stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__hdr_
	mov	QWORD PTR tv280[rsp], 0
	jmp	SHORT $LN73@stbi__hdr_
$LN72@stbi__hdr_:
	mov	QWORD PTR tv280[rsp], 0
$LN73@stbi__hdr_:
	mov	rax, QWORD PTR tv280[rsp]
	jmp	$LN1@stbi__hdr_
$LN47@stbi__hdr_:
; Line 7173
	cmp	QWORD PTR scanline$[rsp], 0
	jne	$LN48@stbi__hdr_
; Line 7174
	xor	r8d, r8d
	mov	edx, 4
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR scanline$[rsp], rax
; Line 7175
	cmp	QWORD PTR scanline$[rsp], 0
	jne	$LN49@stbi__hdr_
; Line 7176
	lea	rax, OFFSET FLAT:$SG77277
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7176				; 00001c08H
	lea	r8, OFFSET FLAT:$SG77278
	mov	edx, 118				; 00000076H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccuserallocator_
; Line 7177
	lea	rcx, OFFSET FLAT:$SG77279
	call	stbi__err
	test	eax, eax
	je	SHORT $LN74@stbi__hdr_
	mov	QWORD PTR tv299[rsp], 0
	jmp	SHORT $LN75@stbi__hdr_
$LN74@stbi__hdr_:
	mov	QWORD PTR tv299[rsp], 0
$LN75@stbi__hdr_:
	mov	rax, QWORD PTR tv299[rsp]
	jmp	$LN1@stbi__hdr_
$LN49@stbi__hdr_:
$LN48@stbi__hdr_:
; Line 7181
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__hdr_
$LN16@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__hdr_:
	cmp	DWORD PTR k$[rsp], 4
	jge	$LN17@stbi__hdr_
; Line 7183
	mov	DWORD PTR i$[rsp], 0
$LN19@stbi__hdr_:
; Line 7184
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$2[rsp], eax
	cmp	DWORD PTR nleft$2[rsp], 0
	jle	$LN20@stbi__hdr_
; Line 7185
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR count$[rsp], al
; Line 7186
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, 128				; 00000080H
	jle	$LN50@stbi__hdr_
; Line 7188
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR value$[rsp], al
; Line 7189
	movzx	eax, BYTE PTR count$[rsp]
	sub	eax, 128				; 00000080H
	mov	BYTE PTR count$[rsp], al
; Line 7190
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	$LN52@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG77283
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7190				; 00001c16H
	lea	r8, OFFSET FLAT:$SG77284
	mov	edx, 119				; 00000077H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG77285
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7190				; 00001c16H
	lea	r8, OFFSET FLAT:$SG77286
	mov	edx, 120				; 00000078H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG77287
	call	stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__hdr_
	mov	QWORD PTR tv368[rsp], 0
	jmp	SHORT $LN77@stbi__hdr_
$LN76@stbi__hdr_:
	mov	QWORD PTR tv368[rsp], 0
$LN77@stbi__hdr_:
	mov	rax, QWORD PTR tv368[rsp]
	jmp	$LN1@stbi__hdr_
$LN52@stbi__hdr_:
; Line 7191
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN23@stbi__hdr_
$LN21@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN23@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN22@stbi__hdr_
; Line 7192
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	movzx	edx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__hdr_
$LN22@stbi__hdr_:
; Line 7193
	jmp	$LN51@stbi__hdr_
$LN50@stbi__hdr_:
; Line 7195
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	$LN53@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG77289
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7195				; 00001c1bH
	lea	r8, OFFSET FLAT:$SG77290
	mov	edx, 121				; 00000079H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG77291
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7195				; 00001c1bH
	lea	r8, OFFSET FLAT:$SG77292
	mov	edx, 122				; 0000007aH
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG77293
	call	stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__hdr_
	mov	QWORD PTR tv401[rsp], 0
	jmp	SHORT $LN79@stbi__hdr_
$LN78@stbi__hdr_:
	mov	QWORD PTR tv401[rsp], 0
$LN79@stbi__hdr_:
	mov	rax, QWORD PTR tv401[rsp]
	jmp	$LN1@stbi__hdr_
$LN53@stbi__hdr_:
; Line 7196
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN26@stbi__hdr_
$LN24@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN26@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN25@stbi__hdr_
; Line 7197
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR k$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*4]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scanline$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__hdr_
$LN25@stbi__hdr_:
$LN51@stbi__hdr_:
; Line 7199
	jmp	$LN19@stbi__hdr_
$LN20@stbi__hdr_:
; Line 7200
	jmp	$LN16@stbi__hdr_
$LN17@stbi__hdr_:
; Line 7201
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN29@stbi__hdr_
$LN27@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN29@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN28@stbi__hdr_
; Line 7202
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR width$[rsp]
	add	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR hdr_data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rdx, rax
	call	stbi__hdr_convert
	jmp	SHORT $LN27@stbi__hdr_
$LN28@stbi__hdr_:
; Line 7203
	jmp	$LN13@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7204
	cmp	QWORD PTR scanline$[rsp], 0
	je	SHORT $LN54@stbi__hdr_
; Line 7205
	lea	rax, OFFSET FLAT:$SG77295
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7205				; 00001c25H
	lea	r8, OFFSET FLAT:$SG77296
	mov	edx, 123				; 0000007bH
	lea	rcx, QWORD PTR $T21[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
$LN54@stbi__hdr_:
$LN43@stbi__hdr_:
; Line 7208
	mov	rax, QWORD PTR hdr_data$[rsp]
$LN1@stbi__hdr_:
; Line 7209
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1880				; 00000758H
	pop	rdi
	pop	rsi
	ret	0
stbi__hdr_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__hdr_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7020
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7021
	lea	rdx, OFFSET FLAT:$SG77072
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7022
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7023
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN2@stbi__hdr_
; Line 7024
	lea	rdx, OFFSET FLAT:$SG77074
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7025
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
$LN2@stbi__hdr_:
; Line 7027
	mov	eax, DWORD PTR r$[rsp]
; Line 7028
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
channelCount$ = 32
depth$ = 36
s$ = 64
stbi__psd_is16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7319
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN2@stbi__psd_
; Line 7320
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7321
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN2@stbi__psd_:
; Line 7323
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN3@stbi__psd_
; Line 7324
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7325
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN3@stbi__psd_:
; Line 7327
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7328
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7329
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN5@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 7330
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7331
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN4@stbi__psd_:
; Line 7333
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 7334
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 7335
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7336
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN6@stbi__psd_
; Line 7337
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7338
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7340
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7341
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dummy$ = 32
channelCount$ = 36
depth$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__psd_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7282
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7284
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__psd_:
; Line 7285
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__psd_:
; Line 7286
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__psd_:
; Line 7287
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN5@stbi__psd_
; Line 7288
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7289
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN5@stbi__psd_:
; Line 7291
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN6@stbi__psd_
; Line 7292
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7293
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7295
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7296
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7297
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN8@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN7@stbi__psd_
$LN8@stbi__psd_:
; Line 7298
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7299
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN7@stbi__psd_:
; Line 7301
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7302
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7303
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7304
	cmp	DWORD PTR depth$[rsp], 8
	je	SHORT $LN9@stbi__psd_
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN9@stbi__psd_
; Line 7305
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7306
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN9@stbi__psd_:
; Line 7308
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 3
	je	SHORT $LN10@stbi__psd_
; Line 7309
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7310
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN10@stbi__psd_:
; Line 7312
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
; Line 7313
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7314
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
channel$ = 52
h$ = 56
w$ = 60
out$ = 64
val$1 = 72
pixelCount$ = 76
channelCount$ = 80
bitdepth$ = 84
pixel$2 = 88
ra$3 = 96
ra$4 = 100
pixel$5 = 104
val$6 = 112
compression$ = 116
inv_a$7 = 120
inv_a$8 = 124
p$9 = 128
tv212 = 136
tv241 = 140
tv249 = 144
p$10 = 152
a$11 = 160
a$12 = 164
q$13 = 168
p$14 = 176
q$15 = 184
tv70 = 192
tv77 = 200
tv87 = 208
tv128 = 216
tv133 = 224
tv141 = 232
tv148 = 240
tv167 = 248
tv177 = 256
tv196 = 264
tv231 = 272
$T16 = 288
$T17 = 320
s$ = 384
x$ = 392
y$ = 400
comp$ = 408
req_comp$ = 416
ri$ = 424
bpc$ = 432
stbi__psd_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6049
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
; Line 6059
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN32@stbi__psd_
; Line 6060
	lea	rcx, OFFSET FLAT:$SG76331
	call	stbi__err
	test	eax, eax
	je	SHORT $LN69@stbi__psd_
	mov	QWORD PTR tv70[rsp], 0
	jmp	SHORT $LN70@stbi__psd_
$LN69@stbi__psd_:
	mov	QWORD PTR tv70[rsp], 0
$LN70@stbi__psd_:
	mov	rax, QWORD PTR tv70[rsp]
	jmp	$LN1@stbi__psd_
$LN32@stbi__psd_:
; Line 6063
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN33@stbi__psd_
; Line 6064
	lea	rcx, OFFSET FLAT:$SG76333
	call	stbi__err
	test	eax, eax
	je	SHORT $LN71@stbi__psd_
	mov	QWORD PTR tv77[rsp], 0
	jmp	SHORT $LN72@stbi__psd_
$LN71@stbi__psd_:
	mov	QWORD PTR tv77[rsp], 0
$LN72@stbi__psd_:
	mov	rax, QWORD PTR tv77[rsp]
	jmp	$LN1@stbi__psd_
$LN33@stbi__psd_:
; Line 6067
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6070
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 6071
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN35@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN34@stbi__psd_
$LN35@stbi__psd_:
; Line 6072
	lea	rcx, OFFSET FLAT:$SG76336
	call	stbi__err
	test	eax, eax
	je	SHORT $LN73@stbi__psd_
	mov	QWORD PTR tv87[rsp], 0
	jmp	SHORT $LN74@stbi__psd_
$LN73@stbi__psd_:
	mov	QWORD PTR tv87[rsp], 0
$LN74@stbi__psd_:
	mov	rax, QWORD PTR tv87[rsp]
	jmp	$LN1@stbi__psd_
$LN34@stbi__psd_:
; Line 6075
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR h$[rsp], eax
; Line 6076
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR w$[rsp], eax
; Line 6078
	cmp	DWORD PTR h$[rsp], 16777216		; 01000000H
	jle	SHORT $LN36@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG76338
	call	stbi__err
	test	eax, eax
	je	SHORT $LN75@stbi__psd_
	mov	QWORD PTR tv128[rsp], 0
	jmp	SHORT $LN76@stbi__psd_
$LN75@stbi__psd_:
	mov	QWORD PTR tv128[rsp], 0
$LN76@stbi__psd_:
	mov	rax, QWORD PTR tv128[rsp]
	jmp	$LN1@stbi__psd_
$LN36@stbi__psd_:
; Line 6079
	cmp	DWORD PTR w$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG76340
	call	stbi__err
	test	eax, eax
	je	SHORT $LN77@stbi__psd_
	mov	QWORD PTR tv133[rsp], 0
	jmp	SHORT $LN78@stbi__psd_
$LN77@stbi__psd_:
	mov	QWORD PTR tv133[rsp], 0
$LN78@stbi__psd_:
	mov	rax, QWORD PTR tv133[rsp]
	jmp	$LN1@stbi__psd_
$LN37@stbi__psd_:
; Line 6082
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR bitdepth$[rsp], eax
; Line 6083
	cmp	DWORD PTR bitdepth$[rsp], 8
	je	SHORT $LN38@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	je	SHORT $LN38@stbi__psd_
; Line 6084
	lea	rcx, OFFSET FLAT:$SG76342
	call	stbi__err
	test	eax, eax
	je	SHORT $LN79@stbi__psd_
	mov	QWORD PTR tv141[rsp], 0
	jmp	SHORT $LN80@stbi__psd_
$LN79@stbi__psd_:
	mov	QWORD PTR tv141[rsp], 0
$LN80@stbi__psd_:
	mov	rax, QWORD PTR tv141[rsp]
	jmp	$LN1@stbi__psd_
$LN38@stbi__psd_:
; Line 6096
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 3
	je	SHORT $LN39@stbi__psd_
; Line 6097
	lea	rcx, OFFSET FLAT:$SG76344
	call	stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__psd_
	mov	QWORD PTR tv148[rsp], 0
	jmp	SHORT $LN82@stbi__psd_
$LN81@stbi__psd_:
	mov	QWORD PTR tv148[rsp], 0
$LN82@stbi__psd_:
	mov	rax, QWORD PTR tv148[rsp]
	jmp	$LN1@stbi__psd_
$LN39@stbi__psd_:
; Line 6100
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6103
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6106
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6112
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR compression$[rsp], eax
; Line 6113
	cmp	DWORD PTR compression$[rsp], 1
	jle	SHORT $LN40@stbi__psd_
; Line 6114
	lea	rcx, OFFSET FLAT:$SG76346
	call	stbi__err
	test	eax, eax
	je	SHORT $LN83@stbi__psd_
	mov	QWORD PTR tv167[rsp], 0
	jmp	SHORT $LN84@stbi__psd_
$LN83@stbi__psd_:
	mov	QWORD PTR tv167[rsp], 0
$LN84@stbi__psd_:
	mov	rax, QWORD PTR tv167[rsp]
	jmp	$LN1@stbi__psd_
$LN40@stbi__psd_:
; Line 6117
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 4
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN41@stbi__psd_
; Line 6118
	lea	rcx, OFFSET FLAT:$SG76348
	call	stbi__err
	test	eax, eax
	je	SHORT $LN85@stbi__psd_
	mov	QWORD PTR tv177[rsp], 0
	jmp	SHORT $LN86@stbi__psd_
$LN85@stbi__psd_:
	mov	QWORD PTR tv177[rsp], 0
$LN86@stbi__psd_:
	mov	rax, QWORD PTR tv177[rsp]
	jmp	$LN1@stbi__psd_
$LN41@stbi__psd_:
; Line 6122
	cmp	DWORD PTR compression$[rsp], 0
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
; Line 6123
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 8
	call	stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 6124
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
; Line 6125
	jmp	SHORT $LN43@stbi__psd_
$LN42@stbi__psd_:
; Line 6126
	mov	eax, DWORD PTR w$[rsp]
	shl	eax, 2
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR out$[rsp], rax
$LN43@stbi__psd_:
; Line 6128
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN44@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG76352
	call	stbi__err
	test	eax, eax
	je	SHORT $LN87@stbi__psd_
	mov	QWORD PTR tv196[rsp], 0
	jmp	SHORT $LN88@stbi__psd_
$LN87@stbi__psd_:
	mov	QWORD PTR tv196[rsp], 0
$LN88@stbi__psd_:
	mov	rax, QWORD PTR tv196[rsp]
	jmp	$LN1@stbi__psd_
$LN44@stbi__psd_:
; Line 6129
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR pixelCount$[rsp], eax
; Line 6135
	cmp	DWORD PTR compression$[rsp], 0
	je	$LN45@stbi__psd_
; Line 6146
	mov	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channelCount$[rsp]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6149
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN4@stbi__psd_
$LN2@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN4@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN3@stbi__psd_
; Line 6152
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$10[rsp], rax
; Line 6153
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	SHORT $LN47@stbi__psd_
; Line 6155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__psd_
$LN5@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$10[rsp]
	add	rax, 4
	mov	QWORD PTR p$10[rsp], rax
$LN7@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__psd_
; Line 6156
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN89@stbi__psd_
	mov	DWORD PTR tv212[rsp], 255		; 000000ffH
	jmp	SHORT $LN90@stbi__psd_
$LN89@stbi__psd_:
	mov	DWORD PTR tv212[rsp], 0
$LN90@stbi__psd_:
	mov	rax, QWORD PTR p$10[rsp]
	movzx	ecx, BYTE PTR tv212[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@stbi__psd_
$LN6@stbi__psd_:
; Line 6157
	jmp	$LN48@stbi__psd_
$LN47@stbi__psd_:
; Line 6159
	mov	r8d, DWORD PTR pixelCount$[rsp]
	mov	rdx, QWORD PTR p$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_decode_rle
	test	eax, eax
	jne	$LN49@stbi__psd_
; Line 6160
	lea	rax, OFFSET FLAT:$SG76358
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6160				; 00001810H
	lea	r8, OFFSET FLAT:$SG76359
	mov	edx, 98					; 00000062H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T16[rsp]
	call	ccuserallocator_
; Line 6161
	lea	rcx, OFFSET FLAT:$SG76360
	call	stbi__err
	test	eax, eax
	je	SHORT $LN91@stbi__psd_
	mov	QWORD PTR tv231[rsp], 0
	jmp	SHORT $LN92@stbi__psd_
$LN91@stbi__psd_:
	mov	QWORD PTR tv231[rsp], 0
$LN92@stbi__psd_:
	mov	rax, QWORD PTR tv231[rsp]
	jmp	$LN1@stbi__psd_
$LN49@stbi__psd_:
$LN48@stbi__psd_:
; Line 6164
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6166
	jmp	$LN46@stbi__psd_
$LN45@stbi__psd_:
; Line 6171
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN10@stbi__psd_
$LN8@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN10@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN9@stbi__psd_
; Line 6172
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	$LN50@stbi__psd_
; Line 6174
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	$LN52@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	$LN52@stbi__psd_
; Line 6175
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$13[rsp], rax
; Line 6176
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN93@stbi__psd_
	mov	DWORD PTR tv241[rsp], 65535		; 0000ffffH
	jmp	SHORT $LN94@stbi__psd_
$LN93@stbi__psd_:
	mov	DWORD PTR tv241[rsp], 0
$LN94@stbi__psd_:
	movzx	eax, WORD PTR tv241[rsp]
	mov	WORD PTR val$6[rsp], ax
; Line 6177
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__psd_
$LN11@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$13[rsp]
	add	rax, 8
	mov	QWORD PTR q$13[rsp], rax
$LN13@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__psd_
; Line 6178
	mov	rax, QWORD PTR q$13[rsp]
	movzx	ecx, WORD PTR val$6[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN11@stbi__psd_
$LN12@stbi__psd_:
; Line 6179
	jmp	$LN53@stbi__psd_
$LN52@stbi__psd_:
; Line 6180
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$14[rsp], rax
; Line 6181
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN95@stbi__psd_
	mov	DWORD PTR tv249[rsp], 255		; 000000ffH
	jmp	SHORT $LN96@stbi__psd_
$LN95@stbi__psd_:
	mov	DWORD PTR tv249[rsp], 0
$LN96@stbi__psd_:
	movzx	eax, BYTE PTR tv249[rsp]
	mov	BYTE PTR val$1[rsp], al
; Line 6182
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__psd_
$LN14@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$14[rsp]
	add	rax, 4
	mov	QWORD PTR p$14[rsp], rax
$LN16@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN15@stbi__psd_
; Line 6183
	mov	rax, QWORD PTR p$14[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN14@stbi__psd_
$LN15@stbi__psd_:
$LN53@stbi__psd_:
; Line 6185
	jmp	$LN51@stbi__psd_
$LN50@stbi__psd_:
; Line 6186
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN54@stbi__psd_
; Line 6187
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$15[rsp], rax
; Line 6188
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN19@stbi__psd_
$LN17@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$15[rsp]
	add	rax, 8
	mov	QWORD PTR q$15[rsp], rax
$LN19@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN18@stbi__psd_
; Line 6189
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR q$15[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN17@stbi__psd_
$LN18@stbi__psd_:
; Line 6190
	jmp	$LN55@stbi__psd_
$LN54@stbi__psd_:
; Line 6191
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$9[rsp], rax
; Line 6192
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN56@stbi__psd_
; Line 6193
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__psd_
$LN20@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN22@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN21@stbi__psd_
; Line 6194
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	sar	eax, 8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN20@stbi__psd_
$LN21@stbi__psd_:
; Line 6195
	jmp	SHORT $LN57@stbi__psd_
$LN56@stbi__psd_:
; Line 6196
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__psd_
$LN23@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN25@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN24@stbi__psd_
; Line 6197
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN23@stbi__psd_
$LN24@stbi__psd_:
$LN57@stbi__psd_:
$LN55@stbi__psd_:
$LN51@stbi__psd_:
; Line 6201
	jmp	$LN8@stbi__psd_
$LN9@stbi__psd_:
$LN46@stbi__psd_:
; Line 6205
	cmp	DWORD PTR channelCount$[rsp], 4
	jl	$LN58@stbi__psd_
; Line 6206
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	$LN59@stbi__psd_
; Line 6207
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__psd_
$LN26@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN27@stbi__psd_
; Line 6208
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pixel$5[rsp], rax
; Line 6209
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN61@stbi__psd_
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 65535				; 0000ffffH
	je	$LN61@stbi__psd_
; Line 6210
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR a$11[rsp], xmm0
; Line 6211
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$11[rsp]
	movss	DWORD PTR ra$3[rsp], xmm0
; Line 6212
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$3[rsp]
	movss	xmm1, DWORD PTR __real@477fff00
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$7[rsp], xmm0
; Line 6213
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6214
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6215
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN61@stbi__psd_:
; Line 6217
	jmp	$LN26@stbi__psd_
$LN27@stbi__psd_:
; Line 6218
	jmp	$LN60@stbi__psd_
$LN59@stbi__psd_:
; Line 6219
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN31@stbi__psd_
$LN29@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN31@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN30@stbi__psd_
; Line 6220
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixel$2[rsp], rax
; Line 6221
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN62@stbi__psd_
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 255				; 000000ffH
	je	$LN62@stbi__psd_
; Line 6222
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR a$12[rsp], xmm0
; Line 6223
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$12[rsp]
	movss	DWORD PTR ra$4[rsp], xmm0
; Line 6224
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$4[rsp]
	movss	xmm1, DWORD PTR __real@437f0000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$8[rsp], xmm0
; Line 6225
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6226
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6227
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN62@stbi__psd_:
; Line 6229
	jmp	$LN29@stbi__psd_
$LN30@stbi__psd_:
$LN60@stbi__psd_:
$LN58@stbi__psd_:
; Line 6234
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN63@stbi__psd_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN63@stbi__psd_
; Line 6235
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN64@stbi__psd_
; Line 6236
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format16
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN65@stbi__psd_
$LN64@stbi__psd_:
; Line 6238
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
$LN65@stbi__psd_:
; Line 6239
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN66@stbi__psd_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__psd_
$LN66@stbi__psd_:
$LN63@stbi__psd_:
; Line 6242
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN67@stbi__psd_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN67@stbi__psd_:
; Line 6243
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6244
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6246
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__psd_:
; Line 6247
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
stbi__psd_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
r$ = 36
s$ = 64
stbi__psd_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 6004
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6005
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	jne	SHORT $LN3@stbi__psd_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__psd_
$LN3@stbi__psd_:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__psd_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 6006
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6007
	mov	eax, DWORD PTR r$[rsp]
; Line 6008
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_image_type$ = 32
sz$ = 36
tga_colormap_bpp$ = 40
tga_bits_per_pixel$ = 44
tga_comp$ = 48
tga_colormap_type$ = 52
tv153 = 56
tga_w$ = 60
tga_h$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
stbi__tga_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5678
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5681
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5682
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_colormap_type$[rsp], eax
; Line 5683
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
; Line 5684
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5685
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN2@stbi__tga_:
; Line 5687
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5688
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jne	$LN3@stbi__tga_
; Line 5689
	cmp	DWORD PTR tga_image_type$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 9
	je	SHORT $LN5@stbi__tga_
; Line 5690
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5691
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN5@stbi__tga_:
; Line 5693
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5694
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5695
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
; Line 5696
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5697
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5699
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5700
	mov	eax, DWORD PTR sz$[rsp]
	mov	DWORD PTR tga_colormap_bpp$[rsp], eax
; Line 5701
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5702
	cmp	DWORD PTR tga_image_type$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN7@stbi__tga_
; Line 5703
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5704
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN7@stbi__tga_:
; Line 5706
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5707
	mov	DWORD PTR tga_colormap_bpp$[rsp], 0
$LN4@stbi__tga_:
; Line 5709
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_w$[rsp], eax
; Line 5710
	cmp	DWORD PTR tga_w$[rsp], 1
	jge	SHORT $LN8@stbi__tga_
; Line 5711
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5712
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN8@stbi__tga_:
; Line 5714
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_h$[rsp], eax
; Line 5715
	cmp	DWORD PTR tga_h$[rsp], 1
	jge	SHORT $LN9@stbi__tga_
; Line 5716
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5717
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN9@stbi__tga_:
; Line 5719
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5720
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5721
	cmp	DWORD PTR tga_colormap_bpp$[rsp], 0
	je	SHORT $LN10@stbi__tga_
; Line 5722
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	je	SHORT $LN12@stbi__tga_
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 16
	je	SHORT $LN12@stbi__tga_
; Line 5725
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5726
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5728
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, DWORD PTR tga_colormap_bpp$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
; Line 5729
	jmp	SHORT $LN11@stbi__tga_
$LN10@stbi__tga_:
; Line 5730
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN18@stbi__tga_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN18@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 1
$LN19@stbi__tga_:
	xor	r8d, r8d
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN11@stbi__tga_:
; Line 5732
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN13@stbi__tga_
; Line 5733
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5734
	xor	eax, eax
	jmp	SHORT $LN1@stbi__tga_
$LN13@stbi__tga_:
; Line 5736
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN14@stbi__tga_
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN14@stbi__tga_:
; Line 5737
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN15@stbi__tga_
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN15@stbi__tga_:
; Line 5738
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN16@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN16@stbi__tga_:
; Line 5739
	mov	eax, 1
$LN1@stbi__tga_:
; Line 5740
	add	rsp, 88					; 00000058H
	ret	0
stbi__tga_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_comp$ = 48
j$ = 52
i$ = 56
tga_width$ = 60
tga_height$ = 64
temp$1 = 68
temp$2 = 69
tga_palette_len$ = 72
tga_data$ = 80
tga_rgb16$ = 88
pal_idx$3 = 92
read_next_pixel$ = 96
tga_image_type$ = 100
tga_indexed$ = 104
raw_data$ = 108
RLE_count$ = 112
tga_inverted$ = 116
index1$4 = 120
index2$5 = 124
tga_palette$ = 128
tga_is_RLE$ = 136
tga_palette_bits$ = 140
tga_pixel$6 = 144
RLE_repeating$ = 152
tga_bits_per_pixel$ = 156
tv328 = 160
tga_y_origin$ = 164
tv192 = 168
tga_palette_start$ = 172
tv153 = 176
RLE_cmd$7 = 180
tga_x_origin$ = 184
row$8 = 188
tga_offset$ = 192
pal_entry$9 = 200
tv134 = 208
tv139 = 216
tv160 = 224
tv171 = 232
tv181 = 240
tv215 = 248
tv235 = 256
tv307 = 264
tga_row$10 = 272
$T11 = 288
$T12 = 320
$T13 = 352
$T14 = 384
$T15 = 416
$T16 = 448
$T17 = 480
$T18 = 512
$T19 = 544
$T20 = 576
s$ = 640
x$ = 648
y$ = 656
comp$ = 664
req_comp$ = 672
ri$ = 680
stbi__tga_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5794
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 616				; 00000268H
; Line 5796
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_offset$[rsp], eax
; Line 5797
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_indexed$[rsp], eax
; Line 5798
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5799
	mov	DWORD PTR tga_is_RLE$[rsp], 0
; Line 5800
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5801
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_palette_len$[rsp], eax
; Line 5802
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_palette_bits$[rsp], eax
; Line 5803
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_x_origin$[rsp], eax
; Line 5804
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_y_origin$[rsp], eax
; Line 5805
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_width$[rsp], eax
; Line 5806
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_height$[rsp], eax
; Line 5807
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5808
	mov	DWORD PTR tga_rgb16$[rsp], 0
; Line 5809
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5813
	mov	QWORD PTR tga_palette$[rsp], 0
; Line 5815
	lea	rax, QWORD PTR raw_data$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
; Line 5816
	mov	DWORD PTR RLE_count$[rsp], 0
; Line 5817
	mov	DWORD PTR RLE_repeating$[rsp], 0
; Line 5818
	mov	DWORD PTR read_next_pixel$[rsp], 1
; Line 5823
	cmp	DWORD PTR tga_height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN29@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG76118
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__tga_
	mov	QWORD PTR tv134[rsp], 0
	jmp	SHORT $LN63@stbi__tga_
$LN62@stbi__tga_:
	mov	QWORD PTR tv134[rsp], 0
$LN63@stbi__tga_:
	mov	rax, QWORD PTR tv134[rsp]
	jmp	$LN1@stbi__tga_
$LN29@stbi__tga_:
; Line 5824
	cmp	DWORD PTR tga_width$[rsp], 16777216	; 01000000H
	jle	SHORT $LN30@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG76120
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__tga_
	mov	QWORD PTR tv139[rsp], 0
	jmp	SHORT $LN65@stbi__tga_
$LN64@stbi__tga_:
	mov	QWORD PTR tv139[rsp], 0
$LN65@stbi__tga_:
	mov	rax, QWORD PTR tv139[rsp]
	jmp	$LN1@stbi__tga_
$LN30@stbi__tga_:
; Line 5827
	cmp	DWORD PTR tga_image_type$[rsp], 8
	jl	SHORT $LN31@stbi__tga_
; Line 5829
	mov	eax, DWORD PTR tga_image_type$[rsp]
	sub	eax, 8
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5830
	mov	DWORD PTR tga_is_RLE$[rsp], 1
$LN31@stbi__tga_:
; Line 5832
	mov	eax, DWORD PTR tga_inverted$[rsp]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5835
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	SHORT $LN32@stbi__tga_
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	xor	edx, edx
	mov	ecx, DWORD PTR tga_palette_bits$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
	jmp	SHORT $LN33@stbi__tga_
$LN32@stbi__tga_:
; Line 5836
	cmp	DWORD PTR tga_image_type$[rsp], 3
	jne	SHORT $LN66@stbi__tga_
	mov	DWORD PTR tv153[rsp], 1
	jmp	SHORT $LN67@stbi__tga_
$LN66@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 0
$LN67@stbi__tga_:
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN33@stbi__tga_:
; Line 5838
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN34@stbi__tga_
; Line 5839
	lea	rcx, OFFSET FLAT:$SG76125
	call	stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__tga_
	mov	QWORD PTR tv160[rsp], 0
	jmp	SHORT $LN69@stbi__tga_
$LN68@stbi__tga_:
	mov	QWORD PTR tv160[rsp], 0
$LN69@stbi__tga_:
	mov	rax, QWORD PTR tv160[rsp]
	jmp	$LN1@stbi__tga_
$LN34@stbi__tga_:
; Line 5842
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5843
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5844
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN35@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN35@stbi__tga_:
; Line 5846
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN36@stbi__tga_
; Line 5847
	lea	rcx, OFFSET FLAT:$SG76128
	call	stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__tga_
	mov	QWORD PTR tv171[rsp], 0
	jmp	SHORT $LN71@stbi__tga_
$LN70@stbi__tga_:
	mov	QWORD PTR tv171[rsp], 0
$LN71@stbi__tga_:
	mov	rax, QWORD PTR tv171[rsp]
	jmp	$LN1@stbi__tga_
$LN36@stbi__tga_:
; Line 5849
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR tga_data$[rsp], rax
; Line 5850
	cmp	QWORD PTR tga_data$[rsp], 0
	jne	SHORT $LN37@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG76130
	call	stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__tga_
	mov	QWORD PTR tv181[rsp], 0
	jmp	SHORT $LN73@stbi__tga_
$LN72@stbi__tga_:
	mov	QWORD PTR tv181[rsp], 0
$LN73@stbi__tga_:
	mov	rax, QWORD PTR tv181[rsp]
	jmp	$LN1@stbi__tga_
$LN37@stbi__tga_:
; Line 5853
	mov	edx, DWORD PTR tga_offset$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5855
	cmp	DWORD PTR tga_indexed$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN38@stbi__tga_
; Line 5856
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__tga_
$LN2@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__tga_:
	mov	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__tga_
; Line 5857
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	SHORT $LN74@stbi__tga_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR tv192[rsp], eax
	jmp	SHORT $LN75@stbi__tga_
$LN74@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv192[rsp], eax
$LN75@stbi__tga_:
	mov	eax, DWORD PTR tv192[rsp]
	mov	DWORD PTR row$8[rsp], eax
; Line 5858
	mov	eax, DWORD PTR row$8[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR tga_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_row$10[rsp], rax
; Line 5859
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_row$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 5860
	jmp	$LN2@stbi__tga_
$LN3@stbi__tga_:
; Line 5861
	jmp	$LN39@stbi__tga_
$LN38@stbi__tga_:
; Line 5863
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN40@stbi__tga_
; Line 5865
	cmp	DWORD PTR tga_palette_len$[rsp], 0
	jne	$LN41@stbi__tga_
; Line 5866
	lea	rax, OFFSET FLAT:$SG76135
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5866				; 000016eaH
	lea	r8, OFFSET FLAT:$SG76136
	mov	edx, 93					; 0000005dH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
; Line 5867
	lea	rcx, OFFSET FLAT:$SG76137
	call	stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__tga_
	mov	QWORD PTR tv215[rsp], 0
	jmp	SHORT $LN77@stbi__tga_
$LN76@stbi__tga_:
	mov	QWORD PTR tv215[rsp], 0
$LN77@stbi__tga_:
	mov	rax, QWORD PTR tv215[rsp]
	jmp	$LN1@stbi__tga_
$LN41@stbi__tga_:
; Line 5871
	mov	edx, DWORD PTR tga_palette_start$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5873
	xor	r8d, r8d
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	ecx, DWORD PTR tga_palette_len$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR tga_palette$[rsp], rax
; Line 5874
	cmp	QWORD PTR tga_palette$[rsp], 0
	jne	$LN42@stbi__tga_
; Line 5875
	lea	rax, OFFSET FLAT:$SG76139
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5875				; 000016f3H
	lea	r8, OFFSET FLAT:$SG76140
	mov	edx, 94					; 0000005eH
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 5876
	lea	rcx, OFFSET FLAT:$SG76141
	call	stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__tga_
	mov	QWORD PTR tv235[rsp], 0
	jmp	SHORT $LN79@stbi__tga_
$LN78@stbi__tga_:
	mov	QWORD PTR tv235[rsp], 0
$LN79@stbi__tga_:
	mov	rax, QWORD PTR tv235[rsp]
	jmp	$LN1@stbi__tga_
$LN42@stbi__tga_:
; Line 5878
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	$LN43@stbi__tga_
; Line 5879
	mov	rax, QWORD PTR tga_palette$[rsp]
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5880
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN80@stbi__tga_
	mov	r8d, 5880				; 000016f8H
	lea	rdx, OFFSET FLAT:$SG76144
	lea	rcx, OFFSET FLAT:$SG76145
	call	_wassert
	xor	eax, eax
$LN80@stbi__tga_:
; Line 5881
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__tga_
$LN5@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__tga_
; Line 5882
	mov	rdx, QWORD PTR pal_entry$9[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_read_rgb16
; Line 5883
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR pal_entry$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5884
	jmp	SHORT $LN5@stbi__tga_
$LN6@stbi__tga_:
; Line 5885
	jmp	$LN44@stbi__tga_
$LN43@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_palette$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
	test	eax, eax
	jne	$LN45@stbi__tga_
; Line 5886
	lea	rax, OFFSET FLAT:$SG76147
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5886				; 000016feH
	lea	r8, OFFSET FLAT:$SG76148
	mov	edx, 95					; 0000005fH
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
; Line 5887
	lea	rax, OFFSET FLAT:$SG76149
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5887				; 000016ffH
	lea	r8, OFFSET FLAT:$SG76150
	mov	edx, 96					; 00000060H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_palette$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
; Line 5888
	lea	rcx, OFFSET FLAT:$SG76151
	call	stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__tga_
	mov	QWORD PTR tv307[rsp], 0
	jmp	SHORT $LN82@stbi__tga_
$LN81@stbi__tga_:
	mov	QWORD PTR tv307[rsp], 0
$LN82@stbi__tga_:
	mov	rax, QWORD PTR tv307[rsp]
	jmp	$LN1@stbi__tga_
$LN45@stbi__tga_:
$LN44@stbi__tga_:
$LN40@stbi__tga_:
; Line 5892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__tga_
$LN8@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__tga_
; Line 5895
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	je	SHORT $LN46@stbi__tga_
; Line 5897
	cmp	DWORD PTR RLE_count$[rsp], 0
	jne	SHORT $LN48@stbi__tga_
; Line 5900
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR RLE_cmd$7[rsp], eax
; Line 5901
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	and	eax, 127				; 0000007fH
	inc	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5902
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	sar	eax, 7
	mov	DWORD PTR RLE_repeating$[rsp], eax
; Line 5903
	mov	DWORD PTR read_next_pixel$[rsp], 1
	jmp	SHORT $LN49@stbi__tga_
$LN48@stbi__tga_:
; Line 5904
	cmp	DWORD PTR RLE_repeating$[rsp], 0
	jne	SHORT $LN50@stbi__tga_
; Line 5906
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN50@stbi__tga_:
$LN49@stbi__tga_:
; Line 5908
	jmp	SHORT $LN47@stbi__tga_
$LN46@stbi__tga_:
; Line 5910
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN47@stbi__tga_:
; Line 5913
	cmp	DWORD PTR read_next_pixel$[rsp], 0
	je	$LN51@stbi__tga_
; Line 5916
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN52@stbi__tga_
; Line 5919
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	jne	SHORT $LN83@stbi__tga_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv328[rsp], eax
	jmp	SHORT $LN84@stbi__tga_
$LN83@stbi__tga_:
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tv328[rsp], eax
$LN84@stbi__tga_:
	mov	eax, DWORD PTR tv328[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5920
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR pal_idx$3[rsp], eax
	jl	SHORT $LN54@stbi__tga_
; Line 5922
	mov	DWORD PTR pal_idx$3[rsp], 0
$LN54@stbi__tga_:
; Line 5924
	mov	eax, DWORD PTR pal_idx$3[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5925
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__tga_
$LN11@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN12@stbi__tga_
; Line 5926
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR pal_idx$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR tga_palette$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5927
	jmp	SHORT $LN11@stbi__tga_
$LN12@stbi__tga_:
; Line 5928
	jmp	SHORT $LN53@stbi__tga_
$LN52@stbi__tga_:
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	SHORT $LN55@stbi__tga_
; Line 5929
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN85@stbi__tga_
	mov	r8d, 5929				; 00001729H
	lea	rdx, OFFSET FLAT:$SG76163
	lea	rcx, OFFSET FLAT:$SG76164
	call	_wassert
	xor	eax, eax
$LN85@stbi__tga_:
; Line 5930
	lea	rdx, QWORD PTR raw_data$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_read_rgb16
; Line 5931
	jmp	SHORT $LN56@stbi__tga_
$LN55@stbi__tga_:
; Line 5933
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN16@stbi__tga_
$LN14@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN16@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN15@stbi__tga_
; Line 5934
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5935
	jmp	SHORT $LN14@stbi__tga_
$LN15@stbi__tga_:
$LN56@stbi__tga_:
$LN53@stbi__tga_:
; Line 5938
	mov	DWORD PTR read_next_pixel$[rsp], 0
$LN51@stbi__tga_:
; Line 5942
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN17@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN18@stbi__tga_
; Line 5943
	movsxd	rax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR tga_comp$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR raw_data$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN17@stbi__tga_
$LN18@stbi__tga_:
; Line 5946
	mov	eax, DWORD PTR RLE_count$[rsp]
	dec	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5947
	jmp	$LN8@stbi__tga_
$LN9@stbi__tga_:
; Line 5949
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	$LN57@stbi__tga_
; Line 5951
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN22@stbi__tga_
$LN20@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	cmp	eax, DWORD PTR tga_height$[rsp]
	jge	$LN21@stbi__tga_
; Line 5953
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index1$4[rsp], eax
; Line 5954
	mov	eax, DWORD PTR tga_height$[rsp]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index2$5[rsp], eax
; Line 5955
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN25@stbi__tga_
$LN23@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__tga_:
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN24@stbi__tga_
; Line 5957
	movsxd	rax, DWORD PTR index1$4[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$2[rsp], al
; Line 5958
	movsxd	rax, DWORD PTR index2$5[rsp]
	movsxd	rcx, DWORD PTR index1$4[rsp]
	mov	rdx, QWORD PTR tga_data$[rsp]
	mov	rdi, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5959
	movsxd	rax, DWORD PTR index2$5[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	edx, BYTE PTR temp$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5960
	mov	eax, DWORD PTR index1$4[rsp]
	inc	eax
	mov	DWORD PTR index1$4[rsp], eax
; Line 5961
	mov	eax, DWORD PTR index2$5[rsp]
	inc	eax
	mov	DWORD PTR index2$5[rsp], eax
; Line 5962
	jmp	SHORT $LN23@stbi__tga_
$LN24@stbi__tga_:
; Line 5963
	jmp	$LN20@stbi__tga_
$LN21@stbi__tga_:
$LN57@stbi__tga_:
; Line 5966
	cmp	QWORD PTR tga_palette$[rsp], 0
	je	SHORT $LN58@stbi__tga_
; Line 5968
	lea	rax, OFFSET FLAT:$SG76167
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5968				; 00001750H
	lea	r8, OFFSET FLAT:$SG76168
	mov	edx, 97					; 00000061H
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_palette$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccuserallocator_
$LN58@stbi__tga_:
$LN39@stbi__tga_:
; Line 5973
	cmp	DWORD PTR tga_comp$[rsp], 3
	jl	$LN59@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN59@stbi__tga_
; Line 5975
	mov	rax, QWORD PTR tga_data$[rsp]
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5976
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__tga_
$LN26@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN27@stbi__tga_
; Line 5978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$1[rsp], al
; Line 5979
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tga_pixel$6[rsp]
	mov	rdi, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5980
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	edx, BYTE PTR temp$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5981
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5982
	jmp	$LN26@stbi__tga_
$LN27@stbi__tga_:
$LN59@stbi__tga_:
; Line 5986
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN60@stbi__tga_
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN60@stbi__tga_
; Line 5987
	mov	eax, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tga_width$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR tga_data$[rsp], rax
$LN60@stbi__tga_:
; Line 5991
	mov	DWORD PTR tga_y_origin$[rsp], 0
	mov	eax, DWORD PTR tga_y_origin$[rsp]
	mov	DWORD PTR tga_x_origin$[rsp], eax
	mov	eax, DWORD PTR tga_x_origin$[rsp]
	mov	DWORD PTR tga_palette_bits$[rsp], eax
	mov	eax, DWORD PTR tga_palette_bits$[rsp]
	mov	DWORD PTR tga_palette_len$[rsp], eax
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5995
	mov	rax, QWORD PTR tga_data$[rsp]
$LN1@stbi__tga_:
; Line 5996
	add	rsp, 616				; 00000268H
	pop	rdi
	pop	rsi
	ret	0
stbi__tga_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tga_color_type$ = 36
res$ = 40
s$ = 64
stbi__tga_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5743
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5744
	mov	DWORD PTR res$[rsp], 0
; Line 5746
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5747
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_color_type$[rsp], eax
; Line 5748
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
	jmp	$errorEnd$13
$LN2@stbi__tga_:
; Line 5749
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5750
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN3@stbi__tga_
; Line 5751
	cmp	DWORD PTR sz$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 9
	je	SHORT $LN5@stbi__tga_
	jmp	$errorEnd$13
$LN5@stbi__tga_:
; Line 5752
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5753
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5754
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
	jmp	$errorEnd$13
$LN6@stbi__tga_:
; Line 5755
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5756
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5757
	cmp	DWORD PTR sz$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 11
	je	SHORT $LN7@stbi__tga_
	jmp	$errorEnd$13
$LN7@stbi__tga_:
; Line 5758
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN4@stbi__tga_:
; Line 5760
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN8@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN8@stbi__tga_:
; Line 5761
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN9@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN9@stbi__tga_:
; Line 5762
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5763
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN10@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN10@stbi__tga_:
; Line 5764
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN11@stbi__tga_:
; Line 5766
	mov	DWORD PTR res$[rsp], 1
$errorEnd$13:
; Line 5769
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5770
	mov	eax, DWORD PTR res$[rsp]
; Line 5771
	add	rsp, 56					; 00000038H
	ret	0
stbi__tga_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
p$ = 40
info$ = 48
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
stbi__bmp_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7262
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 7263
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_parse_header
	mov	QWORD PTR p$[rsp], rax
; Line 7264
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi__bmp_
; Line 7265
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7266
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 7268
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__bmp_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN3@stbi__bmp_:
; Line 7269
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__bmp_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__bmp_:
; Line 7270
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__bmp_
; Line 7271
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN6@stbi__bmp_
	cmp	DWORD PTR info$[rsp+24], -16777216	; ff000000H
	jne	SHORT $LN6@stbi__bmp_
; Line 7272
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 7274
	cmp	DWORD PTR info$[rsp+24], 0
	je	SHORT $LN9@stbi__bmp_
	mov	DWORD PTR tv77[rsp], 4
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
	mov	DWORD PTR tv77[rsp], 3
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 7276
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 7277
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
stbi__bmp_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
z$1 = 52
z$2 = 56
j$ = 60
out$ = 64
target$ = 72
a$3 = 76
v$4 = 80
ma$ = 84
t$5 = 88
psize$ = 92
width$ = 96
mr$ = 100
mg$ = 104
mb$ = 108
bit_offset$6 = 112
easy$7 = 116
all_a$ = 120
v$8 = 124
pad$ = 128
color$9 = 132
rcount$10 = 136
gcount$11 = 140
bcount$12 = 144
acount$13 = 148
tv178 = 152
tv255 = 156
v$14 = 160
v2$15 = 164
tv390 = 168
tv527 = 172
tv544 = 176
rshift$16 = 180
gshift$17 = 184
bshift$18 = 188
ashift$19 = 192
tv584 = 196
a$20 = 200
tv70 = 204
flip_vertically$ = 208
bpp$21 = 212
tv80 = 216
tv86 = 224
tv172 = 232
tv193 = 240
tv205 = 248
tv221 = 256
tv282 = 264
tv459 = 272
tv496 = 280
p1$22 = 288
p2$23 = 296
$T24 = 304
$T25 = 336
$T26 = 368
$T27 = 400
$T28 = 432
$T29 = 464
$T30 = 496
$T31 = 528
info$ = 560
pal$ = 608
__$ArrayPad$ = 1632
s$ = 1680
x$ = 1688
y$ = 1696
comp$ = 1704
req_comp$ = 1712
ri$ = 1720
stbi__bmp_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5468
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1656				; 00000678H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5470
	mov	DWORD PTR mr$[rsp], 0
	mov	DWORD PTR mg$[rsp], 0
	mov	DWORD PTR mb$[rsp], 0
	mov	DWORD PTR ma$[rsp], 0
; Line 5472
	mov	DWORD PTR psize$[rsp], 0
; Line 5477
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 5478
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_parse_header
	test	rax, rax
	jne	SHORT $LN35@stbi__bmp_
; Line 5479
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN35@stbi__bmp_:
; Line 5481
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN93@stbi__bmp_
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN94@stbi__bmp_
$LN93@stbi__bmp_:
	mov	DWORD PTR tv70[rsp], 0
$LN94@stbi__bmp_:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR flip_vertically$[rsp], eax
; Line 5482
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	abs
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5484
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN36@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75843
	call	stbi__err
	test	eax, eax
	je	SHORT $LN95@stbi__bmp_
	mov	QWORD PTR tv80[rsp], 0
	jmp	SHORT $LN96@stbi__bmp_
$LN95@stbi__bmp_:
	mov	QWORD PTR tv80[rsp], 0
$LN96@stbi__bmp_:
	mov	rax, QWORD PTR tv80[rsp]
	jmp	$LN1@stbi__bmp_
$LN36@stbi__bmp_:
; Line 5485
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN37@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75845
	call	stbi__err
	test	eax, eax
	je	SHORT $LN97@stbi__bmp_
	mov	QWORD PTR tv86[rsp], 0
	jmp	SHORT $LN98@stbi__bmp_
$LN97@stbi__bmp_:
	mov	QWORD PTR tv86[rsp], 0
$LN98@stbi__bmp_:
	mov	rax, QWORD PTR tv86[rsp]
	jmp	$LN1@stbi__bmp_
$LN37@stbi__bmp_:
; Line 5487
	mov	eax, DWORD PTR info$[rsp+12]
	mov	DWORD PTR mr$[rsp], eax
; Line 5488
	mov	eax, DWORD PTR info$[rsp+16]
	mov	DWORD PTR mg$[rsp], eax
; Line 5489
	mov	eax, DWORD PTR info$[rsp+20]
	mov	DWORD PTR mb$[rsp], eax
; Line 5490
	mov	eax, DWORD PTR info$[rsp+24]
	mov	DWORD PTR ma$[rsp], eax
; Line 5491
	mov	eax, DWORD PTR info$[rsp+28]
	mov	DWORD PTR all_a$[rsp], eax
; Line 5493
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN38@stbi__bmp_
; Line 5494
	cmp	DWORD PTR info$[rsp], 24
	jge	SHORT $LN40@stbi__bmp_
; Line 5495
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 24
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR psize$[rsp], eax
$LN40@stbi__bmp_:
; Line 5496
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
; Line 5497
	cmp	DWORD PTR info$[rsp], 16
	jge	SHORT $LN41@stbi__bmp_
; Line 5498
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	sar	eax, 2
	mov	DWORD PTR psize$[rsp], eax
$LN41@stbi__bmp_:
$LN39@stbi__bmp_:
; Line 5500
	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN42@stbi__bmp_
; Line 5501
	movsxd	rax, DWORD PTR info$[rsp+4]
	mov	rcx, QWORD PTR s$[rsp]
	movsxd	rcx, DWORD PTR [rcx+184]
	mov	rdx, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [r8+208]
	mov	rdx, QWORD PTR [rdx+192]
	sub	rdx, r8
	add	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN43@stbi__bmp_
; Line 5502
	lea	rcx, OFFSET FLAT:$SG75852
	call	stbi__err
	test	eax, eax
	je	SHORT $LN99@stbi__bmp_
	mov	QWORD PTR tv172[rsp], 0
	jmp	SHORT $LN100@stbi__bmp_
$LN99@stbi__bmp_:
	mov	QWORD PTR tv172[rsp], 0
$LN100@stbi__bmp_:
	mov	rax, QWORD PTR tv172[rsp]
	jmp	$LN1@stbi__bmp_
$LN43@stbi__bmp_:
$LN42@stbi__bmp_:
; Line 5506
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN44@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN44@stbi__bmp_
; Line 5507
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 3
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
; Line 5509
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN101@stbi__bmp_
	mov	DWORD PTR tv178[rsp], 4
	jmp	SHORT $LN102@stbi__bmp_
$LN101@stbi__bmp_:
	mov	DWORD PTR tv178[rsp], 3
$LN102@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv178[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN45@stbi__bmp_:
; Line 5510
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN46@stbi__bmp_
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN46@stbi__bmp_
; Line 5511
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR target$[rsp], eax
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
; Line 5513
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR target$[rsp], eax
$LN47@stbi__bmp_:
; Line 5516
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN48@stbi__bmp_
; Line 5517
	lea	rcx, OFFSET FLAT:$SG75858
	call	stbi__err
	test	eax, eax
	je	SHORT $LN103@stbi__bmp_
	mov	QWORD PTR tv193[rsp], 0
	jmp	SHORT $LN104@stbi__bmp_
$LN103@stbi__bmp_:
	mov	QWORD PTR tv193[rsp], 0
$LN104@stbi__bmp_:
	mov	rax, QWORD PTR tv193[rsp]
	jmp	$LN1@stbi__bmp_
$LN48@stbi__bmp_:
; Line 5519
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 5520
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN49@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG75860
	call	stbi__err
	test	eax, eax
	je	SHORT $LN105@stbi__bmp_
	mov	QWORD PTR tv205[rsp], 0
	jmp	SHORT $LN106@stbi__bmp_
$LN105@stbi__bmp_:
	mov	QWORD PTR tv205[rsp], 0
$LN106@stbi__bmp_:
	mov	rax, QWORD PTR tv205[rsp]
	jmp	$LN1@stbi__bmp_
$LN49@stbi__bmp_:
; Line 5521
	cmp	DWORD PTR info$[rsp], 16
	jge	$LN50@stbi__bmp_
; Line 5522
	mov	DWORD PTR z$1[rsp], 0
; Line 5523
	cmp	DWORD PTR psize$[rsp], 0
	je	SHORT $LN53@stbi__bmp_
	cmp	DWORD PTR psize$[rsp], 256		; 00000100H
	jle	$LN52@stbi__bmp_
$LN53@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG75865
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5523				; 00001593H
	lea	r8, OFFSET FLAT:$SG75866
	mov	edx, 89					; 00000059H
	lea	rcx, QWORD PTR $T28[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG75867
	call	stbi__err
	test	eax, eax
	je	SHORT $LN107@stbi__bmp_
	mov	QWORD PTR tv221[rsp], 0
	jmp	SHORT $LN108@stbi__bmp_
$LN107@stbi__bmp_:
	mov	QWORD PTR tv221[rsp], 0
$LN108@stbi__bmp_:
	mov	rax, QWORD PTR tv221[rsp]
	jmp	$LN1@stbi__bmp_
$LN52@stbi__bmp_:
; Line 5524
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__bmp_:
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__bmp_
; Line 5525
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 5526
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 5527
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 5528
	cmp	DWORD PTR info$[rsp+8], 12
	je	SHORT $LN54@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
$LN54@stbi__bmp_:
; Line 5529
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 5530
	jmp	$LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5531
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN109@stbi__bmp_
	mov	DWORD PTR tv255[rsp], 3
	jmp	SHORT $LN110@stbi__bmp_
$LN109@stbi__bmp_:
	mov	DWORD PTR tv255[rsp], 4
$LN110@stbi__bmp_:
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	ecx, DWORD PTR psize$[rsp]
	imul	ecx, DWORD PTR tv255[rsp]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5532
	cmp	DWORD PTR info$[rsp], 1
	jne	SHORT $LN55@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN56@stbi__bmp_
$LN55@stbi__bmp_:
; Line 5533
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN57@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	shr	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN58@stbi__bmp_
$LN57@stbi__bmp_:
; Line 5534
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN59@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN60@stbi__bmp_
$LN59@stbi__bmp_:
; Line 5535
	lea	rax, OFFSET FLAT:$SG75875
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5535				; 0000159fH
	lea	r8, OFFSET FLAT:$SG75876
	mov	edx, 90					; 0000005aH
	lea	rcx, QWORD PTR $T29[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG75877
	call	stbi__err
	test	eax, eax
	je	SHORT $LN111@stbi__bmp_
	mov	QWORD PTR tv282[rsp], 0
	jmp	SHORT $LN112@stbi__bmp_
$LN111@stbi__bmp_:
	mov	QWORD PTR tv282[rsp], 0
$LN112@stbi__bmp_:
	mov	rax, QWORD PTR tv282[rsp]
	jmp	$LN1@stbi__bmp_
$LN60@stbi__bmp_:
$LN58@stbi__bmp_:
$LN56@stbi__bmp_:
; Line 5536
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5537
	cmp	DWORD PTR info$[rsp], 1
	jne	$LN61@stbi__bmp_
; Line 5538
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__bmp_
$LN5@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbi__bmp_
; Line 5539
	mov	DWORD PTR bit_offset$6[rsp], 7
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
; Line 5540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__bmp_
$LN8@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__bmp_
; Line 5541
	mov	eax, DWORD PTR bit_offset$6[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$14[rsp]
	sar	eax, cl
	and	eax, 1
	mov	DWORD PTR color$9[rsp], eax
; Line 5542
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5543
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5544
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5545
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN63@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN63@stbi__bmp_:
; Line 5546
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN64@stbi__bmp_
	jmp	SHORT $LN9@stbi__bmp_
$LN64@stbi__bmp_:
; Line 5547
	mov	eax, DWORD PTR bit_offset$6[rsp]
	dec	eax
	mov	DWORD PTR bit_offset$6[rsp], eax
	cmp	DWORD PTR bit_offset$6[rsp], 0
	jge	SHORT $LN65@stbi__bmp_
; Line 5548
	mov	DWORD PTR bit_offset$6[rsp], 7
; Line 5549
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
$LN65@stbi__bmp_:
; Line 5551
	jmp	$LN8@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5552
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5553
	jmp	$LN5@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5554
	jmp	$LN62@stbi__bmp_
$LN61@stbi__bmp_:
; Line 5555
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__bmp_
$LN11@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbi__bmp_
; Line 5556
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__bmp_
$LN14@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__bmp_
; Line 5557
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$4[rsp], eax
	mov	DWORD PTR v2$15[rsp], 0
; Line 5558
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN66@stbi__bmp_
; Line 5559
	mov	eax, DWORD PTR v$4[rsp]
	and	eax, 15
	mov	DWORD PTR v2$15[rsp], eax
; Line 5560
	mov	eax, DWORD PTR v$4[rsp]
	sar	eax, 4
	mov	DWORD PTR v$4[rsp], eax
$LN66@stbi__bmp_:
; Line 5562
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5563
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5564
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5565
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN67@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN67@stbi__bmp_:
; Line 5566
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN68@stbi__bmp_
	jmp	$LN15@stbi__bmp_
$LN68@stbi__bmp_:
; Line 5567
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN113@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv390[rsp], eax
	jmp	SHORT $LN114@stbi__bmp_
$LN113@stbi__bmp_:
	mov	eax, DWORD PTR v2$15[rsp]
	mov	DWORD PTR tv390[rsp], eax
$LN114@stbi__bmp_:
	mov	eax, DWORD PTR tv390[rsp]
	mov	DWORD PTR v$4[rsp], eax
; Line 5568
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5569
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5570
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5571
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN69@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN69@stbi__bmp_:
; Line 5572
	jmp	$LN14@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5573
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5574
	jmp	$LN11@stbi__bmp_
$LN12@stbi__bmp_:
$LN62@stbi__bmp_:
; Line 5576
	jmp	$LN51@stbi__bmp_
$LN50@stbi__bmp_:
; Line 5577
	mov	DWORD PTR rshift$16[rsp], 0
	mov	DWORD PTR gshift$17[rsp], 0
	mov	DWORD PTR bshift$18[rsp], 0
	mov	DWORD PTR ashift$19[rsp], 0
	mov	DWORD PTR rcount$10[rsp], 0
	mov	DWORD PTR gcount$11[rsp], 0
	mov	DWORD PTR bcount$12[rsp], 0
	mov	DWORD PTR acount$13[rsp], 0
; Line 5578
	mov	DWORD PTR z$2[rsp], 0
; Line 5579
	mov	DWORD PTR easy$7[rsp], 0
; Line 5580
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5581
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN70@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax], 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN71@stbi__bmp_
$LN70@stbi__bmp_:
; Line 5582
	cmp	DWORD PTR info$[rsp], 16
	jne	SHORT $LN72@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN73@stbi__bmp_
$LN72@stbi__bmp_:
; Line 5583
	mov	DWORD PTR width$[rsp], 0
$LN73@stbi__bmp_:
$LN71@stbi__bmp_:
; Line 5584
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5585
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN74@stbi__bmp_
; Line 5586
	mov	DWORD PTR easy$7[rsp], 1
	jmp	SHORT $LN75@stbi__bmp_
$LN74@stbi__bmp_:
; Line 5587
	cmp	DWORD PTR info$[rsp], 32		; 00000020H
	jne	SHORT $LN76@stbi__bmp_
; Line 5588
	cmp	DWORD PTR mb$[rsp], 255			; 000000ffH
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 65280		; 0000ff00H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mr$[rsp], 16711680		; 00ff0000H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN77@stbi__bmp_
; Line 5589
	mov	DWORD PTR easy$7[rsp], 2
$LN77@stbi__bmp_:
$LN76@stbi__bmp_:
$LN75@stbi__bmp_:
; Line 5591
	cmp	DWORD PTR easy$7[rsp], 0
	jne	$LN78@stbi__bmp_
; Line 5592
	cmp	DWORD PTR mr$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mb$[rsp], 0
	jne	$LN79@stbi__bmp_
$LN80@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG75898
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5592				; 000015d8H
	lea	r8, OFFSET FLAT:$SG75899
	mov	edx, 91					; 0000005bH
	lea	rcx, QWORD PTR $T30[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG75900
	call	stbi__err
	test	eax, eax
	je	SHORT $LN115@stbi__bmp_
	mov	QWORD PTR tv459[rsp], 0
	jmp	SHORT $LN116@stbi__bmp_
$LN115@stbi__bmp_:
	mov	QWORD PTR tv459[rsp], 0
$LN116@stbi__bmp_:
	mov	rax, QWORD PTR tv459[rsp]
	jmp	$LN1@stbi__bmp_
$LN79@stbi__bmp_:
; Line 5594
	mov	ecx, DWORD PTR mr$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR rshift$16[rsp], eax
	mov	ecx, DWORD PTR mr$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR rcount$10[rsp], eax
; Line 5595
	mov	ecx, DWORD PTR mg$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR gshift$17[rsp], eax
	mov	ecx, DWORD PTR mg$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR gcount$11[rsp], eax
; Line 5596
	mov	ecx, DWORD PTR mb$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR bshift$18[rsp], eax
	mov	ecx, DWORD PTR mb$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR bcount$12[rsp], eax
; Line 5597
	mov	ecx, DWORD PTR ma$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR ashift$19[rsp], eax
	mov	ecx, DWORD PTR ma$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR acount$13[rsp], eax
; Line 5598
	cmp	DWORD PTR rcount$10[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR gcount$11[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR bcount$12[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR acount$13[rsp], 8
	jle	$LN81@stbi__bmp_
$LN82@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG75903
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5598				; 000015deH
	lea	r8, OFFSET FLAT:$SG75904
	mov	edx, 92					; 0000005cH
	lea	rcx, QWORD PTR $T31[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T27[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG75905
	call	stbi__err
	test	eax, eax
	je	SHORT $LN117@stbi__bmp_
	mov	QWORD PTR tv496[rsp], 0
	jmp	SHORT $LN118@stbi__bmp_
$LN117@stbi__bmp_:
	mov	QWORD PTR tv496[rsp], 0
$LN118@stbi__bmp_:
	mov	rax, QWORD PTR tv496[rsp]
	jmp	$LN1@stbi__bmp_
$LN81@stbi__bmp_:
$LN78@stbi__bmp_:
; Line 5600
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__bmp_
$LN17@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stbi__bmp_
; Line 5601
	cmp	DWORD PTR easy$7[rsp], 0
	je	$LN83@stbi__bmp_
; Line 5602
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__bmp_
$LN20@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN21@stbi__bmp_
; Line 5604
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5605
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5606
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5607
	mov	eax, DWORD PTR z$2[rsp]
	add	eax, 3
	mov	DWORD PTR z$2[rsp], eax
; Line 5608
	cmp	DWORD PTR easy$7[rsp], 2
	jne	SHORT $LN119@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv527[rsp], eax
	jmp	SHORT $LN120@stbi__bmp_
$LN119@stbi__bmp_:
	mov	DWORD PTR tv527[rsp], 255		; 000000ffH
$LN120@stbi__bmp_:
	movzx	eax, BYTE PTR tv527[rsp]
	mov	BYTE PTR a$3[rsp], al
; Line 5609
	movzx	eax, BYTE PTR a$3[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5610
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN85@stbi__bmp_
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR a$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN85@stbi__bmp_:
; Line 5611
	jmp	$LN20@stbi__bmp_
$LN21@stbi__bmp_:
; Line 5612
	jmp	$LN84@stbi__bmp_
$LN83@stbi__bmp_:
; Line 5613
	mov	eax, DWORD PTR info$[rsp]
	mov	DWORD PTR bpp$21[rsp], eax
; Line 5614
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__bmp_
$LN23@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN24@stbi__bmp_
; Line 5615
	cmp	DWORD PTR bpp$21[rsp], 16
	jne	SHORT $LN121@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tv544[rsp], eax
	jmp	SHORT $LN122@stbi__bmp_
$LN121@stbi__bmp_:
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR tv544[rsp], eax
$LN122@stbi__bmp_:
	mov	eax, DWORD PTR tv544[rsp]
	mov	DWORD PTR v$8[rsp], eax
; Line 5617
	mov	eax, DWORD PTR mr$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR rcount$10[rsp]
	mov	edx, DWORD PTR rshift$16[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5618
	mov	eax, DWORD PTR mg$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR gcount$11[rsp]
	mov	edx, DWORD PTR gshift$17[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5619
	mov	eax, DWORD PTR mb$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR bcount$12[rsp]
	mov	edx, DWORD PTR bshift$18[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5620
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN123@stbi__bmp_
	mov	eax, DWORD PTR ma$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR acount$13[rsp]
	mov	edx, DWORD PTR ashift$19[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	mov	DWORD PTR tv584[rsp], eax
	jmp	SHORT $LN124@stbi__bmp_
$LN123@stbi__bmp_:
	mov	DWORD PTR tv584[rsp], 255		; 000000ffH
$LN124@stbi__bmp_:
	mov	eax, DWORD PTR tv584[rsp]
	mov	DWORD PTR a$20[rsp], eax
; Line 5621
	mov	eax, DWORD PTR a$20[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5622
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN86@stbi__bmp_
	mov	eax, DWORD PTR a$20[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN86@stbi__bmp_:
; Line 5623
	jmp	$LN23@stbi__bmp_
$LN24@stbi__bmp_:
$LN84@stbi__bmp_:
; Line 5625
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5626
	jmp	$LN17@stbi__bmp_
$LN18@stbi__bmp_:
$LN51@stbi__bmp_:
; Line 5630
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN87@stbi__bmp_
	cmp	DWORD PTR all_a$[rsp], 0
	jne	SHORT $LN87@stbi__bmp_
; Line 5631
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN28@stbi__bmp_
$LN26@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__bmp_:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN27@stbi__bmp_
; Line 5632
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN26@stbi__bmp_
$LN27@stbi__bmp_:
$LN87@stbi__bmp_:
; Line 5634
	cmp	DWORD PTR flip_vertically$[rsp], 0
	je	$LN88@stbi__bmp_
; Line 5636
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN31@stbi__bmp_
$LN29@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN31@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sar	eax, 1
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN30@stbi__bmp_
; Line 5637
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p1$22[rsp], rax
; Line 5638
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx]
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p2$23[rsp], rax
; Line 5639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi__bmp_
$LN32@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi__bmp_
; Line 5640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p1$22[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p1$22[rsp]
	mov	rdi, QWORD PTR p2$23[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p2$23[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5641
	jmp	SHORT $LN32@stbi__bmp_
$LN33@stbi__bmp_:
; Line 5642
	jmp	$LN29@stbi__bmp_
$LN30@stbi__bmp_:
$LN88@stbi__bmp_:
; Line 5645
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN89@stbi__bmp_
	mov	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN89@stbi__bmp_
; Line 5646
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR target$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 5647
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN90@stbi__bmp_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__bmp_
$LN90@stbi__bmp_:
$LN89@stbi__bmp_:
; Line 5650
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 5651
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 5652
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN91@stbi__bmp_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN91@stbi__bmp_:
; Line 5653
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__bmp_:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1656				; 00000678H
	pop	rdi
	pop	rsi
	ret	0
stbi__bmp_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__bmp_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5298
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 5300
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5301
	mov	eax, DWORD PTR r$[rsp]
; Line 5302
	add	rsp, 56					; 00000038H
	ret	0
stbi__bmp_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
stbi__png_is16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5266
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5268
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5269
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__png_info_raw
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5270
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5271
	cmp	DWORD PTR p$[rsp+32], 16
	je	SHORT $LN3@stbi__png_
; Line 5272
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__rewind
; Line 5273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN3@stbi__png_:
; Line 5275
	mov	eax, 1
$LN1@stbi__png_:
; Line 5276
	add	rsp, 88					; 00000058H
	ret	0
stbi__png_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
stbi__png_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5259
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5261
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5262
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__png_info_raw
; Line 5263
	add	rsp, 88					; 00000058H
	ret	0
stbi__png_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
stbi__png_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5234
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5235
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__do_png
; Line 5236
	add	rsp, 104				; 00000068H
	ret	0
stbi__png_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__png_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 5239
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5241
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__check_png_header
	mov	DWORD PTR r$[rsp], eax
; Line 5242
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5243
	mov	eax, DWORD PTR r$[rsp]
; Line 5244
	add	rsp, 56					; 00000038H
	ret	0
stbi__png_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
j$ = 56
$T1 = 64
$T2 = 96
s$ = 160
x$ = 168
y$ = 176
comp$ = 184
stbi__jpeg_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4013
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 4015
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 4016
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG74325
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4017
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4018
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_info_raw
	mov	DWORD PTR result$[rsp], eax
; Line 4019
	lea	rax, OFFSET FLAT:$SG74326
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4019				; 00000fb3H
	lea	r8, OFFSET FLAT:$SG74327
	mov	edx, 75					; 0000004bH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4020
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 4021
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
tv70 = 56
result$ = 64
$T1 = 80
$T2 = 112
s$ = 176
x$ = 184
y$ = 192
comp$ = 200
req_comp$ = 208
ri$ = 216
stbi__jpeg_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3975
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 3977
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3978
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG74283
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi__jpeg
	mov	QWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
	mov	QWORD PTR tv70[rsp], 0
$LN5@stbi__jpeg:
	mov	rax, QWORD PTR tv70[rsp]
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3980
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3981
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__setup_jpeg
; Line 3982
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	load_jpeg_image
	mov	QWORD PTR result$[rsp], rax
; Line 3983
	lea	rax, OFFSET FLAT:$SG74284
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3983				; 00000f8fH
	lea	r8, OFFSET FLAT:$SG74285
	mov	edx, 73					; 00000049H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3984
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 3985
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 48
j$ = 56
$T1 = 64
$T2 = 96
s$ = 160
stbi__jpeg_test PROC
; File W:\cpp\void\rx\stb_image.h
; Line 3988
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 3990
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3991
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG74294
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3992
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3993
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__setup_jpeg
; Line 3994
	mov	edx, 1
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	mov	DWORD PTR r$[rsp], eax
; Line 3995
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 3996
	lea	rax, OFFSET FLAT:$SG74295
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3996				; 00000f9cH
	lea	r8, OFFSET FLAT:$SG74296
	mov	edx, 74					; 0000004aH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3997
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__jpeg:
; Line 3998
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stbi__rewind PROC
; File W:\cpp\void\rx\stb_image.h
; Line 884
	mov	QWORD PTR [rsp+8], rcx
; Line 888
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+192], rcx
; Line 889
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+200], rcx
; Line 890
	ret	0
stbi__rewind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
f$ = 56
stbi__start_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 875
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 876
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:stbi__stdio_callbacks
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 877
	add	rsp, 40					; 00000028H
	ret	0
stbi__start_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
user$ = 64
stbi__stdio_eof PROC
; File W:\cpp\void\rx\stb_image.h
; Line 863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 864
	mov	rcx, QWORD PTR user$[rsp]
	call	feof
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	rcx, QWORD PTR user$[rsp]
	call	ferror
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@stbi__stdi
$LN3@stbi__stdi:
	mov	DWORD PTR tv70[rsp], 1
$LN4@stbi__stdi:
	mov	eax, DWORD PTR tv70[rsp]
; Line 865
	add	rsp, 56					; 00000038H
	ret	0
stbi__stdio_eof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ch$ = 32
user$ = 64
n$ = 72
stbi__stdio_skip PROC
; File W:\cpp\void\rx\stb_image.h
; Line 853
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 855
	mov	r8d, 1
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	call	fseek
; Line 856
	mov	rcx, QWORD PTR user$[rsp]
	call	fgetc
	mov	DWORD PTR ch$[rsp], eax
; Line 857
	cmp	DWORD PTR ch$[rsp], -1
	je	SHORT $LN2@stbi__stdi
; Line 858
	mov	rdx, QWORD PTR user$[rsp]
	mov	ecx, DWORD PTR ch$[rsp]
	call	ungetc
$LN2@stbi__stdi:
; Line 860
	add	rsp, 56					; 00000038H
	ret	0
stbi__stdio_skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
user$ = 48
data$ = 56
size$ = 64
stbi__stdio_read PROC
; File W:\cpp\void\rx\stb_image.h
; Line 848
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 849
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR user$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fread
; Line 850
	add	rsp, 40					; 00000028H
	ret	0
stbi__stdio_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
s$ = 80
c$ = 88
user$ = 96
stbi__start_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 834
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 835
	mov	rax, QWORD PTR s$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR c$[rsp]
	mov	ecx, 24
	rep movsb
; Line 836
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 837
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+52], 128			; 00000080H
; Line 838
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 1
; Line 839
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 840
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 841
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__refill_buffer
; Line 842
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+216], rcx
; Line 843
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
stbi__start_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
s$ = 32
buffer$ = 40
len$ = 48
stbi__start_mem PROC
; File W:\cpp\void\rx\stb_image.h
; Line 824
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 825
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 826
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 827
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 828
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 829
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv72[rsp], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+216], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 830
	add	rsp, 24
	ret	0
stbi__start_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
stbi__refill_buffer PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1578
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1579
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+52]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR n$[rsp], eax
; Line 1580
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	rax, QWORD PTR [rax+192]
	sub	rax, rcx
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+184]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 1581
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__refi
; Line 1584
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 1585
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1586
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 57					; 00000039H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
; Line 1587
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	BYTE PTR [rax], 0
; Line 1588
	jmp	SHORT $LN3@stbi__refi
$LN2@stbi__refi:
; Line 1589
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1590
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	lea	rax, QWORD PTR [rcx+rax+56]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
$LN3@stbi__refi:
; Line 1592
	add	rsp, 56					; 00000038H
	ret	0
stbi__refill_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
info3$ = 36
stbi__sse2_available PROC
; File W:\cpp\void\rx\stb_image.h
; Line 752
	sub	rsp, 56					; 00000038H
; Line 753
	call	stbi__cpuid3
	mov	DWORD PTR info3$[rsp], eax
; Line 754
	mov	eax, DWORD PTR info3$[rsp]
	sar	eax, 26
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stbi__sse2
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__sse2
$LN3@stbi__sse2:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__sse2:
	mov	eax, DWORD PTR tv68[rsp]
; Line 755
	add	rsp, 56					; 00000038H
	ret	0
stbi__sse2_available ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 0
__$ArrayPad$ = 16
stbi__cpuid3 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 730
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 732
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR info$[rsp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
; Line 733
	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR info$[rsp+rax]
; Line 734
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
stbi__cpuid3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_noheader_buffer PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4507
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4509
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4510
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4511
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4512
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4514
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_noheader_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
outlen$ = 4288
stbi_zlib_decode_noheader_malloc PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4491
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4493
	mov	ecx, 16384				; 00004000H
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4494
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4495
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4496
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4497
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, 16384				; 00004000H
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4498
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4499
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4500
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4501
	lea	rax, OFFSET FLAT:$SG74744
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4501				; 00001195H
	lea	r8, OFFSET FLAT:$SG74745
	mov	edx, 79					; 0000004fH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4502
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4504
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_noheader_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_buffer PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4480
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4482
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4483
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4484
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4485
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4487
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
outlen$ = 64
stbi_zlib_decode_malloc PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4459
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4460
	mov	r9, QWORD PTR outlen$[rsp]
	mov	r8d, 16384				; 00004000H
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stbi_zlib_decode_malloc_guesssize
; Line 4461
	add	rsp, 40					; 00000028H
	ret	0
stbi_zlib_decode_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
initial_size$ = 4288
outlen$ = 4296
parse_header$ = 4304
stbi_zlib_decode_malloc_guesssize_headerflag PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4464
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4466
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4467
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4468
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4469
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4470
	mov	eax, DWORD PTR parse_header$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4471
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4472
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4473
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4474
	lea	rax, OFFSET FLAT:$SG74707
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4474				; 0000117aH
	lea	r8, OFFSET FLAT:$SG74708
	mov	edx, 78					; 0000004eH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4475
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_malloc_guesssize_headerflag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
initial_size$ = 4288
outlen$ = 4296
stbi_zlib_decode_malloc_guesssize PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4443
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4445
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4446
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4447
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4448
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4449
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4450
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4451
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4452
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4453
	lea	rax, OFFSET FLAT:$SG74674
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4453				; 00001165H
	lea	r8, OFFSET FLAT:$SG74675
	mov	edx, 77					; 0000004dH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4454
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_malloc_guesssize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load_thread PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1107
	mov	DWORD PTR [rsp+8], ecx
; Line 1108
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 1109
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 1110
	ret	0
stbi_set_flip_vertically_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb_thread PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4965
	mov	DWORD PTR [rsp+8], ecx
; Line 4966
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4967
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4968
	ret	0
stbi_convert_iphone_png_to_rgb_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1097
	mov	DWORD PTR [rsp+8], ecx
; Line 1098
	mov	eax, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR stbi__vertically_flip_on_load_global, eax
; Line 1099
	ret	0
stbi_set_flip_vertically_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4947
	mov	DWORD PTR [rsp+8], ecx
; Line 4948
	mov	eax, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR stbi__de_iphone_flag_global, eax
; Line 4949
	ret	0
stbi_convert_iphone_png_to_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi_set_unpremultiply_on_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 4942
	mov	DWORD PTR [rsp+8], ecx
; Line 4943
	mov	eax, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR stbi__unpremultiply_on_load_global, eax
; Line 4944
	ret	0
stbi_set_unpremultiply_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_16_bit_from_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7632
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7635
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7636
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 7637
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
	mov	DWORD PTR r$[rsp], eax
; Line 7638
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7639
	mov	eax, DWORD PTR r$[rsp]
; Line 7640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_16_bit_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_16_bit PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7622
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7623
	lea	rdx, OFFSET FLAT:$SG77593
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7625
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_is_16
	lea	rcx, OFFSET FLAT:$SG77595
	call	stbi__err
	jmp	SHORT $LN1@stbi_is_16
$LN2@stbi_is_16:
; Line 7626
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_16_bit_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7627
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7628
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_is_16:
; Line 7629
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_16_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
stbi_info_from_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7611
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7614
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7615
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 7616
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
	mov	DWORD PTR r$[rsp], eax
; Line 7617
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7618
	mov	eax, DWORD PTR r$[rsp]
; Line 7619
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_info_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi_info PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7601
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7602
	lea	rdx, OFFSET FLAT:$SG77573
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7604
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_info
	lea	rcx, OFFSET FLAT:$SG77575
	call	stbi__err
	jmp	SHORT $LN1@stbi_info
$LN2@stbi_info:
; Line 7605
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_info_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7606
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7607
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_info:
; Line 7608
	add	rsp, 56					; 00000038H
	ret	0
stbi_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
stbi_is_16_bit_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7665
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7667
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 7668
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
; Line 7669
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_16_bit_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7658
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7660
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 7661
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
; Line 7662
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7651
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7653
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 7654
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
; Line 7655
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 7644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7646
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 7647
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
; Line 7648
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
retval_from_stbi_load$ = 144
stbi_image_free PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1082
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 1083
	lea	rax, OFFSET FLAT:$SG71742
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1083				; 0000043bH
	lea	r8, OFFSET FLAT:$SG71743
	mov	edx, 55					; 00000037H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR retval_from_stbi_load$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1084
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbi_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbi_failure_reason PROC
; File W:\cpp\void\rx\stb_image.h
; Line 971
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
; Line 972
	ret	0
stbi_failure_reason ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
res$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_hdr_from_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1523
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1525
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 1528
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1529
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	mov	DWORD PTR res$[rsp], eax
; Line 1530
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 1531
	mov	eax, DWORD PTR res$[rsp]
; Line 1536
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_hdr_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_hdr PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1512
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	lea	rdx, OFFSET FLAT:$SG72224
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1514
	mov	DWORD PTR result$[rsp], 0
; Line 1515
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stbi_is_hd
; Line 1516
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_hdr_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 1517
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
$LN2@stbi_is_hd:
; Line 1519
	mov	eax, DWORD PTR result$[rsp]
; Line 1520
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_hdr_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1498
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1501
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1502
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
; Line 1508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
clbk$ = 288
user$ = 296
stbi_is_hdr_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1540
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1544
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
; Line 1550
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_ldr_to_hdr_scale PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1556
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR stbi__l2h_scale, xmm0
	ret	0
stbi_ldr_to_hdr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_ldr_to_hdr_gamma PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1555
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR stbi__l2h_gamma, xmm0
	ret	0
stbi_ldr_to_hdr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_hdr_to_ldr_scale PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1562
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR stbi__h2l_scale_i, xmm0
	ret	0
stbi_hdr_to_ldr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_hdr_to_ldr_gamma PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1561
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR stbi__h2l_gamma_i, xmm0
	ret	0
stbi_hdr_to_ldr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
req_comp$ = 336
stbi_loadf_from_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1484
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1486
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1487
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_loadf PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1474
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1476
	lea	rdx, OFFSET FLAT:$SG72198
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1477
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_loadf
	lea	rcx, OFFSET FLAT:$SG72200
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_loadf
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_loadf
$LN4@stbi_loadf:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_loadf:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_loadf
$LN2@stbi_loadf:
; Line 1478
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_loadf_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1479
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1480
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_loadf:
; Line 1481
	add	rsp, 88					; 00000058H
	ret	0
stbi_loadf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1466
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1468
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1469
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1470
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1459
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1461
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1462
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1463
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file_16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1370
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1373
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1374
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
	mov	QWORD PTR result$[rsp], rax
; Line 1375
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1377
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1379
	mov	rax, QWORD PTR result$[rsp]
; Line 1380
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load_16 PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1383
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1384
	lea	rdx, OFFSET FLAT:$SG72047
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1386
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load_
	lea	rcx, OFFSET FLAT:$SG72049
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load_
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_load_:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load_
$LN2@stbi_load_:
; Line 1387
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file_16
	mov	QWORD PTR result$[rsp], rax
; Line 1388
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1389
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load_:
; Line 1390
	add	rsp, 88					; 00000058H
	ret	0
stbi_load_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1403
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1405
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1406
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
; Line 1407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1396
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1399
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
; Line 1400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 64
result$ = 72
s$ = 80
__$ArrayPad$ = 304
buffer$ = 336
len$ = 344
delays$ = 352
x$ = 360
y$ = 368
z$ = 376
comp$ = 384
req_comp$ = 392
stbi_load_gif_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1425
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1428
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1430
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR comp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR delays$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_gif_main
	mov	QWORD PTR result$[rsp], rax
; Line 1431
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi_load_
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv88[rsp], eax
$LN5@stbi_load_:
	cmp	DWORD PTR tv88[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1432
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip_slices
$LN2@stbi_load_:
; Line 1435
	mov	rax, QWORD PTR result$[rsp]
; Line 1436
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stbi_load_gif_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1357
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1360
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1361
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
	mov	QWORD PTR result$[rsp], rax
; Line 1362
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1364
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1366
	mov	rax, QWORD PTR result$[rsp]
; Line 1367
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1347
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1348
	lea	rdx, OFFSET FLAT:$SG71996
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1350
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load
	lea	rcx, OFFSET FLAT:$SG71998
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load
$LN4@stbi_load:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_load:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load
$LN2@stbi_load:
; Line 1351
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1352
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1353
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load:
; Line 1354
	add	rsp, 88					; 00000058H
	ret	0
stbi_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_callbacks PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1417
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1419
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1420
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
; Line 1421
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_memory PROC
; File W:\cpp\void\rx\stb_image.h
; Line 1410
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1412
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1413
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
; Line 1414
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
string$ = 48
ccout	PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 440
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 442
	mov	rcx, QWORD PTR string$[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
; Line 444
	mov	rcx, QWORD PTR string$[rsp]
	call	printf
; Line 445
	add	rsp, 40					; 00000028H
	ret	0
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ccini	PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 329
	lea	rax, OFFSET FLAT:ccdebugroot
	mov	QWORD PTR ccdebugthis, rax
; Line 331
	mov	eax, OFFSET FLAT:cccolorstate
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 7
	mov	WORD PTR [rcx+rax+34], dx
; Line 332
	ret	0
ccini	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sentry$ = 8
block$ = 16
ccsentry_addblock PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 234
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 235
	mov	rax, QWORD PTR sentry$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN2@ccsentry_a
; Line 236
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+64], rcx
; Line 237
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+72], rcx
$LN2@ccsentry_a:
; Line 239
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 240
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 241
	mov	rax, QWORD PTR block$[rsp]
; Line 242
	ret	0
ccsentry_addblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
i$2 = 52
$T3 = 64
$T4 = 96
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
$T9 = 256
$T10 = 288
$T11 = 320
$T12 = 352
$T13 = 384
$T14 = 416
$T15 = 448
$T16 = 480
$T17 = 512
$T18 = 544
$T19 = 576
$T20 = 608
$T21 = 640
$T22 = 672
$T23 = 704
$T24 = 736
$T25 = 768
$T26 = 800
$T27 = 832
$T28 = 864
allocator$ = 928
block$ = 936
ccsentry_block_check PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 102
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 904				; 00000388H
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@ccsentry_b
$LN2@ccsentry_b:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ccsentry_b:
	cmp	DWORD PTR i$1[rsp], 4
	jge	$LN3@ccsentry_b
$LN7@ccsentry_b:
; Line 103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN41@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70340
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 104				; 00000068H
	lea	r8, OFFSET FLAT:$SG70341
	mov	edx, 9
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70338
	lea	rdx, OFFSET FLAT:$SG70339
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN41@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70344
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 104				; 00000068H
	lea	r8, OFFSET FLAT:$SG70345
	mov	edx, 10
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70342
	lea	rdx, OFFSET FLAT:$SG70343
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN41@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN7@ccsentry_b
	jmp	$LN2@ccsentry_b
$LN3@ccsentry_b:
; Line 105
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@ccsentry_b
$LN8@ccsentry_b:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@ccsentry_b:
	cmp	DWORD PTR i$2[rsp], 4
	jge	$LN9@ccsentry_b
$LN13@ccsentry_b:
; Line 106
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+88]
	test	eax, eax
	je	$LN42@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70349
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 107				; 0000006bH
	lea	r8, OFFSET FLAT:$SG70350
	mov	edx, 11
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70347
	lea	rdx, OFFSET FLAT:$SG70348
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN42@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70353
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 107				; 0000006bH
	lea	r8, OFFSET FLAT:$SG70354
	mov	edx, 12
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70351
	lea	rdx, OFFSET FLAT:$SG70352
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN42@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN13@ccsentry_b
	jmp	$LN8@ccsentry_b
$LN9@ccsentry_b:
$LN16@ccsentry_b:
; Line 109
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN43@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70358
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 109				; 0000006dH
	lea	r8, OFFSET FLAT:$SG70359
	mov	edx, 13
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70356
	lea	rdx, OFFSET FLAT:$SG70357
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN43@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@ccsentry_b
$LN19@ccsentry_b:
; Line 110
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN44@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70363
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 110				; 0000006eH
	lea	r8, OFFSET FLAT:$SG70364
	mov	edx, 14
	lea	rcx, QWORD PTR $T21[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70361
	lea	rdx, OFFSET FLAT:$SG70362
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN44@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN19@ccsentry_b
$LN22@ccsentry_b:
; Line 112
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR allocator$[rsp]
	cmp	QWORD PTR [rax+56], rcx
	je	SHORT $LN45@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70368
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 112				; 00000070H
	lea	r8, OFFSET FLAT:$SG70369
	mov	edx, 15
	lea	rcx, QWORD PTR $T22[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70366
	lea	rdx, OFFSET FLAT:$SG70367
	lea	rcx, QWORD PTR $T9[rsp]
	call	cctrace_
	int	3
$LN45@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN22@ccsentry_b
$LN25@ccsentry_b:
; Line 114
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN46@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	cmp	QWORD PTR [rax+48], rcx
	je	SHORT $LN46@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70373
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 114				; 00000072H
	lea	r8, OFFSET FLAT:$SG70374
	mov	edx, 16
	lea	rcx, QWORD PTR $T23[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70371
	lea	rdx, OFFSET FLAT:$SG70372
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN46@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN25@ccsentry_b
$LN28@ccsentry_b:
; Line 115
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN47@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	cmp	QWORD PTR [rax+48], rcx
	je	SHORT $LN47@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70378
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 115				; 00000073H
	lea	r8, OFFSET FLAT:$SG70379
	mov	edx, 17
	lea	rcx, QWORD PTR $T24[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70376
	lea	rdx, OFFSET FLAT:$SG70377
	lea	rcx, QWORD PTR $T11[rsp]
	call	cctrace_
	int	3
$LN47@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN28@ccsentry_b
$LN31@ccsentry_b:
; Line 117
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN48@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	je	SHORT $LN48@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70383
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 117				; 00000075H
	lea	r8, OFFSET FLAT:$SG70384
	mov	edx, 18
	lea	rcx, QWORD PTR $T25[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70381
	lea	rdx, OFFSET FLAT:$SG70382
	lea	rcx, QWORD PTR $T12[rsp]
	call	cctrace_
	int	3
$LN48@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN31@ccsentry_b
$LN34@ccsentry_b:
; Line 118
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN49@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], rcx
	je	SHORT $LN49@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70388
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 118				; 00000076H
	lea	r8, OFFSET FLAT:$SG70389
	mov	edx, 19
	lea	rcx, QWORD PTR $T26[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70386
	lea	rdx, OFFSET FLAT:$SG70387
	lea	rcx, QWORD PTR $T13[rsp]
	call	cctrace_
	int	3
$LN49@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN34@ccsentry_b
$LN37@ccsentry_b:
; Line 120
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN50@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	jne	SHORT $LN50@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70393
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 120				; 00000078H
	lea	r8, OFFSET FLAT:$SG70394
	mov	edx, 20
	lea	rcx, QWORD PTR $T27[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70391
	lea	rdx, OFFSET FLAT:$SG70392
	lea	rcx, QWORD PTR $T14[rsp]
	call	cctrace_
	int	3
$LN50@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN37@ccsentry_b
$LN40@ccsentry_b:
; Line 121
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN51@ccsentry_b
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], rcx
	jne	SHORT $LN51@ccsentry_b
	lea	rax, OFFSET FLAT:$SG70398
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 121				; 00000079H
	lea	r8, OFFSET FLAT:$SG70399
	mov	edx, 21
	lea	rcx, QWORD PTR $T28[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70396
	lea	rdx, OFFSET FLAT:$SG70397
	lea	rcx, QWORD PTR $T15[rsp]
	call	cctrace_
	int	3
$LN51@ccsentry_b:
	xor	eax, eax
	test	eax, eax
	jne	$LN40@ccsentry_b
; Line 122
	add	rsp, 904				; 00000388H
	pop	rdi
	pop	rsi
	ret	0
ccsentry_block_check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
rem$ = 68
vli$ = 72
tv88 = 80
caller$ = 112
label$ = 120
format$ = 128
cctrace_ PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 456
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 104				; 00000068H
; Line 458
	lea	rax, QWORD PTR format$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 461
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@9
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR format$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 463
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, 4095				; 00000fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR rem$[rsp], eax
; Line 464
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@9
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR caller$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	ccfilename
	mov	ecx, OFFSET FLAT:?buf@?1??cctrace_@@9@9
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR len$[rsp]
	add	rcx, rdx
	mov	rdx, QWORD PTR tv88[rsp]
	mov	QWORD PTR [rsp+56], rdx
	mov	rdx, QWORD PTR caller$[rsp]
	mov	rdx, QWORD PTR [rdx+24]
	mov	QWORD PTR [rsp+48], rdx
	mov	rdx, QWORD PTR caller$[rsp]
	mov	edx, DWORD PTR [rdx+16]
	mov	DWORD PTR [rsp+40], edx
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR label$[rsp]
	lea	r8, OFFSET FLAT:$SG70668
	mov	edx, DWORD PTR rem$[rsp]
	call	ccformatex
; Line 467
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@9
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR len$[rsp]
	add	rax, rcx
	mov	rcx, rax
	call	ccout
; Line 469
	mov	QWORD PTR vli$[rsp], 0
; Line 470
	add	rsp, 104				; 00000068H
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 0
name$ = 32
ccfilename PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 26
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 27
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN4@ccfilename
$LN2@ccfilename:
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR name$[rsp], rax
$LN4@ccfilename:
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccfilename
; Line 28
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN6@ccfilename
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN5@ccfilename
$LN6@ccfilename:
; Line 29
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR result$[rsp], rax
$LN5@ccfilename:
	jmp	SHORT $LN2@ccfilename
$LN3@ccfilename:
; Line 30
	mov	rax, QWORD PTR result$[rsp]
; Line 31
	add	rsp, 24
	ret	0
ccfilename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
ccdebug_ PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 60
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 61
	lea	rax, OFFSET FLAT:$SG70092
	mov	QWORD PTR ?dummy@?1??ccdebug_@@9@9, rax
; Line 62
	cmp	DWORD PTR ccdebugnone, 0
	je	SHORT $LN5@ccdebug_
	lea	rax, OFFSET FLAT:?dummy@?1??ccdebug_@@9@9
	jmp	SHORT $LN1@ccdebug_
$LN5@ccdebug_:
$LN4@ccdebug_:
; Line 64
	cmp	QWORD PTR ccdebugthis, 0
	jne	SHORT $LN6@ccdebug_
	lea	rax, OFFSET FLAT:$SG70097
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 64					; 00000040H
	lea	r8, OFFSET FLAT:$SG70098
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70095
	lea	rdx, OFFSET FLAT:$SG70096
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN6@ccdebug_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ccdebug_
; Line 66
	mov	rax, QWORD PTR ccdebugthis
$LN1@ccdebug_:
; Line 67
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
ccdebug_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfilesize PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 56
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFileSize
; Line 57
	add	rsp, 40					; 00000028H
	ret	0
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 48
tv80 = 52
file_size$ = 56
file_data$ = 64
tv86 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
file$ = 240
offset$ = 248
lplength$ = 256
ccpullfile PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 110
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 111
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpullfile
; Line 113
	lea	rax, OFFSET FLAT:$SG70009
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 113				; 00000071H
	lea	r8, OFFSET FLAT:$SG70010
	mov	edx, 2
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG70007
	lea	rdx, OFFSET FLAT:$SG70008
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
; Line 114
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN2@ccpullfile:
; Line 118
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 119
	cmp	QWORD PTR lplength$[rsp], 0
	je	SHORT $LN8@ccpullfile
	mov	rax, QWORD PTR lplength$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv80[rsp], eax
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	DWORD PTR tv80[rsp], 0
$LN9@ccpullfile:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR length$[rsp], eax
; Line 120
	mov	eax, DWORD PTR length$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpullfile
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN3@ccpullfile:
; Line 121
	cmp	DWORD PTR length$[rsp], 0
	jne	SHORT $LN4@ccpullfile
	mov	eax, DWORD PTR file_size$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN4@ccpullfile:
; Line 122
	mov	eax, DWORD PTR length$[rsp]
	mov	QWORD PTR tv86[rsp], rax
	lea	rcx, OFFSET FLAT:$SG70013
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 122				; 0000007aH
	lea	r8, OFFSET FLAT:$SG70014
	mov	edx, 3
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv86[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR file_data$[rsp], rax
; Line 123
	cmp	QWORD PTR lplength$[rsp], 0
	jne	SHORT $LN5@ccpullfile
	lea	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR lplength$[rsp], rax
$LN5@ccpullfile:
; Line 124
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR lplength$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	SHORT $LN6@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN6@ccpullfile:
; Line 125
	mov	rax, QWORD PTR file_data$[rsp]
$LN1@ccpullfile:
; Line 126
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccclosefile PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 61
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 62
	add	rsp, 40					; 00000028H
	ret	0
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
file$ = 32
ccrealfile PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 51
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	QWORD PTR file$[rsp], -1
	je	SHORT $LN3@ccrealfile
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@ccrealfile
$LN3@ccrealfile:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ccrealfile:
	mov	eax, DWORD PTR tv65[rsp]
; Line 52
	add	rsp, 24
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
waccess$ = 64
file$ = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
name$ = 240
flags$ = 248
ccopenfile PROC
; File W:\cpp\void\rx\cc\ccsys.c
; Line 67
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 69
	mov	DWORD PTR waccess$[rsp], 0
; Line 71
	cmp	QWORD PTR flags$[rsp], 0
	je	SHORT $LN8@ccopenfile
; Line 73
	jmp	SHORT $LN4@ccopenfile
$LN2@ccopenfile:
	mov	rax, QWORD PTR flags$[rsp]
	inc	rax
	mov	QWORD PTR flags$[rsp], rax
$LN4@ccopenfile:
	mov	rax, QWORD PTR flags$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccopenfile
; Line 75
	mov	rax, QWORD PTR flags$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN9@ccopenfile
; Line 76
	mov	eax, DWORD PTR waccess$[rsp]
	bts	eax, 31
	mov	DWORD PTR waccess$[rsp], eax
	jmp	SHORT $LN10@ccopenfile
$LN9@ccopenfile:
; Line 78
	mov	rax, QWORD PTR flags$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 119				; 00000077H
	jne	SHORT $LN11@ccopenfile
; Line 79
	mov	eax, DWORD PTR waccess$[rsp]
	bts	eax, 30
	mov	DWORD PTR waccess$[rsp], eax
$LN11@ccopenfile:
$LN10@ccopenfile:
; Line 80
	jmp	SHORT $LN2@ccopenfile
$LN3@ccopenfile:
$LN8@ccopenfile:
$LN7@ccopenfile:
; Line 83
	cmp	DWORD PTR waccess$[rsp], 0
	jne	SHORT $LN12@ccopenfile
	lea	rax, OFFSET FLAT:$SG69981
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 83					; 00000053H
	lea	r8, OFFSET FLAT:$SG69982
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG69979
	lea	rdx, OFFSET FLAT:$SG69980
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN12@ccopenfile:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@ccopenfile
; Line 85
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, DWORD PTR waccess$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR file$[rsp], rax
; Line 87
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN13@ccopenfile
; Line 89
	lea	rax, OFFSET FLAT:$SG69986
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 89					; 00000059H
	lea	r8, OFFSET FLAT:$SG69987
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR name$[rsp]
	lea	r8, OFFSET FLAT:$SG69984
	lea	rdx, OFFSET FLAT:$SG69985
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
; Line 90
	xor	eax, eax
	jmp	SHORT $LN1@ccopenfile
$LN13@ccopenfile:
; Line 93
	mov	rax, QWORD PTR file$[rsp]
$LN1@ccopenfile:
; Line 94
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
fmt$ = 64
ccformat PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 37
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 39
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 40
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR fmt$[rsp]
	call	ccformatv
	mov	QWORD PTR res$[rsp], rax
; Line 41
	mov	QWORD PTR vli$[rsp], 0
; Line 43
	mov	rax, QWORD PTR res$[rsp]
; Line 44
	add	rsp, 56					; 00000038H
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
buf$ = 64
len$ = 72
fmt$ = 80
ccformatex PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 26
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 28
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 29
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatvex
	mov	DWORD PTR res$[rsp], eax
; Line 30
	mov	QWORD PTR vli$[rsp], 0
; Line 32
	mov	eax, DWORD PTR res$[rsp]
; Line 33
	add	rsp, 56					; 00000038H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 16
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 19
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@9
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
; Line 21
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@9
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
; Line 22
	add	rsp, 40					; 00000028H
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
vli$ = 72
ccformatvex PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 10
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
; Line 12
	add	rsp, 40					; 00000028H
	ret	0
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
guid$ = 72
file$ = 80
line$ = 88
func$ = 96
cccaller PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 48
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 50
	mov	eax, DWORD PTR guid$[rsp]
	mov	DWORD PTR t$[rsp], eax
; Line 51
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR t$[rsp+8], rax
; Line 52
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR t$[rsp+16], eax
; Line 53
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR t$[rsp+24], rax
; Line 54
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 55
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
cccaller ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 32
debug$1 = 40
debug$2 = 48
sentry$3 = 56
caller$ = 96
size$ = 104
data$ = 112
ccuserallocator_ PROC
; File W:\cpp\void\rx\cc\ccdbg.c
; Line 247
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 248
	mov	QWORD PTR block$[rsp], 0
; Line 249
	cmp	QWORD PTR size$[rsp], 0
	jne	$LN2@ccuserallo
; Line 251
	cmp	QWORD PTR data$[rsp], 0
	je	$LN4@ccuserallo
; Line 253
	call	ccdebug_
	mov	QWORD PTR sentry$3[rsp], rax
; Line 254
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR block$[rsp], rax
; Line 255
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccsentry_block_check
; Line 257
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN5@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax+72], rcx
$LN5@ccuserallo:
; Line 258
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN6@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+64], rcx
	jmp	SHORT $LN7@ccuserallo
$LN6@ccuserallo:
; Line 259
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+64], rcx
$LN7@ccuserallo:
; Line 261
	mov	rax, QWORD PTR sentry$3[rsp]
	mov	eax, DWORD PTR [rax+172]
	inc	eax
	mov	rcx, QWORD PTR sentry$3[rsp]
	mov	DWORD PTR [rcx+172], eax
; Line 263
	mov	rax, QWORD PTR sentry$3[rsp]
	mov	rax, QWORD PTR [rax+144]
	inc	rax
	mov	rcx, QWORD PTR sentry$3[rsp]
	mov	QWORD PTR [rcx+144], rax
; Line 264
	mov	rax, QWORD PTR sentry$3[rsp]
	mov	rax, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR sentry$3[rsp]
	mov	QWORD PTR [rcx+160], rax
; Line 267
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+72], 0
; Line 268
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 269
	mov	rcx, QWORD PTR block$[rsp]
	call	free
$LN4@ccuserallo:
; Line 271
	jmp	$LN3@ccuserallo
$LN2@ccuserallo:
; Line 272
	cmp	QWORD PTR data$[rsp], 0
	je	$LN8@ccuserallo
; Line 274
	call	ccdebug_
	mov	QWORD PTR debug$2[rsp], rax
; Line 275
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR block$[rsp], rax
; Line 276
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccsentry_block_check
; Line 278
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+160], rax
; Line 280
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	realloc
	mov	QWORD PTR block$[rsp], rax
; Line 281
	mov	rax, QWORD PTR block$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 282
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 284
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN10@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+72], rcx
$LN10@ccuserallo:
; Line 285
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN11@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], rcx
	jmp	SHORT $LN12@ccuserallo
$LN11@ccuserallo:
; Line 286
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN12@ccuserallo:
; Line 288
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 289
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+144]
	inc	rax
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+144], rax
; Line 290
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+152]
	add	rax, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+152], rax
; Line 291
	jmp	$LN9@ccuserallo
$LN8@ccuserallo:
; Line 293
	call	ccdebug_
	mov	QWORD PTR debug$1[rsp], rax
; Line 294
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR block$[rsp], rax
; Line 295
	mov	r8d, 96					; 00000060H
	xor	edx, edx
	mov	rcx, QWORD PTR block$[rsp]
	call	memset
; Line 296
	mov	rax, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	mov	QWORD PTR [rax+56], rcx
; Line 297
	mov	rax, QWORD PTR block$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 298
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 299
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 300
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 301
	mov	rdx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	call	ccsentry_addblock
; Line 303
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccsentry_block_check
; Line 305
	mov	rax, QWORD PTR debug$1[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 306
	mov	rax, QWORD PTR debug$1[rsp]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 307
	mov	rax, QWORD PTR debug$1[rsp]
	mov	rax, QWORD PTR [rax+152]
	add	rax, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rcx+152], rax
$LN9@ccuserallo:
$LN3@ccuserallo:
; Line 310
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 96					; 00000060H
; Line 311
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccuserallocator_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
et$1 = 0
ph$ = 8
eb$2 = 16
e$3 = 20
pl$ = 24
cn$4 = 32
cn$5 = 36
cn$6 = 40
cn$7 = 44
cn$8 = 48
cn$9 = 52
cn$10 = 56
cn$11 = 60
cn$12 = 64
cn$13 = 68
cn$14 = 72
cn$15 = 76
cn$16 = 80
cn$17 = 84
cn$18 = 88
cn$19 = 92
cn$20 = 96
cn$21 = 100
cn$22 = 104
cn$23 = 108
cn$24 = 112
cn$25 = 116
cn$26 = 120
cn$27 = 124
p2l$28 = 128
p2h$29 = 136
bt$30 = 144
bt$31 = 152
bt$32 = 160
bt$33 = 168
bt$34 = 176
bt$35 = 184
ahi$36 = 192
bhi$37 = 200
ahi$38 = 208
bhi$39 = 216
ahi$40 = 224
bhi$41 = 232
ahi$42 = 240
bhi$43 = 248
ahi$44 = 256
bhi$45 = 264
ahi$46 = 272
bhi$47 = 280
alo$48 = 288
blo$49 = 296
alo$50 = 304
blo$51 = 312
s$52 = 320
alo$53 = 328
blo$54 = 336
alo$55 = 344
blo$56 = 352
s$57 = 360
alo$58 = 368
blo$59 = 376
s$60 = 384
alo$61 = 392
blo$62 = 400
s$63 = 408
ohi$ = 432
olo$ = 440
d$ = 448
power$ = 456
stbsp__raise_to_power10 PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1639
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 424				; 000001a8H
; Line 1641
	cmp	DWORD PTR power$[rsp], 0
	jl	$LN74@stbsp__rai
	cmp	DWORD PTR power$[rsp], 22
	jg	$LN74@stbsp__rai
; Line 1642
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$36[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$37[rsp], xmm0
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$4[rsp], 0
	jmp	SHORT $LN4@stbsp__rai
$LN2@stbsp__rai:
	mov	eax, DWORD PTR cn$4[rsp]
	inc	eax
	mov	DWORD PTR cn$4[rsp], eax
$LN4@stbsp__rai:
	cmp	DWORD PTR cn$4[rsp], 8
	jge	SHORT $LN3@stbsp__rai
	movsxd	rax, DWORD PTR cn$4[rsp]
	movsxd	rcx, DWORD PTR cn$4[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$30[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rai
$LN3@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$5[rsp], 0
	jmp	SHORT $LN7@stbsp__rai
$LN5@stbsp__rai:
	mov	eax, DWORD PTR cn$5[rsp]
	inc	eax
	mov	DWORD PTR cn$5[rsp], eax
$LN7@stbsp__rai:
	cmp	DWORD PTR cn$5[rsp], 8
	jge	SHORT $LN6@stbsp__rai
	movsxd	rax, DWORD PTR cn$5[rsp]
	movsxd	rcx, DWORD PTR cn$5[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR ahi$36[rsp+rcx], al
	jmp	SHORT $LN5@stbsp__rai
$LN6@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$36[rsp]
	movsd	QWORD PTR alo$48[rsp], xmm0
	mov	DWORD PTR cn$6[rsp], 0
	jmp	SHORT $LN10@stbsp__rai
$LN8@stbsp__rai:
	mov	eax, DWORD PTR cn$6[rsp]
	inc	eax
	mov	DWORD PTR cn$6[rsp], eax
$LN10@stbsp__rai:
	cmp	DWORD PTR cn$6[rsp], 8
	jge	SHORT $LN9@stbsp__rai
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$6[rsp]
	movsxd	rdx, DWORD PTR cn$6[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$30[rsp+rdx], al
	jmp	SHORT $LN8@stbsp__rai
$LN9@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$7[rsp], 0
	jmp	SHORT $LN13@stbsp__rai
$LN11@stbsp__rai:
	mov	eax, DWORD PTR cn$7[rsp]
	inc	eax
	mov	DWORD PTR cn$7[rsp], eax
$LN13@stbsp__rai:
	cmp	DWORD PTR cn$7[rsp], 8
	jge	SHORT $LN12@stbsp__rai
	movsxd	rax, DWORD PTR cn$7[rsp]
	movsxd	rcx, DWORD PTR cn$7[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR bhi$37[rsp+rcx], al
	jmp	SHORT $LN11@stbsp__rai
$LN12@stbsp__rai:
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$37[rsp]
	movsd	QWORD PTR blo$49[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$36[rsp]
	mulsd	xmm0, QWORD PTR bhi$37[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$36[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR bhi$37[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1643
	jmp	$LN75@stbsp__rai
$LN74@stbsp__rai:
; Line 1647
	mov	eax, DWORD PTR power$[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1648
	cmp	DWORD PTR power$[rsp], 0
	jge	SHORT $LN76@stbsp__rai
; Line 1649
	mov	eax, DWORD PTR e$3[rsp]
	neg	eax
	mov	DWORD PTR e$3[rsp], eax
$LN76@stbsp__rai:
; Line 1650
	imul	eax, DWORD PTR e$3[rsp], 713		; 000002c9H
	sar	eax, 14
	mov	DWORD PTR et$1[rsp], eax
; Line 1651
	cmp	DWORD PTR et$1[rsp], 13
	jle	SHORT $LN77@stbsp__rai
; Line 1652
	mov	DWORD PTR et$1[rsp], 13
$LN77@stbsp__rai:
; Line 1653
	imul	eax, DWORD PTR et$1[rsp], 23
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR eb$2[rsp], eax
; Line 1655
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1656
	xorps	xmm0, xmm0
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1657
	cmp	DWORD PTR power$[rsp], 0
	jge	$LN78@stbsp__rai
; Line 1658
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN80@stbsp__rai
; Line 1659
	mov	eax, DWORD PTR eb$2[rsp]
	dec	eax
	mov	DWORD PTR eb$2[rsp], eax
; Line 1660
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$38[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$39[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$8[rsp], 0
	jmp	SHORT $LN16@stbsp__rai
$LN14@stbsp__rai:
	mov	eax, DWORD PTR cn$8[rsp]
	inc	eax
	mov	DWORD PTR cn$8[rsp], eax
$LN16@stbsp__rai:
	cmp	DWORD PTR cn$8[rsp], 8
	jge	SHORT $LN15@stbsp__rai
	movsxd	rax, DWORD PTR cn$8[rsp]
	movsxd	rcx, DWORD PTR cn$8[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$31[rsp+rcx], al
	jmp	SHORT $LN14@stbsp__rai
$LN15@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$9[rsp], 0
	jmp	SHORT $LN19@stbsp__rai
$LN17@stbsp__rai:
	mov	eax, DWORD PTR cn$9[rsp]
	inc	eax
	mov	DWORD PTR cn$9[rsp], eax
$LN19@stbsp__rai:
	cmp	DWORD PTR cn$9[rsp], 8
	jge	SHORT $LN18@stbsp__rai
	movsxd	rax, DWORD PTR cn$9[rsp]
	movsxd	rcx, DWORD PTR cn$9[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR ahi$38[rsp+rcx], al
	jmp	SHORT $LN17@stbsp__rai
$LN18@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$38[rsp]
	movsd	QWORD PTR alo$50[rsp], xmm0
	mov	DWORD PTR cn$10[rsp], 0
	jmp	SHORT $LN22@stbsp__rai
$LN20@stbsp__rai:
	mov	eax, DWORD PTR cn$10[rsp]
	inc	eax
	mov	DWORD PTR cn$10[rsp], eax
$LN22@stbsp__rai:
	cmp	DWORD PTR cn$10[rsp], 8
	jge	SHORT $LN21@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$10[rsp]
	movsxd	rdx, DWORD PTR cn$10[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$31[rsp+rdx], al
	jmp	SHORT $LN20@stbsp__rai
$LN21@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$11[rsp], 0
	jmp	SHORT $LN25@stbsp__rai
$LN23@stbsp__rai:
	mov	eax, DWORD PTR cn$11[rsp]
	inc	eax
	mov	DWORD PTR cn$11[rsp], eax
$LN25@stbsp__rai:
	cmp	DWORD PTR cn$11[rsp], 8
	jge	SHORT $LN24@stbsp__rai
	movsxd	rax, DWORD PTR cn$11[rsp]
	movsxd	rcx, DWORD PTR cn$11[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR bhi$39[rsp+rcx], al
	jmp	SHORT $LN23@stbsp__rai
$LN24@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$39[rsp]
	movsd	QWORD PTR blo$51[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$38[rsp]
	mulsd	xmm0, QWORD PTR bhi$39[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$38[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR bhi$39[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1661
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negboterr
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	xmm1, QWORD PTR pl$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
$LN80@stbsp__rai:
; Line 1663
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN81@stbsp__rai
; Line 1664
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$52[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1665
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1666
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$40[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$41[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$12[rsp], 0
	jmp	SHORT $LN28@stbsp__rai
$LN26@stbsp__rai:
	mov	eax, DWORD PTR cn$12[rsp]
	inc	eax
	mov	DWORD PTR cn$12[rsp], eax
$LN28@stbsp__rai:
	cmp	DWORD PTR cn$12[rsp], 8
	jge	SHORT $LN27@stbsp__rai
	movsxd	rax, DWORD PTR cn$12[rsp]
	movsxd	rcx, DWORD PTR cn$12[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$32[rsp+rcx], al
	jmp	SHORT $LN26@stbsp__rai
$LN27@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$13[rsp], 0
	jmp	SHORT $LN31@stbsp__rai
$LN29@stbsp__rai:
	mov	eax, DWORD PTR cn$13[rsp]
	inc	eax
	mov	DWORD PTR cn$13[rsp], eax
$LN31@stbsp__rai:
	cmp	DWORD PTR cn$13[rsp], 8
	jge	SHORT $LN30@stbsp__rai
	movsxd	rax, DWORD PTR cn$13[rsp]
	movsxd	rcx, DWORD PTR cn$13[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR ahi$40[rsp+rcx], al
	jmp	SHORT $LN29@stbsp__rai
$LN30@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$40[rsp]
	movsd	QWORD PTR alo$53[rsp], xmm0
	mov	DWORD PTR cn$14[rsp], 0
	jmp	SHORT $LN34@stbsp__rai
$LN32@stbsp__rai:
	mov	eax, DWORD PTR cn$14[rsp]
	inc	eax
	mov	DWORD PTR cn$14[rsp], eax
$LN34@stbsp__rai:
	cmp	DWORD PTR cn$14[rsp], 8
	jge	SHORT $LN33@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$14[rsp]
	movsxd	rdx, DWORD PTR cn$14[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$32[rsp+rdx], al
	jmp	SHORT $LN32@stbsp__rai
$LN33@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$15[rsp], 0
	jmp	SHORT $LN37@stbsp__rai
$LN35@stbsp__rai:
	mov	eax, DWORD PTR cn$15[rsp]
	inc	eax
	mov	DWORD PTR cn$15[rsp], eax
$LN37@stbsp__rai:
	cmp	DWORD PTR cn$15[rsp], 8
	jge	SHORT $LN36@stbsp__rai
	movsxd	rax, DWORD PTR cn$15[rsp]
	movsxd	rcx, DWORD PTR cn$15[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR bhi$41[rsp+rcx], al
	jmp	SHORT $LN35@stbsp__rai
$LN36@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$41[rsp]
	movsd	QWORD PTR blo$54[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$40[rsp]
	mulsd	xmm0, QWORD PTR bhi$41[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$40[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR bhi$41[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1667
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtoperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1668
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1669
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN81@stbsp__rai:
; Line 1671
	jmp	$LN79@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN82@stbsp__rai
; Line 1673
	mov	eax, DWORD PTR eb$2[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1674
	cmp	DWORD PTR eb$2[rsp], 22
	jle	SHORT $LN83@stbsp__rai
; Line 1675
	mov	DWORD PTR eb$2[rsp], 22
$LN83@stbsp__rai:
; Line 1676
	mov	eax, DWORD PTR eb$2[rsp]
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$3[rsp], eax
; Line 1677
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$42[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$43[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$16[rsp], 0
	jmp	SHORT $LN40@stbsp__rai
$LN38@stbsp__rai:
	mov	eax, DWORD PTR cn$16[rsp]
	inc	eax
	mov	DWORD PTR cn$16[rsp], eax
$LN40@stbsp__rai:
	cmp	DWORD PTR cn$16[rsp], 8
	jge	SHORT $LN39@stbsp__rai
	movsxd	rax, DWORD PTR cn$16[rsp]
	movsxd	rcx, DWORD PTR cn$16[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$33[rsp+rcx], al
	jmp	SHORT $LN38@stbsp__rai
$LN39@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$17[rsp], 0
	jmp	SHORT $LN43@stbsp__rai
$LN41@stbsp__rai:
	mov	eax, DWORD PTR cn$17[rsp]
	inc	eax
	mov	DWORD PTR cn$17[rsp], eax
$LN43@stbsp__rai:
	cmp	DWORD PTR cn$17[rsp], 8
	jge	SHORT $LN42@stbsp__rai
	movsxd	rax, DWORD PTR cn$17[rsp]
	movsxd	rcx, DWORD PTR cn$17[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR ahi$42[rsp+rcx], al
	jmp	SHORT $LN41@stbsp__rai
$LN42@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$42[rsp]
	movsd	QWORD PTR alo$55[rsp], xmm0
	mov	DWORD PTR cn$18[rsp], 0
	jmp	SHORT $LN46@stbsp__rai
$LN44@stbsp__rai:
	mov	eax, DWORD PTR cn$18[rsp]
	inc	eax
	mov	DWORD PTR cn$18[rsp], eax
$LN46@stbsp__rai:
	cmp	DWORD PTR cn$18[rsp], 8
	jge	SHORT $LN45@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$18[rsp]
	movsxd	rdx, DWORD PTR cn$18[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$33[rsp+rdx], al
	jmp	SHORT $LN44@stbsp__rai
$LN45@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$19[rsp], 0
	jmp	SHORT $LN49@stbsp__rai
$LN47@stbsp__rai:
	mov	eax, DWORD PTR cn$19[rsp]
	inc	eax
	mov	DWORD PTR cn$19[rsp], eax
$LN49@stbsp__rai:
	cmp	DWORD PTR cn$19[rsp], 8
	jge	SHORT $LN48@stbsp__rai
	movsxd	rax, DWORD PTR cn$19[rsp]
	movsxd	rcx, DWORD PTR cn$19[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR bhi$43[rsp+rcx], al
	jmp	SHORT $LN47@stbsp__rai
$LN48@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$43[rsp]
	movsd	QWORD PTR blo$56[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$42[rsp]
	mulsd	xmm0, QWORD PTR bhi$43[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$42[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR bhi$43[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1678
	cmp	DWORD PTR e$3[rsp], 0
	je	$LN84@stbsp__rai
; Line 1679
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$57[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1680
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$44[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$45[rsp], xmm0
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$20[rsp], 0
	jmp	SHORT $LN52@stbsp__rai
$LN50@stbsp__rai:
	mov	eax, DWORD PTR cn$20[rsp]
	inc	eax
	mov	DWORD PTR cn$20[rsp], eax
$LN52@stbsp__rai:
	cmp	DWORD PTR cn$20[rsp], 8
	jge	SHORT $LN51@stbsp__rai
	movsxd	rax, DWORD PTR cn$20[rsp]
	movsxd	rcx, DWORD PTR cn$20[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$34[rsp+rcx], al
	jmp	SHORT $LN50@stbsp__rai
$LN51@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$21[rsp], 0
	jmp	SHORT $LN55@stbsp__rai
$LN53@stbsp__rai:
	mov	eax, DWORD PTR cn$21[rsp]
	inc	eax
	mov	DWORD PTR cn$21[rsp], eax
$LN55@stbsp__rai:
	cmp	DWORD PTR cn$21[rsp], 8
	jge	SHORT $LN54@stbsp__rai
	movsxd	rax, DWORD PTR cn$21[rsp]
	movsxd	rcx, DWORD PTR cn$21[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR ahi$44[rsp+rcx], al
	jmp	SHORT $LN53@stbsp__rai
$LN54@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$44[rsp]
	movsd	QWORD PTR alo$58[rsp], xmm0
	mov	DWORD PTR cn$22[rsp], 0
	jmp	SHORT $LN58@stbsp__rai
$LN56@stbsp__rai:
	mov	eax, DWORD PTR cn$22[rsp]
	inc	eax
	mov	DWORD PTR cn$22[rsp], eax
$LN58@stbsp__rai:
	cmp	DWORD PTR cn$22[rsp], 8
	jge	SHORT $LN57@stbsp__rai
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$22[rsp]
	movsxd	rdx, DWORD PTR cn$22[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$34[rsp+rdx], al
	jmp	SHORT $LN56@stbsp__rai
$LN57@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$23[rsp], 0
	jmp	SHORT $LN61@stbsp__rai
$LN59@stbsp__rai:
	mov	eax, DWORD PTR cn$23[rsp]
	inc	eax
	mov	DWORD PTR cn$23[rsp], eax
$LN61@stbsp__rai:
	cmp	DWORD PTR cn$23[rsp], 8
	jge	SHORT $LN60@stbsp__rai
	movsxd	rax, DWORD PTR cn$23[rsp]
	movsxd	rcx, DWORD PTR cn$23[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR bhi$45[rsp+rcx], al
	jmp	SHORT $LN59@stbsp__rai
$LN60@stbsp__rai:
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$45[rsp]
	movsd	QWORD PTR blo$59[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$44[rsp]
	mulsd	xmm0, QWORD PTR bhi$45[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$44[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR bhi$45[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1681
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	mulsd	xmm0, QWORD PTR pl$[rsp]
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1682
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1683
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN84@stbsp__rai:
$LN82@stbsp__rai:
; Line 1686
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN85@stbsp__rai
; Line 1687
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$60[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1688
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1689
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$46[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$47[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$24[rsp], 0
	jmp	SHORT $LN64@stbsp__rai
$LN62@stbsp__rai:
	mov	eax, DWORD PTR cn$24[rsp]
	inc	eax
	mov	DWORD PTR cn$24[rsp], eax
$LN64@stbsp__rai:
	cmp	DWORD PTR cn$24[rsp], 8
	jge	SHORT $LN63@stbsp__rai
	movsxd	rax, DWORD PTR cn$24[rsp]
	movsxd	rcx, DWORD PTR cn$24[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$35[rsp+rcx], al
	jmp	SHORT $LN62@stbsp__rai
$LN63@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$25[rsp], 0
	jmp	SHORT $LN67@stbsp__rai
$LN65@stbsp__rai:
	mov	eax, DWORD PTR cn$25[rsp]
	inc	eax
	mov	DWORD PTR cn$25[rsp], eax
$LN67@stbsp__rai:
	cmp	DWORD PTR cn$25[rsp], 8
	jge	SHORT $LN66@stbsp__rai
	movsxd	rax, DWORD PTR cn$25[rsp]
	movsxd	rcx, DWORD PTR cn$25[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR ahi$46[rsp+rcx], al
	jmp	SHORT $LN65@stbsp__rai
$LN66@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$46[rsp]
	movsd	QWORD PTR alo$61[rsp], xmm0
	mov	DWORD PTR cn$26[rsp], 0
	jmp	SHORT $LN70@stbsp__rai
$LN68@stbsp__rai:
	mov	eax, DWORD PTR cn$26[rsp]
	inc	eax
	mov	DWORD PTR cn$26[rsp], eax
$LN70@stbsp__rai:
	cmp	DWORD PTR cn$26[rsp], 8
	jge	SHORT $LN69@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$26[rsp]
	movsxd	rdx, DWORD PTR cn$26[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$35[rsp+rdx], al
	jmp	SHORT $LN68@stbsp__rai
$LN69@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$27[rsp], 0
	jmp	SHORT $LN73@stbsp__rai
$LN71@stbsp__rai:
	mov	eax, DWORD PTR cn$27[rsp]
	inc	eax
	mov	DWORD PTR cn$27[rsp], eax
$LN73@stbsp__rai:
	cmp	DWORD PTR cn$27[rsp], 8
	jge	SHORT $LN72@stbsp__rai
	movsxd	rax, DWORD PTR cn$27[rsp]
	movsxd	rcx, DWORD PTR cn$27[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR bhi$47[rsp+rcx], al
	jmp	SHORT $LN71@stbsp__rai
$LN72@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$47[rsp]
	movsd	QWORD PTR blo$62[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$46[rsp]
	mulsd	xmm0, QWORD PTR bhi$47[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$46[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR bhi$47[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1690
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__toperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1691
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1692
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN85@stbsp__rai:
$LN79@stbsp__rai:
$LN75@stbsp__rai:
; Line 1696
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$63[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1697
	mov	rax, QWORD PTR ohi$[rsp]
	movsd	xmm0, QWORD PTR ph$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1698
	mov	rax, QWORD PTR olo$[rsp]
	movsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1699
	add	rsp, 424				; 000001a8H
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
buf$ = 32
user$ = 40
len$ = 48
stbsp__count_clamp_callback PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1422
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1423
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1426
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1427
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
; Line 1428
	add	rsp, 24
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
s$1 = 8
d$2 = 16
tv93 = 24
se$3 = 32
buf$ = 64
user$ = 72
len$ = 80
stbsp__clamp_callback PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1394
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1395
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1396
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1398
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN5@stbsp__cla
; Line 1399
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR len$[rsp], eax
$LN5@stbsp__cla:
; Line 1401
	cmp	DWORD PTR len$[rsp], 0
	je	$LN6@stbsp__cla
; Line 1402
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN7@stbsp__cla
; Line 1405
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$2[rsp], rax
; Line 1406
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$1[rsp], rax
; Line 1407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR se$3[rsp], rax
$LN4@stbsp__cla:
; Line 1409
	mov	rax, QWORD PTR d$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR d$2[rsp]
	inc	rax
	mov	QWORD PTR d$2[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	inc	rax
	mov	QWORD PTR s$1[rsp], rax
; Line 1410
	mov	rax, QWORD PTR se$3[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jb	SHORT $LN4@stbsp__cla
$LN7@stbsp__cla:
; Line 1412
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1413
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN6@stbsp__cla:
; Line 1416
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN8@stbsp__cla
; Line 1417
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	jmp	SHORT $LN1@stbsp__cla
$LN8@stbsp__cla:
; Line 1418
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 512			; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN11@stbsp__cla
$LN10@stbsp__cla:
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR tv93[rsp], rax
$LN11@stbsp__cla:
	mov	rax, QWORD PTR tv93[rsp]
$LN1@stbsp__cla:
; Line 1419
	add	rsp, 56					; 00000038H
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 0
sn$ = 8
s$ = 32
limit$ = 40
stbsp__strlen_limited PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 310
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 311
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR sn$[rsp], rax
$LN2@stbsp__str:
; Line 315
	mov	rax, QWORD PTR sn$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN9@stbsp__str
; Line 316
	jmp	SHORT $LN3@stbsp__str
$LN9@stbsp__str:
; Line 318
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN11@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN10@stbsp__str
$LN11@stbsp__str:
; Line 319
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	$LN1@stbsp__str
$LN10@stbsp__str:
; Line 321
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 322
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 323
	jmp	SHORT $LN2@stbsp__str
$LN3@stbsp__str:
$LN5@stbsp__str:
; Line 330
	cmp	DWORD PTR limit$[rsp], 4
	jb	SHORT $LN6@stbsp__str
; Line 331
	mov	rax, QWORD PTR sn$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$1[rsp], eax
; Line 333
	mov	eax, DWORD PTR v$1[rsp]
	sub	eax, 16843009				; 01010101H
	mov	ecx, DWORD PTR v$1[rsp]
	not	ecx
	and	eax, ecx
	and	eax, -2139062144			; 80808080H
	test	eax, eax
	je	SHORT $LN12@stbsp__str
; Line 334
	jmp	SHORT $LN6@stbsp__str
$LN12@stbsp__str:
; Line 336
	mov	rax, QWORD PTR sn$[rsp]
	add	rax, 4
	mov	QWORD PTR sn$[rsp], rax
; Line 337
	mov	eax, DWORD PTR limit$[rsp]
	sub	eax, 4
	mov	DWORD PTR limit$[rsp], eax
; Line 338
	jmp	SHORT $LN5@stbsp__str
$LN6@stbsp__str:
$LN7@stbsp__str:
; Line 341
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN8@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@stbsp__str
; Line 342
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 343
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 344
	jmp	SHORT $LN7@stbsp__str
$LN8@stbsp__str:
; Line 346
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@stbsp__str:
; Line 347
	add	rsp, 24
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
; Line 296
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 297
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@stbsp__lea
; Line 298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 299
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 45			; 0000002dH
	jmp	SHORT $LN3@stbsp__lea
$LN2@stbsp__lea:
; Line 300
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 302
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
	jmp	SHORT $LN5@stbsp__lea
$LN4@stbsp__lea:
; Line 303
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 305
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 43			; 0000002bH
$LN6@stbsp__lea:
$LN5@stbsp__lea:
$LN3@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cn$1 = 0
b$ = 8
d$ = 16
bits$ = 48
expo$ = 56
value$ = 64
stbsp__real_to_parts PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1492
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	QWORD PTR b$[rsp], 0
; Line 1497
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1499
	mov	DWORD PTR cn$1[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$1[rsp]
	inc	eax
	mov	DWORD PTR cn$1[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$1[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$1[rsp]
	movsxd	rcx, DWORD PTR cn$1[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR b$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1501
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR b$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR bits$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1502
	mov	rax, QWORD PTR b$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	sub	rax, 1023				; 000003ffH
	mov	rcx, QWORD PTR expo$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1504
	mov	rax, QWORD PTR b$[rsp]
	shr	rax, 63					; 0000003fH
; Line 1505
	add	rsp, 40					; 00000028H
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bits$ = 32
tens$ = 40
e$ = 44
dg$1 = 48
cn$2 = 52
expo$ = 56
n$3 = 60
n$4 = 64
ng$ = 68
tv131 = 72
tv162 = 76
d$ = 80
ph$5 = 88
ahi$6 = 96
v$7 = 104
tv82 = 112
vh$8 = 120
t$9 = 128
r$10 = 136
alo$11 = 144
pl$12 = 152
o$13 = 160
start$ = 192
len$ = 200
out$ = 208
decimal_pos$ = 216
value$ = 224
frac_digits$ = 232
stbsp__real_to_str PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 1708
	mov	QWORD PTR bits$[rsp], 0
; Line 1711
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1712
	mov	DWORD PTR cn$2[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$2[rsp]
	inc	eax
	mov	DWORD PTR cn$2[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$2[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$2[rsp]
	movsxd	rcx, DWORD PTR cn$2[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bits$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1713
	mov	rax, QWORD PTR bits$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	mov	DWORD PTR expo$[rsp], eax
; Line 1714
	mov	rax, QWORD PTR bits$[rsp]
	shr	rax, 63					; 0000003fH
	mov	DWORD PTR ng$[rsp], eax
; Line 1715
	cmp	DWORD PTR ng$[rsp], 0
	je	SHORT $LN21@stbsp__rea
; Line 1716
	movsd	xmm0, QWORD PTR d$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR d$[rsp], xmm0
$LN21@stbsp__rea:
; Line 1718
	cmp	DWORD PTR expo$[rsp], 2047		; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN40@stbsp__rea
	lea	rax, OFFSET FLAT:$SG35625
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN41@stbsp__rea
$LN40@stbsp__rea:
	lea	rax, OFFSET FLAT:$SG35626
	mov	QWORD PTR tv82[rsp], rax
$LN41@stbsp__rea:
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1721
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 28672			; 00007000H
; Line 1722
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 3
; Line 1723
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	cmp	DWORD PTR expo$[rsp], 0
	jne	$LN23@stbsp__rea
; Line 1728
	mov	rax, QWORD PTR bits$[rsp]
	shl	rax, 1
	test	rax, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1731
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1732
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 48			; 00000030H
; Line 1733
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1734
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
	mov	QWORD PTR v$7[rsp], rax
$LN5@stbsp__rea:
; Line 1739
	mov	rax, QWORD PTR v$7[rsp]
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN6@stbsp__rea
; Line 1740
	mov	eax, DWORD PTR expo$[rsp]
	dec	eax
	mov	DWORD PTR expo$[rsp], eax
; Line 1741
	mov	rax, QWORD PTR v$7[rsp]
	sar	rax, 1
	mov	QWORD PTR v$7[rsp], rax
; Line 1742
	jmp	SHORT $LN5@stbsp__rea
$LN6@stbsp__rea:
$LN23@stbsp__rea:
; Line 1751
	mov	eax, DWORD PTR expo$[rsp]
	sub	eax, 1023				; 000003ffH
	mov	DWORD PTR tens$[rsp], eax
; Line 1752
	cmp	DWORD PTR tens$[rsp], 0
	jge	SHORT $LN42@stbsp__rea
	imul	eax, DWORD PTR tens$[rsp], 617		; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN43@stbsp__rea
$LN42@stbsp__rea:
	imul	eax, DWORD PTR tens$[rsp], 1233		; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	inc	eax
	mov	DWORD PTR tv131[rsp], eax
$LN43@stbsp__rea:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR tens$[rsp], eax
; Line 1755
	mov	eax, 18
	sub	eax, DWORD PTR tens$[rsp]
	mov	r9d, eax
	movsd	xmm2, QWORD PTR d$[rsp]
	lea	rdx, QWORD PTR pl$12[rsp]
	lea	rcx, QWORD PTR ph$5[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$6[rsp], xmm0
	cvttsd2si rax, QWORD PTR ph$5[rsp]
	mov	QWORD PTR bits$[rsp], rax
	cvtsi2sd xmm0, QWORD PTR bits$[rsp]
	movsd	QWORD PTR vh$8[rsp], xmm0
	movsd	xmm0, QWORD PTR ph$5[rsp]
	subsd	xmm0, QWORD PTR vh$8[rsp]
	movsd	QWORD PTR ahi$6[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR ph$5[rsp]
	movsd	QWORD PTR t$9[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR t$9[rsp]
	movsd	xmm1, QWORD PTR ph$5[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR vh$8[rsp]
	addsd	xmm1, QWORD PTR t$9[rsp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR alo$11[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	addsd	xmm0, QWORD PTR alo$11[rsp]
	addsd	xmm0, QWORD PTR pl$12[rsp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1761
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN25@stbsp__rea
; Line 1762
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN25@stbsp__rea:
; Line 1766
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, -2147483648			; 80000000H
	test	eax, eax
	je	SHORT $LN44@stbsp__rea
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv162[rsp], eax
	jmp	SHORT $LN45@stbsp__rea
$LN44@stbsp__rea:
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv162[rsp], eax
$LN45@stbsp__rea:
	mov	eax, DWORD PTR tv162[rsp]
	mov	DWORD PTR frac_digits$[rsp], eax
; Line 1767
	cmp	DWORD PTR frac_digits$[rsp], 24
	jae	$LN26@stbsp__rea
; Line 1768
	mov	DWORD PTR dg$1[rsp], 1
; Line 1769
	mov	eax, 8
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN27@stbsp__rea
; Line 1770
	mov	DWORD PTR dg$1[rsp], 10
$LN27@stbsp__rea:
$LN7@stbsp__rea:
; Line 1771
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN8@stbsp__rea
; Line 1772
	mov	eax, DWORD PTR dg$1[rsp]
	inc	eax
	mov	DWORD PTR dg$1[rsp], eax
; Line 1773
	cmp	DWORD PTR dg$1[rsp], 20
	jne	SHORT $LN28@stbsp__rea
; Line 1774
	jmp	$noround$46
$LN28@stbsp__rea:
; Line 1775
	jmp	SHORT $LN7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	mov	eax, DWORD PTR dg$1[rsp]
	cmp	DWORD PTR frac_digits$[rsp], eax
	jae	$LN29@stbsp__rea
; Line 1779
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR dg$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 1780
	cmp	DWORD PTR e$[rsp], 24
	jb	SHORT $LN30@stbsp__rea
; Line 1781
	jmp	SHORT $noround$46
$LN30@stbsp__rea:
; Line 1782
	movsxd	rax, DWORD PTR e$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR r$10[rsp], rax
; Line 1783
	xor	edx, edx
	mov	rax, QWORD PTR r$10[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1784
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN31@stbsp__rea
; Line 1785
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN31@stbsp__rea:
; Line 1786
	xor	edx, edx
	mov	rax, QWORD PTR bits$[rsp]
	div	QWORD PTR r$10[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN29@stbsp__rea:
$noround$46:
$LN26@stbsp__rea:
; Line 1792
	cmp	QWORD PTR bits$[rsp], 0
	je	SHORT $LN32@stbsp__rea
$LN9@stbsp__rea:
; Line 1795
	mov	eax, -1
	cmp	QWORD PTR bits$[rsp], rax
	jg	SHORT $LN33@stbsp__rea
; Line 1796
	jmp	SHORT $LN10@stbsp__rea
$LN33@stbsp__rea:
; Line 1797
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN34@stbsp__rea
; Line 1798
	jmp	SHORT $donez$47
$LN34@stbsp__rea:
; Line 1799
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1800
	jmp	SHORT $LN9@stbsp__rea
$LN10@stbsp__rea:
; Line 1801
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$4[rsp], eax
$LN12@stbsp__rea:
; Line 1802
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN13@stbsp__rea
; Line 1803
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR n$4[rsp], eax
	jmp	SHORT $LN12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	eax, DWORD PTR n$4[rsp]
	mov	QWORD PTR bits$[rsp], rax
$donez$47:
$LN32@stbsp__rea:
; Line 1809
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR out$[rsp], rax
; Line 1810
	mov	DWORD PTR e$[rsp], 0
$LN14@stbsp__rea:
; Line 1813
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
	mov	QWORD PTR o$13[rsp], rax
; Line 1815
	cmp	QWORD PTR bits$[rsp], 100000000		; 05f5e100H
	jl	SHORT $LN35@stbsp__rea
; Line 1816
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1817
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1818
	jmp	SHORT $LN36@stbsp__rea
$LN35@stbsp__rea:
; Line 1819
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1820
	mov	QWORD PTR bits$[rsp], 0
$LN36@stbsp__rea:
$LN17@stbsp__rea:
; Line 1822
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN18@stbsp__rea
; Line 1823
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 2
	mov	QWORD PTR out$[rsp], rax
; Line 1824
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR out$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1825
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1826
	mov	eax, DWORD PTR e$[rsp]
	add	eax, 2
	mov	DWORD PTR e$[rsp], eax
; Line 1827
	jmp	SHORT $LN17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	cmp	QWORD PTR bits$[rsp], 0
	jne	SHORT $LN37@stbsp__rea
; Line 1829
	cmp	DWORD PTR e$[rsp], 0
	je	SHORT $LN38@stbsp__rea
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN38@stbsp__rea
; Line 1830
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 1831
	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax
$LN38@stbsp__rea:
; Line 1833
	jmp	SHORT $LN15@stbsp__rea
$LN37@stbsp__rea:
$LN19@stbsp__rea:
; Line 1835
	mov	rax, QWORD PTR o$13[rsp]
	cmp	QWORD PTR out$[rsp], rax
	je	SHORT $LN20@stbsp__rea
; Line 1836
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1837
	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
; Line 1838
	jmp	SHORT $LN19@stbsp__rea
$LN20@stbsp__rea:
; Line 1839
	jmp	$LN14@stbsp__rea
$LN15@stbsp__rea:
; Line 1841
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1842
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1843
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1844
	mov	eax, DWORD PTR ng$[rsp]
$LN1@stbsp__rea:
; Line 1845
	add	rsp, 184				; 000000b8H
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 275
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
; Line 276
	movzx	eax, BYTE PTR pperiod$[rsp]
	mov	BYTE PTR stbsp__period, al
; Line 277
	movzx	eax, BYTE PTR pcomma$[rsp]
	mov	BYTE PTR stbsp__comma, al
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$1 = 48
pr$2 = 52
n$3 = 56
s$4 = 64
l$5 = 72
bf$ = 80
dp$6 = 88
idx$7 = 92
f$ = 96
cs$8 = 104
i$9 = 108
tlen$ = 112
fw$10 = 116
n64$11 = 120
i$12 = 128
sn$13 = 136
i$14 = 144
i$15 = 148
tz$16 = 152
i$17 = 156
i$18 = 160
i$19 = 164
fv$20 = 168
h$21 = 176
tv218 = 184
tv141 = 188
v$22 = 192
tv265 = 196
len$23 = 200
c$24 = 204
len$25 = 208
len$26 = 212
len$27 = 216
len$28 = 220
len$29 = 224
len$30 = 228
len$31 = 232
len$32 = 236
i$33 = 240
len$34 = 244
tv472 = 248
tv528 = 252
tv600 = 256
tv917 = 260
lg$35 = 264
lg$36 = 268
tv996 = 272
lg$37 = 276
lg$38 = 280
lg$39 = 284
lg$40 = 288
lg$41 = 292
lg$42 = 296
c$43 = 300
tv271 = 304
tv315 = 308
tv408 = 312
tv409 = 316
tv410 = 320
tv469 = 324
o$44 = 328
divisor$45 = 336
tv1820 = 344
tv860 = 348
tv883 = 352
i64$46 = 360
tv1020 = 368
tv1019 = 372
tv1215 = 376
tv388 = 380
$T47 = 384
$T48 = 392
$T49 = 400
$T50 = 408
$T51 = 416
$T52 = 424
tv299 = 432
tv432 = 440
tv478 = 448
$T53 = 456
$T54 = 464
tv718 = 472
$T55 = 480
$T56 = 488
tv747 = 496
$T57 = 504
$T58 = 512
$T59 = 520
$T60 = 528
d$61 = 536
tv1488 = 544
lead$62 = 552
tail$63 = 560
num$64 = 576
__$ArrayPad$ = 1104
callback$ = 1136
user$ = 1144
buf$ = 1152
fmt$ = 1160
va$ = 1168
stbsp_vsprintfcb PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 350
$LN408:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1128				; 00000468H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 355
	mov	DWORD PTR tlen$[rsp], 0
; Line 357
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
; Line 358
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR f$[rsp], rax
$LN2@stbsp_vspr:
$LN5@stbsp_vspr:
$LN8@stbsp_vspr:
; Line 393
	mov	rax, QWORD PTR f$[rsp]
	and	rax, 3
	test	rax, rax
	je	$LN9@stbsp_vspr
$schk1$409:
; Line 395
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN126@stbsp_vspr
; Line 396
	jmp	$scandd$410
$LN126@stbsp_vspr:
$schk2$411:
; Line 398
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN127@stbsp_vspr
; Line 399
	jmp	$endfmt$412
$LN127@stbsp_vspr:
; Line 400
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN128@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$32[rsp], eax
	mov	eax, DWORD PTR len$32[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN129@stbsp_vspr
	mov	eax, DWORD PTR len$32[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$32[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN130@stbsp_vspr
	jmp	$done$413
$LN130@stbsp_vspr:
$LN129@stbsp_vspr:
$LN128@stbsp_vspr:
; Line 401
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bf$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 402
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 403
	jmp	$LN8@stbsp_vspr
$LN9@stbsp_vspr:
$LN10@stbsp_vspr:
; Line 409
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$22[rsp], eax
; Line 410
	mov	eax, DWORD PTR v$22[rsp]
	not	eax
	and	eax, -2139062144			; 80808080H
	mov	DWORD PTR c$43[rsp], eax
; Line 411
	mov	eax, DWORD PTR v$22[rsp]
	xor	eax, 623191333				; 25252525H
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$43[rsp]
	test	eax, eax
	je	SHORT $LN131@stbsp_vspr
; Line 412
	jmp	$schk1$409
$LN131@stbsp_vspr:
; Line 413
	mov	eax, DWORD PTR v$22[rsp]
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$43[rsp]
	test	eax, eax
	je	SHORT $LN132@stbsp_vspr
; Line 414
	jmp	$schk2$411
$LN132@stbsp_vspr:
; Line 415
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN133@stbsp_vspr
; Line 416
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 4
	jge	SHORT $LN134@stbsp_vspr
; Line 417
	jmp	$schk1$409
$LN134@stbsp_vspr:
$LN133@stbsp_vspr:
; Line 427
	mov	rax, QWORD PTR bf$[rsp]
	mov	ecx, DWORD PTR v$22[rsp]
	mov	DWORD PTR [rax], ecx
; Line 429
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 430
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 4
	mov	QWORD PTR f$[rsp], rax
; Line 431
	jmp	$LN10@stbsp_vspr
; Line 432
	jmp	$LN5@stbsp_vspr
$scandd$410:
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 438
	mov	DWORD PTR fw$10[rsp], 0
; Line 439
	mov	DWORD PTR pr$2[rsp], -1
; Line 440
	mov	DWORD PTR fl$1[rsp], 0
; Line 441
	mov	DWORD PTR tz$16[rsp], 0
$LN13@stbsp_vspr:
; Line 445
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv141[rsp], eax
	cmp	DWORD PTR tv141[rsp], 63		; 0000003fH
	ja	$LN147@stbsp_vspr
	movsxd	rax, DWORD PTR tv141[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN406@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN407@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN135@stbsp_vspr:
; Line 448
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 1
	mov	DWORD PTR fl$1[rsp], eax
; Line 449
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 450
	jmp	SHORT $LN13@stbsp_vspr
$LN136@stbsp_vspr:
; Line 453
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 2
	mov	DWORD PTR fl$1[rsp], eax
; Line 454
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 455
	jmp	$LN13@stbsp_vspr
$LN137@stbsp_vspr:
; Line 458
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 4
	mov	DWORD PTR fl$1[rsp], eax
; Line 459
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 460
	jmp	$LN13@stbsp_vspr
$LN138@stbsp_vspr:
; Line 463
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
; Line 464
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 465
	jmp	$LN13@stbsp_vspr
$LN139@stbsp_vspr:
; Line 468
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR fl$1[rsp], eax
; Line 469
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 470
	jmp	$LN13@stbsp_vspr
$LN140@stbsp_vspr:
; Line 473
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN141@stbsp_vspr
; Line 474
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN143@stbsp_vspr
; Line 475
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 12
	mov	DWORD PTR fl$1[rsp], eax
; Line 476
	jmp	SHORT $LN144@stbsp_vspr
$LN143@stbsp_vspr:
; Line 477
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 11
	mov	DWORD PTR fl$1[rsp], eax
$LN144@stbsp_vspr:
; Line 479
	jmp	SHORT $LN142@stbsp_vspr
$LN141@stbsp_vspr:
; Line 480
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
$LN142@stbsp_vspr:
; Line 482
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 483
	jmp	$LN13@stbsp_vspr
$LN145@stbsp_vspr:
; Line 486
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 10
	mov	DWORD PTR fl$1[rsp], eax
; Line 487
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 488
	jmp	$LN13@stbsp_vspr
$LN146@stbsp_vspr:
; Line 491
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 16
	mov	DWORD PTR fl$1[rsp], eax
; Line 492
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 493
	jmp	SHORT $flags_done$414
$LN147@stbsp_vspr:
; Line 494
	jmp	SHORT $flags_done$414
; Line 496
	jmp	$LN13@stbsp_vspr
$flags_done$414:
; Line 500
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN148@stbsp_vspr
; Line 501
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR fw$10[rsp], eax
; Line 502
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 503
	jmp	SHORT $LN149@stbsp_vspr
$LN148@stbsp_vspr:
$LN18@stbsp_vspr:
; Line 504
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN19@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN19@stbsp_vspr
; Line 505
	imul	eax, DWORD PTR fw$10[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR fw$10[rsp], eax
; Line 506
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 507
	jmp	SHORT $LN18@stbsp_vspr
$LN19@stbsp_vspr:
$LN149@stbsp_vspr:
; Line 510
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN150@stbsp_vspr
; Line 511
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 512
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN151@stbsp_vspr
; Line 513
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR pr$2[rsp], eax
; Line 514
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 515
	jmp	SHORT $LN152@stbsp_vspr
$LN151@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$2[rsp], 0
$LN20@stbsp_vspr:
; Line 517
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN21@stbsp_vspr
; Line 518
	imul	eax, DWORD PTR pr$2[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR pr$2[rsp], eax
; Line 519
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 520
	jmp	SHORT $LN20@stbsp_vspr
$LN21@stbsp_vspr:
$LN152@stbsp_vspr:
$LN150@stbsp_vspr:
; Line 525
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv218[rsp], eax
	mov	eax, DWORD PTR tv218[rsp]
	sub	eax, 73					; 00000049H
	mov	DWORD PTR tv218[rsp], eax
	cmp	DWORD PTR tv218[rsp], 49		; 00000031H
	ja	$LN165@stbsp_vspr
	movsxd	rax, DWORD PTR tv218[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN404@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN405@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN153@stbsp_vspr:
; Line 528
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 9
	mov	DWORD PTR fl$1[rsp], eax
; Line 529
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 530
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	jne	SHORT $LN154@stbsp_vspr
; Line 531
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN154@stbsp_vspr:
; Line 532
	jmp	$LN22@stbsp_vspr
$LN155@stbsp_vspr:
; Line 535
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fl$1[rsp], eax
; Line 536
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 537
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN156@stbsp_vspr
; Line 538
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 539
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN156@stbsp_vspr:
; Line 541
	jmp	$LN22@stbsp_vspr
$LN157@stbsp_vspr:
; Line 544
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 545
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 546
	jmp	$LN22@stbsp_vspr
$LN158@stbsp_vspr:
; Line 549
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 550
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 551
	jmp	$LN22@stbsp_vspr
$LN159@stbsp_vspr:
; Line 553
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 554
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 555
	jmp	$LN22@stbsp_vspr
$LN160@stbsp_vspr:
; Line 558
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN161@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN161@stbsp_vspr
; Line 559
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 560
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
	jmp	SHORT $LN162@stbsp_vspr
$LN161@stbsp_vspr:
; Line 561
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 51					; 00000033H
	jne	SHORT $LN163@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN163@stbsp_vspr
; Line 562
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
; Line 563
	jmp	SHORT $LN164@stbsp_vspr
$LN163@stbsp_vspr:
; Line 564
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 565
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN164@stbsp_vspr:
$LN162@stbsp_vspr:
$LN165@stbsp_vspr:
$LN22@stbsp_vspr:
; Line 572
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv265[rsp], eax
	mov	eax, DWORD PTR tv265[rsp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv265[rsp], eax
	cmp	DWORD PTR tv265[rsp], 55		; 00000037H
	ja	$LN336@stbsp_vspr
	movsxd	rax, DWORD PTR tv265[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN402@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN403@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN166@stbsp_vspr:
; Line 589
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR s$4[rsp], rax
; Line 590
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN167@stbsp_vspr
; Line 591
	lea	rax, OFFSET FLAT:$SG35046
	mov	QWORD PTR s$4[rsp], rax
$LN167@stbsp_vspr:
; Line 594
	cmp	DWORD PTR pr$2[rsp], 0
	jl	SHORT $LN342@stbsp_vspr
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv271[rsp], eax
	jmp	SHORT $LN343@stbsp_vspr
$LN342@stbsp_vspr:
	mov	DWORD PTR tv271[rsp], -1		; ffffffffH
$LN343@stbsp_vspr:
	mov	edx, DWORD PTR tv271[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	call	stbsp__strlen_limited
	mov	DWORD PTR l$5[rsp], eax
; Line 595
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T49[rsp], rax
	cmp	QWORD PTR $T49[rsp], 8
	jae	SHORT $LN344@stbsp_vspr
	jmp	SHORT $LN345@stbsp_vspr
$LN344@stbsp_vspr:
	call	__report_rangecheckfailure
$LN345@stbsp_vspr:
	mov	rax, QWORD PTR $T49[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 596
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T50[rsp], rax
	cmp	QWORD PTR $T50[rsp], 8
	jae	SHORT $LN346@stbsp_vspr
	jmp	SHORT $LN347@stbsp_vspr
$LN346@stbsp_vspr:
	call	__report_rangecheckfailure
$LN347@stbsp_vspr:
	mov	rax, QWORD PTR $T50[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 597
	mov	DWORD PTR pr$2[rsp], 0
; Line 598
	mov	DWORD PTR dp$6[rsp], 0
; Line 599
	mov	DWORD PTR cs$8[rsp], 0
; Line 601
	jmp	$scopy$415
$LN168@stbsp_vspr:
; Line 605
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 606
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR va$[rsp]
	movzx	ecx, BYTE PTR [rcx-8]
	mov	BYTE PTR [rax], cl
; Line 607
	mov	DWORD PTR l$5[rsp], 1
; Line 608
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T51[rsp], rax
	cmp	QWORD PTR $T51[rsp], 8
	jae	SHORT $LN348@stbsp_vspr
	jmp	SHORT $LN349@stbsp_vspr
$LN348@stbsp_vspr:
	call	__report_rangecheckfailure
$LN349@stbsp_vspr:
	mov	rax, QWORD PTR $T51[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 609
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T52[rsp], rax
	cmp	QWORD PTR $T52[rsp], 8
	jae	SHORT $LN350@stbsp_vspr
	jmp	SHORT $LN351@stbsp_vspr
$LN350@stbsp_vspr:
	call	__report_rangecheckfailure
$LN351@stbsp_vspr:
	mov	rax, QWORD PTR $T52[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 610
	mov	DWORD PTR pr$2[rsp], 0
; Line 611
	mov	DWORD PTR dp$6[rsp], 0
; Line 612
	mov	DWORD PTR cs$8[rsp], 0
; Line 613
	jmp	$scopy$415
$LN169@stbsp_vspr:
; Line 617
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR d$61[rsp], rax
; Line 618
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR d$61[rsp]
	mov	DWORD PTR [rcx], eax
; Line 619
	jmp	$LN24@stbsp_vspr
$LN170@stbsp_vspr:
$LN171@stbsp_vspr:
; Line 641
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN352@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv299[rsp], rax
	jmp	SHORT $LN353@stbsp_vspr
$LN352@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv299[rsp], rax
$LN353@stbsp_vspr:
	mov	rax, QWORD PTR tv299[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 642
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 643
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN172@stbsp_vspr
; Line 644
	mov	DWORD PTR pr$2[rsp], 6
$LN172@stbsp_vspr:
; Line 646
	movsd	xmm2, QWORD PTR fv$20[rsp]
	lea	rdx, QWORD PTR dp$6[rsp]
	lea	rcx, QWORD PTR n64$11[rsp]
	call	stbsp__real_to_parts
	test	eax, eax
	je	SHORT $LN173@stbsp_vspr
; Line 647
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN173@stbsp_vspr:
; Line 649
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 651
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 653
	cmp	DWORD PTR dp$6[rsp], -1023		; fffffffffffffc01H
	jne	SHORT $LN174@stbsp_vspr
; Line 654
	cmp	QWORD PTR n64$11[rsp], 0
	je	SHORT $LN354@stbsp_vspr
	mov	DWORD PTR tv315[rsp], -1022		; fffffffffffffc02H
	jmp	SHORT $LN355@stbsp_vspr
$LN354@stbsp_vspr:
	mov	DWORD PTR tv315[rsp], 0
$LN355@stbsp_vspr:
	mov	eax, DWORD PTR tv315[rsp]
	mov	DWORD PTR dp$6[rsp], eax
	jmp	SHORT $LN175@stbsp_vspr
$LN174@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	mov	rcx, QWORD PTR n64$11[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN175@stbsp_vspr:
; Line 657
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 8
	mov	QWORD PTR n64$11[rsp], rax
; Line 658
	cmp	DWORD PTR pr$2[rsp], 15
	jge	SHORT $LN176@stbsp_vspr
; Line 659
	mov	eax, DWORD PTR pr$2[rsp]
	shl	eax, 2
	mov	rcx, 576460752303423488			; 0800000000000000H
	mov	QWORD PTR tv1488[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1488[rsp]
	shr	rax, cl
	mov	rcx, QWORD PTR n64$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN176@stbsp_vspr:
; Line 666
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	inc	eax
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 667
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 120		; 00000078H
; Line 668
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
; Line 670
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 671
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 672
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN177@stbsp_vspr
; Line 673
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN177@stbsp_vspr:
; Line 674
	mov	rax, QWORD PTR s$4[rsp]
	mov	QWORD PTR sn$13[rsp], rax
; Line 677
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 678
	cmp	DWORD PTR n$3[rsp], 13
	jbe	SHORT $LN178@stbsp_vspr
; Line 679
	mov	DWORD PTR n$3[rsp], 13
$LN178@stbsp_vspr:
; Line 680
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN179@stbsp_vspr
; Line 681
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN179@stbsp_vspr:
; Line 682
	mov	DWORD PTR pr$2[rsp], 0
$LN26@stbsp_vspr:
; Line 683
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR tv388[rsp], eax
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
	cmp	DWORD PTR tv388[rsp], 0
	je	SHORT $LN27@stbsp_vspr
; Line 684
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 685
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 686
	jmp	SHORT $LN26@stbsp_vspr
$LN27@stbsp_vspr:
; Line 689
	mov	eax, 1
	imul	rax, rax, 17
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 690
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN180@stbsp_vspr
; Line 691
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 692
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 693
	jmp	SHORT $LN181@stbsp_vspr
$LN180@stbsp_vspr:
; Line 694
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN181@stbsp_vspr:
; Line 695
	cmp	DWORD PTR dp$6[rsp], 1000		; 000003e8H
	jl	SHORT $LN360@stbsp_vspr
	mov	DWORD PTR tv410[rsp], 6
	jmp	SHORT $LN361@stbsp_vspr
$LN360@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN358@stbsp_vspr
	mov	DWORD PTR tv409[rsp], 5
	jmp	SHORT $LN359@stbsp_vspr
$LN358@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 10
	jl	SHORT $LN356@stbsp_vspr
	mov	DWORD PTR tv408[rsp], 4
	jmp	SHORT $LN357@stbsp_vspr
$LN356@stbsp_vspr:
	mov	DWORD PTR tv408[rsp], 3
$LN357@stbsp_vspr:
	mov	eax, DWORD PTR tv408[rsp]
	mov	DWORD PTR tv409[rsp], eax
$LN359@stbsp_vspr:
	mov	eax, DWORD PTR tv409[rsp]
	mov	DWORD PTR tv410[rsp], eax
$LN361@stbsp_vspr:
	mov	eax, DWORD PTR tv410[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 696
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN28@stbsp_vspr:
; Line 698
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 699
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN182@stbsp_vspr
; Line 700
	jmp	SHORT $LN29@stbsp_vspr
$LN182@stbsp_vspr:
; Line 701
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 702
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 703
	jmp	SHORT $LN28@stbsp_vspr
$LN29@stbsp_vspr:
; Line 705
	mov	rax, QWORD PTR sn$13[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dp$6[rsp], eax
; Line 706
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 707
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 708
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 709
	jmp	$scopy$415
$LN183@stbsp_vspr:
$LN184@stbsp_vspr:
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN362@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv432[rsp], rax
	jmp	SHORT $LN363@stbsp_vspr
$LN362@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv432[rsp], rax
$LN363@stbsp_vspr:
	mov	rax, QWORD PTR tv432[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 714
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 715
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN185@stbsp_vspr
; Line 716
	mov	DWORD PTR pr$2[rsp], 6
	jmp	SHORT $LN186@stbsp_vspr
$LN185@stbsp_vspr:
; Line 717
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN187@stbsp_vspr
; Line 718
	mov	DWORD PTR pr$2[rsp], 1
$LN187@stbsp_vspr:
$LN186@stbsp_vspr:
; Line 720
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN188@stbsp_vspr
; Line 721
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN188@stbsp_vspr:
; Line 724
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 725
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR l$5[rsp], eax
	jbe	SHORT $LN189@stbsp_vspr
; Line 726
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR l$5[rsp], eax
$LN189@stbsp_vspr:
$LN31@stbsp_vspr:
; Line 727
	cmp	DWORD PTR l$5[rsp], 1
	jbe	SHORT $LN32@stbsp_vspr
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN32@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR sn$13[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stbsp_vspr
; Line 728
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
; Line 729
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 730
	jmp	SHORT $LN31@stbsp_vspr
$LN32@stbsp_vspr:
; Line 733
	cmp	DWORD PTR dp$6[rsp], -4
	jle	SHORT $LN191@stbsp_vspr
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jle	SHORT $LN190@stbsp_vspr
$LN191@stbsp_vspr:
; Line 734
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN192@stbsp_vspr
; Line 735
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
	jmp	SHORT $LN193@stbsp_vspr
$LN192@stbsp_vspr:
; Line 736
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN194@stbsp_vspr
; Line 737
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
$LN194@stbsp_vspr:
$LN193@stbsp_vspr:
; Line 738
	jmp	$doexpfromg$416
$LN190@stbsp_vspr:
; Line 741
	cmp	DWORD PTR dp$6[rsp], 0
	jle	SHORT $LN195@stbsp_vspr
; Line 742
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jge	SHORT $LN364@stbsp_vspr
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv469[rsp], eax
	jmp	SHORT $LN365@stbsp_vspr
$LN364@stbsp_vspr:
	mov	DWORD PTR tv469[rsp], 0
$LN365@stbsp_vspr:
	mov	eax, DWORD PTR tv469[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 743
	jmp	SHORT $LN196@stbsp_vspr
$LN195@stbsp_vspr:
; Line 744
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN366@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv472[rsp], eax
	jmp	SHORT $LN367@stbsp_vspr
$LN366@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv472[rsp], eax
$LN367@stbsp_vspr:
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	add	eax, DWORD PTR tv472[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN196@stbsp_vspr:
; Line 746
	jmp	$dofloatfromg$417
$LN197@stbsp_vspr:
$LN198@stbsp_vspr:
; Line 750
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN368@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv478[rsp], rax
	jmp	SHORT $LN369@stbsp_vspr
$LN368@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv478[rsp], rax
$LN369@stbsp_vspr:
	mov	rax, QWORD PTR tv478[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 751
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 752
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN199@stbsp_vspr
; Line 753
	mov	DWORD PTR pr$2[rsp], 6
$LN199@stbsp_vspr:
; Line 755
	mov	eax, DWORD PTR pr$2[rsp]
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN200@stbsp_vspr
; Line 756
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN200@stbsp_vspr:
$doexpfromg$416:
; Line 758
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T53[rsp], rax
	cmp	QWORD PTR $T53[rsp], 8
	jae	SHORT $LN370@stbsp_vspr
	jmp	SHORT $LN371@stbsp_vspr
$LN370@stbsp_vspr:
	call	__report_rangecheckfailure
$LN371@stbsp_vspr:
	mov	rax, QWORD PTR $T53[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 759
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 760
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN201@stbsp_vspr
; Line 761
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 762
	mov	DWORD PTR cs$8[rsp], 0
; Line 763
	mov	DWORD PTR pr$2[rsp], 0
; Line 764
	jmp	$scopy$415
$LN201@stbsp_vspr:
; Line 766
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 770
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN202@stbsp_vspr
; Line 771
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN202@stbsp_vspr:
; Line 774
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN203@stbsp_vspr
; Line 775
	mov	eax, DWORD PTR pr$2[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
$LN203@stbsp_vspr:
; Line 776
	mov	DWORD PTR n$3[rsp], 1
	jmp	SHORT $LN35@stbsp_vspr
$LN33@stbsp_vspr:
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
$LN35@stbsp_vspr:
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN34@stbsp_vspr
; Line 777
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	jmp	SHORT $LN33@stbsp_vspr
$LN34@stbsp_vspr:
; Line 779
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 780
	mov	DWORD PTR pr$2[rsp], 0
; Line 782
	mov	eax, 1
	imul	rax, rax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 783
	mov	eax, DWORD PTR dp$6[rsp]
	dec	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 784
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN204@stbsp_vspr
; Line 785
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 786
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 787
	jmp	SHORT $LN205@stbsp_vspr
$LN204@stbsp_vspr:
; Line 788
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN205@stbsp_vspr:
; Line 792
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN372@stbsp_vspr
	mov	DWORD PTR tv528[rsp], 5
	jmp	SHORT $LN373@stbsp_vspr
$LN372@stbsp_vspr:
	mov	DWORD PTR tv528[rsp], 4
$LN373@stbsp_vspr:
	mov	eax, DWORD PTR tv528[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 794
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN36@stbsp_vspr:
; Line 796
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 797
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN206@stbsp_vspr
; Line 798
	jmp	SHORT $LN37@stbsp_vspr
$LN206@stbsp_vspr:
; Line 799
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 800
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 801
	jmp	SHORT $LN36@stbsp_vspr
$LN37@stbsp_vspr:
; Line 802
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 803
	jmp	$flt_lead$418
$LN207@stbsp_vspr:
; Line 806
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
$doafloat$419:
; Line 809
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN208@stbsp_vspr
; Line 811
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
; Line 812
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN209@stbsp_vspr
; Line 813
	movsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
$LN209@stbsp_vspr:
$LN39@stbsp_vspr:
; Line 814
	cmp	DWORD PTR fl$1[rsp], 67108864		; 04000000H
	jae	SHORT $LN40@stbsp_vspr
; Line 815
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	comisd	xmm0, QWORD PTR fv$20[rsp]
	jbe	SHORT $LN210@stbsp_vspr
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR fv$20[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN210@stbsp_vspr
; Line 816
	jmp	SHORT $LN40@stbsp_vspr
$LN210@stbsp_vspr:
; Line 817
	movsd	xmm0, QWORD PTR fv$20[rsp]
	divsd	xmm0, QWORD PTR divisor$45[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 818
	mov	eax, DWORD PTR fl$1[rsp]
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR fl$1[rsp], eax
; Line 819
	jmp	SHORT $LN39@stbsp_vspr
$LN40@stbsp_vspr:
$LN208@stbsp_vspr:
; Line 821
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN211@stbsp_vspr
; Line 822
	mov	DWORD PTR pr$2[rsp], 6
$LN211@stbsp_vspr:
; Line 824
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN212@stbsp_vspr
; Line 825
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN212@stbsp_vspr:
$dofloatfromg$417:
; Line 827
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T54[rsp], rax
	cmp	QWORD PTR $T54[rsp], 8
	jae	SHORT $LN374@stbsp_vspr
	jmp	SHORT $LN375@stbsp_vspr
$LN374@stbsp_vspr:
	call	__report_rangecheckfailure
$LN375@stbsp_vspr:
	mov	rax, QWORD PTR $T54[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 828
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 829
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN213@stbsp_vspr
; Line 830
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 831
	mov	DWORD PTR cs$8[rsp], 0
; Line 832
	mov	DWORD PTR pr$2[rsp], 0
; Line 833
	jmp	$scopy$415
$LN213@stbsp_vspr:
; Line 835
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 838
	cmp	DWORD PTR dp$6[rsp], 0
	jg	$LN214@stbsp_vspr
; Line 841
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 842
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN216@stbsp_vspr
; Line 843
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN216@stbsp_vspr:
; Line 844
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 845
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jle	SHORT $LN217@stbsp_vspr
; Line 846
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN217@stbsp_vspr:
; Line 847
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN41@stbsp_vspr:
; Line 848
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN42@stbsp_vspr
; Line 849
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN218@stbsp_vspr
; Line 850
	jmp	SHORT $LN42@stbsp_vspr
$LN218@stbsp_vspr:
; Line 851
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 852
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 853
	jmp	SHORT $LN41@stbsp_vspr
$LN42@stbsp_vspr:
$LN43@stbsp_vspr:
; Line 854
	cmp	DWORD PTR i$12[rsp], 4
	jl	SHORT $LN44@stbsp_vspr
; Line 855
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 856
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 857
	mov	eax, DWORD PTR i$12[rsp]
	sub	eax, 4
	mov	DWORD PTR i$12[rsp], eax
; Line 858
	jmp	SHORT $LN43@stbsp_vspr
$LN44@stbsp_vspr:
$LN45@stbsp_vspr:
; Line 859
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN46@stbsp_vspr
; Line 860
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 861
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 862
	jmp	SHORT $LN45@stbsp_vspr
$LN46@stbsp_vspr:
; Line 863
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jle	SHORT $LN219@stbsp_vspr
; Line 864
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN219@stbsp_vspr:
; Line 865
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN47@stbsp_vspr:
; Line 866
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN48@stbsp_vspr
; Line 867
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 868
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 869
	jmp	SHORT $LN47@stbsp_vspr
$LN48@stbsp_vspr:
; Line 870
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 871
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 872
	jmp	$LN215@stbsp_vspr
$LN214@stbsp_vspr:
; Line 873
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN376@stbsp_vspr
	mov	eax, 600				; 00000258H
	sub	eax, DWORD PTR dp$6[rsp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	mov	DWORD PTR tv600[rsp], eax
	jmp	SHORT $LN377@stbsp_vspr
$LN376@stbsp_vspr:
	mov	DWORD PTR tv600[rsp], 0
$LN377@stbsp_vspr:
	mov	eax, DWORD PTR tv600[rsp]
	mov	DWORD PTR cs$8[rsp], eax
; Line 874
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jb	$LN220@stbsp_vspr
; Line 876
	mov	DWORD PTR n$3[rsp], 0
$LN49@stbsp_vspr:
; Line 878
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN222@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN222@stbsp_vspr
; Line 879
	mov	DWORD PTR cs$8[rsp], 0
; Line 880
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 881
	jmp	SHORT $LN223@stbsp_vspr
$LN222@stbsp_vspr:
; Line 882
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 883
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 884
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN224@stbsp_vspr
; Line 885
	jmp	SHORT $LN50@stbsp_vspr
$LN224@stbsp_vspr:
$LN223@stbsp_vspr:
; Line 887
	jmp	SHORT $LN49@stbsp_vspr
$LN50@stbsp_vspr:
; Line 888
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	$LN225@stbsp_vspr
; Line 889
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR dp$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 890
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN226@stbsp_vspr
$LN52@stbsp_vspr:
; Line 891
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN53@stbsp_vspr
; Line 892
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN227@stbsp_vspr
; Line 893
	jmp	SHORT $LN53@stbsp_vspr
$LN227@stbsp_vspr:
; Line 894
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 895
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 896
	jmp	SHORT $LN52@stbsp_vspr
$LN53@stbsp_vspr:
$LN54@stbsp_vspr:
; Line 897
	cmp	DWORD PTR n$3[rsp], 4
	jb	SHORT $LN55@stbsp_vspr
; Line 898
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 899
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 900
	mov	eax, DWORD PTR n$3[rsp]
	sub	eax, 4
	mov	DWORD PTR n$3[rsp], eax
; Line 901
	jmp	SHORT $LN54@stbsp_vspr
$LN55@stbsp_vspr:
$LN226@stbsp_vspr:
$LN56@stbsp_vspr:
; Line 903
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN57@stbsp_vspr
; Line 904
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN228@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN228@stbsp_vspr
; Line 905
	mov	DWORD PTR cs$8[rsp], 0
; Line 906
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 907
	jmp	SHORT $LN229@stbsp_vspr
$LN228@stbsp_vspr:
; Line 908
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 909
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
$LN229@stbsp_vspr:
; Line 911
	jmp	SHORT $LN56@stbsp_vspr
$LN57@stbsp_vspr:
$LN225@stbsp_vspr:
; Line 913
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 914
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN230@stbsp_vspr
; Line 915
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 916
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tz$16[rsp], eax
$LN230@stbsp_vspr:
; Line 918
	jmp	$LN221@stbsp_vspr
$LN220@stbsp_vspr:
; Line 920
	mov	DWORD PTR n$3[rsp], 0
$LN58@stbsp_vspr:
; Line 922
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN231@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN231@stbsp_vspr
; Line 923
	mov	DWORD PTR cs$8[rsp], 0
; Line 924
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 925
	jmp	SHORT $LN232@stbsp_vspr
$LN231@stbsp_vspr:
; Line 926
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 927
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 928
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN233@stbsp_vspr
; Line 929
	jmp	SHORT $LN59@stbsp_vspr
$LN233@stbsp_vspr:
$LN232@stbsp_vspr:
; Line 931
	jmp	SHORT $LN58@stbsp_vspr
$LN59@stbsp_vspr:
; Line 932
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 933
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN234@stbsp_vspr
; Line 934
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN234@stbsp_vspr:
; Line 935
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN235@stbsp_vspr
; Line 936
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN235@stbsp_vspr:
$LN61@stbsp_vspr:
; Line 937
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN62@stbsp_vspr
; Line 938
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 939
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 940
	jmp	SHORT $LN61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN221@stbsp_vspr:
$LN215@stbsp_vspr:
; Line 944
	mov	DWORD PTR pr$2[rsp], 0
; Line 947
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN236@stbsp_vspr
; Line 949
	mov	BYTE PTR idx$7[rsp], 1
; Line 950
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN237@stbsp_vspr
; Line 951
	mov	BYTE PTR idx$7[rsp], 0
$LN237@stbsp_vspr:
; Line 952
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
; Line 953
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR tail$63[rsp+rax], 32		; 00000020H
; Line 955
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	test	eax, eax
	je	$LN238@stbsp_vspr
; Line 956
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN239@stbsp_vspr
; Line 957
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG35120
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
	jmp	SHORT $LN240@stbsp_vspr
$LN239@stbsp_vspr:
; Line 959
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG35121
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
$LN240@stbsp_vspr:
; Line 960
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
; Line 962
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN241@stbsp_vspr
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN241@stbsp_vspr
; Line 963
	movsx	eax, BYTE PTR idx$7[rsp]
	inc	eax
	cdqe
	mov	BYTE PTR tail$63[rsp+rax], 105		; 00000069H
; Line 964
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
$LN241@stbsp_vspr:
; Line 966
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN238@stbsp_vspr:
$LN236@stbsp_vspr:
$flt_lead$418:
; Line 973
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 974
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 975
	jmp	$scopy$415
$LN242@stbsp_vspr:
$LN243@stbsp_vspr:
; Line 980
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN378@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv718[rsp], rax
	jmp	SHORT $LN379@stbsp_vspr
$LN378@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv718[rsp], rax
$LN379@stbsp_vspr:
	mov	rax, QWORD PTR tv718[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 981
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T55[rsp], rax
	cmp	QWORD PTR $T55[rsp], 8
	jae	SHORT $LN380@stbsp_vspr
	jmp	SHORT $LN381@stbsp_vspr
$LN380@stbsp_vspr:
	call	__report_rangecheckfailure
$LN381@stbsp_vspr:
	mov	rax, QWORD PTR $T55[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 982
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN244@stbsp_vspr
; Line 983
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 984
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 985
	mov	eax, 1
	imul	rax, rax, 11
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN244@stbsp_vspr:
; Line 987
	mov	DWORD PTR l$5[rsp], 384			; 00000180H
; Line 988
	jmp	$radixnum$420
$LN245@stbsp_vspr:
; Line 991
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR h$21[rsp], rax
; Line 992
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T56[rsp], rax
	cmp	QWORD PTR $T56[rsp], 8
	jae	SHORT $LN382@stbsp_vspr
	jmp	SHORT $LN383@stbsp_vspr
$LN382@stbsp_vspr:
	call	__report_rangecheckfailure
$LN383@stbsp_vspr:
	mov	rax, QWORD PTR $T56[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 993
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN246@stbsp_vspr
; Line 994
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 1
; Line 995
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
$LN246@stbsp_vspr:
; Line 997
	mov	DWORD PTR l$5[rsp], 816			; 00000330H
; Line 998
	jmp	$radixnum$420
$LN247@stbsp_vspr:
; Line 1001
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 1002
	mov	DWORD PTR pr$2[rsp], 16
; Line 1003
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR fl$1[rsp], eax
$LN248@stbsp_vspr:
$LN249@stbsp_vspr:
; Line 1008
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 88					; 00000058H
	jne	SHORT $LN384@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv747[rsp], rax
	jmp	SHORT $LN385@stbsp_vspr
$LN384@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv747[rsp], rax
$LN385@stbsp_vspr:
	mov	rax, QWORD PTR tv747[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 1009
	mov	DWORD PTR l$5[rsp], 1088		; 00000440H
; Line 1010
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T57[rsp], rax
	cmp	QWORD PTR $T57[rsp], 8
	jae	SHORT $LN386@stbsp_vspr
	jmp	SHORT $LN387@stbsp_vspr
$LN386@stbsp_vspr:
	call	__report_rangecheckfailure
$LN387@stbsp_vspr:
	mov	rax, QWORD PTR $T57[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1011
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN250@stbsp_vspr
; Line 1012
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 1013
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 1014
	mov	eax, 1
	imul	rax, rax, 16
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN250@stbsp_vspr:
$radixnum$420:
; Line 1018
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN251@stbsp_vspr
; Line 1019
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR n64$11[rsp], rax
	jmp	SHORT $LN252@stbsp_vspr
$LN251@stbsp_vspr:
; Line 1021
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	QWORD PTR n64$11[rsp], rax
$LN252@stbsp_vspr:
; Line 1023
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1024
	mov	DWORD PTR dp$6[rsp], 0
; Line 1026
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T58[rsp], rax
	cmp	QWORD PTR $T58[rsp], 8
	jae	SHORT $LN388@stbsp_vspr
	jmp	SHORT $LN389@stbsp_vspr
$LN388@stbsp_vspr:
	call	__report_rangecheckfailure
$LN389@stbsp_vspr:
	mov	rax, QWORD PTR $T58[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1027
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN253@stbsp_vspr
; Line 1028
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T59[rsp], rax
	cmp	QWORD PTR $T59[rsp], 8
	jae	SHORT $LN390@stbsp_vspr
	jmp	SHORT $LN391@stbsp_vspr
$LN390@stbsp_vspr:
	call	__report_rangecheckfailure
$LN391@stbsp_vspr:
	mov	rax, QWORD PTR $T59[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1029
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN254@stbsp_vspr
; Line 1030
	mov	DWORD PTR l$5[rsp], 0
; Line 1031
	mov	DWORD PTR cs$8[rsp], 0
; Line 1032
	jmp	$scopy$415
$LN254@stbsp_vspr:
$LN253@stbsp_vspr:
$LN63@stbsp_vspr:
; Line 1037
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	ecx, 1
	mov	DWORD PTR tv1820[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1820[rsp]
	shl	eax, cl
	dec	eax
	cdqe
	mov	rcx, QWORD PTR n64$11[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1038
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	eax, eax
	movzx	ecx, al
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, cl
	mov	QWORD PTR n64$11[rsp], rax
; Line 1039
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN255@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	cmp	eax, DWORD PTR pr$2[rsp]
	jl	SHORT $LN255@stbsp_vspr
; Line 1040
	jmp	SHORT $LN64@stbsp_vspr
$LN255@stbsp_vspr:
; Line 1041
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN256@stbsp_vspr
; Line 1042
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 1043
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	cmp	eax, ecx
	jne	SHORT $LN257@stbsp_vspr
; Line 1044
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR l$5[rsp], eax
; Line 1045
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
$LN257@stbsp_vspr:
$LN256@stbsp_vspr:
; Line 1048
	jmp	$LN63@stbsp_vspr
$LN64@stbsp_vspr:
; Line 1050
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	shl	ecx, 24
	add	eax, ecx
	mov	DWORD PTR cs$8[rsp], eax
; Line 1052
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1054
	jmp	$scopy$415
$LN258@stbsp_vspr:
$LN259@stbsp_vspr:
$LN260@stbsp_vspr:
; Line 1060
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN261@stbsp_vspr
; Line 1061
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR i64$46[rsp], rax
; Line 1062
	mov	rax, QWORD PTR i64$46[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1063
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN263@stbsp_vspr
	cmp	QWORD PTR i64$46[rsp], 0
	jge	SHORT $LN263@stbsp_vspr
; Line 1064
	mov	rax, QWORD PTR i64$46[rsp]
	neg	rax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1065
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN263@stbsp_vspr:
; Line 1067
	jmp	SHORT $LN262@stbsp_vspr
$LN261@stbsp_vspr:
; Line 1068
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR i$33[rsp], eax
; Line 1069
	mov	eax, DWORD PTR i$33[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1070
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN264@stbsp_vspr
	cmp	DWORD PTR i$33[rsp], 0
	jge	SHORT $LN264@stbsp_vspr
; Line 1071
	mov	eax, DWORD PTR i$33[rsp]
	neg	eax
	mov	eax, eax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1072
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN264@stbsp_vspr:
$LN262@stbsp_vspr:
; Line 1077
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN265@stbsp_vspr
; Line 1078
	cmp	QWORD PTR n64$11[rsp], 1024		; 00000400H
	jae	SHORT $LN266@stbsp_vspr
; Line 1079
	mov	DWORD PTR pr$2[rsp], 0
	jmp	SHORT $LN267@stbsp_vspr
$LN266@stbsp_vspr:
; Line 1080
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN268@stbsp_vspr
; Line 1081
	mov	DWORD PTR pr$2[rsp], 1
$LN268@stbsp_vspr:
$LN267@stbsp_vspr:
; Line 1082
	cvtsi2sd xmm0, QWORD PTR n64$11[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 1083
	jmp	$doafloat$419
$LN265@stbsp_vspr:
; Line 1088
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1089
	mov	DWORD PTR l$5[rsp], 0
$LN66@stbsp_vspr:
; Line 1093
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 8
	mov	QWORD PTR o$44[rsp], rax
; Line 1094
	cmp	QWORD PTR n64$11[rsp], 100000000	; 05f5e100H
	jb	SHORT $LN269@stbsp_vspr
; Line 1095
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1096
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	QWORD PTR n64$11[rsp], rax
; Line 1097
	jmp	SHORT $LN270@stbsp_vspr
$LN269@stbsp_vspr:
; Line 1098
	mov	eax, DWORD PTR n64$11[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1099
	mov	QWORD PTR n64$11[rsp], 0
$LN270@stbsp_vspr:
; Line 1101
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN271@stbsp_vspr
$LN71@stbsp_vspr:
; Line 1103
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 2
	mov	QWORD PTR s$4[rsp], rax
; Line 1104
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR s$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1105
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1106
	cmp	DWORD PTR n$3[rsp], 0
	jne	SHORT $LN71@stbsp_vspr
$LN271@stbsp_vspr:
$LN72@stbsp_vspr:
; Line 1108
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN73@stbsp_vspr
; Line 1109
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN272@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv860[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv860[rsp], 3
	jne	SHORT $LN272@stbsp_vspr
; Line 1110
	mov	DWORD PTR l$5[rsp], 0
; Line 1111
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1112
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1113
	jmp	SHORT $LN273@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1114
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	eax, edx
	movsx	eax, al
	add	eax, 48					; 00000030H
	mov	rcx, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rcx], al
; Line 1115
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
$LN273@stbsp_vspr:
; Line 1117
	jmp	$LN72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN274@stbsp_vspr
; Line 1119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN275@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN275@stbsp_vspr
; Line 1120
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN275@stbsp_vspr:
; Line 1121
	jmp	$LN67@stbsp_vspr
$LN274@stbsp_vspr:
$LN74@stbsp_vspr:
; Line 1123
	mov	rax, QWORD PTR o$44[rsp]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN75@stbsp_vspr
; Line 1124
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN276@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv883[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv883[rsp], 3
	jne	SHORT $LN276@stbsp_vspr
; Line 1125
	mov	DWORD PTR l$5[rsp], 0
; Line 1126
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1127
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1128
	jmp	SHORT $LN277@stbsp_vspr
$LN276@stbsp_vspr:
; Line 1129
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
$LN277@stbsp_vspr:
; Line 1130
	jmp	$LN74@stbsp_vspr
$LN75@stbsp_vspr:
; Line 1131
	jmp	$LN66@stbsp_vspr
$LN67@stbsp_vspr:
; Line 1133
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T60[rsp], rax
	cmp	QWORD PTR $T60[rsp], 8
	jae	SHORT $LN392@stbsp_vspr
	jmp	SHORT $LN393@stbsp_vspr
$LN392@stbsp_vspr:
	call	__report_rangecheckfailure
$LN393@stbsp_vspr:
	mov	rax, QWORD PTR $T60[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1134
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 1137
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1138
	cmp	DWORD PTR l$5[rsp], 0
	jne	SHORT $LN278@stbsp_vspr
; Line 1139
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1140
	mov	DWORD PTR l$5[rsp], 1
$LN278@stbsp_vspr:
; Line 1142
	mov	eax, DWORD PTR l$5[rsp]
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 1143
	cmp	DWORD PTR pr$2[rsp], 0
	jge	SHORT $LN279@stbsp_vspr
; Line 1144
	mov	DWORD PTR pr$2[rsp], 0
$LN279@stbsp_vspr:
$scopy$415:
; Line 1148
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jge	SHORT $LN280@stbsp_vspr
; Line 1149
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN280@stbsp_vspr:
; Line 1150
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	ecx, BYTE PTR tail$63[rsp+rcx]
	mov	edx, DWORD PTR tz$16[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1151
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jge	SHORT $LN281@stbsp_vspr
; Line 1152
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR fw$10[rsp], eax
$LN281@stbsp_vspr:
; Line 1153
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
; Line 1154
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1157
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN282@stbsp_vspr
; Line 1158
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN283@stbsp_vspr
; Line 1160
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jle	SHORT $LN394@stbsp_vspr
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR tv917[rsp], eax
	jmp	SHORT $LN395@stbsp_vspr
$LN394@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv917[rsp], eax
$LN395@stbsp_vspr:
	mov	eax, DWORD PTR tv917[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 1161
	mov	DWORD PTR fw$10[rsp], 0
; Line 1162
	jmp	SHORT $LN284@stbsp_vspr
$LN283@stbsp_vspr:
; Line 1163
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR fl$1[rsp], eax
$LN284@stbsp_vspr:
$LN282@stbsp_vspr:
; Line 1168
	mov	eax, DWORD PTR pr$2[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN285@stbsp_vspr
; Line 1173
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN286@stbsp_vspr
$LN76@stbsp_vspr:
; Line 1174
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN77@stbsp_vspr
; Line 1175
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN287@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$35[rsp], eax
	mov	eax, DWORD PTR lg$35[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN288@stbsp_vspr
	mov	eax, DWORD PTR lg$35[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN288@stbsp_vspr:
$LN287@stbsp_vspr:
; Line 1176
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN78@stbsp_vspr:
; Line 1177
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN79@stbsp_vspr
; Line 1178
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN289@stbsp_vspr
; Line 1179
	jmp	SHORT $LN79@stbsp_vspr
$LN289@stbsp_vspr:
; Line 1180
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1181
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1182
	jmp	SHORT $LN78@stbsp_vspr
$LN79@stbsp_vspr:
$LN80@stbsp_vspr:
; Line 1183
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN81@stbsp_vspr
; Line 1184
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1185
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1187
	jmp	SHORT $LN80@stbsp_vspr
$LN81@stbsp_vspr:
$LN82@stbsp_vspr:
; Line 1188
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN83@stbsp_vspr
; Line 1189
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1191
	jmp	SHORT $LN82@stbsp_vspr
$LN83@stbsp_vspr:
; Line 1192
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN290@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$34[rsp], eax
	mov	eax, DWORD PTR len$34[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN291@stbsp_vspr
	mov	eax, DWORD PTR len$34[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$34[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN292@stbsp_vspr
	jmp	$done$413
$LN292@stbsp_vspr:
$LN291@stbsp_vspr:
$LN290@stbsp_vspr:
; Line 1193
	jmp	$LN76@stbsp_vspr
$LN77@stbsp_vspr:
$LN286@stbsp_vspr:
; Line 1196
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN84@stbsp_vspr:
; Line 1197
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN85@stbsp_vspr
; Line 1198
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN293@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$36[rsp], eax
	mov	eax, DWORD PTR lg$36[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN294@stbsp_vspr
	mov	eax, DWORD PTR lg$36[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN294@stbsp_vspr:
$LN293@stbsp_vspr:
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$9[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN86@stbsp_vspr:
; Line 1200
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN87@stbsp_vspr
; Line 1201
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1202
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1203
	jmp	SHORT $LN86@stbsp_vspr
$LN87@stbsp_vspr:
; Line 1204
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN295@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$23[rsp], eax
	mov	eax, DWORD PTR len$23[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN296@stbsp_vspr
	mov	eax, DWORD PTR len$23[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$23[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN297@stbsp_vspr
	jmp	$done$413
$LN297@stbsp_vspr:
$LN296@stbsp_vspr:
$LN295@stbsp_vspr:
; Line 1205
	jmp	$LN84@stbsp_vspr
$LN85@stbsp_vspr:
; Line 1208
	mov	eax, DWORD PTR cs$8[rsp]
	shr	eax, 24
	mov	DWORD PTR c$24[rsp], eax
; Line 1209
	mov	eax, DWORD PTR cs$8[rsp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR cs$8[rsp], eax
; Line 1210
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN396@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$24[rsp]
	inc	ecx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR c$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv996[rsp], eax
	jmp	SHORT $LN397@stbsp_vspr
$LN396@stbsp_vspr:
	mov	DWORD PTR tv996[rsp], 0
$LN397@stbsp_vspr:
	mov	eax, DWORD PTR tv996[rsp]
	mov	DWORD PTR cs$8[rsp], eax
$LN88@stbsp_vspr:
; Line 1211
	cmp	DWORD PTR pr$2[rsp], 0
	jle	$LN89@stbsp_vspr
; Line 1212
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN298@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$37[rsp], eax
	mov	eax, DWORD PTR lg$37[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN299@stbsp_vspr
	mov	eax, DWORD PTR lg$37[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN299@stbsp_vspr:
$LN298@stbsp_vspr:
; Line 1213
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1214
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN300@stbsp_vspr
$LN90@stbsp_vspr:
; Line 1215
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN91@stbsp_vspr
; Line 1216
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN301@stbsp_vspr
; Line 1217
	jmp	SHORT $LN91@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1218
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1219
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1220
	jmp	SHORT $LN90@stbsp_vspr
$LN91@stbsp_vspr:
$LN92@stbsp_vspr:
; Line 1221
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN93@stbsp_vspr
; Line 1222
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1223
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1224
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1225
	jmp	SHORT $LN92@stbsp_vspr
$LN93@stbsp_vspr:
$LN300@stbsp_vspr:
$LN94@stbsp_vspr:
; Line 1227
	cmp	DWORD PTR i$9[rsp], 0
	je	$LN95@stbsp_vspr
; Line 1228
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN302@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	DWORD PTR tv1019[rsp], eax
	mov	eax, DWORD PTR c$24[rsp]
	mov	DWORD PTR tv1020[rsp], eax
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	mov	eax, DWORD PTR tv1020[rsp]
	cmp	DWORD PTR tv1019[rsp], eax
	jne	SHORT $LN302@stbsp_vspr
; Line 1229
	mov	DWORD PTR cs$8[rsp], 0
; Line 1230
	mov	rax, QWORD PTR bf$[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1231
	jmp	SHORT $LN303@stbsp_vspr
$LN302@stbsp_vspr:
; Line 1232
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
$LN303@stbsp_vspr:
; Line 1233
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1234
	jmp	$LN94@stbsp_vspr
$LN95@stbsp_vspr:
; Line 1235
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN304@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$25[rsp], eax
	mov	eax, DWORD PTR len$25[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN305@stbsp_vspr
	mov	eax, DWORD PTR len$25[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$25[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN306@stbsp_vspr
	jmp	$done$413
$LN306@stbsp_vspr:
$LN305@stbsp_vspr:
$LN304@stbsp_vspr:
; Line 1236
	jmp	$LN88@stbsp_vspr
$LN89@stbsp_vspr:
$LN285@stbsp_vspr:
; Line 1240
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN96@stbsp_vspr:
; Line 1241
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN97@stbsp_vspr
; Line 1243
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$18[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN307@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$38[rsp], eax
	mov	eax, DWORD PTR lg$38[rsp]
	cmp	DWORD PTR i$18[rsp], eax
	jle	SHORT $LN308@stbsp_vspr
	mov	eax, DWORD PTR lg$38[rsp]
	mov	DWORD PTR i$18[rsp], eax
$LN308@stbsp_vspr:
$LN307@stbsp_vspr:
; Line 1244
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$18[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN98@stbsp_vspr:
; Line 1245
	cmp	DWORD PTR i$18[rsp], 0
	je	SHORT $LN99@stbsp_vspr
; Line 1246
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1247
	mov	eax, DWORD PTR i$18[rsp]
	dec	eax
	mov	DWORD PTR i$18[rsp], eax
; Line 1248
	jmp	SHORT $LN98@stbsp_vspr
$LN99@stbsp_vspr:
; Line 1249
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN309@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$26[rsp], eax
	mov	eax, DWORD PTR len$26[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN310@stbsp_vspr
	mov	eax, DWORD PTR len$26[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$26[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN311@stbsp_vspr
	jmp	$done$413
$LN311@stbsp_vspr:
$LN310@stbsp_vspr:
$LN309@stbsp_vspr:
; Line 1250
	jmp	$LN96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1253
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN100@stbsp_vspr:
; Line 1254
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN101@stbsp_vspr
; Line 1256
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$17[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN312@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$39[rsp], eax
	mov	eax, DWORD PTR lg$39[rsp]
	cmp	DWORD PTR i$17[rsp], eax
	jle	SHORT $LN313@stbsp_vspr
	mov	eax, DWORD PTR lg$39[rsp]
	mov	DWORD PTR i$17[rsp], eax
$LN313@stbsp_vspr:
$LN312@stbsp_vspr:
; Line 1257
	mov	eax, DWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
$LN102@stbsp_vspr:
; Line 1258
	cmp	DWORD PTR i$17[rsp], 4
	jl	SHORT $LN103@stbsp_vspr
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR i$17[rsp]
	sub	eax, 4
	mov	DWORD PTR i$17[rsp], eax
; Line 1263
	jmp	SHORT $LN102@stbsp_vspr
$LN103@stbsp_vspr:
$LN104@stbsp_vspr:
; Line 1264
	cmp	DWORD PTR i$17[rsp], 0
	je	SHORT $LN105@stbsp_vspr
; Line 1265
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 1266
	mov	eax, DWORD PTR i$17[rsp]
	dec	eax
	mov	DWORD PTR i$17[rsp], eax
; Line 1267
	jmp	SHORT $LN104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN314@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$27[rsp], eax
	mov	eax, DWORD PTR len$27[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN315@stbsp_vspr
	mov	eax, DWORD PTR len$27[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$27[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN316@stbsp_vspr
	jmp	$done$413
$LN316@stbsp_vspr:
$LN315@stbsp_vspr:
$LN314@stbsp_vspr:
; Line 1269
	jmp	$LN100@stbsp_vspr
$LN101@stbsp_vspr:
$LN106@stbsp_vspr:
; Line 1272
	cmp	DWORD PTR tz$16[rsp], 0
	je	$LN107@stbsp_vspr
; Line 1274
	mov	eax, DWORD PTR tz$16[rsp]
	mov	DWORD PTR i$14[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN317@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$40[rsp], eax
	mov	eax, DWORD PTR lg$40[rsp]
	cmp	DWORD PTR i$14[rsp], eax
	jle	SHORT $LN318@stbsp_vspr
	mov	eax, DWORD PTR lg$40[rsp]
	mov	DWORD PTR i$14[rsp], eax
$LN318@stbsp_vspr:
$LN317@stbsp_vspr:
; Line 1275
	mov	eax, DWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR tz$16[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN108@stbsp_vspr:
; Line 1276
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN109@stbsp_vspr
; Line 1277
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN319@stbsp_vspr
; Line 1278
	jmp	SHORT $LN109@stbsp_vspr
$LN319@stbsp_vspr:
; Line 1279
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1280
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1281
	jmp	SHORT $LN108@stbsp_vspr
$LN109@stbsp_vspr:
$LN110@stbsp_vspr:
; Line 1282
	cmp	DWORD PTR i$14[rsp], 4
	jl	SHORT $LN111@stbsp_vspr
; Line 1283
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1284
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1285
	mov	eax, DWORD PTR i$14[rsp]
	sub	eax, 4
	mov	DWORD PTR i$14[rsp], eax
; Line 1286
	jmp	SHORT $LN110@stbsp_vspr
$LN111@stbsp_vspr:
$LN112@stbsp_vspr:
; Line 1287
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN113@stbsp_vspr
; Line 1288
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1289
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1290
	jmp	SHORT $LN112@stbsp_vspr
$LN113@stbsp_vspr:
; Line 1291
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN320@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$28[rsp], eax
	mov	eax, DWORD PTR len$28[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN321@stbsp_vspr
	mov	eax, DWORD PTR len$28[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$28[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN322@stbsp_vspr
	jmp	$done$413
$LN322@stbsp_vspr:
$LN321@stbsp_vspr:
$LN320@stbsp_vspr:
; Line 1292
	jmp	$LN106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1295
	lea	rax, QWORD PTR tail$63[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN114@stbsp_vspr:
; Line 1296
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	test	eax, eax
	je	$LN115@stbsp_vspr
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	mov	DWORD PTR i$19[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN323@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$41[rsp], eax
	mov	eax, DWORD PTR lg$41[rsp]
	cmp	DWORD PTR i$19[rsp], eax
	jle	SHORT $LN324@stbsp_vspr
	mov	eax, DWORD PTR lg$41[rsp]
	mov	DWORD PTR i$19[rsp], eax
$LN324@stbsp_vspr:
$LN323@stbsp_vspr:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$19[rsp]
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR tail$63[rsp+rcx], al
$LN116@stbsp_vspr:
; Line 1300
	cmp	DWORD PTR i$19[rsp], 0
	je	SHORT $LN117@stbsp_vspr
; Line 1301
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1302
	mov	eax, DWORD PTR i$19[rsp]
	dec	eax
	mov	DWORD PTR i$19[rsp], eax
; Line 1303
	jmp	SHORT $LN116@stbsp_vspr
$LN117@stbsp_vspr:
; Line 1304
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN325@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$29[rsp], eax
	mov	eax, DWORD PTR len$29[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN326@stbsp_vspr
	mov	eax, DWORD PTR len$29[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$29[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN327@stbsp_vspr
	jmp	$done$413
$LN327@stbsp_vspr:
$LN326@stbsp_vspr:
$LN325@stbsp_vspr:
; Line 1305
	jmp	$LN114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN328@stbsp_vspr
; Line 1309
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN329@stbsp_vspr
$LN118@stbsp_vspr:
; Line 1310
	cmp	DWORD PTR fw$10[rsp], 0
	je	$LN119@stbsp_vspr
; Line 1312
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$15[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN330@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$42[rsp], eax
	mov	eax, DWORD PTR lg$42[rsp]
	cmp	DWORD PTR i$15[rsp], eax
	jle	SHORT $LN331@stbsp_vspr
	mov	eax, DWORD PTR lg$42[rsp]
	mov	DWORD PTR i$15[rsp], eax
$LN331@stbsp_vspr:
$LN330@stbsp_vspr:
; Line 1313
	mov	eax, DWORD PTR i$15[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN120@stbsp_vspr:
; Line 1314
	cmp	DWORD PTR i$15[rsp], 0
	je	SHORT $LN121@stbsp_vspr
; Line 1315
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN332@stbsp_vspr
; Line 1316
	jmp	SHORT $LN121@stbsp_vspr
$LN332@stbsp_vspr:
; Line 1317
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1318
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
; Line 1319
	jmp	SHORT $LN120@stbsp_vspr
$LN121@stbsp_vspr:
$LN122@stbsp_vspr:
; Line 1320
	cmp	DWORD PTR i$15[rsp], 4
	jl	SHORT $LN123@stbsp_vspr
; Line 1321
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1322
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1323
	mov	eax, DWORD PTR i$15[rsp]
	sub	eax, 4
	mov	DWORD PTR i$15[rsp], eax
; Line 1324
	jmp	SHORT $LN122@stbsp_vspr
$LN123@stbsp_vspr:
$LN124@stbsp_vspr:
; Line 1325
	mov	eax, DWORD PTR i$15[rsp]
	mov	DWORD PTR tv1215[rsp], eax
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
	cmp	DWORD PTR tv1215[rsp], 0
	je	SHORT $LN125@stbsp_vspr
; Line 1326
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	jmp	SHORT $LN124@stbsp_vspr
$LN125@stbsp_vspr:
; Line 1327
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN333@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$30[rsp], eax
	mov	eax, DWORD PTR len$30[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN334@stbsp_vspr
	mov	eax, DWORD PTR len$30[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$30[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN335@stbsp_vspr
	jmp	$done$413
$LN335@stbsp_vspr:
$LN334@stbsp_vspr:
$LN333@stbsp_vspr:
; Line 1328
	jmp	$LN118@stbsp_vspr
$LN119@stbsp_vspr:
$LN329@stbsp_vspr:
$LN328@stbsp_vspr:
; Line 1330
	jmp	$LN24@stbsp_vspr
$LN336@stbsp_vspr:
; Line 1333
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 1334
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1335
	mov	DWORD PTR l$5[rsp], 1
; Line 1336
	mov	DWORD PTR fl$1[rsp], 0
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 1337
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T47[rsp], rax
	cmp	QWORD PTR $T47[rsp], 8
	jae	SHORT $LN398@stbsp_vspr
	jmp	SHORT $LN399@stbsp_vspr
$LN398@stbsp_vspr:
	call	__report_rangecheckfailure
$LN399@stbsp_vspr:
	mov	rax, QWORD PTR $T47[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1338
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T48[rsp], rax
	cmp	QWORD PTR $T48[rsp], 8
	jae	SHORT $LN400@stbsp_vspr
	jmp	SHORT $LN401@stbsp_vspr
$LN400@stbsp_vspr:
	call	__report_rangecheckfailure
$LN401@stbsp_vspr:
	mov	rax, QWORD PTR $T48[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1339
	mov	DWORD PTR pr$2[rsp], 0
; Line 1340
	mov	DWORD PTR dp$6[rsp], 0
; Line 1341
	mov	DWORD PTR cs$8[rsp], 0
; Line 1342
	jmp	$scopy$415
$LN24@stbsp_vspr:
; Line 1344
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 1345
	jmp	$LN2@stbsp_vspr
$endfmt$412:
; Line 1348
	cmp	QWORD PTR callback$[rsp], 0
	jne	SHORT $LN337@stbsp_vspr
; Line 1349
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 0
	jmp	SHORT $LN338@stbsp_vspr
$LN337@stbsp_vspr:
; Line 1351
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$31[rsp], eax
	mov	eax, DWORD PTR len$31[rsp]
	add	eax, 511				; 000001ffH
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN339@stbsp_vspr
	mov	eax, DWORD PTR len$31[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$31[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
$LN339@stbsp_vspr:
$LN338@stbsp_vspr:
$done$413:
; Line 1354
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN341@stbsp_vspr:
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1128				; 00000468H
	ret	0
	npad	2
$LN407@stbsp_vspr:
	DD	$LN137@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN140@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN136@stbsp_vspr
	DD	$LN135@stbsp_vspr
	DD	$LN146@stbsp_vspr
	DD	$LN145@stbsp_vspr
	DD	$LN147@stbsp_vspr
$LN406@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN405@stbsp_vspr:
	DD	$LN160@stbsp_vspr
	DD	$LN153@stbsp_vspr
	DD	$LN157@stbsp_vspr
	DD	$LN155@stbsp_vspr
	DD	$LN159@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN165@stbsp_vspr
$LN404@stbsp_vspr:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	2
$LN403@stbsp_vspr:
	DD	$LN170@stbsp_vspr
	DD	$LN242@stbsp_vspr
	DD	$LN197@stbsp_vspr
	DD	$LN183@stbsp_vspr
	DD	$LN248@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN243@stbsp_vspr
	DD	$LN168@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN198@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN184@stbsp_vspr
	DD	$LN259@stbsp_vspr
	DD	$LN169@stbsp_vspr
	DD	$LN245@stbsp_vspr
	DD	$LN247@stbsp_vspr
	DD	$LN166@stbsp_vspr
	DD	$LN258@stbsp_vspr
	DD	$LN249@stbsp_vspr
	DD	$LN336@stbsp_vspr
$LN402@stbsp_vspr:
	DB	0
	DB	1
	DB	19
	DB	19
	DB	2
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	19
	DB	19
	DB	19
	DB	19
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	17
	DB	19
	DB	19
	DB	18
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
va$ = 40
buf$ = 64
count$ = 72
fmt$ = 80
stbsp_snprintf PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1461
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1464
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1466
	mov	r9, QWORD PTR va$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
	mov	DWORD PTR result$[rsp], eax
; Line 1467
	mov	QWORD PTR va$[rsp], 0
; Line 1469
	mov	eax, DWORD PTR result$[rsp]
; Line 1470
	add	rsp, 56					; 00000038H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
va$ = 56
buf$ = 80
fmt$ = 88
stbsp_sprintf PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1377
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1381
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
	mov	DWORD PTR result$[rsp], eax
; Line 1382
	mov	QWORD PTR va$[rsp], 0
; Line 1383
	mov	eax, DWORD PTR result$[rsp]
; Line 1384
	add	rsp, 72					; 00000048H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$1 = 48
c$ = 64
__$ArrayPad$ = 592
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1431
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1434
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
; Line 1436
	mov	DWORD PTR c$[rsp+12], 0
; Line 1438
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	lea	r8, QWORD PTR c$[rsp+16]
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN3@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1444
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1445
	mov	eax, DWORD PTR count$[rsp]
	mov	DWORD PTR c$[rsp+8], eax
; Line 1446
	mov	DWORD PTR c$[rsp+12], 0
; Line 1448
	xor	r8d, r8d
	lea	rdx, QWORD PTR c$[rsp]
	xor	ecx, ecx
	call	stbsp__clamp_callback
	mov	rcx, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$1[rsp], eax
; Line 1452
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR l$1[rsp], eax
	jl	SHORT $LN4@stbsp_vsnp
; Line 1453
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR l$1[rsp], eax
$LN4@stbsp_vsnp:
; Line 1454
	movsxd	rax, DWORD PTR l$1[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stbsp_vsnp:
; Line 1457
	mov	eax, DWORD PTR c$[rsp+12]
; Line 1458
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC
; File W:\cpp\void\rx\cc\stb_sprintf.h
; Line 1473
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1771
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1774
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1776
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1778
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1779
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1780
	add	rsp, 56					; 00000038H
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1458
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1459
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l
; Line 1460
	add	rsp, 56					; 00000038H
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1391
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1392
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	__stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1396
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1397
	add	rsp, 72					; 00000048H
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
